Found 57 source code files:
../jpetstore/src/WEB-INF/classes/com/ibatis/jpetstore/domain/Account.java
package com.ibatis.jpetstore.domain;

public class Account {

  private String userId;
  private String email;
  private String firstName;
  private String lastName;
  private String status;
  private String address1;
  private String address2;
  private String city;
  private String state;
  private String zip;
  private String country;
  private String phone;
  private String favouriteCategoryId;
  private String languagePreference;
  private boolean listOption;
  private boolean bannerOption;
  private String bannerName;


  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }

  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }

  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }

  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }

  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }

  public String getAddress1() {
    return address1;
  }

  public void setAddress1(String address1) {
    this.address1 = address1;
  }

  public String getAddress2() {
    return address2;
  }

  public void setAddress2(String address2) {
    this.address2 = address2;
  }

  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }

  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }

  public String getZip() {
    return zip;
  }

  public void setZip(String zip) {
    this.zip = zip;
  }

  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }

  public String getPhone() {
    return phone;
  }

  public void setPhone(String phone) {
    this.phone = phone;
  }

  public String getFavouriteCategoryId() {
    return favouriteCategoryId;
  }

  public void setFavouriteCategoryId(String favouriteCategoryId) {
    this.favouriteCategoryId = favouriteCategoryId;
  }

  public String getLanguagePreference() {
    return languagePreference;
  }

  public void setLanguagePreference(String languagePreference) {
    this.languagePreference = languagePreference;
  }

  public boolean isListOption() {
    return listOption;
  }

  public void setListOption(boolean listOption) {
    this.listOption = listOption;
  }

  public boolean isBannerOption() {
    return bannerOption;
  }

  public void setBannerOption(boolean bannerOption) {
    this.bannerOption = bannerOption;
  }

  public String getBannerName() {
    return bannerName;
  }

  public void setBannerName(String bannerName) {
    this.bannerName = bannerName;
  }
}

../jpetstore/src/WEB-INF/classes/com/ibatis/jpetstore/domain/Cart.java
package com.ibatis.jpetstore.domain;

import java.math.*;
import java.util.*;

public class Cart {

  private Map itemMap = Collections.synchronizedMap(new HashMap());

  public Iterator getCartItems() {
    return itemMap.values().iterator();
  }

  public int getNumberOfItems() {
    return itemMap.size();
  }

  public void addItem(Item item) {
    CartItem cartItem = (CartItem) itemMap.get(item.getItemId());
    if (cartItem == null) {
      cartItem = new CartItem();
      cartItem.setItem(item);
      cartItem.setQuantity(0);
      itemMap.put(item.getItemId(), cartItem);
    }
    cartItem.incrementQuantity();
  }

  public boolean containsItemId(String itemId) {
    return itemMap.containsKey(itemId);
  }

  public Item removeItemById(String itemId) {
    CartItem cartItem = (CartItem) itemMap.remove(itemId);
    if (cartItem == null) {
      return null;
    } else {
      return cartItem.getItem();
    }
  }

  public void incrementQuantityByItemId(String itemId) {
    CartItem cartItem = (CartItem) itemMap.get(itemId);
    cartItem.incrementQuantity();
  }

  public void setQuantityByItemId(String itemId, int quantity) {
    CartItem cartItem = (CartItem) itemMap.get(itemId);
    cartItem.setQuantity(quantity);
  }

  public BigDecimal getSubTotal() {
    BigDecimal subTotal = new BigDecimal("0");
    Iterator items = getCartItems();
    while (items.hasNext()) {
      CartItem cartItem = (CartItem) items.next();
      Item item = cartItem.getItem();
      BigDecimal listPrice = item.getListPrice();
      BigDecimal quantity = new BigDecimal(String.valueOf(cartItem.getQuantity()));
      subTotal = subTotal.add(listPrice.multiply(quantity));
    }
    return subTotal;
  }

}

../jpetstore/src/WEB-INF/classes/com/ibatis/jpetstore/domain/CartItem.java
package com.ibatis.jpetstore.domain;

public class CartItem {

  private Item item;
  private int quantity;

  public Item getItem() {
    return item;
  }

  public void setItem(Item item) {
    this.item = item;
  }

  public int getQuantity() {
    return quantity;
  }

  public void setQuantity(int quantity) {
    this.quantity = quantity;
  }

  public void incrementQuantity() {
    quantity++;
  }

}

../jpetstore/src/WEB-INF/classes/com/ibatis/jpetstore/domain/Category.java
package com.ibatis.jpetstore.domain;

public class Category {

  private String categoryId;
  private String name;
  private String description;
  private String image;

  public String getCategoryId() {
    return categoryId;
  }

  public void setCategoryId(String categoryId) {
    this.categoryId = categoryId.trim();
  }

  public String getImage() {
    return image;
  }

  public void setImage(String image) {
    this.image = image;
  }

  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public String toString() {
    return getCategoryId();
  }

}

../jpetstore/src/WEB-INF/classes/com/ibatis/jpetstore/domain/Item.java
package com.ibatis.jpetstore.domain;

import java.math.*;

public class Item {

  private String itemId;
  private String productId;
  private BigDecimal listPrice;
  private BigDecimal unitCost;
  private int supplierId;
  private String status;
  private String attribute1;
  private String attribute2;
  private String attribute3;
  private String attribute4;
  private String attribute5;
  private Product product;
  private int quantity;

  public String getItemId() {
    return itemId;
  }

  public void setItemId(String itemId) {
    this.itemId = itemId.trim();
  }

  public int getQuantity() {
    return quantity;
  }

  public void setQuantity(int quantity) {
    this.quantity = quantity;
  }

  public Product getProduct() {
    return product;
  }

  public void setProduct(Product product) {
    this.product = product;
  }

  public String getProductId() {
    return productId;
  }

  public void setProductId(String productId) {
    this.productId = productId;
  }

  public int getSupplierId() {
    return supplierId;
  }

  public void setSupplierId(int supplierId) {
    this.supplierId = supplierId;
  }

  public BigDecimal getListPrice() {
    return listPrice;
  }

  public void setListPrice(BigDecimal listPrice) {
    this.listPrice = listPrice;
  }

  public BigDecimal getUnitCost() {
    return unitCost;
  }

  public void setUnitCost(BigDecimal unitCost) {
    this.unitCost = unitCost;
  }

  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }

  public String getAttribute1() {
    return attribute1;
  }

  public void setAttribute1(String attribute1) {
    this.attribute1 = attribute1;
  }

  public String getAttribute2() {
    return attribute2;
  }

  public void setAttribute2(String attribute2) {
    this.attribute2 = attribute2;
  }

  public String getAttribute3() {
    return attribute3;
  }

  public void setAttribute3(String attribute3) {
    this.attribute3 = attribute3;
  }

  public String getAttribute4() {
    return attribute4;
  }

  public void setAttribute4(String attribute4) {
    this.attribute4 = attribute4;
  }

  public String getAttribute5() {
    return attribute5;
  }

  public void setAttribute5(String attribute5) {
    this.attribute5 = attribute5;
  }

  public String toString() {
    return "(" + getItemId().trim() + "-" + getProductId().trim() + ")";
  }

}

../jpetstore/src/WEB-INF/classes/com/ibatis/jpetstore/domain/LineItem.java
package com.ibatis.jpetstore.domain;

import java.math.*;

public class LineItem {

  private int orderId;
  private int lineNumber;
  private int quantity;
  private String itemId;
  private BigDecimal unitprice;
  private Item item;

  public LineItem() {
  }

  public LineItem(int orderId, int lineNumber, CartItem cartItem) {
    this.orderId = orderId;
    this.lineNumber = lineNumber;
    this.quantity = cartItem.getQuantity();
    this.itemId = cartItem.getItem().getItemId();
    this.unitprice = cartItem.getItem().getListPrice();
    this.item = cartItem.getItem();
  }

  public Item getItem() {
    return item;
  }

  public void setItem(Item item) {
    this.item = item;
  }

  public int getOrderId() {
    return orderId;
  }

  public void setOrderId(int orderId) {
    this.orderId = orderId;
  }

  public int getLineNumber() {
    return lineNumber;
  }

  public void setLineNumber(int lineNumber) {
    this.lineNumber = lineNumber;
  }

  public String getItemId() {
    return itemId;
  }

  public void setItemId(String itemId) {
    this.itemId = itemId;
  }

  public int getQuantity() {
    return quantity;
  }

  public void setQuantity(int quantity) {
    this.quantity = quantity;
  }

  public BigDecimal getUnitPrice() {
    return unitprice;
  }

  public void setUnitPrice(BigDecimal unitprice) {
    this.unitprice = unitprice;
  }
}

../jpetstore/src/WEB-INF/classes/com/ibatis/jpetstore/domain/Order.java
package com.ibatis.jpetstore.domain;

import java.math.*;
import java.util.*;

public class Order {

  private int orderId;
  private String userId;
  private Date orderDate;
  private String shipAddress1;
  private String shipAddress2;
  private String shipCity;
  private String shipState;
  private String shipZip;
  private String shipCountry;
  private String billAddress1;
  private String billAddress2;
  private String billCity;
  private String billState;
  private String billZip;
  private String billCountry;
  private String courier;
  private BigDecimal totalPrice;
  private String billToFirstName;
  private String billToLastName;
  private String shipToFirstName;
  private String shipToLastName;
  private String creditCard;
  private String expiryDate;
  private String cardType;
  private String locale;
  private String status;

  private List lineItems = new ArrayList();

  public Order() {
  }

  public void initOrder(int id, Account account, Cart cart) {
    orderId = id;

    userId = account.getUserId();
    orderDate = new Date();

    shipToFirstName = account.getFirstName();
    shipToLastName = account.getLastName();
    shipAddress1 = account.getAddress1();
    shipAddress2 = account.getAddress2();
    shipCity = account.getCity();
    shipState = account.getState();
    shipZip = account.getZip();
    shipCountry = account.getCountry();

    billToFirstName = account.getFirstName();
    billToLastName = account.getLastName();
    billAddress1 = account.getAddress1();
    billAddress2 = account.getAddress2();
    billCity = account.getCity();
    billState = account.getState();
    billZip = account.getZip();
    billCountry = account.getCountry();

    totalPrice = cart.getSubTotal();

    creditCard = "999 9999 9999 9999";
    expiryDate = "12/03";
    cardType = "Visa";
    courier = "UPS";
    locale = "CA";
    status = "P";

    Iterator i = cart.getCartItems();
    while (i.hasNext()) {
      CartItem cartItem = (CartItem) i.next();
      addLineItem(cartItem);
    }

  }

  public void addLineItem(CartItem cartItem) {
    LineItem lineItem = new LineItem(orderId, lineItems.size() + 1, cartItem);
    addLineItem(lineItem);
  }

  public void addLineItem(LineItem lineItem) {
    lineItems.add(lineItem);
  }

  public Iterator getLineItems() {
    return lineItems.iterator();
  }

  public int getOrderId() {
    return orderId;
  }

  public void setOrderId(int orderId) {
    this.orderId = orderId;
  }

  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }

  public Date getOrderDate() {
    return orderDate;
  }

  public void setOrderDate(Date orderDate) {
    this.orderDate = orderDate;
  }

  public String getShipAddress1() {
    return shipAddress1;
  }

  public void setShipAddress1(String shipAddress1) {
    this.shipAddress1 = shipAddress1;
  }

  public String getShipAddress2() {
    return shipAddress2;
  }

  public void setShipAddress2(String shipAddress2) {
    this.shipAddress2 = shipAddress2;
  }

  public String getShipCity() {
    return shipCity;
  }

  public void setShipCity(String shipCity) {
    this.shipCity = shipCity;
  }

  public String getShipState() {
    return shipState;
  }

  public void setShipState(String shipState) {
    this.shipState = shipState;
  }

  public String getShipZip() {
    return shipZip;
  }

  public void setShipZip(String shipZip) {
    this.shipZip = shipZip;
  }

  public String getShipCountry() {
    return shipCountry;
  }

  public void setShipCountry(String shipCountry) {
    this.shipCountry = shipCountry;
  }

  public String getBillAddress1() {
    return billAddress1;
  }

  public void setBillAddress1(String billAddress1) {
    this.billAddress1 = billAddress1;
  }

  public String getBillAddress2() {
    return billAddress2;
  }

  public void setBillAddress2(String billAddress2) {
    this.billAddress2 = billAddress2;
  }

  public String getBillCity() {
    return billCity;
  }

  public void setBillCity(String billCity) {
    this.billCity = billCity;
  }

  public String getBillState() {
    return billState;
  }

  public void setBillState(String billState) {
    this.billState = billState;
  }

  public String getBillZip() {
    return billZip;
  }

  public void setBillZip(String billZip) {
    this.billZip = billZip;
  }

  public String getBillCountry() {
    return billCountry;
  }

  public void setBillCountry(String billCountry) {
    this.billCountry = billCountry;
  }

  public String getCourier() {
    return courier;
  }

  public void setCourier(String courier) {
    this.courier = courier;
  }

  public BigDecimal getTotalPrice() {
    return totalPrice;
  }

  public void setTotalPrice(BigDecimal totalPrice) {
    this.totalPrice = totalPrice;
  }

  public String getBillToFirstName() {
    return billToFirstName;
  }

  public void setBillToFirstName(String billToFirstName) {
    this.billToFirstName = billToFirstName;
  }

  public String getBillToLastName() {
    return billToLastName;
  }

  public void setBillToLastName(String billToLastName) {
    this.billToLastName = billToLastName;
  }

  public String getShipToFirstName() {
    return shipToFirstName;
  }

  public void setShipToFirstName(String shipFoFirstName) {
    this.shipToFirstName = shipFoFirstName;
  }

  public String getShipToLastName() {
    return shipToLastName;
  }

  public void setShipToLastName(String shipToLastName) {
    this.shipToLastName = shipToLastName;
  }

  public String getCreditCard() {
    return creditCard;
  }

  public void setCreditCard(String creditCard) {
    this.creditCard = creditCard;
  }

  public String getExpiryDate() {
    return expiryDate;
  }

  public void setExpiryDate(String expiryDate) {
    this.expiryDate = expiryDate;
  }

  public String getCardType() {
    return cardType;
  }

  public void setCardType(String cardType) {
    this.cardType = cardType;
  }

  public String getLocale() {
    return locale;
  }

  public void setLocale(String locale) {
    this.locale = locale;
  }

  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }
}

../jpetstore/src/WEB-INF/classes/com/ibatis/jpetstore/domain/Product.java
package com.ibatis.jpetstore.domain;

public class Product {

  private String productId;
  private String categoryId;
  private String name;
  private String description;
  private String image;

  public String getProductId() {
    return productId;
  }

  public void setProductId(String productId) {
    this.productId = productId.trim();
  }

  public String getImage() {
    return image;
  }

  public void setImage(String image) {
    this.image = image;
  }

  public String getCategoryId() {
    return categoryId;
  }

  public void setCategoryId(String categoryId) {
    this.categoryId = categoryId;
  }

  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public String toString() {
    return getName();
  }

}

../jpetstore/src/WEB-INF/classes/com/ibatis/jpetstore/domain/Sequence.java
/*
 * Created by IntelliJ IDEA.
 * User: Clinton Begin
 * Date: Sep 9, 2002
 * Time: 7:47:51 PM
 * To change template for new class use 
 * Code Style | Class Templates options (Tools | IDE Options).
 */
package com.ibatis.jpetstore.domain;

public class Sequence {

  public String name;
  public int nextId;

  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public int getNextId() {
    return nextId;
  }

  public void setNextId(int nextId) {
    this.nextId = nextId;
  }
}

../jpetstore/src/WEB-INF/classes/com/ibatis/jpetstore/domain/Signon.java
package com.ibatis.jpetstore.domain;

public class Signon {

  private String username;
  private String password;

  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }

  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }

}

../jpetstore/src/WEB-INF/classes/com/ibatis/jpetstore/persistence/dao/AccountDao.java
/*
 * Created by IntelliJ IDEA.
 * User: Clinton Begin
 * Date: Jul 29, 2002
 * Time: 9:08:55 PM
 * To change template for new interface use
 * Code Style | Class Templates options (Tools | IDE Options).
 */
package com.ibatis.jpetstore.persistence.dao;

import com.ibatis.db.dao.*;
import com.ibatis.jpetstore.domain.*;

public interface AccountDao extends Dao {
  Account getAccount(DaoTransaction trans, String userId)
      throws DaoException;

  void updateAccount(DaoTransaction trans, Account account)
      throws DaoException;

  void insertAccount(DaoTransaction trans, Account account)
      throws DaoException;
}

../jpetstore/src/WEB-INF/classes/com/ibatis/jpetstore/persistence/dao/CategoryDao.java
/*
 * Created by IntelliJ IDEA.
 * User: Clinton Begin
 * Date: Jul 29, 2002
 * Time: 9:09:09 PM
 * To change template for new interface use
 * Code Style | Class Templates options (Tools | IDE Options).
 */
package com.ibatis.jpetstore.persistence.dao;

import com.ibatis.db.dao.*;
import com.ibatis.jpetstore.domain.*;

import java.util.*;

public interface CategoryDao extends Dao {
  Category getCategory(DaoTransaction trans, String categoryId)
      throws DaoException;

  List getCategoryList(DaoTransaction trans)
      throws DaoException;
}

../jpetstore/src/WEB-INF/classes/com/ibatis/jpetstore/persistence/dao/InventoryDao.java
/*
 * Created by IntelliJ IDEA.
 * User: Clinton Begin
 * Date: Jul 29, 2002
 * Time: 9:09:23 PM
 * To change template for new interface use
 * Code Style | Class Templates options (Tools | IDE Options).
 */
package com.ibatis.jpetstore.persistence.dao;

import com.ibatis.db.dao.*;

public interface InventoryDao extends Dao {
  void updateInventoryQuantity(DaoTransaction trans, String itemId, int quantity)
      throws DaoException;
}

../jpetstore/src/WEB-INF/classes/com/ibatis/jpetstore/persistence/dao/ItemDao.java
/*
 * Created by IntelliJ IDEA.
 * User: Clinton Begin
 * Date: Jul 29, 2002
 * Time: 9:09:36 PM
 * To change template for new interface use
 * Code Style | Class Templates options (Tools | IDE Options).
 */
package com.ibatis.jpetstore.persistence.dao;

import com.ibatis.db.dao.*;
import com.ibatis.jpetstore.domain.*;

import java.util.*;

public interface ItemDao extends Dao {
  Item getItem(DaoTransaction trans, String itemId)
      throws DaoException;

  List getItemList(DaoTransaction trans)
      throws DaoException;

  List getItemListByProduct(DaoTransaction trans, String productId)
      throws DaoException;
}

../jpetstore/src/WEB-INF/classes/com/ibatis/jpetstore/persistence/dao/LineItemDao.java
/*
 * Created by IntelliJ IDEA.
 * User: Clinton Begin
 * Date: Jul 29, 2002
 * Time: 9:10:01 PM
 * To change template for new interface use
 * Code Style | Class Templates options (Tools | IDE Options).
 */
package com.ibatis.jpetstore.persistence.dao;

import com.ibatis.db.dao.*;
import com.ibatis.jpetstore.domain.*;

import java.util.*;

public interface LineItemDao extends Dao {
  void insertLineItem(DaoTransaction trans, LineItem lineItem)
      throws DaoException;

  List getLineItemsByOrderId(DaoTransaction trans, int orderId)
      throws DaoException;
}

../jpetstore/src/WEB-INF/classes/com/ibatis/jpetstore/persistence/dao/OrderDao.java
/*
 * Created by IntelliJ IDEA.
 * User: Clinton Begin
 * Date: Jul 29, 2002
 * Time: 9:10:18 PM
 * To change template for new interface use
 * Code Style | Class Templates options (Tools | IDE Options).
 */
package com.ibatis.jpetstore.persistence.dao;

import com.ibatis.db.dao.*;
import com.ibatis.jpetstore.domain.*;

import java.util.*;

public interface OrderDao extends Dao {
  Order getOrder(DaoTransaction trans, int orderId)
      throws DaoException;

  List getOrdersByUserId(DaoTransaction trans, String userId)
      throws DaoException;

  void insertOrder(DaoTransaction trans, Order order)
      throws DaoException;

  int getNextOrderId()
    throws DaoException;

}

../jpetstore/src/WEB-INF/classes/com/ibatis/jpetstore/persistence/dao/ProductDao.java
/*
 * Created by IntelliJ IDEA.
 * User: Clinton Begin
 * Date: Jul 29, 2002
 * Time: 9:10:36 PM
 * To change template for new interface use
 * Code Style | Class Templates options (Tools | IDE Options).
 */
package com.ibatis.jpetstore.persistence.dao;

import com.ibatis.db.dao.*;
import com.ibatis.jpetstore.domain.*;

import java.util.*;

public interface ProductDao extends Dao {
  Product getProduct(DaoTransaction trans, String productId)
      throws DaoException;

  List getProductList(DaoTransaction trans)
      throws DaoException;

  List getProductListByCategory(DaoTransaction trans, String categoryId)
      throws DaoException;

  List getProductListByKeyword(DaoTransaction trans, String keyword)
      throws DaoException;
}

../jpetstore/src/WEB-INF/classes/com/ibatis/jpetstore/persistence/dao/SignonDao.java
/*
 * Created by IntelliJ IDEA.
 * User: Clinton Begin
 * Date: Jul 29, 2002
 * Time: 9:10:50 PM
 * To change template for new interface use
 * Code Style | Class Templates options (Tools | IDE Options).
 */
package com.ibatis.jpetstore.persistence.dao;

import com.ibatis.db.dao.*;
import com.ibatis.jpetstore.domain.*;

public interface SignonDao extends Dao {
  Signon getSignon(DaoTransaction trans, String username, String password)
      throws DaoException;

  void updateSignon(DaoTransaction trans, Signon signon)
      throws DaoException;

  void insertSignon(DaoTransaction trans, Signon signon)
      throws DaoException;
}

../jpetstore/src/WEB-INF/classes/com/ibatis/jpetstore/persistence/dao/cache/BaseCacheDao.java
/*
 * Created by IntelliJ IDEA.
 * User: Clinton Begin
 * Date: Jul 29, 2002
 * Time: 8:51:00 PM
 * To change template for new class use
 * Code Style | Class Templates options (Tools | IDE Options).
 */
package com.ibatis.jpetstore.persistence.dao.cache;

import java.util.*;

/**
 * These Cache DAOs are examples of how DAO provides a pluggable framework.
 *
 * Note: Cacheing such as this can be done declaratively through SQL Maps,
 * so this would be somewhat redundant in practice.
 */
public abstract class BaseCacheDao {

  private static final int MAX_ITEMS_PER_CHANNEL = 8;
  private static final Map CHANNELS = new HashMap();

  protected void put(String key, Object object) {
    synchronized (CHANNELS) {
      CacheChannel channel = getChannel();
      channel.getCache().put(key, object);
      channel.getKeys().add(key);
      if (channel.getKeys().size() > MAX_ITEMS_PER_CHANNEL) {
        channel.getCache().remove(channel.getKeys().remove(0));
      }
    }
  }

  protected Object get(String key) {
    synchronized (CHANNELS) {
      CacheChannel channel = getChannel();
      Object o = channel.getCache().get(key);
      if (o != null) {
        channel.getKeys().remove(key);
        channel.getKeys().add(key);
      }
      return o;
    }
  }

  protected void flush() {
    synchronized (CHANNELS) {
      CacheChannel channel = getChannel();
      channel.getCache().clear();
    }
  }

  protected CacheChannel getChannel() {
    // Channels are applied per class....so if you only have one
    // cache DAO, then you only have one channel.
    CacheChannel channel = (CacheChannel) CHANNELS.get(this.getClass());
    if (channel == null) {
      channel = new CacheChannel();
      CHANNELS.put(this.getClass(), channel);
    }
    return channel;
  }

  private class CacheChannel {

    private Map cache = new HashMap();
    private List keys = new ArrayList();

    public Map getCache() {
      return cache;
    }

    public List getKeys() {
      return keys;
    }
  }
}

../jpetstore/src/WEB-INF/classes/com/ibatis/jpetstore/persistence/dao/cache/PetStoreCacheDao.java
package com.ibatis.jpetstore.persistence.dao.cache;

import com.ibatis.db.dao.*;
import com.ibatis.jpetstore.domain.*;
import com.ibatis.jpetstore.persistence.dao.*;
import com.ibatis.jpetstore.persistence.dao.map.*;

import java.util.*;

/**
 * These Cache DAOs are examples of how DAO provides a pluggable framework.
 *
 * Note: Cacheing such as this can be done declaratively through SQL Maps,
 * so this would be somewhat redundant in practice.
 */
public class PetStoreCacheDao extends BaseCacheDao
    implements ItemDao, ProductDao, CategoryDao, InventoryDao {

  private static final ItemDao itemDao = new ItemMapDao();
  private static final ProductDao productDao = new ProductMapDao();
  private static final CategoryDao categoryDao = new CategoryMapDao();
  private static final InventoryDao inventoryDao = new InventoryMapDao();

  public Product getProduct(DaoTransaction trans, String productId)
      throws DaoException {
    String key = "getProduct" + productId;
    Product product = (Product) get(key);
    if (product == null) {
      product = productDao.getProduct(trans, productId);
      put(key, product);
    }
    return product;
  }

  public List getProductList(DaoTransaction trans)
      throws DaoException {
    String key = "getProductList";
    List list = (List) get(key);
    if (list == null) {
      list = productDao.getProductList(trans);
      put(key, list);
    }
    return list;
  }

  public List getProductListByCategory(DaoTransaction trans, String categoryId)
      throws DaoException {
    String key = "getProductListByCategory" + categoryId;
    List list = (List) get(key);
    if (list == null) {
      list = productDao.getProductListByCategory(trans, categoryId);
      put(key, list);
    }
    return list;
  }

  public List getProductListByKeyword(DaoTransaction trans, String keyword)
      throws DaoException {
    return productDao.getProductListByKeyword(trans, keyword);
  }

  public Item getItem(DaoTransaction trans, String itemId)
      throws DaoException {
    String key = "getItem" + itemId;
    Item item = (Item) get(key);
    if (item == null) {
      item = itemDao.getItem(trans, itemId);
      put(key, item);
    }
    return item;
  }

  public List getItemList(DaoTransaction trans)
      throws DaoException {
    String key = "getItemList";
    List list = (List) get(key);
    if (list == null) {
      list = itemDao.getItemList(trans);
      put(key, list);
    }
    return list;
  }

  public List getItemListByProduct(DaoTransaction trans, String productId)
      throws DaoException {
    String key = "getItemListByProduct" + productId;
    List list = (List) get(key);
    if (list == null) {
      list = itemDao.getItemListByProduct(trans, productId);
      put(key, list);
    }
    return list;
  }

  public void updateInventoryQuantity(DaoTransaction trans, String itemId, int quantity)
      throws DaoException {
    inventoryDao.updateInventoryQuantity(trans, itemId, quantity);
    flush();
  }

  public Category getCategory(DaoTransaction trans, String categoryId)
      throws DaoException {
    String key = "getCategory" + categoryId;
    Category category = (Category) get(key);
    if (category == null) {
      category = categoryDao.getCategory(trans, categoryId);
      put(key, category);
    }
    return category;
  }

  public List getCategoryList(DaoTransaction trans)
      throws DaoException {
    String key = "getCategoryList";
    List list = (List) get(key);
    if (list == null) {
      list = categoryDao.getCategoryList(trans);
      put(key, list);
    }
    return list;
  }

}

../jpetstore/src/WEB-INF/classes/com/ibatis/jpetstore/persistence/dao/map/AccountMapDao.java
/*
 * Created by IntelliJ IDEA.
 * User: Clinton Begin
 * Date: Jul 29, 2002
 * Time: 9:02:19 PM
 * To change template for new class use
 * Code Style | Class Templates options (Tools | IDE Options).
 */
package com.ibatis.jpetstore.persistence.dao.map;

import com.ibatis.db.dao.*;
import com.ibatis.db.sqlmap.*;
import com.ibatis.jpetstore.domain.*;
import com.ibatis.jpetstore.persistence.dao.*;

public class AccountMapDao extends BaseMapDao implements AccountDao {

  public Account getAccount(DaoTransaction trans, String userId)
      throws DaoException {
    return (Account) executeQueryForObject("getAccount", trans, new StringKey(userId));
  }

  public void updateAccount(DaoTransaction trans, Account account)
      throws DaoException {
    executeUpdate("updateAccount", trans, account);
    executeUpdate("updateProfile", trans, account);
  }

  public void insertAccount(DaoTransaction trans, Account account)
      throws DaoException {
    executeUpdate("insertAccount", trans, account);
    executeUpdate("insertProfile", trans, account);
  }

}

../jpetstore/src/WEB-INF/classes/com/ibatis/jpetstore/persistence/dao/map/BaseMapDao.java
/*
 * Created by IntelliJ IDEA.
 * User: Clinton Begin
 * Date: Jul 29, 2002
 * Time: 8:14:28 PM
 * To change template for new class use
 * Code Style | Class Templates options (Tools | IDE Options).
 */
package com.ibatis.jpetstore.persistence.dao.map;

import com.ibatis.common.resources.*;
import com.ibatis.db.dao.*;
import com.ibatis.db.dao.jdbc.*;
import com.ibatis.db.sqlmap.*;
import com.ibatis.jpetstore.domain.*;

import java.sql.*;
import java.util.*;

public abstract class BaseMapDao {

  protected static SqlMap sqlMap;
  protected static DaoManager daoManager;

  static {
    try {
      daoManager = DaoManager.getInstance("PetStore");
      String relative = daoManager.getExtraProperty("sqlmap.repository.path.relative");
      sqlMap = XmlSqlMapBuilder.buildSqlMap(Resources.getResourceAsReader(relative));
    } catch (Exception e) {
      throw new RuntimeException ("Could not initialize BaseMapDao. Cause: " + e);
    }

  }

  protected void executeUpdate(String mappedStatementName, DaoTransaction trans, Object parameterObject)
      throws DaoException {

    try {
      Connection conn = ((JdbcDaoTransaction) trans).getConnection();
      MappedStatement mappedStatement = sqlMap.getMappedStatement(mappedStatementName);
      mappedStatement.executeUpdate(conn, parameterObject);
    } catch (SQLException e) {
      throw new DaoException(e);
    }

  }

  protected List executeQueryForList(String mappedStatementName, DaoTransaction trans, Object parameterObject)
      throws DaoException {

    try {
      Connection conn = ((JdbcDaoTransaction) trans).getConnection();
      MappedStatement mappedStatement = sqlMap.getMappedStatement(mappedStatementName);
      return mappedStatement.executeQueryForList(conn, parameterObject);
    } catch (SQLException e) {
      throw new DaoException(e);
    }

  }

  protected Object executeQueryForObject(String mappedStatementName, DaoTransaction trans, Object parameterObject)
      throws DaoException {

    try {
      Connection conn = ((JdbcDaoTransaction) trans).getConnection();
      MappedStatement mappedStatement = sqlMap.getMappedStatement(mappedStatementName);
      return mappedStatement.executeQueryForObject(conn, parameterObject);
    } catch (SQLException e) {
      throw new DaoException(e);
    }

  }


  /**
   * The scheme used here will require an extra connections being for inserts
   * (for a very short term), and will reduce complexity around ID generation,
   * as well as reduce the number of blocked insert requests (but may increase
   * the number of blocked requests to the connection pool).
   *
   * There are many other (better/more complex) ways to do this, but this is
   * a simple, safe approach appropriate for this application.
   */
  public synchronized int getNextId (String name)
    throws DaoException {
    DaoTransaction trans = daoManager.getTransaction();
    Sequence sequence = new Sequence();
    sequence.setName(name);
    sequence=(Sequence)executeQueryForObject("getSequence",trans,sequence);
    int nextId = sequence.getNextId();
    sequence.setNextId(nextId+1);
    executeUpdate("updateSequence",trans,sequence);
    trans.commit();
    trans.release();
    return nextId;
  }

}

../jpetstore/src/WEB-INF/classes/com/ibatis/jpetstore/persistence/dao/map/CategoryMapDao.java
/*
 * Created by IntelliJ IDEA.
 * User: Clinton Begin
 * Date: Jul 29, 2002
 * Time: 9:03:51 PM
 * To change template for new class use
 * Code Style | Class Templates options (Tools | IDE Options).
 */
package com.ibatis.jpetstore.persistence.dao.map;

import com.ibatis.db.dao.*;
import com.ibatis.db.sqlmap.*;
import com.ibatis.jpetstore.domain.*;
import com.ibatis.jpetstore.persistence.dao.*;

import java.util.*;

public class CategoryMapDao extends BaseMapDao implements CategoryDao {

  public Category getCategory(DaoTransaction trans, String categoryId)
      throws DaoException {
    return (Category) executeQueryForObject("getCategory", trans, new StringKey(categoryId));
  }

  public List getCategoryList(DaoTransaction trans)
      throws DaoException {
    return executeQueryForList("getCategoryList", trans, null);
  }
}

../jpetstore/src/WEB-INF/classes/com/ibatis/jpetstore/persistence/dao/map/InventoryMapDao.java
/*
 * Created by IntelliJ IDEA.
 * User: Clinton Begin
 * Date: Jul 29, 2002
 * Time: 9:03:43 PM
 * To change template for new class use
 * Code Style | Class Templates options (Tools | IDE Options).
 */
package com.ibatis.jpetstore.persistence.dao.map;

import com.ibatis.db.dao.*;
import com.ibatis.jpetstore.domain.*;
import com.ibatis.jpetstore.persistence.dao.*;

public class InventoryMapDao extends BaseMapDao implements InventoryDao {

  public void updateInventoryQuantity(DaoTransaction trans, String itemId, int quantity)
      throws DaoException {
    Item item = new Item();
    item.setItemId(itemId);
    item.setQuantity(quantity);
    executeUpdate("updateInventoryQuantity", trans, item);
  }

}

../jpetstore/src/WEB-INF/classes/com/ibatis/jpetstore/persistence/dao/map/ItemMapDao.java
/*
 * Created by IntelliJ IDEA.
 * User: Clinton Begin
 * Date: Jul 29, 2002
 * Time: 9:03:30 PM
 * To change template for new class use
 * Code Style | Class Templates options (Tools | IDE Options).
 */
package com.ibatis.jpetstore.persistence.dao.map;

import com.ibatis.db.dao.*;
import com.ibatis.db.sqlmap.*;
import com.ibatis.jpetstore.domain.*;
import com.ibatis.jpetstore.persistence.dao.*;

import java.util.*;

public class ItemMapDao extends BaseMapDao implements ItemDao {

  public Item getItem(DaoTransaction trans, String itemId)
      throws DaoException {
    Item item = (Item) executeQueryForObject("getItem", trans, new StringKey(itemId));
    Product product = (Product) executeQueryForObject("getProduct", trans, new StringKey(item.getProductId()));
    item.setProduct(product);
    return item;
  }

  public List getItemList(DaoTransaction trans)
      throws DaoException {
    return executeQueryForList("getItemList", trans, null);
  }

  public List getItemListByProduct(DaoTransaction trans, String productId)
      throws DaoException {
    return executeQueryForList("getItemListByProduct", trans, new StringKey(productId));
  }
}

../jpetstore/src/WEB-INF/classes/com/ibatis/jpetstore/persistence/dao/map/LineItemMapDao.java
/*
 * Created by IntelliJ IDEA.
 * User: Clinton Begin
 * Date: Jul 29, 2002
 * Time: 9:03:23 PM
 * To change template for new class use
 * Code Style | Class Templates options (Tools | IDE Options).
 */
package com.ibatis.jpetstore.persistence.dao.map;

import com.ibatis.db.dao.*;
import com.ibatis.db.sqlmap.*;
import com.ibatis.jpetstore.domain.*;
import com.ibatis.jpetstore.persistence.dao.*;

import java.util.*;

public class LineItemMapDao extends BaseMapDao implements LineItemDao {

  private static final ItemDao itemDao = (ItemDao) daoManager.getDao("Item");

  public void insertLineItem(DaoTransaction trans, LineItem lineItem)
      throws DaoException {
    executeUpdate("insertLineItem", trans, lineItem);
  }

  public List getLineItemsByOrderId(DaoTransaction trans, int orderId)
      throws DaoException {
    List list = executeQueryForList("getLineItemsByOrderId", trans, new IntegerKey(orderId));
    for (int i = 0; i < list.size(); i++) {
      LineItem lineItem = (LineItem) list.get(i);
      // unchached
      lineItem.setItem(itemDao.getItem(trans, lineItem.getItemId()));
    }
    return list;
  }

}

../jpetstore/src/WEB-INF/classes/com/ibatis/jpetstore/persistence/dao/map/OrderMapDao.java
/*
 * Created by IntelliJ IDEA.
 * User: Clinton Begin
 * Date: Jul 29, 2002
 * Time: 9:03:10 PM
 * To change template for new class use
 * Code Style | Class Templates options (Tools | IDE Options).
 */
package com.ibatis.jpetstore.persistence.dao.map;

import com.ibatis.db.dao.*;
import com.ibatis.db.sqlmap.*;
import com.ibatis.jpetstore.domain.*;
import com.ibatis.jpetstore.persistence.dao.*;

import java.util.*;

public class OrderMapDao extends BaseMapDao implements OrderDao {

  public Order getOrder(DaoTransaction trans, int orderId)
      throws DaoException {
    return (Order) executeQueryForObject("getOrder", trans, new IntegerKey(orderId));
  }

  public List getOrdersByUserId(DaoTransaction trans, String userId)
      throws DaoException {
    return executeQueryForList("getOrdersByUserId", trans, new StringKey(userId));
  }

  public void insertOrder(DaoTransaction trans, Order order)
      throws DaoException {
    executeUpdate("insertOrder", trans, order);
    executeUpdate("insertOrderStatus", trans, order);
  }

  public int getNextOrderId()
    throws DaoException {
    return getNextId("Order");
  }

}

../jpetstore/src/WEB-INF/classes/com/ibatis/jpetstore/persistence/dao/map/ProductMapDao.java
/*
 * Created by IntelliJ IDEA.
 * User: Clinton Begin
 * Date: Jul 29, 2002
 * Time: 9:02:56 PM
 * To change template for new class use
 * Code Style | Class Templates options (Tools | IDE Options).
 */
package com.ibatis.jpetstore.persistence.dao.map;

import com.ibatis.db.dao.*;
import com.ibatis.db.sqlmap.*;
import com.ibatis.jpetstore.domain.*;
import com.ibatis.jpetstore.persistence.dao.*;

import java.util.*;

public class ProductMapDao extends BaseMapDao implements ProductDao {

  public Product getProduct(DaoTransaction trans, String productId)
      throws DaoException {
    return (Product) executeQueryForObject("getProduct", trans, new StringKey(productId));
  }

  public List getProductList(DaoTransaction trans)
      throws DaoException {
    return executeQueryForList("getProductList", trans, null);
  }

  public List getProductListByCategory(DaoTransaction trans, String categoryId)
      throws DaoException {
    return executeQueryForList("getProductListByCategory", trans, new StringKey(categoryId));
  }

  public List getProductListByKeyword(DaoTransaction trans, String keyword)
      throws DaoException {
    return executeQueryForList("searchProductList", trans, new StringKey(keyword));
  }

}

../jpetstore/src/WEB-INF/classes/com/ibatis/jpetstore/persistence/dao/map/SignonMapDao.java
/*
 * Created by IntelliJ IDEA.
 * User: Clinton Begin
 * Date: Jul 29, 2002
 * Time: 9:02:42 PM
 * To change template for new class use
 * Code Style | Class Templates options (Tools | IDE Options).
 */
package com.ibatis.jpetstore.persistence.dao.map;

import com.ibatis.db.dao.*;
import com.ibatis.jpetstore.domain.*;
import com.ibatis.jpetstore.persistence.dao.*;

public class SignonMapDao extends BaseMapDao implements SignonDao {

  public Signon getSignon(DaoTransaction trans, String username, String password)
      throws DaoException {
    Signon signon = new Signon();
    signon.setUsername(username);
    signon.setPassword(password);
    return (Signon) executeQueryForObject("getSignon", trans, signon);
  }

  public void updateSignon(DaoTransaction trans, Signon signon)
      throws DaoException {
    executeUpdate("updateSignon", trans, signon);
  }

  public void insertSignon(DaoTransaction trans, Signon signon)
      throws DaoException {
    executeUpdate("insertSignon", trans, signon);
  }
}

../jpetstore/src/WEB-INF/classes/com/ibatis/jpetstore/presentation/action/AddItemToCartAction.java
package com.ibatis.jpetstore.presentation.action;

import com.ibatis.db.dao.*;
import com.ibatis.jpetstore.domain.*;
import com.ibatis.jpetstore.presentation.form.*;
import org.apache.struts.action.*;

import javax.servlet.http.*;

public class AddItemToCartAction extends BaseAction {


  public ActionForward doPerform(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
      throws Exception {

    boolean success = false;

    CartForm cartForm = (CartForm) form;

    if (cartForm.getCart().containsItemId(cartForm.getWorkingItemId())) {
      cartForm.getCart().incrementQuantityByItemId(cartForm.getWorkingItemId());
      success = true;
    } else {
      DaoTransaction trans = daoManager.getTransaction();
      Item item = itemDao.getItem(trans, cartForm.getWorkingItemId());
      if (item != null) {
        cartForm.getCart().addItem(item);
        success = true;
      }
      trans.release();
    }


    if (success) {
      return mapping.findForward("success");
    } else {
      request.setAttribute("message", "Error adding Item to Cart.  Could not find Item for the Item ID specified.");
      return mapping.findForward("failure");
    }
  }

}

../jpetstore/src/WEB-INF/classes/com/ibatis/jpetstore/presentation/action/BaseAction.java
package com.ibatis.jpetstore.presentation.action;

import com.ibatis.common.resources.*;
import com.ibatis.db.dao.*;
import com.ibatis.jpetstore.persistence.dao.*;
import org.apache.struts.action.*;

import javax.servlet.*;
import javax.servlet.http.*;
import java.io.*;

public abstract class BaseAction extends Action {

  protected static final DaoManager daoManager;

  protected static final AccountDao accountDao;
  protected static final CategoryDao categoryDao;
  protected static final InventoryDao inventoryDao;
  protected static final ItemDao itemDao;
  protected static final LineItemDao lineItemDao;
  protected static final OrderDao orderDao;
  protected static final ProductDao productDao;
  protected static final SignonDao signonDao;

  static {
    try {
      DaoManager.configure(Resources.getResourceAsStream("properties/dao.xml"));
      daoManager = DaoManager.getInstance();
      accountDao = (AccountDao) daoManager.getDao("Account");
      categoryDao = (CategoryDao) daoManager.getDao("Category");
      inventoryDao = (InventoryDao) daoManager.getDao("Inventory");
      itemDao = (ItemDao) daoManager.getDao("Item");
      lineItemDao = (LineItemDao) daoManager.getDao("LineItem");
      orderDao = (OrderDao) daoManager.getDao("Order");
      productDao = (ProductDao) daoManager.getDao("Product");
      signonDao = (SignonDao) daoManager.getDao("Signon");
    } catch (Exception e) {
      e.printStackTrace();
      throw new RuntimeException("There was an error initializing BaseAction.  Cause: " + e);
    }
  }

  public ActionForward perform(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
      throws IOException, ServletException {
    try {
      return doPerform(mapping, form, request, response);
    } catch (Exception e) {
      e.printStackTrace();
      request.setAttribute("message", "Unhandled Exception: " + e.toString());
      return mapping.findForward("unknown-error");
    }
  }

  public abstract ActionForward doPerform(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
      throws Exception;


}

../jpetstore/src/WEB-INF/classes/com/ibatis/jpetstore/presentation/action/DoNothingAction.java
package com.ibatis.jpetstore.presentation.action;

import org.apache.struts.action.*;

import javax.servlet.http.*;

public class DoNothingAction extends BaseAction {

  public ActionForward doPerform(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
      throws Exception {
    return mapping.findForward("success");
  }
}

../jpetstore/src/WEB-INF/classes/com/ibatis/jpetstore/presentation/action/EditAccountAction.java
package com.ibatis.jpetstore.presentation.action;

import com.ibatis.db.dao.*;
import com.ibatis.jpetstore.domain.*;
import com.ibatis.jpetstore.presentation.form.*;
import org.apache.struts.action.*;

import javax.servlet.http.*;

public class EditAccountAction extends BaseAction {

  public ActionForward doPerform(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
      throws Exception {

    AccountForm acctForm = (AccountForm) form;

    try {

      if (AccountForm.VALIDATE_EDIT_ACCOUNT.equals(acctForm.getValidate())) {
        acctForm.getAccount().setListOption(request.getParameter("account.listOption") != null);
        acctForm.getAccount().setBannerOption(request.getParameter("account.bannerOption") != null);

        DaoTransaction trans = daoManager.getTransaction();

        accountDao.updateAccount(trans, acctForm.getAccount());
        acctForm.setMyList(productDao.getProductListByCategory(trans, acctForm.getAccount().getFavouriteCategoryId()));

        if (acctForm.getPassword() != null && acctForm.getPassword().length() > 0) {
          Signon signon = new Signon();
          signon.setUsername(acctForm.getUsername());
          signon.setPassword(acctForm.getPassword());
          signonDao.updateSignon(trans, signon);
        }

        trans.commit();

        acctForm.setAccount(accountDao.getAccount(trans, acctForm.getAccount().getUserId()));

        trans.release();

        request.getSession().setAttribute("accountForm", acctForm);
        request.getSession().removeAttribute("workingAccountForm");

        return mapping.findForward("success");
      } else {
        request.setAttribute("message", "Your account was not updated because the submitted information was not validated.");
        return mapping.findForward("failure");
      }
    } catch (Exception e) {
      request.setAttribute("message", "There was a problem updating your Account Information.  Cause: " + e);
      return mapping.findForward("unknown-error");
    }

  }

}

../jpetstore/src/WEB-INF/classes/com/ibatis/jpetstore/presentation/action/EditAccountFormAction.java
package com.ibatis.jpetstore.presentation.action;

import com.ibatis.db.dao.*;
import com.ibatis.jpetstore.presentation.form.*;
import org.apache.struts.action.*;

import javax.servlet.http.*;

public class EditAccountFormAction extends BaseAction {

  public ActionForward doPerform(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
      throws Exception {

    AccountForm workingAcctForm = (AccountForm) form;
    AccountForm acctForm = (AccountForm) request.getSession().getAttribute("accountForm");

    String username = acctForm.getAccount().getUserId();

    if (workingAcctForm.getAccount() == null) {
      DaoTransaction trans = daoManager.getTransaction();
      workingAcctForm.setAccount(accountDao.getAccount(trans, username));
      workingAcctForm.setUsername(workingAcctForm.getAccount().getUserId());
      trans.release();
    }

    if (workingAcctForm.getCategories() == null) {
      DaoTransaction trans = daoManager.getTransaction();
      workingAcctForm.setCategories(categoryDao.getCategoryList(trans));
      trans.release();
    }

    return mapping.findForward("success");
  }

}

../jpetstore/src/WEB-INF/classes/com/ibatis/jpetstore/presentation/action/IndexAction.java
package com.ibatis.jpetstore.presentation.action;

import com.ibatis.db.dao.*;
import org.apache.struts.action.*;

import javax.servlet.http.*;
import java.util.*;

public class IndexAction extends BaseAction {

  public ActionForward doPerform(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
      throws Exception {

    DaoTransaction trans = daoManager.getTransaction();
    List list = categoryDao.getCategoryList(trans);
    trans.release();

    request.setAttribute("categoryList", list);

    return mapping.findForward("success");
  }

}

../jpetstore/src/WEB-INF/classes/com/ibatis/jpetstore/presentation/action/ListOrdersAction.java
package com.ibatis.jpetstore.presentation.action;

import com.ibatis.db.dao.*;
import com.ibatis.jpetstore.presentation.form.*;
import org.apache.struts.action.*;

import javax.servlet.http.*;
import java.util.*;

public class ListOrdersAction extends BaseAction {

  public ActionForward doPerform(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
      throws Exception {

    AccountForm acctForm = (AccountForm) form;

    DaoTransaction trans = daoManager.getTransaction();

    List list = orderDao.getOrdersByUserId(trans, acctForm.getAccount().getUserId());
    request.setAttribute("orderList", list);

    trans.release();

    return mapping.findForward("success");
  }
}

../jpetstore/src/WEB-INF/classes/com/ibatis/jpetstore/presentation/action/NewAccountAction.java
package com.ibatis.jpetstore.presentation.action;

import com.ibatis.db.dao.*;
import com.ibatis.jpetstore.domain.*;
import com.ibatis.jpetstore.presentation.form.*;
import org.apache.struts.action.*;

import javax.servlet.http.*;

public class NewAccountAction extends BaseAction {

  public ActionForward doPerform(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
      throws Exception {

    AccountForm acctForm = (AccountForm) form;

    try {

      if (AccountForm.VALIDATE_NEW_ACCOUNT.equals(acctForm.getValidate())) {
        acctForm.getAccount().setListOption(request.getParameter("account.listOption") != null);
        acctForm.getAccount().setBannerOption(request.getParameter("account.bannerOption") != null);

        DaoTransaction trans = daoManager.getTransaction();

        accountDao.insertAccount(trans, acctForm.getAccount());
        acctForm.setMyList(productDao.getProductListByCategory(trans, acctForm.getAccount().getFavouriteCategoryId()));

        if (acctForm.getPassword() != null && acctForm.getPassword().length() > 0) {
          Signon signon = new Signon();
          signon.setUsername(acctForm.getUsername());
          signon.setPassword(acctForm.getPassword());
          signonDao.insertSignon(trans, signon);
        }

        trans.commit();

        acctForm.setAccount(accountDao.getAccount(trans, acctForm.getAccount().getUserId()));

        trans.release();

        request.getSession().setAttribute("accountForm", acctForm);
        request.getSession().removeAttribute("workingAccountForm");

        return mapping.findForward("success");
      } else {
        request.setAttribute("message", "Your account was not created because the submitted information was not validated.");
        return mapping.findForward("failure");
      }
    } catch (Exception e) {
      request.setAttribute("message", "There was a problem creating your Account Information.  Cause: " + e);
      return mapping.findForward("unknown-error");
    }


  }

}

../jpetstore/src/WEB-INF/classes/com/ibatis/jpetstore/presentation/action/NewAccountFormAction.java
package com.ibatis.jpetstore.presentation.action;

import com.ibatis.db.dao.*;
import com.ibatis.jpetstore.domain.*;
import com.ibatis.jpetstore.presentation.form.*;
import org.apache.struts.action.*;

import javax.servlet.http.*;

public class NewAccountFormAction extends BaseAction {

  public ActionForward doPerform(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
      throws Exception {

    AccountForm workingAcctForm = new AccountForm();

    request.getSession().removeAttribute("workingAccountForm");
    request.getSession().setAttribute("workingAccountForm", workingAcctForm);

    if (workingAcctForm.getAccount() == null) {
      workingAcctForm.setAccount(new Account());
    }

    if (workingAcctForm.getCategories() == null) {
      DaoTransaction trans = daoManager.getTransaction();
      workingAcctForm.setCategories(categoryDao.getCategoryList(trans));
      trans.release();
    }

    return mapping.findForward("success");
  }
}

../jpetstore/src/WEB-INF/classes/com/ibatis/jpetstore/presentation/action/NewOrderAction.java
package com.ibatis.jpetstore.presentation.action;

import com.ibatis.db.dao.*;
import com.ibatis.jpetstore.domain.*;
import com.ibatis.jpetstore.presentation.form.*;
import org.apache.struts.action.*;

import javax.servlet.http.*;
import java.util.*;

public class NewOrderAction extends BaseAction {

  public ActionForward doPerform(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
      throws Exception {

    OrderForm orderForm = (OrderForm) form;

    if (orderForm.isShippingAddressRequired()) {
      return mapping.findForward("shipping");
    } else if (!orderForm.isConfirmed()) {
      return mapping.findForward("confirm");
    } else if (orderForm.getOrder() != null) {
      DaoTransaction trans = daoManager.getTransaction();
      orderDao.insertOrder(trans, orderForm.getOrder());
      Iterator i = orderForm.getOrder().getLineItems();
      while (i.hasNext()) {
        LineItem item = (LineItem) i.next();
        lineItemDao.insertLineItem(trans, item);
        inventoryDao.updateInventoryQuantity(trans, item.getItemId(), item.getItem().getQuantity() - item.getQuantity());
      }
      request.getSession().removeAttribute("workingOrderForm");
      request.getSession().removeAttribute("cartForm");

      //Order order = orderDao.getOrder(trans, orderForm.getOrder().getOrderId());
      //List list = lineItemDao.getLineItemsByOrderId(trans, order.getOrderId());

      request.setAttribute("order", orderForm.getOrder());
      request.setAttribute("itemList", orderForm.getOrder().getLineItems());

      trans.commit();

      trans.release();

      request.setAttribute("message", "Thank you, your order has been submitted.");

      return mapping.findForward("success");
    } else {
      request.setAttribute("message", "An error occurred processing your order (order was null).");
      return mapping.findForward("failure");
    }

  }

}

../jpetstore/src/WEB-INF/classes/com/ibatis/jpetstore/presentation/action/NewOrderFormAction.java
package com.ibatis.jpetstore.presentation.action;

import com.ibatis.jpetstore.persistence.dao.*;
import com.ibatis.jpetstore.presentation.form.*;
import org.apache.struts.action.*;

import javax.servlet.http.*;

public class NewOrderFormAction extends BaseAction {

  public ActionForward doPerform(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
      throws Exception {

    OrderDao orderDao = (OrderDao) daoManager.getDao("Order");

    AccountForm acctForm = (AccountForm) request.getSession().getAttribute("accountForm");
    CartForm cartForm = (CartForm) request.getSession().getAttribute("cartForm");

    if (acctForm == null || acctForm.getAccount() == null) {
      request.setAttribute("signonForwardAction", "global-orderform");
      return mapping.findForward("global-signon");
    } else {
      if (cartForm != null) {
        OrderForm orderForm = (OrderForm) form;
        orderForm.getOrder().initOrder(orderDao.getNextOrderId(),acctForm.getAccount(), cartForm.getCart());
        return mapping.findForward("success");
      } else {
        request.setAttribute("message", "An order could not be created because a cart could not be found.");
        return mapping.findForward("failure");
      }

    }

  }

}
../jpetstore/src/WEB-INF/classes/com/ibatis/jpetstore/presentation/action/RemoveItemFromCartAction.java
package com.ibatis.jpetstore.presentation.action;

import com.ibatis.jpetstore.domain.*;
import com.ibatis.jpetstore.presentation.form.*;
import org.apache.struts.action.*;

import javax.servlet.http.*;

public class RemoveItemFromCartAction extends BaseAction {


  public ActionForward doPerform(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
      throws Exception {

    CartForm cartForm = (CartForm) form;

    Item item = cartForm.getCart().removeItemById(cartForm.getWorkingItemId());

    if (item == null) {
      request.setAttribute("message", "Attempted to remove null CartItem from Cart.");
      return mapping.findForward("failure");
    } else {
      return mapping.findForward("success");
    }
  }

}

../jpetstore/src/WEB-INF/classes/com/ibatis/jpetstore/presentation/action/SearchProductsAction.java
package com.ibatis.jpetstore.presentation.action;

import com.ibatis.db.dao.*;
import org.apache.struts.action.*;

import javax.servlet.http.*;
import java.util.*;

public class SearchProductsAction extends BaseAction {

  public ActionForward doPerform(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
      throws Exception {

    String keyword = request.getParameter("keyword");

    if (keyword == null || keyword.length() < 1) {
      request.setAttribute("message", "Please enter a keyword to search for, then press the search button.");
      return mapping.findForward("failure");
    } else {
      StringBuffer buffer = new StringBuffer("%").append(keyword.toLowerCase()).append("%");
      DaoTransaction trans = daoManager.getTransaction();

      List productList = productDao.getProductListByKeyword(trans, buffer.toString());

      trans.release();

      request.setAttribute("productList", productList);

      return mapping.findForward("success");
    }

  }

}

../jpetstore/src/WEB-INF/classes/com/ibatis/jpetstore/presentation/action/SignoffAction.java
package com.ibatis.jpetstore.presentation.action;

import org.apache.struts.action.*;

import javax.servlet.http.*;

public class SignoffAction extends BaseAction {

  public ActionForward doPerform(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
      throws Exception {


    request.getSession().removeAttribute("workingAccountForm");
    request.getSession().removeAttribute("accountForm");
    request.getSession().removeAttribute("workingOrderForm");
    request.getSession().removeAttribute("cartForm");

    return mapping.findForward("success");
  }

}

../jpetstore/src/WEB-INF/classes/com/ibatis/jpetstore/presentation/action/SignonAction.java
package com.ibatis.jpetstore.presentation.action;

import com.ibatis.db.dao.*;
import com.ibatis.jpetstore.domain.*;
import com.ibatis.jpetstore.presentation.form.*;
import org.apache.struts.action.*;

import javax.servlet.http.*;

public class SignonAction extends BaseAction {

  public ActionForward doPerform(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
      throws Exception {

    request.getSession().removeAttribute("workingAccountForm");
    request.getSession().removeAttribute("accountForm");

    AccountForm acctForm = (AccountForm) form;

    String username = acctForm.getUsername();
    String password = acctForm.getPassword();
    String forwardAction = acctForm.getForwardAction();

    acctForm = new AccountForm();
    acctForm.setForwardAction(forwardAction);
    request.getSession().setAttribute("accountForm", acctForm);

    DaoTransaction trans = daoManager.getTransaction();

    Signon signon = signonDao.getSignon(trans, username, password);
    Account account = null;
    if (signon != null) {
      acctForm.setUsername(signon.getUsername());
      account = accountDao.getAccount(trans, signon.getUsername());
      acctForm.setMyList(productDao.getProductListByCategory(trans, account.getFavouriteCategoryId()));
    }

    trans.release();

    if (signon == null || account == null) {
      request.setAttribute("message", "Invalid username or password.  Signon failed.");
      return mapping.findForward("failure");
    } else {
      acctForm.setAccount(account);
      acctForm.setPassword(null);
      if (acctForm.getForwardAction() == null || acctForm.getForwardAction().length() < 1) {
        return mapping.findForward("success");
      } else {
        return mapping.findForward(acctForm.getForwardAction());
      }
    }

  }

}

../jpetstore/src/WEB-INF/classes/com/ibatis/jpetstore/presentation/action/UpdateCartQuantitiesAction.java
package com.ibatis.jpetstore.presentation.action;

import com.ibatis.jpetstore.domain.*;
import com.ibatis.jpetstore.presentation.form.*;
import org.apache.struts.action.*;

import javax.servlet.http.*;
import java.util.*;

public class UpdateCartQuantitiesAction extends BaseAction {


  public ActionForward doPerform(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
      throws Exception {
    CartForm cartForm = (CartForm) form;

    Iterator cartItems = cartForm.getCart().getCartItems();
    while (cartItems.hasNext()) {
      CartItem cartItem = (CartItem) cartItems.next();
      String itemId = cartItem.getItem().getItemId();
      try {
        int quantity = Integer.parseInt(request.getParameter(itemId));
        cartForm.getCart().setQuantityByItemId(itemId, quantity);
        if (quantity < 1) {
          cartItems.remove();
        }
      } catch (Exception e) {
        //ignore on purpose
      }
    }

    return mapping.findForward("success");

  }


}

../jpetstore/src/WEB-INF/classes/com/ibatis/jpetstore/presentation/action/ViewCategoryAction.java
package com.ibatis.jpetstore.presentation.action;

import com.ibatis.db.dao.*;
import com.ibatis.jpetstore.domain.*;
import com.ibatis.jpetstore.presentation.form.*;
import org.apache.struts.action.*;

import javax.servlet.http.*;
import java.util.*;

public class ViewCategoryAction extends BaseAction {

  public ActionForward doPerform(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
      throws Exception {

    CategoryForm catForm = (CategoryForm) form;

    DaoTransaction trans = daoManager.getTransaction();

    Category category = categoryDao.getCategory(trans, catForm.getCategoryId());
    List productList = productDao.getProductListByCategory(trans, catForm.getCategoryId());

    catForm.setCategory(category);
    catForm.setProductList(productList);

    trans.release();

    if (category == null) {
      request.setAttribute("message", "Error viewing Category.  Could not find Category for Category ID specified.");
      return mapping.findForward("failure");
    } else {
      return mapping.findForward("success");
    }

  }

}

../jpetstore/src/WEB-INF/classes/com/ibatis/jpetstore/presentation/action/ViewItemAction.java
package com.ibatis.jpetstore.presentation.action;

import com.ibatis.db.dao.*;
import com.ibatis.jpetstore.domain.*;
import com.ibatis.jpetstore.presentation.form.*;
import org.apache.struts.action.*;

import javax.servlet.http.*;

public class ViewItemAction extends BaseAction {

  public ActionForward doPerform(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
      throws Exception {

    ItemForm itemForm = (ItemForm) form;

    DaoTransaction trans = daoManager.getTransaction();

    Item item = itemDao.getItem(trans, itemForm.getItemId());
    Product product = null;
    if (item != null) {
      product = productDao.getProduct(trans, item.getProductId());
    }
    itemForm.setProduct(product);
    itemForm.setItem(item);

    trans.release();

    if (item == null) {
      request.setAttribute("message", "Error viewing Item.  Could not find Item for Item ID specified.");
      return mapping.findForward("failure");
    } else {
      return mapping.findForward("success");
    }

  }


}

../jpetstore/src/WEB-INF/classes/com/ibatis/jpetstore/presentation/action/ViewOrderAction.java
package com.ibatis.jpetstore.presentation.action;

import com.ibatis.db.dao.*;
import com.ibatis.jpetstore.domain.*;
import com.ibatis.jpetstore.presentation.form.*;
import org.apache.struts.action.*;

import javax.servlet.http.*;
import java.util.*;

public class ViewOrderAction extends BaseAction {

  public ActionForward doPerform(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
      throws Exception {

    AccountForm acctForm = (AccountForm) form;

    DaoTransaction trans = daoManager.getTransaction();

    int orderId = Integer.parseInt(request.getParameter("orderId"));

    Order order = orderDao.getOrder(trans, orderId);

    List list = lineItemDao.getLineItemsByOrderId(trans, order.getOrderId());

    trans.release();

    if (acctForm.getAccount().getUserId().equals(order.getUserId())) {
      request.setAttribute("order", order);
      request.setAttribute("itemList", list);
      return mapping.findForward("success");
    } else {
      request.setAttribute("message", "You may only view your own orders.");
      return mapping.findForward("failure");
    }

  }
}

../jpetstore/src/WEB-INF/classes/com/ibatis/jpetstore/presentation/action/ViewProductAction.java
package com.ibatis.jpetstore.presentation.action;

import com.ibatis.db.dao.*;
import com.ibatis.jpetstore.domain.*;
import com.ibatis.jpetstore.presentation.form.*;
import org.apache.struts.action.*;

import javax.servlet.http.*;
import java.util.*;

public class ViewProductAction extends BaseAction {

  public ActionForward doPerform(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
      throws Exception {

    ProductForm prodForm = (ProductForm) form;

    DaoTransaction trans = daoManager.getTransaction();

    Product product = productDao.getProduct(trans, prodForm.getProductId());
    List itemList = itemDao.getItemListByProduct(trans, prodForm.getProductId());

    prodForm.setProduct(product);
    prodForm.setItemList(itemList);

    trans.release();

    if (product == null) {
      request.setAttribute("message", "Error viewing Product.  Could not find Product for Product ID specified.");
      return mapping.findForward("failure");
    } else {
      return mapping.findForward("success");
    }

  }

}

../jpetstore/src/WEB-INF/classes/com/ibatis/jpetstore/presentation/form/AccountForm.java
package com.ibatis.jpetstore.presentation.form;

import com.ibatis.jpetstore.domain.*;
import org.apache.struts.action.*;

import javax.servlet.http.*;
import java.util.*;

public class AccountForm extends BaseForm {

  public static final ArrayList LANGUAGE_LIST = new ArrayList();

  public static final String VALIDATE_EDIT_ACCOUNT = "editAccount";
  public static final String VALIDATE_NEW_ACCOUNT = "newAccount";

  private String username;
  private String password;
  private String repeatedPassword;
  private List languages;
  private List categories;
  private String validate;
  private List myList;
  private String forwardAction;

  private Account account;

  static {
    LANGUAGE_LIST.add("english");
    LANGUAGE_LIST.add("japanese");
  }

  public AccountForm() {
    languages = LANGUAGE_LIST;
  }

  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }

  public List getMyList() {
    return myList;
  }

  public void setMyList(List myList) {
    this.myList = myList;
  }

  public String getForwardAction() {
    return forwardAction;
  }

  public void setForwardAction(String forwardAction) {
    this.forwardAction = forwardAction;
  }

  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }

  public String getRepeatedPassword() {
    return repeatedPassword;
  }

  public void setRepeatedPassword(String repeatedPassword) {
    this.repeatedPassword = repeatedPassword;
  }

  public Account getAccount() {
    return account;
  }

  public void setAccount(Account account) {
    this.account = account;
  }

  public List getLanguages() {
    return languages;
  }

  public void setLanguages(List languages) {
    this.languages = languages;
  }

  public List getCategories() {
    return categories;
  }

  public void setCategories(List categories) {
    this.categories = categories;
  }

  public String getValidate() {
    return validate;
  }

  public void setValidate(String validate) {
    this.validate = validate;
  }

  public ActionErrors validate(ActionMapping mapping, HttpServletRequest request) {
    ActionErrors errors = new ActionErrors();

    if (validate != null) {
      if (VALIDATE_EDIT_ACCOUNT.equals(validate) || VALIDATE_NEW_ACCOUNT.equals(validate)) {
        if (VALIDATE_NEW_ACCOUNT.equals(validate)) {
          account.setUserId(getUsername());
          account.setStatus("OK");
          addErrorIfStringEmpty(errors, "account.error.userid.required", this.getUsername());
          if (password == null || password.length() < 1 || !password.equals(repeatedPassword)) {
            errors.add("ActionForm", new ActionError("account.error.password.missing"));
          }
        }
        if (password != null && password.length() > 0) {
          if (!password.equals(repeatedPassword)) {
            errors.add("ActionForm", new ActionError("account.error.password.mismatch"));
          }
        }
        addErrorIfStringEmpty(errors, "account.error.firstName.required", this.account.getFirstName());
        addErrorIfStringEmpty(errors, "account.error.lastName.required", this.account.getLastName());
        addErrorIfStringEmpty(errors, "account.error.email.required", this.account.getEmail());
        addErrorIfStringEmpty(errors, "account.error.phone.required", this.account.getPhone());
        addErrorIfStringEmpty(errors, "account.error.address1.required", this.account.getAddress1());
        addErrorIfStringEmpty(errors, "account.error.city.required", this.account.getCity());
        addErrorIfStringEmpty(errors, "account.error.state.required", this.account.getState());
        addErrorIfStringEmpty(errors, "account.error.zip.required", this.account.getZip());
        addErrorIfStringEmpty(errors, "account.error.country.required", this.account.getCountry());
      }
    }

    return errors;
  }

  public void reset(ActionMapping mapping, HttpServletRequest request) {
    super.reset(mapping, request);
    username = null;
    password = null;
    repeatedPassword = null;

    if (account != null) {
      username = account.getUserId();
    }

  }

}

../jpetstore/src/WEB-INF/classes/com/ibatis/jpetstore/presentation/form/BaseForm.java
package com.ibatis.jpetstore.presentation.form;

import org.apache.struts.action.*;

import java.math.*;

public class BaseForm extends ActionForm {

  protected void addErrorIfStringEmpty(ActionErrors errors, String errorResource, String value) {
    if (value == null || value.trim().length() < 1) {
      errors.add("ActionForm", new ActionError(errorResource));
    }
  }

  protected static String formatCurrency(BigDecimal number) {
    String n = number.toString();
    StringBuffer s = new StringBuffer("$");
    int x = n.indexOf('.');

    if (x < 0) {
      s.append(n);
      s.append(".00");
    } else {
      String i = n.substring(0, x);
      String d = n.substring(x + 1);
      s.append(i);
      s.append('.');
      if (d.length() == 2) {
        s.append(d);
      } else if (d.length() == 1) {
        s.append(d);
        s.append('0');
      } else {
        s.append(d.substring(0, 2));
      }
    }
    return s.toString();
  }

}

../jpetstore/src/WEB-INF/classes/com/ibatis/jpetstore/presentation/form/CartForm.java
package com.ibatis.jpetstore.presentation.form;

import com.ibatis.jpetstore.domain.*;
import org.apache.struts.action.*;

import javax.servlet.http.*;

public class CartForm extends BaseForm {

  private Cart cart = new Cart();
  private String workingItemId;

  public Cart getCart() {
    return cart;
  }

  public void setCart(Cart cart) {
    this.cart = cart;
  }

  public String getWorkingItemId() {
    return workingItemId;
  }

  public void setWorkingItemId(String workingItemId) {
    this.workingItemId = workingItemId;
  }

  public void reset(ActionMapping mapping, HttpServletRequest request) {
    super.reset(mapping, request);
    workingItemId = null;
  }
}

../jpetstore/src/WEB-INF/classes/com/ibatis/jpetstore/presentation/form/CategoryForm.java
package com.ibatis.jpetstore.presentation.form;

import com.ibatis.jpetstore.domain.*;

import java.util.*;

public class CategoryForm extends BaseForm {

  private String categoryId;
  private Category category;
  private List productList;

  public String getCategoryId() {
    return categoryId;
  }

  public void setCategoryId(String categoryId) {
    this.categoryId = categoryId;
  }

  public Category getCategory() {
    return category;
  }

  public void setCategory(Category category) {
    this.category = category;
  }

  public List getProductList() {
    return productList;
  }

  public void setProductList(List productList) {
    this.productList = productList;
  }

}

../jpetstore/src/WEB-INF/classes/com/ibatis/jpetstore/presentation/form/EmptyForm.java
package com.ibatis.jpetstore.presentation.form;

public class EmptyForm extends BaseForm {


}

../jpetstore/src/WEB-INF/classes/com/ibatis/jpetstore/presentation/form/ItemForm.java
package com.ibatis.jpetstore.presentation.form;

import com.ibatis.jpetstore.domain.*;

public class ItemForm extends BaseForm {

  private String itemId;
  private Product product;
  private Item item;

  public String getItemId() {
    return itemId;
  }

  public void setItemId(String itemId) {
    this.itemId = itemId;
  }

  public Product getProduct() {
    return product;
  }

  public void setProduct(Product product) {
    this.product = product;
  }

  public Item getItem() {
    return item;
  }

  public void setItem(Item item) {
    this.item = item;
  }

}

../jpetstore/src/WEB-INF/classes/com/ibatis/jpetstore/presentation/form/OrderForm.java
package com.ibatis.jpetstore.presentation.form;

import com.ibatis.jpetstore.domain.*;
import org.apache.struts.action.*;

import javax.servlet.http.*;
import java.util.*;

public class OrderForm extends BaseForm {

  private static final List CARD_TYPE_LIST = new ArrayList();

  private Order order;
  private boolean shippingAddressRequired;
  private boolean confirmed;
  private List cardTypeList;


  static {
    CARD_TYPE_LIST.add("Visa");
    CARD_TYPE_LIST.add("MasterCard");
    CARD_TYPE_LIST.add("American Express");
  }

  public OrderForm() {
    this.order = new Order();
    this.shippingAddressRequired = false;
    this.cardTypeList = CARD_TYPE_LIST;
    this.confirmed = false;
  }

  public boolean isConfirmed() {
    return confirmed;
  }

  public void setConfirmed(boolean confirmed) {
    this.confirmed = confirmed;
  }

  public Order getOrder() {
    return order;
  }

  public void setOrder(Order order) {
    this.order = order;
  }

  public boolean isShippingAddressRequired() {
    return shippingAddressRequired;
  }

  public void setShippingAddressRequired(boolean shippingAddressRequired) {
    this.shippingAddressRequired = shippingAddressRequired;
  }

  public void reset(ActionMapping mapping, HttpServletRequest request) {
    super.reset(mapping, request);
    shippingAddressRequired = false;

  }

  public List getCreditCardTypes() {
    return cardTypeList;
  }

  public ActionErrors validate(ActionMapping mapping, HttpServletRequest request) {
    ActionErrors errors = new ActionErrors();

    if (!this.isShippingAddressRequired()) {
      addErrorIfStringEmpty(errors, "order.error.creditCard.required", order.getCreditCard());
      addErrorIfStringEmpty(errors, "order.error.expiryDate.required", order.getExpiryDate());
      addErrorIfStringEmpty(errors, "order.error.cardType.required", order.getCardType());

      addErrorIfStringEmpty(errors, "order.error.shipToFirstName.required", order.getShipToFirstName());
      addErrorIfStringEmpty(errors, "order.error.shipToLastName.required", order.getShipToLastName());
      addErrorIfStringEmpty(errors, "order.error.shipAddress1.required", order.getShipAddress1());
      addErrorIfStringEmpty(errors, "order.error.shipCity.required", order.getShipCity());
      addErrorIfStringEmpty(errors, "order.error.shipState.required", order.getShipState());
      addErrorIfStringEmpty(errors, "order.error.shipZip.required", order.getShipZip());
      addErrorIfStringEmpty(errors, "order.error.shipCountry.required", order.getShipCountry());

      addErrorIfStringEmpty(errors, "order.error.billToFirstName.required", order.getBillToFirstName());
      addErrorIfStringEmpty(errors, "order.error.billToLastName.required", order.getBillToLastName());
      addErrorIfStringEmpty(errors, "order.error.billAddress1.required", order.getBillAddress1());
      addErrorIfStringEmpty(errors, "order.error.billCity.required", order.getBillCity());
      addErrorIfStringEmpty(errors, "order.error.billState.required", order.getBillState());
      addErrorIfStringEmpty(errors, "order.error.billZip.required", order.getBillZip());
      addErrorIfStringEmpty(errors, "order.error.billCountry.required", order.getBillCountry());
    }

    if (errors.size() > 0) {
      order.setBillAddress1(order.getShipAddress1());
      order.setBillAddress2(order.getShipAddress2());
      order.setBillToFirstName(order.getShipToFirstName());
      order.setBillToLastName(order.getShipToLastName());
      order.setBillCity(order.getShipCity());
      order.setBillCountry(order.getShipCountry());
      order.setBillState(order.getShipState());
      order.setBillZip(order.getShipZip());
    }

    return errors;
  }

}

../jpetstore/src/WEB-INF/classes/com/ibatis/jpetstore/presentation/form/ProductForm.java
package com.ibatis.jpetstore.presentation.form;

import com.ibatis.jpetstore.domain.*;

import java.util.*;

public class ProductForm extends BaseForm {

  private String productId;
  private Product product;
  private List itemList;

  public String getProductId() {
    return productId;
  }

  public void setProductId(String productId) {
    this.productId = productId;
  }

  public Product getProduct() {
    return product;
  }

  public void setProduct(Product product) {
    this.product = product;
  }

  public List getItemList() {
    return itemList;
  }

  public void setItemList(List itemList) {
    this.itemList = itemList;
  }


}

