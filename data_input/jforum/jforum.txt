['../jforum2-code/src/main/resources/templates/default/ajax_preview_post.js', '../jforum2-code/src/main/resources/templates/default/admin/ajax_is_post_indexed.js', '../jforum2-code/src/main/resources/templates/default/admin/ajax_test_mail.js', '../jforum2-code/src/main/resources/templates/default/admin/js/permission_control.js', '../jforum2-code/src/main/resources/templates/default/js/bbcode_help.js', '../jforum2-code/src/main/resources/templates/default/js/post.js', '../jforum2-code/src/main/resources/templates/default/js/attachments.js', '../jforum2-code/src/main/resources/templates/default/js/post_show.js', '../jforum2-code/src/main/resources/templates/default/js/clipboard.min.js', '../jforum2-code/src/main/resources/templates/default/js/rrssb.js', '../jforum2-code/src/main/resources/templates/default/js/pagination.js', '../jforum2-code/src/main/resources/templates/default/js/moderation.js', '../jforum2-code/src/main/resources/templates/default/js/prism.js', '../jforum2-code/src/main/resources/templates/default/js/karma.js', '../jforum2-code/src/main/resources/templates/default/js/utils.js', '../jforum2-code/src/main/java/net/jforum/SessionFacade.java', '../jforum2-code/src/main/java/net/jforum/HikariPooledConnection.java', '../jforum2-code/src/main/java/net/jforum/ControllerUtils.java', '../jforum2-code/src/main/java/net/jforum/JForumBaseServlet.java', '../jforum2-code/src/main/java/net/jforum/JForumExecutionContext.java', '../jforum2-code/src/main/java/net/jforum/ContextListener.java', '../jforum2-code/src/main/java/net/jforum/DBConnection.java', '../jforum2-code/src/main/java/net/jforum/SimpleConnection.java', '../jforum2-code/src/main/java/net/jforum/C3P0PooledConnection.java', '../jforum2-code/src/main/java/net/jforum/InstallServlet.java', '../jforum2-code/src/main/java/net/jforum/JForum.java', '../jforum2-code/src/main/java/net/jforum/UrlPatternCollection.java', '../jforum2-code/src/main/java/net/jforum/Command.java', '../jforum2-code/src/main/java/net/jforum/ForumStartup.java', '../jforum2-code/src/main/java/net/jforum/ConfigLoader.java', '../jforum2-code/src/main/java/net/jforum/DataSourceConnection.java', '../jforum2-code/src/main/java/net/jforum/ForumSessionListener.java', '../jforum2-code/src/main/java/net/jforum/PooledConnection.java', '../jforum2-code/src/main/java/net/jforum/UrlPattern.java', '../jforum2-code/src/main/java/net/jforum/view/forum/AjaxAction.java', '../jforum2-code/src/main/java/net/jforum/view/forum/RSSAction.java', '../jforum2-code/src/main/java/net/jforum/view/forum/BookmarkAction.java', '../jforum2-code/src/main/java/net/jforum/view/forum/RecentTopicsAction.java', '../jforum2-code/src/main/java/net/jforum/view/forum/TopDownloadsAction.java', '../jforum2-code/src/main/java/net/jforum/view/forum/CaptchaAction.java', '../jforum2-code/src/main/java/net/jforum/view/forum/SearchAction.java', '../jforum2-code/src/main/java/net/jforum/view/forum/UserAction.java', '../jforum2-code/src/main/java/net/jforum/view/forum/PostAction.java', '../jforum2-code/src/main/java/net/jforum/view/forum/HottestTopicsAction.java', '../jforum2-code/src/main/java/net/jforum/view/forum/PrivateMessageAction.java', '../jforum2-code/src/main/java/net/jforum/view/forum/ModerationHelper.java', '../jforum2-code/src/main/java/net/jforum/view/forum/ForumAction.java', '../jforum2-code/src/main/java/net/jforum/view/forum/BannerAction.java', '../jforum2-code/src/main/java/net/jforum/view/forum/KarmaAction.java', '../jforum2-code/src/main/java/net/jforum/view/forum/ModerationAction.java', '../jforum2-code/src/main/java/net/jforum/view/forum/JSAction.java', '../jforum2-code/src/main/java/net/jforum/view/forum/common/ViewCommon.java', '../jforum2-code/src/main/java/net/jforum/view/forum/common/UserCommon.java', '../jforum2-code/src/main/java/net/jforum/view/forum/common/UploadUtils.java', '../jforum2-code/src/main/java/net/jforum/view/forum/common/BannerCommon.java', '../jforum2-code/src/main/java/net/jforum/view/forum/common/TopicsCommon.java', '../jforum2-code/src/main/java/net/jforum/view/forum/common/ForumCommon.java', '../jforum2-code/src/main/java/net/jforum/view/forum/common/PostCommon.java', '../jforum2-code/src/main/java/net/jforum/view/forum/common/AttachmentCommon.java', '../jforum2-code/src/main/java/net/jforum/view/forum/common/PollCommon.java', '../jforum2-code/src/main/java/net/jforum/view/admin/PermissionProcessHelper.java', '../jforum2-code/src/main/java/net/jforum/view/admin/AttachmentsAction.java', '../jforum2-code/src/main/java/net/jforum/view/admin/GroupAction.java', '../jforum2-code/src/main/java/net/jforum/view/admin/ConfigAction.java', '../jforum2-code/src/main/java/net/jforum/view/admin/AdminAction.java', '../jforum2-code/src/main/java/net/jforum/view/admin/ForumAction.java', '../jforum2-code/src/main/java/net/jforum/view/admin/AdminCommand.java', '../jforum2-code/src/main/java/net/jforum/view/admin/RegEmailAction.java', '../jforum2-code/src/main/java/net/jforum/view/admin/CategoryAction.java', '../jforum2-code/src/main/java/net/jforum/view/admin/BannerAction.java', '../jforum2-code/src/main/java/net/jforum/view/admin/SmiliesAction.java', '../jforum2-code/src/main/java/net/jforum/view/admin/ModerationAction.java', '../jforum2-code/src/main/java/net/jforum/view/admin/BoardStatsAction.java', '../jforum2-code/src/main/java/net/jforum/view/admin/UserAction.java', '../jforum2-code/src/main/java/net/jforum/view/admin/BanlistAction.java', '../jforum2-code/src/main/java/net/jforum/view/admin/RankingAction.java', '../jforum2-code/src/main/java/net/jforum/view/admin/CacheAction.java', '../jforum2-code/src/main/java/net/jforum/view/admin/LuceneStatsAction.java', '../jforum2-code/src/main/java/net/jforum/view/admin/SpamBlockAction.java', '../jforum2-code/src/main/java/net/jforum/view/admin/common/ModerationCommon.java', '../jforum2-code/src/main/java/net/jforum/view/install/ParseDBStructFile.java', '../jforum2-code/src/main/java/net/jforum/view/install/ParseDBDumpFile.java', '../jforum2-code/src/main/java/net/jforum/view/install/InstallAction.java', '../jforum2-code/src/main/java/net/jforum/search/ContentSearchOperation.java', '../jforum2-code/src/main/java/net/jforum/search/SearchFacade.java', '../jforum2-code/src/main/java/net/jforum/search/SearchResult.java', '../jforum2-code/src/main/java/net/jforum/search/SearchPost.java', '../jforum2-code/src/main/java/net/jforum/search/LuceneReindexer.java', '../jforum2-code/src/main/java/net/jforum/search/NewMessagesSearchOperation.java', '../jforum2-code/src/main/java/net/jforum/search/SearchArgs.java', '../jforum2-code/src/main/java/net/jforum/search/PorterStandardAnalyzer.java', '../jforum2-code/src/main/java/net/jforum/search/LuceneManager.java', '../jforum2-code/src/main/java/net/jforum/search/SearchOperation.java', '../jforum2-code/src/main/java/net/jforum/search/SearchFields.java', '../jforum2-code/src/main/java/net/jforum/search/LuceneReindexArgs.java', '../jforum2-code/src/main/java/net/jforum/search/LuceneIndexer.java', '../jforum2-code/src/main/java/net/jforum/search/LuceneSearch.java', '../jforum2-code/src/main/java/net/jforum/search/LuceneContentCollector.java', '../jforum2-code/src/main/java/net/jforum/search/LuceneSettings.java', '../jforum2-code/src/main/java/net/jforum/search/NewDocumentAdded.java', '../jforum2-code/src/main/java/net/jforum/util/TopicTypeComparator.java', '../jforum2-code/src/main/java/net/jforum/util/MobileStatus.java', '../jforum2-code/src/main/java/net/jforum/util/FileMonitor.java', '../jforum2-code/src/main/java/net/jforum/util/BoundedLinkedHashMap.java', '../jforum2-code/src/main/java/net/jforum/util/DbUtils.java', '../jforum2-code/src/main/java/net/jforum/util/SafeHtml.java', '../jforum2-code/src/main/java/net/jforum/util/GroupNode.java', '../jforum2-code/src/main/java/net/jforum/util/CategoryOrderComparator.java', '../jforum2-code/src/main/java/net/jforum/util/URLNormalizer.java', '../jforum2-code/src/main/java/net/jforum/util/Captcha.java', '../jforum2-code/src/main/java/net/jforum/util/TreeGroup.java', '../jforum2-code/src/main/java/net/jforum/util/Hash.java', '../jforum2-code/src/main/java/net/jforum/util/FormSelectedData.java', '../jforum2-code/src/main/java/net/jforum/util/I18n.java', '../jforum2-code/src/main/java/net/jforum/util/ForumOrderComparator.java', '../jforum2-code/src/main/java/net/jforum/util/FileChangeListener.java', '../jforum2-code/src/main/java/net/jforum/util/bbcode/BBCodeHandler.java', '../jforum2-code/src/main/java/net/jforum/util/bbcode/JavaDocLink.java', '../jforum2-code/src/main/java/net/jforum/util/bbcode/BBCode.java', '../jforum2-code/src/main/java/net/jforum/util/bbcode/Substitution.java', '../jforum2-code/src/main/java/net/jforum/util/bbcode/PlainURLLink.java', '../jforum2-code/src/main/java/net/jforum/util/preferences/ConfigKeys.java', '../jforum2-code/src/main/java/net/jforum/util/preferences/QueriesFileListener.java', '../jforum2-code/src/main/java/net/jforum/util/preferences/SystemGlobals.java', '../jforum2-code/src/main/java/net/jforum/util/preferences/VariableStore.java', '../jforum2-code/src/main/java/net/jforum/util/preferences/TemplateKeys.java', '../jforum2-code/src/main/java/net/jforum/util/preferences/VariableExpander.java', '../jforum2-code/src/main/java/net/jforum/util/preferences/SystemGlobalsListener.java', '../jforum2-code/src/main/java/net/jforum/util/preferences/Preferences.java', '../jforum2-code/src/main/java/net/jforum/util/legacy/clickstream/BotChecker.java', '../jforum2-code/src/main/java/net/jforum/util/legacy/clickstream/ClickstreamFilter.java', '../jforum2-code/src/main/java/net/jforum/util/legacy/clickstream/config/ClickstreamConfig.java', '../jforum2-code/src/main/java/net/jforum/util/legacy/clickstream/config/ConfigLoader.java', '../jforum2-code/src/main/java/net/jforum/util/rss/UserPostsRSS.java', '../jforum2-code/src/main/java/net/jforum/util/rss/HottestTopicsRSS.java', '../jforum2-code/src/main/java/net/jforum/util/rss/RSSAware.java', '../jforum2-code/src/main/java/net/jforum/util/rss/RSS.java', '../jforum2-code/src/main/java/net/jforum/util/rss/RSSUtils.java', '../jforum2-code/src/main/java/net/jforum/util/rss/TopicRSS.java', '../jforum2-code/src/main/java/net/jforum/util/rss/RSSItem.java', '../jforum2-code/src/main/java/net/jforum/util/rss/RecentTopicsRSS.java', '../jforum2-code/src/main/java/net/jforum/util/rss/GenericRSS.java', '../jforum2-code/src/main/java/net/jforum/util/rss/TopicPostsRSS.java', '../jforum2-code/src/main/java/net/jforum/util/mail/ActivationKeySpammer.java', '../jforum2-code/src/main/java/net/jforum/util/mail/TopicReplySpammer.java', '../jforum2-code/src/main/java/net/jforum/util/mail/IdentifiableMimeMessage.java', '../jforum2-code/src/main/java/net/jforum/util/mail/PrivateMessageSpammer.java', '../jforum2-code/src/main/java/net/jforum/util/mail/MailChecker.java', '../jforum2-code/src/main/java/net/jforum/util/mail/ForumNewTopicSpammer.java', '../jforum2-code/src/main/java/net/jforum/util/mail/Spammer.java', '../jforum2-code/src/main/java/net/jforum/util/mail/LostPasswordSpammer.java', '../jforum2-code/src/main/java/net/jforum/util/mail/EmailSenderTask.java', '../jforum2-code/src/main/java/net/jforum/util/log/LoggerHelper.java', '../jforum2-code/src/main/java/net/jforum/util/stats/Stats.java', '../jforum2-code/src/main/java/net/jforum/util/stats/StatsEvent.java', '../jforum2-code/src/main/java/net/jforum/util/concurrent/Executor.java', '../jforum2-code/src/main/java/net/jforum/util/image/ImageUtils.java', '../jforum2-code/src/main/java/net/jforum/api/integration/mail/pop/POPConnector.java', '../jforum2-code/src/main/java/net/jforum/api/integration/mail/pop/MessageId.java', '../jforum2-code/src/main/java/net/jforum/api/integration/mail/pop/POPPostAction.java', '../jforum2-code/src/main/java/net/jforum/api/integration/mail/pop/POPListener.java', '../jforum2-code/src/main/java/net/jforum/api/integration/mail/pop/POPMessage.java', '../jforum2-code/src/main/java/net/jforum/api/integration/mail/pop/POPJobStarter.java', '../jforum2-code/src/main/java/net/jforum/api/integration/mail/pop/POPParser.java', '../jforum2-code/src/main/java/net/jforum/api/rest/RESTAuthentication.java', '../jforum2-code/src/main/java/net/jforum/api/rest/PostREST.java', '../jforum2-code/src/main/java/net/jforum/api/rest/UserREST.java', '../jforum2-code/src/main/java/net/jforum/context/SessionContext.java', '../jforum2-code/src/main/java/net/jforum/context/RequestContext.java', '../jforum2-code/src/main/java/net/jforum/context/JForumContext.java', '../jforum2-code/src/main/java/net/jforum/context/ResponseContext.java', '../jforum2-code/src/main/java/net/jforum/context/ForumContext.java', '../jforum2-code/src/main/java/net/jforum/context/web/WebResponseContext.java', '../jforum2-code/src/main/java/net/jforum/context/web/WebSessionContext.java', '../jforum2-code/src/main/java/net/jforum/context/web/WebRequestContext.java', '../jforum2-code/src/main/java/net/jforum/context/standard/StandardRequestContext.java', '../jforum2-code/src/main/java/net/jforum/context/standard/StandardSessionContext.java', '../jforum2-code/src/main/java/net/jforum/dao/UserDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/PrivateMessageDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/DBVersionWorkarounder.java', '../jforum2-code/src/main/java/net/jforum/dao/TopicDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/ConfigDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/SpamDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/BanlistDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/GroupDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/MailIntegrationDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/AttachmentDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/CategoryDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/LuceneDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/PollDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/TreeGroupDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/RankingDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/RegEmailDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/UserSessionDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/SqlServerVersionWorkarounder.java', '../jforum2-code/src/main/java/net/jforum/dao/ApiDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/BookmarkDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/KarmaDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/ModerationLogDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/SummaryDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/DataAccessDriver.java', '../jforum2-code/src/main/java/net/jforum/dao/ForumDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/MySQLVersionWorkarounder.java', '../jforum2-code/src/main/java/net/jforum/dao/PostDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/BannerDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/GroupSecurityDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/ModerationDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/SmilieDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/generic/GenericRegEmailDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/generic/GenericBookmarkDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/generic/GenericGroupDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/generic/GenericModerationDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/generic/GenericRankingDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/generic/GenericTreeGroupDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/generic/AutoKeys.java', '../jforum2-code/src/main/java/net/jforum/dao/generic/GenericTopicDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/generic/GenericDataAccessDriver.java', '../jforum2-code/src/main/java/net/jforum/dao/generic/GenericBannerDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/generic/GenericAttachmentDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/generic/GenericCategoryDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/generic/GenericKarmaDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/generic/GenericModerationLogDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/generic/GenericSmilieDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/generic/GenericUserSessionDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/generic/GenericUserDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/generic/GenericBanlistDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/generic/GenericConfigDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/generic/GenericLuceneDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/generic/GenericForumDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/generic/GenericMailIntegrationDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/generic/GenericPostDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/generic/GenericSpamDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/generic/GenericApiDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/generic/GenericPrivateMessageDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/generic/GenericSummaryDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/generic/GenericPollDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/generic/security/GenericGroupSecurityDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/generic/security/SecurityCommon.java', '../jforum2-code/src/main/java/net/jforum/dao/sqlserver/SqlServerTopicDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/sqlserver/SqlServer2000TopicDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/sqlserver/SqlServer2000DataAccessDriver.java', '../jforum2-code/src/main/java/net/jforum/dao/sqlserver/SqlServerKarmaDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/sqlserver/SqlServer2000ModerationLogDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/sqlserver/SqlServer2000UserDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/sqlserver/SqlServerPostDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/sqlserver/SqlServerModerationLogDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/sqlserver/SqlServer2000PostDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/sqlserver/SqlServerDataAccessDriver.java', '../jforum2-code/src/main/java/net/jforum/dao/sqlserver/SqlServerUserDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/oracle/OracleTopicDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/oracle/OracleDataAccessDriver.java', '../jforum2-code/src/main/java/net/jforum/dao/oracle/OraclePrivateMessageDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/oracle/OracleModerationLogDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/oracle/OraclePostDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/oracle/OracleUtils.java', '../jforum2-code/src/main/java/net/jforum/dao/oracle/OracleModerationDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/oracle/OracleUserDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/oracle/OracleLuceneDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/oracle/OracleSummaryDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/hsqldb/HsqldbPrivateMessageDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/hsqldb/HsqldbUserDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/hsqldb/HsqldbTopicDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/hsqldb/HsqldbPostDAO.java', '../jforum2-code/src/main/java/net/jforum/dao/hsqldb/HsqldbDataAccessDriver.java', '../jforum2-code/src/main/java/net/jforum/dao/mysql/MysqlDataAccessDriver.java', '../jforum2-code/src/main/java/net/jforum/dao/postgresql/PostgresqlDataAccessDriver.java', '../jforum2-code/src/main/java/net/jforum/entities/ModerationPendingInfo.java', '../jforum2-code/src/main/java/net/jforum/entities/TopicModerationInfo.java', '../jforum2-code/src/main/java/net/jforum/entities/Attachment.java', '../jforum2-code/src/main/java/net/jforum/entities/PollOption.java', '../jforum2-code/src/main/java/net/jforum/entities/UserSession.java', '../jforum2-code/src/main/java/net/jforum/entities/ModerationLog.java', '../jforum2-code/src/main/java/net/jforum/entities/PrivateMessage.java', '../jforum2-code/src/main/java/net/jforum/entities/LastPostInfo.java', '../jforum2-code/src/main/java/net/jforum/entities/MailIntegration.java', '../jforum2-code/src/main/java/net/jforum/entities/Group.java', '../jforum2-code/src/main/java/net/jforum/entities/Bookmark.java', '../jforum2-code/src/main/java/net/jforum/entities/Banlist.java', '../jforum2-code/src/main/java/net/jforum/entities/ForumModerationInfo.java', '../jforum2-code/src/main/java/net/jforum/entities/AttachmentExtension.java', '../jforum2-code/src/main/java/net/jforum/entities/Category.java', '../jforum2-code/src/main/java/net/jforum/entities/PollChanges.java', '../jforum2-code/src/main/java/net/jforum/entities/QuotaLimit.java', '../jforum2-code/src/main/java/net/jforum/entities/Poll.java', '../jforum2-code/src/main/java/net/jforum/entities/Post.java', '../jforum2-code/src/main/java/net/jforum/entities/Forum.java', '../jforum2-code/src/main/java/net/jforum/entities/AttachmentInfo.java', '../jforum2-code/src/main/java/net/jforum/entities/TopDownloadInfo.java', '../jforum2-code/src/main/java/net/jforum/entities/BookmarkType.java', '../jforum2-code/src/main/java/net/jforum/entities/KarmaStatus.java', '../jforum2-code/src/main/java/net/jforum/entities/User.java', '../jforum2-code/src/main/java/net/jforum/entities/Topic.java', '../jforum2-code/src/main/java/net/jforum/entities/Banner.java', '../jforum2-code/src/main/java/net/jforum/entities/Ranking.java', '../jforum2-code/src/main/java/net/jforum/entities/PrivateMessageType.java', '../jforum2-code/src/main/java/net/jforum/entities/AttachmentExtensionGroup.java', '../jforum2-code/src/main/java/net/jforum/entities/Karma.java', '../jforum2-code/src/main/java/net/jforum/entities/ForumStats.java', '../jforum2-code/src/main/java/net/jforum/entities/Smilie.java', '../jforum2-code/src/main/java/net/jforum/entities/Config.java', '../jforum2-code/src/main/java/net/jforum/entities/ModeratorInfo.java', '../jforum2-code/src/main/java/net/jforum/repository/TopicRepository.java', '../jforum2-code/src/main/java/net/jforum/repository/PostRepository.java', '../jforum2-code/src/main/java/net/jforum/repository/ForumRepository.java', '../jforum2-code/src/main/java/net/jforum/repository/ModulesRepository.java', '../jforum2-code/src/main/java/net/jforum/repository/BanlistRepository.java', '../jforum2-code/src/main/java/net/jforum/repository/RegEmailRepository.java', '../jforum2-code/src/main/java/net/jforum/repository/Tpl.java', '../jforum2-code/src/main/java/net/jforum/repository/RolesRepository.java', '../jforum2-code/src/main/java/net/jforum/repository/BBCodeRepository.java', '../jforum2-code/src/main/java/net/jforum/repository/RankingRepository.java', '../jforum2-code/src/main/java/net/jforum/repository/SmiliesRepository.java', '../jforum2-code/src/main/java/net/jforum/repository/SecurityRepository.java', '../jforum2-code/src/main/java/net/jforum/repository/SpamRepository.java', '../jforum2-code/src/main/java/net/jforum/security/SecurityConstants.java', '../jforum2-code/src/main/java/net/jforum/security/Role.java', '../jforum2-code/src/main/java/net/jforum/security/PermissionControl.java', '../jforum2-code/src/main/java/net/jforum/security/RoleCollection.java', '../jforum2-code/src/main/java/net/jforum/security/StopForumSpam.java', '../jforum2-code/src/main/java/net/jforum/security/PermissionItem.java', '../jforum2-code/src/main/java/net/jforum/security/PermissionSection.java', '../jforum2-code/src/main/java/net/jforum/security/RoleValue.java', '../jforum2-code/src/main/java/net/jforum/security/XMLPermissionControl.java', '../jforum2-code/src/main/java/net/jforum/security/RoleValueCollection.java', '../jforum2-code/src/main/java/net/jforum/csrf/CsrfListener.java', '../jforum2-code/src/main/java/net/jforum/csrf/CsrfHttpServletRequestWrapper.java', '../jforum2-code/src/main/java/net/jforum/csrf/CsrfFilter.java', '../jforum2-code/src/main/java/net/jforum/csrf/CsrfLogger.java', '../jforum2-code/src/main/java/net/jforum/sso/SSOUtils.java', '../jforum2-code/src/main/java/net/jforum/sso/RemoteUserSSO.java', '../jforum2-code/src/main/java/net/jforum/sso/LDAPAuthenticator.java', '../jforum2-code/src/main/java/net/jforum/sso/SSO.java', '../jforum2-code/src/main/java/net/jforum/sso/DefaultLoginAuthenticator.java', '../jforum2-code/src/main/java/net/jforum/sso/LoginAuthenticator.java', '../jforum2-code/src/main/java/net/jforum/sso/CookieUserSSO.java', '../jforum2-code/src/main/java/net/jforum/cache/EhCacheEngine.java', '../jforum2-code/src/main/java/net/jforum/cache/CacheEngine.java', '../jforum2-code/src/main/java/net/jforum/cache/DefaultCacheEngine.java', '../jforum2-code/src/main/java/net/jforum/cache/JBossCacheListener.java', '../jforum2-code/src/main/java/net/jforum/cache/JForumTransactionManagerLookup.java', '../jforum2-code/src/main/java/net/jforum/cache/JBossCacheEngine.java', '../jforum2-code/src/main/java/net/jforum/cache/Cacheable.java', '../jforum2-code/src/main/java/net/jforum/summary/SummaryJob.java', '../jforum2-code/src/main/java/net/jforum/summary/SummaryScheduler.java', '../jforum2-code/src/main/java/net/jforum/summary/SummaryModel.java', '../jforum2-code/src/main/java/net/jforum/exceptions/AttachmentException.java', '../jforum2-code/src/main/java/net/jforum/exceptions/CacheException.java', '../jforum2-code/src/main/java/net/jforum/exceptions/ForumException.java', '../jforum2-code/src/main/java/net/jforum/exceptions/APIException.java', '../jforum2-code/src/main/java/net/jforum/exceptions/CacheEngineStartupException.java', '../jforum2-code/src/main/java/net/jforum/exceptions/DatabaseException.java', '../jforum2-code/src/main/java/net/jforum/exceptions/ExceptionWriter.java', '../jforum2-code/src/main/java/net/jforum/exceptions/BadExtensionException.java', '../jforum2-code/src/main/java/net/jforum/exceptions/ConfigLoadException.java', '../jforum2-code/src/main/java/net/jforum/exceptions/MailException.java', '../jforum2-code/src/main/java/net/jforum/exceptions/SearchException.java', '../jforum2-code/src/main/java/net/jforum/exceptions/TemplateNotFoundException.java', '../jforum2-code/src/main/java/net/jforum/exceptions/InvalidBookmarkTypeException.java', '../jforum2-code/src/main/java/net/jforum/exceptions/RepositoryStartupException.java', '../jforum2-code/src/main/java/net/jforum/exceptions/SmiliesLoadException.java', '../jforum2-code/src/main/java/net/jforum/exceptions/AttachmentSizeTooBigException.java', '../jforum2-code/src/main/java/net/jforum/exceptions/CategoryNotFoundException.java', '../jforum2-code/src/main/java/net/jforum/exceptions/ForumOrderChangedException.java', '../jforum2-code/src/main/java/net/jforum/exceptions/MultipartHandlingException.java', '../jforum2-code/src/main/java/net/jforum/exceptions/SearchInstantiationException.java', '../jforum2-code/src/main/java/net/jforum/exceptions/ForumStartupException.java', '../jforum2-code/src/main/java/net/jforum/exceptions/RankingLoadException.java', '../jforum2-code/src/main/java/net/jforum/exceptions/SecurityLoadException.java']
Found 368 source code files:
../jforum2-code/src/main/resources/templates/default/ajax_preview_post.js
$("#previewSubject").html("${post.subject?html}");
$("#previewMessage").html("${post.text}");
$("#previewTable").show();

//Prism.highlightAll();
// This inlines everything: Using the Keep Markup plugin according to
// https://github.com/PrismJS/prism/issues/832 did not solve the issue, as now the linenumbers are out of whack.

var s = document.location.toString();
var index = s.indexOf("#preview");

if (index > -1) {
	s = s.substring(0, index);
}

document.location = s + "#preview";


../jforum2-code/src/main/resources/templates/default/admin/ajax_is_post_indexed.js
<#if !doc?exists>
	alert("${I18n.getMessage("No")}");
<#else>
	var message = "Post ID: ${doc.get("post.id")}\n";
	message += "Topic ID: ${doc.get("topic.id")}\n";

	var date = new Date(${doc.get("date")});
	var month = 1 + date.getMonth();
	if (month < 10)
		month = "0" + month;
	var day = date.getDate();
	if (day < 10)
		day = "0" + day;
	var hours = date.getHours();
	if (hours < 10)
		hours = "0" + hours;
	var minutes = date.getMinutes();
	if (minutes < 10)
		minutes = "0" + minutes;
	var seconds = date.getSeconds();
	if (seconds < 10)
		seconds = "0" + seconds;
	var date2 = date.getFullYear() + "/" + month + "/" + day + " " + hours + ":" + minutes + ":" + seconds;

	alert(message + "Date (yyyy/MM/dd HH:mm:ss): " + date2);
</#if>

../jforum2-code/src/main/resources/templates/default/admin/ajax_test_mail.js
$("#mailButton").val("${I18n.getMessage("Config.Form.SmtpTest")}").removeAttr("disabled");

<#if status != "OK">
	alert("${I18n.getMessage("Config.Form.SmtpTestFail")}: \n ${status}");
<#else>
	alert("${I18n.getMessage("Config.Form.SmtpTestSuccess")}");
</#if>

../jforum2-code/src/main/resources/templates/default/admin/js/permission_control.js
function checkThisField(fieldName)
{
	if (fieldName.options[0].selected) {
		for (i = 1; i < fieldName.length; i++) {
			fieldName.options[i].selected = false;
		}
	}
	else {
		fieldName.options[0].selected = false;
	}

	if (fieldName.selectedIndex == -1) {
		fieldName.options[0].selected = true;
	}
}

function validateSelectFields()
{
	form = document.form1;
	
	for (i = 0; i < form.length; i++) {
		if ((form.elements[i].type == "select-multiple") && (form.elements[i].selectedIndex == -1)) {
			form.elements[i].options[0].selected = true;
		}
	}

	return false;
}
../jforum2-code/src/main/resources/templates/default/js/bbcode_help.js
// Helpline messages
b_help = "${I18n.getMessage("PostForm.helplineBoldText")}: [b]${I18n.getMessage("PostForm.helplineText")}[/b]  (alt+b)";
i_help = "${I18n.getMessage("PostForm.helplineItalicText")}: [i]${I18n.getMessage("PostForm.helplineText")}[/i]  (alt+i)";
u_help = "${I18n.getMessage("PostForm.helplineUnderlineText")}: [u]${I18n.getMessage("PostForm.helplineText")}[/u]  (alt+u)";
t_help = "${I18n.getMessage("PostForm.helplineTeletypeText")}: [tt]${I18n.getMessage("PostForm.helplineText")}[/tt]";
st_help = "${I18n.getMessage("PostForm.helplineStrikeText")}: [strike]${I18n.getMessage("PostForm.helplineText")}[/strike]";
q_help = "${I18n.getMessage("PostForm.helplineQuote")}: [quote]${I18n.getMessage("PostForm.helplineText")}[/quote]  (alt+q)";
c_help = "${I18n.getMessage("PostForm.helplineCode")}: [code]${I18n.getMessage("PostForm.helplineCode")}[/code]  (alt+c)";
l_help = "${I18n.getMessage("PostForm.helplineList")}: [list]${I18n.getMessage("PostForm.helplineText")}[/list] (alt+l)";
p_help = "${I18n.getMessage("PostForm.helplineInsertImage")}: [img]http://wwww.xxxx.com/img.ext[/img]  (alt+p)";
w_help = "${I18n.getMessage("PostForm.helplineInsertUrl")}: [url]http://url[/url] / [url=http://url]${I18n.getMessage("PostForm.helplineUrlDescription")}[/url]  (alt+w)";
a_help = "${I18n.getMessage("PostForm.helplineCloseAllMarks")}";
s_help = "${I18n.getMessage("PostForm.helplineColor")}: [color=red]${I18n.getMessage("PostForm.helplineText")}[/color]  ${I18n.getMessage("PostForm.helplineColorTip")} color=#FF0000";
f_help = "${I18n.getMessage("PostForm.helplineFont")}: [size=x-small]${I18n.getMessage("PostForm.helplineSmallText")}[/size]";
g_help = "Google: [google]${I18n.getMessage("PostForm.helplineGoogle")}[/google]";
d_help = "Wikipedia: [wikipedia]${I18n.getMessage("PostForm.helplineWikipedia")}[/wikipedia]";
y_help = "Youtube: [youtube]${I18n.getMessage("PostForm.helplineYoutube")}[/youtube]";
k_help = "Flash: [flash]${I18n.getMessage("PostForm.helplineFlash")}[/flash]";
v_help = "WMV: [wmv]${I18n.getMessage("PostForm.helplineWmv")}[/wmv]";
m_help = "Vimeo: [vimeo]${I18n.getMessage("PostForm.helplineVimeo")}[/vimeo]";
r_help = "${I18n.getMessage("PostForm.helplineHR")}: [hr] (alt+r)";

../jforum2-code/src/main/resources/templates/default/js/post.js
// bbCode control by
// subBlue design
// www.subBlue.com
var imageTag = false;
var theSelection = false;
var pollOptionCount = -1;

var clientPC = navigator.userAgent.toLowerCase(); // Get client info
var clientVer = parseInt(navigator.appVersion); // Get browser version

var is_ie = ((clientPC.indexOf("msie") != -1) && (clientPC.indexOf("opera") == -1));
var is_nav  = ((clientPC.indexOf('mozilla')!=-1) && (clientPC.indexOf('spoofer')==-1)
	&& (clientPC.indexOf('compatible') == -1) && (clientPC.indexOf('opera')==-1)
	&& (clientPC.indexOf('webtv')==-1) && (clientPC.indexOf('hotjava')==-1));

var is_win   = ((clientPC.indexOf("win")!=-1) || (clientPC.indexOf("16bit") != -1));
var is_mac    = (clientPC.indexOf("mac")!=-1);

// Define the bbCode tags
bbcode = new Array();
bbtags = new Array('[b]','[/b]', '[i]','[/i]', '[u]','[/u]', '[quote]','[/quote]', '[code]','[/code]',
	'[list]','[/list]', '[img]','[/img]', '[url]','[/url]', '[google]','[/google]', '[youtube]','[/youtube]', 
	'[flash]','[/flash]', '[wmv]','[/wmv]', '[tt]','[/tt]', '[strike]','[/strike]', '[wikipedia]','[/wikipedia]',
	'[vimeo]', '[/vimeo]', '[hr]', '', '[color]', '[/color]', '[size]', '[/size]');
imageTag = false;

var openBBtags = new Array();

function tmOpenTag(eltag) {
   if (bbtags[eltag+1] != '') {
      openBBtags[openBBtags.length] = eltag;
      //Add '*' in the button's text:
      eval('document.post.addbbcode'+eltag+'.value += "*"');
   }
}

function tmQuitTag(eltag) {
   for (i = 0; i < openBBtags.length; i++) {
      if (openBBtags[i] == eltag) {
         openBBtags.splice(i, 1);
         //Remove '*' from the button's text:
         buttext = eval('document.post.addbbcode' + eltag + '.value');
         eval('document.post.addbbcode' + eltag + '.value ="' + buttext.substr(0,(buttext.length - 1)) + '"');
      }
   }
}

function tmIsTagOpen(eltag) {
   var tag = 0;
   for (i = 0; i < openBBtags.length; i++) {
      if (openBBtags[i] == eltag) { tag++; }
   }
   if (tag > 0) { return true;   } else { return false; }
}

function tmCloseTags() {
   var count = openBBtags.length;
   for (n = 0; n < count; n++) { bbstyle(openBBtags[openBBtags.length - 1]); }
}

// Shows the help messages in the helpline window
function helpline(help) {
   document.post.helpbox.value = eval(help + "_help");
}


// Replacement for arrayname.length property
function getarraysize(thearray) {
	for (i = 0; i < thearray.length; i++) {
		if ((thearray[i] == "undefined") || (thearray[i] == "") || (thearray[i] == null))
			return i;
		}
	return thearray.length;
}

// Replacement for arrayname.push(value) not implemented in IE until version 5.5
// Appends element to the array
function arraypush(thearray,value) {
	thearray[ getarraysize(thearray) ] = value;
}

// Replacement for arrayname.pop() not implemented in IE until version 5.5
// Removes and returns the last element of an array
function arraypop(thearray) {
	thearraysize = getarraysize(thearray);
	retval = thearray[thearraysize - 1];
	delete thearray[thearraysize - 1];
	return retval;
}

function bbplace(text) {
    var txtarea = document.post.message;
    if (txtarea.createTextRange && txtarea.caretPos) {
        var caretPos = txtarea.caretPos;
        caretPos.text = caretPos.text.charAt(caretPos.text.length - 1) == ' ' ? caretPos.text + text + ' ' : caretPos.text + text;
        txtarea.focus();
    } else if (txtarea.selectionStart || txtarea.selectionStart == '0') {
        var startPos = txtarea.selectionStart;
        var endPos = txtarea.selectionEnd;
        txtarea.value = txtarea.value.substring(0, startPos)
                      + text
                      + txtarea.value.substring(endPos, txtarea.value.length);
        txtarea.focus();
        txtarea.selectionStart = startPos + text.length;
        txtarea.selectionEnd = startPos + text.length;
    } else {
        txtarea.value  += text;
        txtarea.focus();
    }
}

function emoticon(text) {
   text = ' ' + text;
   bbfontstyle(text,'');
   return;
}

function bbfontstyle(bbopen,bbclose) {
    var txtarea = document.post.message;

    //IE
    if (document.selection) { 
        txtarea.focus();
        sel = document.selection.createRange();
        if (sel.text.length > 0) {
        	sel.text = bbopen+sel.text+bbclose;
        }
    }
    //Mozilla-Netscape
    else if (txtarea.selectionStart || txtarea.selectionStart == '0') {
        var startPos = txtarea.selectionStart;
        var endPos = txtarea.selectionEnd;
        var cursorPos = endPos;
        var scrollTop = txtarea.scrollTop;

        if (startPos != endPos) {
            txtarea.value = txtarea.value.substring(0, startPos)
                 + bbopen
                 + txtarea.value.substring(startPos, endPos)
                 + bbclose
                 + txtarea.value.substring(endPos, txtarea.value.length);
            cursorPos += bbopen.length + bbclose.length;
        } else {
            txtarea.value = txtarea.value.substring(0, startPos)
                  + bbopen+' '+bbclose
                  + txtarea.value.substring(endPos, txtarea.value.length);
            cursorPos = startPos + bbopen.length+bbclose.length+1;
        }
        txtarea.focus();
        txtarea.selectionStart = cursorPos;
        txtarea.selectionEnd = cursorPos;
        txtarea.scrollTop = scrollTop;
    }
    else {   
        txtarea.value += bbopen+' '+bbclose;
        txtarea.focus();
    }
}

function bbstyle(eltag) {
   var txtarea = document.post.message;

   if (eltag == -1) { tmCloseTags(); return; }

      if (!tmIsTagOpen(eltag) || bbtags[eltag+1] == '') {
			if (eltag == 8) {
				// special case for the CODE tag
				var select = document.getElementById("languageSelect");
				var language = select.options[select.selectedIndex].value;	
				if (language != "plain") {
					txtarea.value += "[code=" + language + "]";
				} else {
					txtarea.value += bbtags[eltag];
				}
			} else {
				txtarea.value += bbtags[eltag];
			}
         tmOpenTag(eltag);
      }
      else {
         txtarea.value += bbtags[eltag+1];
         tmQuitTag(eltag);
      }
      txtarea.focus();
}

function getOpeningTag (eltag) {
	// special case for the CODE tag
	if (eltag == 8) {
		var select = document.getElementById("languageSelect");
		var language = select.options[select.selectedIndex].value;	
		if (language != "plain") {
			return "[code=" + language + "]";
		}
	}
	return bbtags[eltag];
}

function bbstyle(eltag) {
   var txtarea = document.post.message;

   if (eltag == -1) { tmCloseTags(); return; }

   //IE
   if (document.selection) {
       txtarea.focus();
       sel = document.selection.createRange();
      if (sel.text.length > 0) { sel.text = getOpeningTag(eltag) + sel.text + bbtags[eltag+1]; }
      else {
            if (!tmIsTagOpen(eltag) || bbtags[eltag+1] == '') {
				sel.text = getOpeningTag(eltag);
				tmOpenTag(eltag);
          }
          else {
               sel.text = bbtags[eltag+1];
               tmQuitTag(eltag);
               }
      }
      txtarea.focus();
   }
   //Mozilla-Netscape
   else if (txtarea.selectionStart || txtarea.selectionStart == '0') {
      var startPos = txtarea.selectionStart;
      var endPos = txtarea.selectionEnd;
      var cursorPos = endPos;
      var scrollTop = txtarea.scrollTop;

      if (startPos != endPos) {
         txtarea.value = txtarea.value.substring(0, startPos)
                       + getOpeningTag(eltag)
                       + txtarea.value.substring(startPos, endPos)
                       + bbtags[eltag+1]
                       + txtarea.value.substring(endPos, txtarea.value.length);
         cursorPos += getOpeningTag(eltag).length + bbtags[eltag+1].length;
      }
      else {
         if (!tmIsTagOpen(eltag) || bbtags[eltag+1] == '') {
            txtarea.value = txtarea.value.substring(0, startPos)
                          + getOpeningTag(eltag)
                          + txtarea.value.substring(endPos, txtarea.value.length);
            tmOpenTag(eltag);
            cursorPos = startPos + getOpeningTag(eltag).length;
         }
         else {
            txtarea.value = txtarea.value.substring(0, startPos)
                          + bbtags[eltag+1]
                          + txtarea.value.substring(endPos, txtarea.value.length);
            tmQuitTag(eltag);
            cursorPos = startPos + bbtags[eltag+1].length;
         }
      }
      txtarea.focus();
      txtarea.selectionStart = cursorPos;
      txtarea.selectionEnd = cursorPos;
      txtarea.scrollTop = scrollTop;
   }
   else {
      if (!tmIsTagOpen(eltag) || bbtags[eltag+1] == '') {
         txtarea.value += getOpeningTag(eltag);
         tmOpenTag(eltag);
      }
      else {
         txtarea.value += bbtags[eltag+1];
         tmQuitTag(eltag);
      }
      txtarea.focus();
   }
}

// Insert at Claret position. Code from
// http://www.faqts.com/knowledge_base/view.phtml/aid/1052/fid/130
function storeCaret(textEl) {
	if (textEl.createTextRange) textEl.caretPos = document.selection.createRange().duplicate();
}

// Depends of jquery.js
function previewMessage()
{
	var f = document.post;

	var p = { 
		text:f.message.value, 
		subject:f.subject.value, 
		html:!f.disable_html.checked, 
		bbcode:!f.disable_bbcode.checked, 
		smilies:!f.disable_smilies.checked 
	};

	$.ajax({
		type:"POST",
		url:CONTEXTPATH + "/ajax/previewPost" + SERVLET_EXTENSION,
		data:p,
		dataType:"script",
		global:false
	});
}

function incrementPollOptionCount()
{
	pollOptionCount++;
	document.getElementById("pollOptionCount").value = pollOptionCount;
}

function initPollOptionCount()
{
	if (pollOptionCount == -1) {
		var countField = document.getElementById("pollOptionCount");
		
		if (countField != null) {
			pollOptionCount = parseInt(countField.value);
		} 
		else {
			pollOptionCount = 1;
		}
	}
}

function deletePollOption(button)
{
	initPollOptionCount();
	
	var node = button.parentNode;
	while (node != null) {
		if (node.id == "pollOption") {
			node.parentNode.removeChild(node);
			break;
		}

		node = node.parentNode;
	}
}

function addPollOption()
{
	initPollOptionCount();
	incrementPollOptionCount();

	var addOption = document.getElementById("pollOptionWithAdd");
	var deleteOption = document.getElementById("pollOptionWithDelete");
	var newOption = deleteOption.cloneNode(true);
	
	if (is_nav) {
		newOption.style.display = "table-row";
	} 
	else {
		newOption.style.display = "block";
	}
	
	newOption.id = "pollOption";
	
	var newTextField = newOption.getElementsByTagName("input")[0];
	var addTextField = newOption.getElementsByTagName("input")[1];
	
	//copy the active text data to the inserted option
	newTextField.id = "pollOption" + pollOptionCount;
	newTextField.name = "poll_option_" + pollOptionCount;
	newTextField.value = "";
	
	//clear out the last text field and increment the id
	addTextField.id = "pollOption" + pollOptionCount;
	addTextField.name = "poll_option_" + pollOptionCount;
	
	addOption.parentNode.insertBefore(newOption, addOption);
	addTextField.focus();
}


function checkForm() {

   formErrors = false;

   if (document.post.message.value.length < 2) {
      formErrors = "You must enter a message when posting.";
   }

   if (formErrors) {
      alert(formErrors);
      return false;
   } else {
      bbstyle(-1);
      return true;
   }
}

function activateTab(name, currentLi)
{
	$("#tabs10 > ul > li").each(function() {
		var targetName = $(this).attr("title");
		var target = $("#" + targetName);

		if (target.length && name != targetName) {
			target.hide();
			$(this).removeClass("current");
		}
	});


	$("#" + name).show();
	$(currentLi).parent().addClass("current");
}

function limitURLSize()
{
	$(".snap_shots").each(function () {
		var value = $(this).text();
		
		if (value.length > 80) {
			$(this).text(value.substring(0, 50) + "..." + value.substring(value.length - 30));
		}
	});
}

../jforum2-code/src/main/resources/templates/default/js/attachments.js
var panelOpen = false;
var total = 0;
var ignoreStart = false;
var maxAttachments = ${maxAttachments?default(0)};
var counter = 0;

<#if attachmentsEnabled>
	var template = "<div id='attach_#counter#'><table width='100%' class='gensmall'><tr><td>${I18n.getMessage("Attachments.filename")}<\/td>";
	template += "<td><input type='file' size='50' name='file_#counter#' \/><\/td><\/tr>";
	template += "<tr><td>${I18n.getMessage("Attachments.description")}<\/td>";
	template += "<td><input type='text' name='comment_#counter#' size='50' \/>";
	template += "&nbsp;&nbsp;<a href='javascript:removeAttach(#counter#)' class='gensmall'>[${I18n.getMessage("Attachments.remove")}]<\/a><\/td><\/tr>";
	template += "<\/table><div style='border-top: 1px dashed #000;'>&nbsp;<\/div><\/div>";

	function addAttachmentFields()
	{
		if (counter < maxAttachments) {
			var s = template.replace(/#counter#/g, total);
			$("#attachmentFields").append(s);
			$("#total_files").val(++total);

			counter++;

			defineAttachmentButtonStatus();
		}
	}

	function removeAttach(index)
	{
		$("#attach_" + index).empty();
		counter--;
		defineAttachmentButtonStatus();
	}

	function defineAttachmentButtonStatus()
	{
		var disabled = !(counter < maxAttachments);
		document.post.add_attach.disabled = disabled;
		document.post.add_attach.style.color = disabled ? "#cccccc" : "#000000";
	}
</#if>

<#if attachments?exists>
	var templateEdit = "<table width='100%'><tr><td class='row2 gen'>${I18n.getMessage("Attachments.filename")}<\/td>";
	templateEdit += "<td class='row2 gen'>#name#<\/td><\/tr>";
	templateEdit += "<tr><td class='row2 gen'>${I18n.getMessage("Attachments.description")}<\/td>";
	templateEdit += "<td class='row2' valign='middle'><input type='text' size='50' name='edit_comment_#id#' value='#value#' \/>";
	templateEdit += "&nbsp;&nbsp;<span class='gensmall'><input type='checkbox' onclick='configureAttachDeletion(#id#, this);' \/>${I18n.getMessage("Attachments.remove")}<\/span><\/td><\/tr>";
	templateEdit += "<tr><td colspan='2' width='100%' class='row3'><\/td><\/tr><\/table>";
	
	function editAttachments()
	{
		var data = new Array();
		<#list attachments as a>
			var attach_${a.id} = new Array();

			attach_${a.id}["filename"] = "${a.info.realFilename}";
			attach_${a.id}["description"] = "${a.info.comment?html}";
			attach_${a.id}["id"] = "${a.id}";

			data.push(attach_${a.id});
		</#list>
		
		counter = data.length;
		<#if attachmentsEnabled>defineAttachmentButtonStatus();</#if>
		
		for (var i = 0; i < data.length; i++) {
			var a = data[i];
			var s = templateEdit.replace(/#value#/, a["description"]);
			s = s.replace(/#name#/, a["filename"]);
			s = s.replace(/#id#/g, a["id"]);

			var v = document.getElementById("edit_attach").innerHTML;
			v += s;
			document.getElementById("edit_attach").innerHTML = v;
			document.post.edit_attach_ids.value += a["id"] + ",";
		}
	}

	function configureAttachDeletion(id, f)
	{
		if (f.checked) {
			document.post.delete_attach.value += id + ",";
		}
		else {
			var p = document.post.delete_attach.value.split(",");
			document.post.delete_attach.value = "";
			for (var i = 0; i < p.length; i++) {
				if (p[i] != id) {
					document.post.delete_attach.value += p[i] + ",";
				}
			}
		}
	}
</#if>

../jforum2-code/src/main/resources/templates/default/js/post_show.js
function sendEmail(s1, s2)
{
	document.location = 'mailto:' + showEmail(s1, s2);
}

function handleBbCode(evt)
{
	var e = evt || window.event;
	var thisKey = e.which || e.keyCode;

	var ch = String.fromCharCode(thisKey).toLowerCase();
	
	if (e.altKey && ch == "b") {
		bbstyle(0);
	}
	else if (e.altKey && ch == "i") {
		bbstyle(2);
	}
	else if (e.altKey && ch == "u") {
		bbstyle(4);
	}
	else if (e.altKey && ch == "q") {
		bbstyle(6);
	}
	else if (e.altKey && ch == "c") {
		bbstyle(8);
	}
	else if (e.altKey && ch == "l") {
		bbstyle(10);
	}
	else if (e.altKey && ch == "p") {
		bbstyle(12);
	}
	else if (e.altKey && ch == "w") {
		bbstyle(14);
	}
	else if (e.altKey && ch == "r") {
		bbstyle(32);
	}
}

function enterText(field)
{
	storeCaret(field);
	document.onkeydown = handleBbCode;
}

function leaveText()
{
	document.onkeydown = null;
}

function selectCode(a)
{
	var e = a.parentNode.parentNode.getElementsByTagName('code')[0];

	if (document.selection) {
		var r = document.body.createTextRange();
		r.moveToElementText(e);
		r.select();
	}
	else {
		var s = window.getSelection();
		var r = document.createRange();
		r.setStartBefore(e);
		r.setEndAfter(e);
		s.addRange(r);
	}
}

../jforum2-code/src/main/resources/templates/default/js/clipboard.min.js
/*!
 * clipboard.js v2.0.4
 * https://zenorocha.github.io/clipboard.js
 * 
 * Licensed MIT © Zeno Rocha
 */
!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.ClipboardJS=e():t.ClipboardJS=e()}(this,function(){return function(n){var o={};function r(t){if(o[t])return o[t].exports;var e=o[t]={i:t,l:!1,exports:{}};return n[t].call(e.exports,e,e.exports,r),e.l=!0,e.exports}return r.m=n,r.c=o,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=0)}([function(t,e,n){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i=function(){function o(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}return function(t,e,n){return e&&o(t.prototype,e),n&&o(t,n),t}}(),a=o(n(1)),c=o(n(3)),u=o(n(4));function o(t){return t&&t.__esModule?t:{default:t}}var l=function(t){function o(t,e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,o);var n=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(o.__proto__||Object.getPrototypeOf(o)).call(this));return n.resolveOptions(e),n.listenClick(t),n}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(o,c.default),i(o,[{key:"resolveOptions",value:function(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{};this.action="function"==typeof t.action?t.action:this.defaultAction,this.target="function"==typeof t.target?t.target:this.defaultTarget,this.text="function"==typeof t.text?t.text:this.defaultText,this.container="object"===r(t.container)?t.container:document.body}},{key:"listenClick",value:function(t){var e=this;this.listener=(0,u.default)(t,"click",function(t){return e.onClick(t)})}},{key:"onClick",value:function(t){var e=t.delegateTarget||t.currentTarget;this.clipboardAction&&(this.clipboardAction=null),this.clipboardAction=new a.default({action:this.action(e),target:this.target(e),text:this.text(e),container:this.container,trigger:e,emitter:this})}},{key:"defaultAction",value:function(t){return s("action",t)}},{key:"defaultTarget",value:function(t){var e=s("target",t);if(e)return document.querySelector(e)}},{key:"defaultText",value:function(t){return s("text",t)}},{key:"destroy",value:function(){this.listener.destroy(),this.clipboardAction&&(this.clipboardAction.destroy(),this.clipboardAction=null)}}],[{key:"isSupported",value:function(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:["copy","cut"],e="string"==typeof t?[t]:t,n=!!document.queryCommandSupported;return e.forEach(function(t){n=n&&!!document.queryCommandSupported(t)}),n}}]),o}();function s(t,e){var n="data-clipboard-"+t;if(e.hasAttribute(n))return e.getAttribute(n)}t.exports=l},function(t,e,n){"use strict";var o,r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i=function(){function o(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}return function(t,e,n){return e&&o(t.prototype,e),n&&o(t,n),t}}(),a=n(2),c=(o=a)&&o.__esModule?o:{default:o};var u=function(){function e(t){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),this.resolveOptions(t),this.initSelection()}return i(e,[{key:"resolveOptions",value:function(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{};this.action=t.action,this.container=t.container,this.emitter=t.emitter,this.target=t.target,this.text=t.text,this.trigger=t.trigger,this.selectedText=""}},{key:"initSelection",value:function(){this.text?this.selectFake():this.target&&this.selectTarget()}},{key:"selectFake",value:function(){var t=this,e="rtl"==document.documentElement.getAttribute("dir");this.removeFake(),this.fakeHandlerCallback=function(){return t.removeFake()},this.fakeHandler=this.container.addEventListener("click",this.fakeHandlerCallback)||!0,this.fakeElem=document.createElement("textarea"),this.fakeElem.style.fontSize="12pt",this.fakeElem.style.border="0",this.fakeElem.style.padding="0",this.fakeElem.style.margin="0",this.fakeElem.style.position="absolute",this.fakeElem.style[e?"right":"left"]="-9999px";var n=window.pageYOffset||document.documentElement.scrollTop;this.fakeElem.style.top=n+"px",this.fakeElem.setAttribute("readonly",""),this.fakeElem.value=this.text,this.container.appendChild(this.fakeElem),this.selectedText=(0,c.default)(this.fakeElem),this.copyText()}},{key:"removeFake",value:function(){this.fakeHandler&&(this.container.removeEventListener("click",this.fakeHandlerCallback),this.fakeHandler=null,this.fakeHandlerCallback=null),this.fakeElem&&(this.container.removeChild(this.fakeElem),this.fakeElem=null)}},{key:"selectTarget",value:function(){this.selectedText=(0,c.default)(this.target),this.copyText()}},{key:"copyText",value:function(){var e=void 0;try{e=document.execCommand(this.action)}catch(t){e=!1}this.handleResult(e)}},{key:"handleResult",value:function(t){this.emitter.emit(t?"success":"error",{action:this.action,text:this.selectedText,trigger:this.trigger,clearSelection:this.clearSelection.bind(this)})}},{key:"clearSelection",value:function(){this.trigger&&this.trigger.focus(),window.getSelection().removeAllRanges()}},{key:"destroy",value:function(){this.removeFake()}},{key:"action",set:function(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:"copy";if(this._action=t,"copy"!==this._action&&"cut"!==this._action)throw new Error('Invalid "action" value, use either "copy" or "cut"')},get:function(){return this._action}},{key:"target",set:function(t){if(void 0!==t){if(!t||"object"!==(void 0===t?"undefined":r(t))||1!==t.nodeType)throw new Error('Invalid "target" value, use a valid Element');if("copy"===this.action&&t.hasAttribute("disabled"))throw new Error('Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute');if("cut"===this.action&&(t.hasAttribute("readonly")||t.hasAttribute("disabled")))throw new Error('Invalid "target" attribute. You can\'t cut text from elements with "readonly" or "disabled" attributes');this._target=t}},get:function(){return this._target}}]),e}();t.exports=u},function(t,e){t.exports=function(t){var e;if("SELECT"===t.nodeName)t.focus(),e=t.value;else if("INPUT"===t.nodeName||"TEXTAREA"===t.nodeName){var n=t.hasAttribute("readonly");n||t.setAttribute("readonly",""),t.select(),t.setSelectionRange(0,t.value.length),n||t.removeAttribute("readonly"),e=t.value}else{t.hasAttribute("contenteditable")&&t.focus();var o=window.getSelection(),r=document.createRange();r.selectNodeContents(t),o.removeAllRanges(),o.addRange(r),e=o.toString()}return e}},function(t,e){function n(){}n.prototype={on:function(t,e,n){var o=this.e||(this.e={});return(o[t]||(o[t]=[])).push({fn:e,ctx:n}),this},once:function(t,e,n){var o=this;function r(){o.off(t,r),e.apply(n,arguments)}return r._=e,this.on(t,r,n)},emit:function(t){for(var e=[].slice.call(arguments,1),n=((this.e||(this.e={}))[t]||[]).slice(),o=0,r=n.length;o<r;o++)n[o].fn.apply(n[o].ctx,e);return this},off:function(t,e){var n=this.e||(this.e={}),o=n[t],r=[];if(o&&e)for(var i=0,a=o.length;i<a;i++)o[i].fn!==e&&o[i].fn._!==e&&r.push(o[i]);return r.length?n[t]=r:delete n[t],this}},t.exports=n},function(t,e,n){var d=n(5),h=n(6);t.exports=function(t,e,n){if(!t&&!e&&!n)throw new Error("Missing required arguments");if(!d.string(e))throw new TypeError("Second argument must be a String");if(!d.fn(n))throw new TypeError("Third argument must be a Function");if(d.node(t))return s=e,f=n,(l=t).addEventListener(s,f),{destroy:function(){l.removeEventListener(s,f)}};if(d.nodeList(t))return a=t,c=e,u=n,Array.prototype.forEach.call(a,function(t){t.addEventListener(c,u)}),{destroy:function(){Array.prototype.forEach.call(a,function(t){t.removeEventListener(c,u)})}};if(d.string(t))return o=t,r=e,i=n,h(document.body,o,r,i);throw new TypeError("First argument must be a String, HTMLElement, HTMLCollection, or NodeList");var o,r,i,a,c,u,l,s,f}},function(t,n){n.node=function(t){return void 0!==t&&t instanceof HTMLElement&&1===t.nodeType},n.nodeList=function(t){var e=Object.prototype.toString.call(t);return void 0!==t&&("[object NodeList]"===e||"[object HTMLCollection]"===e)&&"length"in t&&(0===t.length||n.node(t[0]))},n.string=function(t){return"string"==typeof t||t instanceof String},n.fn=function(t){return"[object Function]"===Object.prototype.toString.call(t)}},function(t,e,n){var a=n(7);function i(t,e,n,o,r){var i=function(e,n,t,o){return function(t){t.delegateTarget=a(t.target,n),t.delegateTarget&&o.call(e,t)}}.apply(this,arguments);return t.addEventListener(n,i,r),{destroy:function(){t.removeEventListener(n,i,r)}}}t.exports=function(t,e,n,o,r){return"function"==typeof t.addEventListener?i.apply(null,arguments):"function"==typeof n?i.bind(null,document).apply(null,arguments):("string"==typeof t&&(t=document.querySelectorAll(t)),Array.prototype.map.call(t,function(t){return i(t,e,n,o,r)}))}},function(t,e){if("undefined"!=typeof Element&&!Element.prototype.matches){var n=Element.prototype;n.matches=n.matchesSelector||n.mozMatchesSelector||n.msMatchesSelector||n.oMatchesSelector||n.webkitMatchesSelector}t.exports=function(t,e){for(;t&&9!==t.nodeType;){if("function"==typeof t.matches&&t.matches(e))return t;t=t.parentNode}}}])});
../jforum2-code/src/main/resources/templates/default/js/rrssb.js

+(function(window, $, undefined) {
	'use strict';

	var support = {
		calc : false
	};

	 $.fn.rrssb = function( options ) {

		var settings = $.extend({
			description: undefined,
			emailAddress: undefined,
			emailBody: undefined,
			emailSubject: undefined,
			image: undefined,
			title: undefined,
			url: undefined
		}, options );

		settings.emailSubject = settings.emailSubject || settings.title;
		settings.emailBody = settings.emailBody ||
			(
				(settings.description ? settings.description : '') +
				(settings.url ? '\n\n' + settings.url : '')
			);

		for (var key in settings) {
			if (settings.hasOwnProperty(key) && settings[key] !== undefined) {
				settings[key] = encodeString(settings[key]);
			}
		};

		if (settings.url !== undefined) {
			$(this).find('.rrssb-facebook a').attr('href', 'https://www.facebook.com/sharer/sharer.php?u=' + settings.url);
			$(this).find('.rrssb-linkedin a').attr('href', 'http://www.linkedin.com/shareArticle?mini=true&url=' + settings.url + (settings.title !== undefined ? '&title=' + settings.title : ''));
			$(this).find('.rrssb-xing a').attr('href', 'https://www.xing.com/spi/shares/new?url=' + settings.url);
			$(this).find('.rrssb-twitter a').attr('href', 'https://twitter.com/intent/tweet?text=' + (settings.title !== undefined ? settings.title + '%20' : '') + settings.url);
			$(this).find('.rrssb-vk a').attr('href', 'https://vk.com/share.php?url=' + settings.url);
			$(this).find('.rrssb-reddit a').attr('href', 'http://www.reddit.com/submit?url=' + settings.url + (settings.title !== undefined ? '&title=' + settings.title : ''));
			$(this).find('.rrssb-googleplus a').attr('href', 'https://plus.google.com/share?url=' + settings.url);
			$(this).find('.rrssb-pocket a').attr('href', 'https://getpocket.com/save?url=' + settings.url);
			$(this).find('.rrssb-tumblr a').attr('href', 'http://tumblr.com/share/link?url=' + settings.url + (settings.title !== undefined ? '&name=' + settings.title : '')  + (settings.description !== undefined ? '&description=' + settings.description : ''));
			$(this).find('.rrssb-hackernews a').attr('href', 'https://news.ycombinator.com/submitlink?u=' + settings.url + (settings.title !== undefined ? '&text=' + settings.title : ''));
			$(this).find('.rrssb-whatsapp a').attr('href', 'whatsapp://send?text=' + (settings.description !== undefined ? settings.description + '%20' : (settings.title !== undefined ? settings.title + '%20' : '')) + settings.url);
			$(this).find('.rrssb-print a').attr('href', 'javascript:window.print()');
		}

		if (settings.emailAddress !== undefined || settings.emailSubject) {
			$(this).find('.rrssb-email a').attr('href', 'mailto:' + (settings.emailAddress ? settings.emailAddress : '') + '?' + (settings.emailSubject !== undefined ? 'subject=' + settings.emailSubject : '') + (settings.emailBody !== undefined ? '&body=' + settings.emailBody : ''));
		}
	};

	var detectCalcSupport = function(){
		var el = $('<div>');
		var calcProps = [
			'calc',
			'-webkit-calc',
			'-moz-calc'
		];

		$('body').append(el);

		for (var i=0; i < calcProps.length; i++) {
			el.css('width', calcProps[i] + '(1px)');
			if(el.width() === 1){
				support.calc = calcProps[i];
				break;
			}
		}

		el.remove();
	};

	var encodeString = function(string) {
		if (string !== undefined && string !== null) {
			if (string.match(/%[0-9a-f]{2}/i) !== null) {
				string = decodeURIComponent(string);
				encodeString(string);
			} else {
				return encodeURIComponent(string);
			}
		}
	};

	var setPercentBtns = function() {
		$('.rrssb-buttons').each(function(index) {
			var self = $(this);
			var buttons = $('li:visible', self);
			var numOfButtons = buttons.length;
			var initBtnWidth = 100 / numOfButtons;

			buttons.css('width', initBtnWidth + '%').attr('data-initwidth',initBtnWidth);
		});
	};

	var makeExtremityBtns = function() {
		$('.rrssb-buttons').each(function(index) {
			var self = $(this);
			var containerWidth = self.width();
			var buttonWidth = $('li', self).not('.small').eq(0).width();
			var buttonCountSmall = $('li.small', self).length;

			if (buttonWidth > 170 && buttonCountSmall < 1) {
				self.addClass('large-format');
				var fontSize = buttonWidth / 12 + 'px';
				self.css('font-size', fontSize);
			} else {
				self.removeClass('large-format');
				self.css('font-size', '');
			}

			if (containerWidth < buttonCountSmall * 25) {
				self.removeClass('small-format').addClass('tiny-format');
			} else {
				self.removeClass('tiny-format');
			}
		});
	};

	var backUpFromSmall = function() {
		$('.rrssb-buttons').each(function(index) {
			var self = $(this);

			var buttons = $('li', self);
			var smallButtons = buttons.filter('.small');
			var totalBtnSze = 0;
			var totalTxtSze = 0;
			var upCandidate = smallButtons.eq(0);
			var nextBackUp = parseFloat(upCandidate.attr('data-size')) + 55;
			var smallBtnCount = smallButtons.length;

			if (smallBtnCount === buttons.length) {
				var btnCalc = smallBtnCount * 42;
				var containerWidth = self.width();

				if ((btnCalc + nextBackUp) < containerWidth) {
					self.removeClass('small-format');
					smallButtons.eq(0).removeClass('small');

					sizeSmallBtns();
				}

			} else {
				buttons.not('.small').each(function(index) {
					var button = $(this);
					var txtWidth = parseFloat(button.attr('data-size')) + 55;
					var btnWidth = parseFloat(button.width());

					totalBtnSze = totalBtnSze + btnWidth;
					totalTxtSze = totalTxtSze + txtWidth;
				});

				var spaceLeft = totalBtnSze - totalTxtSze;

				if (nextBackUp < spaceLeft) {
					upCandidate.removeClass('small');
					sizeSmallBtns();
				}
			}
		});
	};

	var checkSize = function(init) {
		$('.rrssb-buttons').each(function(index) {

			var self = $(this);
			var buttons = $('li', self);

			$(buttons.get().reverse()).each(function(index, count) {

				var button = $(this);

				if (button.hasClass('small') === false) {
					var txtWidth = parseFloat(button.attr('data-size')) + 55;
					var btnWidth = parseFloat(button.width());

					if (txtWidth > btnWidth) {
						var btn2small = buttons.not('.small').last();
						$(btn2small).addClass('small');
						sizeSmallBtns();
					}
				}

				if (!--count) backUpFromSmall();
			});
		});

		if (init === true) {
			rrssbMagicLayout(sizeSmallBtns);
		}
	};

	var sizeSmallBtns = function() {
		$('.rrssb-buttons').each(function(index) {
			var self = $(this);
			var regButtonCount;
			var regPercent;
			var pixelsOff;
			var magicWidth;
			var smallBtnFraction;
			var buttons = $('li', self);
			var smallButtons = buttons.filter('.small');

			var smallBtnCount = smallButtons.length;

			if (smallBtnCount > 0 && smallBtnCount !== buttons.length) {
				self.removeClass('small-format');

				smallButtons.css('width','42px');
				pixelsOff = smallBtnCount * 42;
				regButtonCount = buttons.not('.small').length;
				regPercent = 100 / regButtonCount;
				smallBtnFraction = pixelsOff / regButtonCount;

				if (support.calc === false) {
					magicWidth = ((self.innerWidth()-1) / regButtonCount) - smallBtnFraction;
					magicWidth = Math.floor(magicWidth*1000) / 1000;
					magicWidth += 'px';
				} else {
					magicWidth = support.calc+'('+regPercent+'% - '+smallBtnFraction+'px)';
				}

				buttons.not('.small').css('width', magicWidth);

			} else if (smallBtnCount === buttons.length) {
				self.addClass('small-format');
				setPercentBtns();
			} else {
				self.removeClass('small-format');
				setPercentBtns();
			}
		});

		makeExtremityBtns();
	};

	var rrssbInit = function() {
		$('.rrssb-buttons').each(function(index) {
			$(this).addClass('rrssb-'+(index + 1));
		});

		detectCalcSupport();

		setPercentBtns();

		$('.rrssb-buttons li .rrssb-text').each(function(index) {
			var buttonTxt = $(this);
			var txtWdth = buttonTxt.width();
			buttonTxt.closest('li').attr('data-size', txtWdth);
		});

		checkSize(true);
	};

	var rrssbMagicLayout = function(callback) {
		$('.rrssb-buttons li.small').removeClass('small');

		checkSize();

		callback();
	};

	var popupCenter = function(url, title, w, h) {
		var dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : screen.left;
		var dualScreenTop = window.screenTop !== undefined ? window.screenTop : screen.top;

		var width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : screen.width;
		var height = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : screen.height;

		var left = ((width / 2) - (w / 2)) + dualScreenLeft;
		var top = ((height / 3) - (h / 3)) + dualScreenTop;

		var newWindow = window.open(url, title, 'scrollbars=yes, width=' + w + ', height=' + h + ', top=' + top + ', left=' + left);

		if (newWindow && newWindow.focus) {
			newWindow.focus();
		}
	};

	var waitForFinalEvent = (function () {
		var timers = {};
		return function (callback, ms, uniqueId) {
			if (!uniqueId) {
				uniqueId = "Don't call this twice without a uniqueId";
			}
			if (timers[uniqueId]) {
				clearTimeout (timers[uniqueId]);
			}
			timers[uniqueId] = setTimeout(callback, ms);
		};
	})();

	$(document).ready(function(){
		try {
			$(document).on('click', '.rrssb-buttons a.popup', {}, function popUp(e) {
				var self = $(this);
				popupCenter(self.attr('href'), self.find('.rrssb-text').html(), 580, 470);
				e.preventDefault();
			});
		}
		catch (e) {
		}

		$(window).resize(function () {

			rrssbMagicLayout(sizeSmallBtns);

			waitForFinalEvent(function(){
				rrssbMagicLayout(sizeSmallBtns);
			}, 200, "finished resizing");
		});

		rrssbInit();
	});

	window.rrssbInit = rrssbInit;

})(window, jQuery);

../jforum2-code/src/main/resources/templates/default/js/pagination.js
/***********************************************
* Drop Down/ Overlapping Content-  Dynamic Drive (www.dynamicdrive.com)
* This notice must stay intact for legal use.
* Visit http://www.dynamicdrive.com/ for full source code
***********************************************/

function getposOffset(overlay, offsettype){
var totaloffset=(offsettype=="left")? overlay.offsetLeft : overlay.offsetTop;
var parentEl=overlay.offsetParent;
while (parentEl!=null){
totaloffset=(offsettype=="left")? totaloffset+parentEl.offsetLeft : totaloffset+parentEl.offsetTop;
parentEl=parentEl.offsetParent;
}
return totaloffset;
}

function overlay(curobj, subobjstr, opt_position){
if (document.getElementById){
var subobj=document.getElementById(subobjstr)
subobj.style.display=(subobj.style.display!="block")? "block" : "none"
var xpos=getposOffset(curobj, "left")+((typeof opt_position!="undefined" && opt_position.indexOf("right")!=-1)? -(subobj.offsetWidth-curobj.offsetWidth) : 0) 
var ypos=getposOffset(curobj, "top")+((typeof opt_position!="undefined" && opt_position.indexOf("bottom")!=-1)? curobj.offsetHeight : 0)
subobj.style.left=xpos+"px"
subobj.style.top=ypos+"px"
return false
}
else
return true
}

function overlayclose(subobj){
document.getElementById(subobj).style.display="none"
}

function goToAnotherPage(max, recordsPerPage, contextPath, moduleName, action, id, extension)
{
	var page = document.getElementById("pageToGo").value * 1;

	if (!isNaN(page) && page <= max && page > 0) {
		var path = contextPath + "/" + moduleName + "/" + action + "/" + ((page - 1) * recordsPerPage) + "/";
		
		if (id == -1) {
			path += extension;
		}
		else {
			path += id + extension;
		}

		document.location = path;
	}
}

function goToAnotherPageSearch(max, recordsPerPage, baseUrl)
{
	var page = document.getElementById("pageToGo").value * 1;

	if (!isNaN(page) && page <= max && page > 0) {
		document.location = baseUrl + "&start=" + ((page - 1) * recordsPerPage);
	}
}
../jforum2-code/src/main/resources/templates/default/js/moderation.js
function verifyModerationCheckedTopics()
{
	var f = document.formModeration.topic_id;
	
	if (f.length == undefined)	 {
		if (f.checked) {
			return true;
		}
	}

	for (var i = 0; i < f.length; i++) {
		if (f[i].checked) {
			return true;
		}
	}
	
	alert("${I18n.getMessage("Moderation.SelectTopics")}");
	return false;
}

function validateModerationDelete()
{
	var status = verifyModerationCheckedTopics()
		&& confirm("${I18n.getMessage("Moderation.ConfirmDelete")}")
		&& askModerationReason();

	if (status) {
		document.formModeration.log_type.value = "1";
	}

	return status;
}

function lockUnlock() 
{
	var status = verifyModerationCheckedTopics() && askModerationReason();
	
	if (status) {
		document.formModeration.log_type.value = "3";
	}

	return status;
}

function askModerationReason() 
{
	var message = prompt("${I18n.getMessage("ModerationLog.changeReason")}");

	if (message == null || message == "") {
		alert("${I18n.getMessage("ModerationLog.reasonIsEmpty")}");
		return false;
	}
	else {
		document.formModeration.log_description.value = message;
	}

	return true;
}

var oldClasses = {}

function changeTrClass(from, trIndex)
{
	var tr = from.parentNode.parentNode;
	trIndex = trIndex.toString();

	if (from.checked) {
		tr.className = "moderation_highlight";
		oldClasses[trIndex] = new Array();

		for (var i = 0; i < tr.childNodes.length; i++) {
			var node = tr.childNodes[i];

			if (node.nodeName.toUpperCase() == "TD") {
				oldClasses[trIndex].push(node.className);
				node.className = "";
			}
		}
	}
	else {
		tr.className = "";

		for (var i = tr.childNodes.length - 1; i >= 0; i--) {
			var node = tr.childNodes[i];

			if (node.nodeName.toUpperCase() == "TD") {
				node.className = oldClasses[trIndex].pop();
			}
		}
	}	
}
../jforum2-code/src/main/resources/templates/default/js/prism.js
/* PrismJS 1.17.1
https://prismjs.com/download.html#themes=prism&languages=markup+css+clike+javascript+c+csharp+bash+basic+cpp+ruby+diff+markup-templating+eiffel+lua+erlang+fortran+ftl+go+groovy+haskell+java+php+markdown+json+julia+kotlin+latex+lisp+makefile+objectivec+pascal+perl+sql+prolog+python+r+rust+smalltalk+plsql+swift+tcl+visual-basic+vbnet&plugins=line-numbers+toolbar+copy-to-clipboard+match-braces+diff-highlight */
var _self="undefined"!=typeof window?window:"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope?self:{},Prism=function(u){var c=/\blang(?:uage)?-([\w-]+)\b/i,a=0;var _={manual:u.Prism&&u.Prism.manual,disableWorkerMessageHandler:u.Prism&&u.Prism.disableWorkerMessageHandler,util:{encode:function(e){return e instanceof L?new L(e.type,_.util.encode(e.content),e.alias):Array.isArray(e)?e.map(_.util.encode):e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/\u00a0/g," ")},type:function(e){return Object.prototype.toString.call(e).slice(8,-1)},objId:function(e){return e.__id||Object.defineProperty(e,"__id",{value:++a}),e.__id},clone:function n(e,r){var t,a,i=_.util.type(e);switch(r=r||{},i){case"Object":if(a=_.util.objId(e),r[a])return r[a];for(var o in t={},r[a]=t,e)e.hasOwnProperty(o)&&(t[o]=n(e[o],r));return t;case"Array":return a=_.util.objId(e),r[a]?r[a]:(t=[],r[a]=t,e.forEach(function(e,a){t[a]=n(e,r)}),t);default:return e}}},languages:{extend:function(e,a){var n=_.util.clone(_.languages[e]);for(var r in a)n[r]=a[r];return n},insertBefore:function(n,e,a,r){var t=(r=r||_.languages)[n],i={};for(var o in t)if(t.hasOwnProperty(o)){if(o==e)for(var l in a)a.hasOwnProperty(l)&&(i[l]=a[l]);a.hasOwnProperty(o)||(i[o]=t[o])}var s=r[n];return r[n]=i,_.languages.DFS(_.languages,function(e,a){a===s&&e!=n&&(this[e]=i)}),i},DFS:function e(a,n,r,t){t=t||{};var i=_.util.objId;for(var o in a)if(a.hasOwnProperty(o)){n.call(a,o,a[o],r||o);var l=a[o],s=_.util.type(l);"Object"!==s||t[i(l)]?"Array"!==s||t[i(l)]||(t[i(l)]=!0,e(l,n,o,t)):(t[i(l)]=!0,e(l,n,null,t))}}},plugins:{},highlightAll:function(e,a){_.highlightAllUnder(document,e,a)},highlightAllUnder:function(e,a,n){var r={callback:n,selector:'code[class*="language-"], [class*="language-"] code, code[class*="lang-"], [class*="lang-"] code'};_.hooks.run("before-highlightall",r);for(var t,i=e.querySelectorAll(r.selector),o=0;t=i[o++];)_.highlightElement(t,!0===a,r.callback)},highlightElement:function(e,a,n){var r=function(e){for(;e&&!c.test(e.className);)e=e.parentNode;return e?(e.className.match(c)||[,"none"])[1].toLowerCase():"none"}(e),t=_.languages[r];e.className=e.className.replace(c,"").replace(/\s+/g," ")+" language-"+r;var i=e.parentNode;i&&"pre"===i.nodeName.toLowerCase()&&(i.className=i.className.replace(c,"").replace(/\s+/g," ")+" language-"+r);var o={element:e,language:r,grammar:t,code:e.textContent};function l(e){o.highlightedCode=e,_.hooks.run("before-insert",o),o.element.innerHTML=o.highlightedCode,_.hooks.run("after-highlight",o),_.hooks.run("complete",o),n&&n.call(o.element)}if(_.hooks.run("before-sanity-check",o),!o.code)return _.hooks.run("complete",o),void(n&&n.call(o.element));if(_.hooks.run("before-highlight",o),o.grammar)if(a&&u.Worker){var s=new Worker(_.filename);s.onmessage=function(e){l(e.data)},s.postMessage(JSON.stringify({language:o.language,code:o.code,immediateClose:!0}))}else l(_.highlight(o.code,o.grammar,o.language));else l(_.util.encode(o.code))},highlight:function(e,a,n){var r={code:e,grammar:a,language:n};return _.hooks.run("before-tokenize",r),r.tokens=_.tokenize(r.code,r.grammar),_.hooks.run("after-tokenize",r),L.stringify(_.util.encode(r.tokens),r.language)},matchGrammar:function(e,a,n,r,t,i,o){for(var l in n)if(n.hasOwnProperty(l)&&n[l]){var s=n[l];s=Array.isArray(s)?s:[s];for(var u=0;u<s.length;++u){if(o&&o==l+","+u)return;var c=s[u],g=c.inside,f=!!c.lookbehind,h=!!c.greedy,d=0,m=c.alias;if(h&&!c.pattern.global){var p=c.pattern.toString().match(/[imsuy]*$/)[0];c.pattern=RegExp(c.pattern.source,p+"g")}c=c.pattern||c;for(var y=r,v=t;y<a.length;v+=a[y].length,++y){var k=a[y];if(a.length>e.length)return;if(!(k instanceof L)){if(h&&y!=a.length-1){if(c.lastIndex=v,!(x=c.exec(e)))break;for(var b=x.index+(f&&x[1]?x[1].length:0),w=x.index+x[0].length,A=y,P=v,O=a.length;A<O&&(P<w||!a[A].type&&!a[A-1].greedy);++A)(P+=a[A].length)<=b&&(++y,v=P);if(a[y]instanceof L)continue;j=A-y,k=e.slice(v,P),x.index-=v}else{c.lastIndex=0;var x=c.exec(k),j=1}if(x){f&&(d=x[1]?x[1].length:0);w=(b=x.index+d)+(x=x[0].slice(d)).length;var N=k.slice(0,b),S=k.slice(w),C=[y,j];N&&(++y,v+=N.length,C.push(N));var E=new L(l,g?_.tokenize(x,g):x,m,x,h);if(C.push(E),S&&C.push(S),Array.prototype.splice.apply(a,C),1!=j&&_.matchGrammar(e,a,n,y,v,!0,l+","+u),i)break}else if(i)break}}}}},tokenize:function(e,a){var n=[e],r=a.rest;if(r){for(var t in r)a[t]=r[t];delete a.rest}return _.matchGrammar(e,n,a,0,0,!1),n},hooks:{all:{},add:function(e,a){var n=_.hooks.all;n[e]=n[e]||[],n[e].push(a)},run:function(e,a){var n=_.hooks.all[e];if(n&&n.length)for(var r,t=0;r=n[t++];)r(a)}},Token:L};function L(e,a,n,r,t){this.type=e,this.content=a,this.alias=n,this.length=0|(r||"").length,this.greedy=!!t}if(u.Prism=_,L.stringify=function(e,a){if("string"==typeof e)return e;if(Array.isArray(e))return e.map(function(e){return L.stringify(e,a)}).join("");var n={type:e.type,content:L.stringify(e.content,a),tag:"span",classes:["token",e.type],attributes:{},language:a};if(e.alias){var r=Array.isArray(e.alias)?e.alias:[e.alias];Array.prototype.push.apply(n.classes,r)}_.hooks.run("wrap",n);var t=Object.keys(n.attributes).map(function(e){return e+'="'+(n.attributes[e]||"").replace(/"/g,"&quot;")+'"'}).join(" ");return"<"+n.tag+' class="'+n.classes.join(" ")+'"'+(t?" "+t:"")+">"+n.content+"</"+n.tag+">"},!u.document)return u.addEventListener&&(_.disableWorkerMessageHandler||u.addEventListener("message",function(e){var a=JSON.parse(e.data),n=a.language,r=a.code,t=a.immediateClose;u.postMessage(_.highlight(r,_.languages[n],n)),t&&u.close()},!1)),_;var e=document.currentScript||[].slice.call(document.getElementsByTagName("script")).pop();if(e&&(_.filename=e.src,e.hasAttribute("data-manual")&&(_.manual=!0)),!_.manual){function n(){_.manual||_.highlightAll()}"loading"!==document.readyState?window.requestAnimationFrame?window.requestAnimationFrame(n):window.setTimeout(n,16):document.addEventListener("DOMContentLoaded",n)}return _}(_self);"undefined"!=typeof module&&module.exports&&(module.exports=Prism),"undefined"!=typeof global&&(global.Prism=Prism);
Prism.languages.markup={comment:/<!--[\s\S]*?-->/,prolog:/<\?[\s\S]+?\?>/,doctype:/<!DOCTYPE[\s\S]+?>/i,cdata:/<!\[CDATA\[[\s\S]*?]]>/i,tag:{pattern:/<\/?(?!\d)[^\s>\/=$<%]+(?:\s(?:\s*[^\s>\/=]+(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))|(?=[\s/>])))+)?\s*\/?>/i,greedy:!0,inside:{tag:{pattern:/^<\/?[^\s>\/]+/i,inside:{punctuation:/^<\/?/,namespace:/^[^\s>\/:]+:/}},"attr-value":{pattern:/=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+)/i,inside:{punctuation:[/^=/,{pattern:/^(\s*)["']|["']$/,lookbehind:!0}]}},punctuation:/\/?>/,"attr-name":{pattern:/[^\s>\/]+/,inside:{namespace:/^[^\s>\/:]+:/}}}},entity:/&#?[\da-z]{1,8};/i},Prism.languages.markup.tag.inside["attr-value"].inside.entity=Prism.languages.markup.entity,Prism.hooks.add("wrap",function(a){"entity"===a.type&&(a.attributes.title=a.content.replace(/&amp;/,"&"))}),Object.defineProperty(Prism.languages.markup.tag,"addInlined",{value:function(a,e){var s={};s["language-"+e]={pattern:/(^<!\[CDATA\[)[\s\S]+?(?=\]\]>$)/i,lookbehind:!0,inside:Prism.languages[e]},s.cdata=/^<!\[CDATA\[|\]\]>$/i;var n={"included-cdata":{pattern:/<!\[CDATA\[[\s\S]*?\]\]>/i,inside:s}};n["language-"+e]={pattern:/[\s\S]+/,inside:Prism.languages[e]};var i={};i[a]={pattern:RegExp("(<__[\\s\\S]*?>)(?:<!\\[CDATA\\[[\\s\\S]*?\\]\\]>\\s*|[\\s\\S])*?(?=<\\/__>)".replace(/__/g,a),"i"),lookbehind:!0,greedy:!0,inside:n},Prism.languages.insertBefore("markup","cdata",i)}}),Prism.languages.xml=Prism.languages.extend("markup",{}),Prism.languages.html=Prism.languages.markup,Prism.languages.mathml=Prism.languages.markup,Prism.languages.svg=Prism.languages.markup;
!function(s){var t=/("|')(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/;s.languages.css={comment:/\/\*[\s\S]*?\*\//,atrule:{pattern:/@[\w-]+[\s\S]*?(?:;|(?=\s*\{))/,inside:{rule:/@[\w-]+/}},url:{pattern:RegExp("url\\((?:"+t.source+"|[^\n\r()]*)\\)","i"),inside:{function:/^url/i,punctuation:/^\(|\)$/}},selector:RegExp("[^{}\\s](?:[^{};\"']|"+t.source+")*?(?=\\s*\\{)"),string:{pattern:t,greedy:!0},property:/[-_a-z\xA0-\uFFFF][-\w\xA0-\uFFFF]*(?=\s*:)/i,important:/!important\b/i,function:/[-a-z0-9]+(?=\()/i,punctuation:/[(){};:,]/},s.languages.css.atrule.inside.rest=s.languages.css;var e=s.languages.markup;e&&(e.tag.addInlined("style","css"),s.languages.insertBefore("inside","attr-value",{"style-attr":{pattern:/\s*style=("|')(?:\\[\s\S]|(?!\1)[^\\])*\1/i,inside:{"attr-name":{pattern:/^\s*style/i,inside:e.tag.inside},punctuation:/^\s*=\s*['"]|['"]\s*$/,"attr-value":{pattern:/.+/i,inside:s.languages.css}},alias:"language-css"}},e.tag))}(Prism);
Prism.languages.clike={comment:[{pattern:/(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,lookbehind:!0},{pattern:/(^|[^\\:])\/\/.*/,lookbehind:!0,greedy:!0}],string:{pattern:/(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,greedy:!0},"class-name":{pattern:/(\b(?:class|interface|extends|implements|trait|instanceof|new)\s+|\bcatch\s+\()[\w.\\]+/i,lookbehind:!0,inside:{punctuation:/[.\\]/}},keyword:/\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\b/,boolean:/\b(?:true|false)\b/,function:/\w+(?=\()/,number:/\b0x[\da-f]+\b|(?:\b\d+\.?\d*|\B\.\d+)(?:e[+-]?\d+)?/i,operator:/[<>]=?|[!=]=?=?|--?|\+\+?|&&?|\|\|?|[?*/~^%]/,punctuation:/[{}[\];(),.:]/};
Prism.languages.javascript=Prism.languages.extend("clike",{"class-name":[Prism.languages.clike["class-name"],{pattern:/(^|[^$\w\xA0-\uFFFF])[_$A-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\.(?:prototype|constructor))/,lookbehind:!0}],keyword:[{pattern:/((?:^|})\s*)(?:catch|finally)\b/,lookbehind:!0},{pattern:/(^|[^.])\b(?:as|async(?=\s*(?:function\b|\(|[$\w\xA0-\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\b/,lookbehind:!0}],number:/\b(?:(?:0[xX](?:[\dA-Fa-f](?:_[\dA-Fa-f])?)+|0[bB](?:[01](?:_[01])?)+|0[oO](?:[0-7](?:_[0-7])?)+)n?|(?:\d(?:_\d)?)+n|NaN|Infinity)\b|(?:\b(?:\d(?:_\d)?)+\.?(?:\d(?:_\d)?)*|\B\.(?:\d(?:_\d)?)+)(?:[Ee][+-]?(?:\d(?:_\d)?)+)?/,function:/#?[_$a-zA-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\s*(?:\.\s*(?:apply|bind|call)\s*)?\()/,operator:/--|\+\+|\*\*=?|=>|&&|\|\||[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\.{3}|\?[.?]?|[~:]/}),Prism.languages.javascript["class-name"][0].pattern=/(\b(?:class|interface|extends|implements|instanceof|new)\s+)[\w.\\]+/,Prism.languages.insertBefore("javascript","keyword",{regex:{pattern:/((?:^|[^$\w\xA0-\uFFFF."'\])\s])\s*)\/(?:\[(?:[^\]\\\r\n]|\\.)*]|\\.|[^/\\\[\r\n])+\/[gimyus]{0,6}(?=\s*(?:$|[\r\n,.;})\]]))/,lookbehind:!0,greedy:!0},"function-variable":{pattern:/#?[_$a-zA-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\s*[=:]\s*(?:async\s*)?(?:\bfunction\b|(?:\((?:[^()]|\([^()]*\))*\)|[_$a-zA-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*)\s*=>))/,alias:"function"},parameter:[{pattern:/(function(?:\s+[_$A-Za-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*)?\s*\(\s*)(?!\s)(?:[^()]|\([^()]*\))+?(?=\s*\))/,lookbehind:!0,inside:Prism.languages.javascript},{pattern:/[_$a-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\s*=>)/i,inside:Prism.languages.javascript},{pattern:/(\(\s*)(?!\s)(?:[^()]|\([^()]*\))+?(?=\s*\)\s*=>)/,lookbehind:!0,inside:Prism.languages.javascript},{pattern:/((?:\b|\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\w\xA0-\uFFFF]))(?:[_$A-Za-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*\s*)\(\s*)(?!\s)(?:[^()]|\([^()]*\))+?(?=\s*\)\s*\{)/,lookbehind:!0,inside:Prism.languages.javascript}],constant:/\b[A-Z](?:[A-Z_]|\dx?)*\b/}),Prism.languages.insertBefore("javascript","string",{"template-string":{pattern:/`(?:\\[\s\S]|\${(?:[^{}]|{(?:[^{}]|{[^}]*})*})+}|(?!\${)[^\\`])*`/,greedy:!0,inside:{"template-punctuation":{pattern:/^`|`$/,alias:"string"},interpolation:{pattern:/((?:^|[^\\])(?:\\{2})*)\${(?:[^{}]|{(?:[^{}]|{[^}]*})*})+}/,lookbehind:!0,inside:{"interpolation-punctuation":{pattern:/^\${|}$/,alias:"punctuation"},rest:Prism.languages.javascript}},string:/[\s\S]+/}}}),Prism.languages.markup&&Prism.languages.markup.tag.addInlined("script","javascript"),Prism.languages.js=Prism.languages.javascript;
Prism.languages.c=Prism.languages.extend("clike",{"class-name":{pattern:/(\b(?:enum|struct)\s+)\w+/,lookbehind:!0},keyword:/\b(?:_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|asm|typeof|inline|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while)\b/,operator:/>>=?|<<=?|->|([-+&|:])\1|[?:~]|[-+*/%&|^!=<>]=?/,number:/(?:\b0x(?:[\da-f]+\.?[\da-f]*|\.[\da-f]+)(?:p[+-]?\d+)?|(?:\b\d+\.?\d*|\B\.\d+)(?:e[+-]?\d+)?)[ful]*/i}),Prism.languages.insertBefore("c","string",{macro:{pattern:/(^\s*)#\s*[a-z]+(?:[^\r\n\\]|\\(?:\r\n|[\s\S]))*/im,lookbehind:!0,alias:"property",inside:{string:{pattern:/(#\s*include\s*)(?:<.+?>|("|')(?:\\?.)+?\2)/,lookbehind:!0},directive:{pattern:/(#\s*)\b(?:define|defined|elif|else|endif|error|ifdef|ifndef|if|import|include|line|pragma|undef|using)\b/,lookbehind:!0,alias:"keyword"}}},constant:/\b(?:__FILE__|__LINE__|__DATE__|__TIME__|__TIMESTAMP__|__func__|EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|stdin|stdout|stderr)\b/}),delete Prism.languages.c.boolean;
Prism.languages.csharp=Prism.languages.extend("clike",{keyword:/\b(?:abstract|add|alias|as|ascending|async|await|base|bool|break|byte|case|catch|char|checked|class|const|continue|decimal|default|delegate|descending|do|double|dynamic|else|enum|event|explicit|extern|false|finally|fixed|float|for|foreach|from|get|global|goto|group|if|implicit|in|int|interface|internal|into|is|join|let|lock|long|namespace|new|null|object|operator|orderby|out|override|params|partial|private|protected|public|readonly|ref|remove|return|sbyte|sealed|select|set|short|sizeof|stackalloc|static|string|struct|switch|this|throw|true|try|typeof|uint|ulong|unchecked|unsafe|ushort|using|value|var|virtual|void|volatile|where|while|yield)\b/,string:[{pattern:/@("|')(?:\1\1|\\[\s\S]|(?!\1)[^\\])*\1/,greedy:!0},{pattern:/("|')(?:\\.|(?!\1)[^\\\r\n])*?\1/,greedy:!0}],"class-name":[{pattern:/\b[A-Z]\w*(?:\.\w+)*\b(?=\s+\w+)/,inside:{punctuation:/\./}},{pattern:/(\[)[A-Z]\w*(?:\.\w+)*\b/,lookbehind:!0,inside:{punctuation:/\./}},{pattern:/(\b(?:class|interface)\s+[A-Z]\w*(?:\.\w+)*\s*:\s*)[A-Z]\w*(?:\.\w+)*\b/,lookbehind:!0,inside:{punctuation:/\./}},{pattern:/((?:\b(?:class|interface|new)\s+)|(?:catch\s+\())[A-Z]\w*(?:\.\w+)*\b/,lookbehind:!0,inside:{punctuation:/\./}}],number:/\b0x[\da-f]+\b|(?:\b\d+\.?\d*|\B\.\d+)f?/i,operator:/>>=?|<<=?|[-=]>|([-+&|?])\1|~|[-+*/%&|^!=<>]=?/,punctuation:/\?\.?|::|[{}[\];(),.:]/}),Prism.languages.insertBefore("csharp","class-name",{"generic-method":{pattern:/\w+\s*<[^>\r\n]+?>\s*(?=\()/,inside:{function:/^\w+/,"class-name":{pattern:/\b[A-Z]\w*(?:\.\w+)*\b/,inside:{punctuation:/\./}},keyword:Prism.languages.csharp.keyword,punctuation:/[<>(),.:]/}},preprocessor:{pattern:/(^\s*)#.*/m,lookbehind:!0,alias:"property",inside:{directive:{pattern:/(\s*#)\b(?:define|elif|else|endif|endregion|error|if|line|pragma|region|undef|warning)\b/,lookbehind:!0,alias:"keyword"}}}}),Prism.languages.dotnet=Prism.languages.cs=Prism.languages.csharp;
!function(e){var t="\\b(?:BASH|BASHOPTS|BASH_ALIASES|BASH_ARGC|BASH_ARGV|BASH_CMDS|BASH_COMPLETION_COMPAT_DIR|BASH_LINENO|BASH_REMATCH|BASH_SOURCE|BASH_VERSINFO|BASH_VERSION|COLORTERM|COLUMNS|COMP_WORDBREAKS|DBUS_SESSION_BUS_ADDRESS|DEFAULTS_PATH|DESKTOP_SESSION|DIRSTACK|DISPLAY|EUID|GDMSESSION|GDM_LANG|GNOME_KEYRING_CONTROL|GNOME_KEYRING_PID|GPG_AGENT_INFO|GROUPS|HISTCONTROL|HISTFILE|HISTFILESIZE|HISTSIZE|HOME|HOSTNAME|HOSTTYPE|IFS|INSTANCE|JOB|LANG|LANGUAGE|LC_ADDRESS|LC_ALL|LC_IDENTIFICATION|LC_MEASUREMENT|LC_MONETARY|LC_NAME|LC_NUMERIC|LC_PAPER|LC_TELEPHONE|LC_TIME|LESSCLOSE|LESSOPEN|LINES|LOGNAME|LS_COLORS|MACHTYPE|MAILCHECK|MANDATORY_PATH|NO_AT_BRIDGE|OLDPWD|OPTERR|OPTIND|ORBIT_SOCKETDIR|OSTYPE|PAPERSIZE|PATH|PIPESTATUS|PPID|PS1|PS2|PS3|PS4|PWD|RANDOM|REPLY|SECONDS|SELINUX_INIT|SESSION|SESSIONTYPE|SESSION_MANAGER|SHELL|SHELLOPTS|SHLVL|SSH_AUTH_SOCK|TERM|UID|UPSTART_EVENTS|UPSTART_INSTANCE|UPSTART_JOB|UPSTART_SESSION|USER|WINDOWID|XAUTHORITY|XDG_CONFIG_DIRS|XDG_CURRENT_DESKTOP|XDG_DATA_DIRS|XDG_GREETER_DATA_DIR|XDG_MENU_PREFIX|XDG_RUNTIME_DIR|XDG_SEAT|XDG_SEAT_PATH|XDG_SESSION_DESKTOP|XDG_SESSION_ID|XDG_SESSION_PATH|XDG_SESSION_TYPE|XDG_VTNR|XMODIFIERS)\\b",n={environment:{pattern:RegExp("\\$"+t),alias:"constant"},variable:[{pattern:/\$?\(\([\s\S]+?\)\)/,greedy:!0,inside:{variable:[{pattern:/(^\$\(\([\s\S]+)\)\)/,lookbehind:!0},/^\$\(\(/],number:/\b0x[\dA-Fa-f]+\b|(?:\b\d+\.?\d*|\B\.\d+)(?:[Ee]-?\d+)?/,operator:/--?|-=|\+\+?|\+=|!=?|~|\*\*?|\*=|\/=?|%=?|<<=?|>>=?|<=?|>=?|==?|&&?|&=|\^=?|\|\|?|\|=|\?|:/,punctuation:/\(\(?|\)\)?|,|;/}},{pattern:/\$\((?:\([^)]+\)|[^()])+\)|`[^`]+`/,greedy:!0,inside:{variable:/^\$\(|^`|\)$|`$/}},{pattern:/\$\{[^}]+\}/,greedy:!0,inside:{operator:/:[-=?+]?|[!\/]|##?|%%?|\^\^?|,,?/,punctuation:/[\[\]]/,environment:{pattern:RegExp("(\\{)"+t),lookbehind:!0,alias:"constant"}}},/\$(?:\w+|[#?*!@$])/],entity:/\\(?:[abceEfnrtv\\"]|O?[0-7]{1,3}|x[0-9a-fA-F]{1,2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})/};e.languages.bash={shebang:{pattern:/^#!\s*\/.*/,alias:"important"},comment:{pattern:/(^|[^"{\\$])#.*/,lookbehind:!0},"function-name":[{pattern:/(\bfunction\s+)\w+(?=(?:\s*\(?:\s*\))?\s*\{)/,lookbehind:!0,alias:"function"},{pattern:/\b\w+(?=\s*\(\s*\)\s*\{)/,alias:"function"}],"for-or-select":{pattern:/(\b(?:for|select)\s+)\w+(?=\s+in\s)/,alias:"variable",lookbehind:!0},"assign-left":{pattern:/(^|[\s;|&]|[<>]\()\w+(?=\+?=)/,inside:{environment:{pattern:RegExp("(^|[\\s;|&]|[<>]\\()"+t),lookbehind:!0,alias:"constant"}},alias:"variable",lookbehind:!0},string:[{pattern:/((?:^|[^<])<<-?\s*)(\w+?)\s*(?:\r?\n|\r)(?:[\s\S])*?(?:\r?\n|\r)\2/,lookbehind:!0,greedy:!0,inside:n},{pattern:/((?:^|[^<])<<-?\s*)(["'])(\w+)\2\s*(?:\r?\n|\r)(?:[\s\S])*?(?:\r?\n|\r)\3/,lookbehind:!0,greedy:!0},{pattern:/(["'])(?:\\[\s\S]|\$\([^)]+\)|`[^`]+`|(?!\1)[^\\])*\1/,greedy:!0,inside:n}],environment:{pattern:RegExp("\\$?"+t),alias:"constant"},variable:n.variable,function:{pattern:/(^|[\s;|&]|[<>]\()(?:add|apropos|apt|aptitude|apt-cache|apt-get|aspell|automysqlbackup|awk|basename|bash|bc|bconsole|bg|bzip2|cal|cat|cfdisk|chgrp|chkconfig|chmod|chown|chroot|cksum|clear|cmp|column|comm|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|debootstrap|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|du|egrep|eject|env|ethtool|expand|expect|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|git|gparted|grep|groupadd|groupdel|groupmod|groups|grub-mkconfig|gzip|halt|head|hg|history|host|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|ip|jobs|join|kill|killall|less|link|ln|locate|logname|logrotate|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|lynx|make|man|mc|mdadm|mkconfig|mkdir|mke2fs|mkfifo|mkfs|mkisofs|mknod|mkswap|mmv|more|most|mount|mtools|mtr|mutt|mv|nano|nc|netstat|nice|nl|nohup|notify-send|npm|nslookup|op|open|parted|passwd|paste|pathchk|ping|pkill|pnpm|popd|pr|printcap|printenv|ps|pushd|pv|quota|quotacheck|quotactl|ram|rar|rcp|reboot|remsync|rename|renice|rev|rm|rmdir|rpm|rsync|scp|screen|sdiff|sed|sendmail|seq|service|sftp|sh|shellcheck|shuf|shutdown|sleep|slocate|sort|split|ssh|stat|strace|su|sudo|sum|suspend|swapon|sync|tac|tail|tar|tee|time|timeout|top|touch|tr|traceroute|tsort|tty|umount|uname|unexpand|uniq|units|unrar|unshar|unzip|update-grub|uptime|useradd|userdel|usermod|users|uudecode|uuencode|v|vdir|vi|vim|virsh|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yarn|yes|zenity|zip|zsh|zypper)(?=$|[)\s;|&])/,lookbehind:!0},keyword:{pattern:/(^|[\s;|&]|[<>]\()(?:if|then|else|elif|fi|for|while|in|case|esac|function|select|do|done|until)(?=$|[)\s;|&])/,lookbehind:!0},builtin:{pattern:/(^|[\s;|&]|[<>]\()(?:\.|:|break|cd|continue|eval|exec|exit|export|getopts|hash|pwd|readonly|return|shift|test|times|trap|umask|unset|alias|bind|builtin|caller|command|declare|echo|enable|help|let|local|logout|mapfile|printf|read|readarray|source|type|typeset|ulimit|unalias|set|shopt)(?=$|[)\s;|&])/,lookbehind:!0,alias:"class-name"},boolean:{pattern:/(^|[\s;|&]|[<>]\()(?:true|false)(?=$|[)\s;|&])/,lookbehind:!0},"file-descriptor":{pattern:/\B&\d\b/,alias:"important"},operator:{pattern:/\d?<>|>\||\+=|==?|!=?|=~|<<[<-]?|[&\d]?>>|\d?[<>]&?|&[>&]?|\|[&|]?|<=?|>=?/,inside:{"file-descriptor":{pattern:/^\d/,alias:"important"}}},punctuation:/\$?\(\(?|\)\)?|\.\.|[{}[\];\\]/,number:{pattern:/(^|\s)(?:[1-9]\d*|0)(?:[.,]\d+)?\b/,lookbehind:!0}};for(var a=["comment","function-name","for-or-select","assign-left","string","environment","function","keyword","builtin","boolean","file-descriptor","operator","punctuation","number"],r=n.variable[1].inside,s=0;s<a.length;s++)r[a[s]]=e.languages.bash[a[s]];e.languages.shell=e.languages.bash}(Prism);
Prism.languages.basic={comment:{pattern:/(?:!|REM\b).+/i,inside:{keyword:/^REM/i}},string:{pattern:/"(?:""|[!#$%&'()*,\/:;<=>?^_ +\-.A-Z\d])*"/i,greedy:!0},number:/(?:\b\d+\.?\d*|\B\.\d+)(?:E[+-]?\d+)?/i,keyword:/\b(?:AS|BEEP|BLOAD|BSAVE|CALL(?: ABSOLUTE)?|CASE|CHAIN|CHDIR|CLEAR|CLOSE|CLS|COM|COMMON|CONST|DATA|DECLARE|DEF(?: FN| SEG|DBL|INT|LNG|SNG|STR)|DIM|DO|DOUBLE|ELSE|ELSEIF|END|ENVIRON|ERASE|ERROR|EXIT|FIELD|FILES|FOR|FUNCTION|GET|GOSUB|GOTO|IF|INPUT|INTEGER|IOCTL|KEY|KILL|LINE INPUT|LOCATE|LOCK|LONG|LOOP|LSET|MKDIR|NAME|NEXT|OFF|ON(?: COM| ERROR| KEY| TIMER)?|OPEN|OPTION BASE|OUT|POKE|PUT|READ|REDIM|REM|RESTORE|RESUME|RETURN|RMDIR|RSET|RUN|SHARED|SINGLE|SELECT CASE|SHELL|SLEEP|STATIC|STEP|STOP|STRING|SUB|SWAP|SYSTEM|THEN|TIMER|TO|TROFF|TRON|TYPE|UNLOCK|UNTIL|USING|VIEW PRINT|WAIT|WEND|WHILE|WRITE)(?:\$|\b)/i,function:/\b(?:ABS|ACCESS|ACOS|ANGLE|AREA|ARITHMETIC|ARRAY|ASIN|ASK|AT|ATN|BASE|BEGIN|BREAK|CAUSE|CEIL|CHR|CLIP|COLLATE|COLOR|CON|COS|COSH|COT|CSC|DATE|DATUM|DEBUG|DECIMAL|DEF|DEG|DEGREES|DELETE|DET|DEVICE|DISPLAY|DOT|ELAPSED|EPS|ERASABLE|EXLINE|EXP|EXTERNAL|EXTYPE|FILETYPE|FIXED|FP|GO|GRAPH|HANDLER|IDN|IMAGE|IN|INT|INTERNAL|IP|IS|KEYED|LBOUND|LCASE|LEFT|LEN|LENGTH|LET|LINE|LINES|LOG|LOG10|LOG2|LTRIM|MARGIN|MAT|MAX|MAXNUM|MID|MIN|MISSING|MOD|NATIVE|NUL|NUMERIC|OF|OPTION|ORD|ORGANIZATION|OUTIN|OUTPUT|PI|POINT|POINTER|POINTS|POS|PRINT|PROGRAM|PROMPT|RAD|RADIANS|RANDOMIZE|RECORD|RECSIZE|RECTYPE|RELATIVE|REMAINDER|REPEAT|REST|RETRY|REWRITE|RIGHT|RND|ROUND|RTRIM|SAME|SEC|SELECT|SEQUENTIAL|SET|SETTER|SGN|SIN|SINH|SIZE|SKIP|SQR|STANDARD|STATUS|STR|STREAM|STYLE|TAB|TAN|TANH|TEMPLATE|TEXT|THERE|TIME|TIMEOUT|TRACE|TRANSFORM|TRUNCATE|UBOUND|UCASE|USE|VAL|VARIABLE|VIEWPORT|WHEN|WINDOW|WITH|ZER|ZONEWIDTH)(?:\$|\b)/i,operator:/<[=>]?|>=?|[+\-*\/^=&]|\b(?:AND|EQV|IMP|NOT|OR|XOR)\b/i,punctuation:/[,;:()]/};
Prism.languages.cpp=Prism.languages.extend("c",{"class-name":{pattern:/(\b(?:class|enum|struct)\s+)\w+/,lookbehind:!0},keyword:/\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char16_t|char32_t|class|compl|const|constexpr|const_cast|continue|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|float|for|friend|goto|if|inline|int|int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|long|mutable|namespace|new|noexcept|nullptr|operator|private|protected|public|register|reinterpret_cast|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|union|unsigned|using|virtual|void|volatile|wchar_t|while)\b/,number:{pattern:/(?:\b0b[01']+|\b0x(?:[\da-f']+\.?[\da-f']*|\.[\da-f']+)(?:p[+-]?[\d']+)?|(?:\b[\d']+\.?[\d']*|\B\.[\d']+)(?:e[+-]?[\d']+)?)[ful]*/i,greedy:!0},operator:/>>=?|<<=?|->|([-+&|:])\1|[?:~]|[-+*/%&|^!=<>]=?|\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\b/,boolean:/\b(?:true|false)\b/}),Prism.languages.insertBefore("cpp","string",{"raw-string":{pattern:/R"([^()\\ ]{0,16})\([\s\S]*?\)\1"/,alias:"string",greedy:!0}});
!function(e){e.languages.ruby=e.languages.extend("clike",{comment:[/#.*/,{pattern:/^=begin\s[\s\S]*?^=end/m,greedy:!0}],keyword:/\b(?:alias|and|BEGIN|begin|break|case|class|def|define_method|defined|do|each|else|elsif|END|end|ensure|false|for|if|in|module|new|next|nil|not|or|protected|private|public|raise|redo|require|rescue|retry|return|self|super|then|throw|true|undef|unless|until|when|while|yield)\b/});var n={pattern:/#\{[^}]+\}/,inside:{delimiter:{pattern:/^#\{|\}$/,alias:"tag"},rest:e.languages.ruby}};delete e.languages.ruby.function,e.languages.insertBefore("ruby","keyword",{regex:[{pattern:/%r([^a-zA-Z0-9\s{(\[<])(?:(?!\1)[^\\]|\\[\s\S])*\1[gim]{0,3}/,greedy:!0,inside:{interpolation:n}},{pattern:/%r\((?:[^()\\]|\\[\s\S])*\)[gim]{0,3}/,greedy:!0,inside:{interpolation:n}},{pattern:/%r\{(?:[^#{}\\]|#(?:\{[^}]+\})?|\\[\s\S])*\}[gim]{0,3}/,greedy:!0,inside:{interpolation:n}},{pattern:/%r\[(?:[^\[\]\\]|\\[\s\S])*\][gim]{0,3}/,greedy:!0,inside:{interpolation:n}},{pattern:/%r<(?:[^<>\\]|\\[\s\S])*>[gim]{0,3}/,greedy:!0,inside:{interpolation:n}},{pattern:/(^|[^/])\/(?!\/)(?:\[.+?]|\\.|[^/\\\r\n])+\/[gim]{0,3}(?=\s*(?:$|[\r\n,.;})]))/,lookbehind:!0,greedy:!0}],variable:/[@$]+[a-zA-Z_]\w*(?:[?!]|\b)/,symbol:{pattern:/(^|[^:]):[a-zA-Z_]\w*(?:[?!]|\b)/,lookbehind:!0},"method-definition":{pattern:/(\bdef\s+)[\w.]+/,lookbehind:!0,inside:{function:/\w+$/,rest:e.languages.ruby}}}),e.languages.insertBefore("ruby","number",{builtin:/\b(?:Array|Bignum|Binding|Class|Continuation|Dir|Exception|FalseClass|File|Stat|Fixnum|Float|Hash|Integer|IO|MatchData|Method|Module|NilClass|Numeric|Object|Proc|Range|Regexp|String|Struct|TMS|Symbol|ThreadGroup|Thread|Time|TrueClass)\b/,constant:/\b[A-Z]\w*(?:[?!]|\b)/}),e.languages.ruby.string=[{pattern:/%[qQiIwWxs]?([^a-zA-Z0-9\s{(\[<])(?:(?!\1)[^\\]|\\[\s\S])*\1/,greedy:!0,inside:{interpolation:n}},{pattern:/%[qQiIwWxs]?\((?:[^()\\]|\\[\s\S])*\)/,greedy:!0,inside:{interpolation:n}},{pattern:/%[qQiIwWxs]?\{(?:[^#{}\\]|#(?:\{[^}]+\})?|\\[\s\S])*\}/,greedy:!0,inside:{interpolation:n}},{pattern:/%[qQiIwWxs]?\[(?:[^\[\]\\]|\\[\s\S])*\]/,greedy:!0,inside:{interpolation:n}},{pattern:/%[qQiIwWxs]?<(?:[^<>\\]|\\[\s\S])*>/,greedy:!0,inside:{interpolation:n}},{pattern:/("|')(?:#\{[^}]+\}|\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,greedy:!0,inside:{interpolation:n}}],e.languages.rb=e.languages.ruby}(Prism);
!function(d){d.languages.diff={coord:[/^(?:\*{3}|-{3}|\+{3}).*$/m,/^@@.*@@$/m,/^\d+.*$/m]};var r={"deleted-sign":"-","deleted-arrow":"<","inserted-sign":"+","inserted-arrow":">",unchanged:" ",diff:"!"};Object.keys(r).forEach(function(e){var n=r[e],a=[];/^\w+$/.test(e)||a.push(/\w+/.exec(e)[0]),"diff"===e&&a.push("bold"),d.languages.diff[e]={pattern:RegExp("^(?:["+n+"].*(?:\r\n?|\n|(?![\\s\\S])))+","m"),alias:a}}),Object.defineProperty(d.languages.diff,"PREFIXES",{value:r})}(Prism);
!function(h){function v(e,n){return"___"+e.toUpperCase()+n+"___"}Object.defineProperties(h.languages["markup-templating"]={},{buildPlaceholders:{value:function(a,r,e,o){if(a.language===r){var c=a.tokenStack=[];a.code=a.code.replace(e,function(e){if("function"==typeof o&&!o(e))return e;for(var n,t=c.length;-1!==a.code.indexOf(n=v(r,t));)++t;return c[t]=e,n}),a.grammar=h.languages.markup}}},tokenizePlaceholders:{value:function(p,k){if(p.language===k&&p.tokenStack){p.grammar=h.languages[k];var m=0,d=Object.keys(p.tokenStack);!function e(n){for(var t=0;t<n.length&&!(m>=d.length);t++){var a=n[t];if("string"==typeof a||a.content&&"string"==typeof a.content){var r=d[m],o=p.tokenStack[r],c="string"==typeof a?a:a.content,i=v(k,r),u=c.indexOf(i);if(-1<u){++m;var g=c.substring(0,u),l=new h.Token(k,h.tokenize(o,p.grammar),"language-"+k,o),s=c.substring(u+i.length),f=[];g&&f.push.apply(f,e([g])),f.push(l),s&&f.push.apply(f,e([s])),"string"==typeof a?n.splice.apply(n,[t,1].concat(f)):a.content=f}}else a.content&&e(a.content)}return n}(p.tokens)}}}})}(Prism);
Prism.languages.eiffel={comment:/--.*/,string:[{pattern:/"([^[]*)\[[\s\S]*?\]\1"/,greedy:!0},{pattern:/"([^{]*)\{[\s\S]*?\}\1"/,greedy:!0},{pattern:/"(?:%\s+%|%.|[^%"\r\n])*"/,greedy:!0}],char:/'(?:%.|[^%'\r\n])+'/,keyword:/\b(?:across|agent|alias|all|and|attached|as|assign|attribute|check|class|convert|create|Current|debug|deferred|detachable|do|else|elseif|end|ensure|expanded|export|external|feature|from|frozen|if|implies|inherit|inspect|invariant|like|local|loop|not|note|obsolete|old|once|or|Precursor|redefine|rename|require|rescue|Result|retry|select|separate|some|then|undefine|until|variant|Void|when|xor)\b/i,boolean:/\b(?:True|False)\b/i,"class-name":{pattern:/\b[A-Z][\dA-Z_]*\b/,alias:"builtin"},number:[/\b0[xcb][\da-f](?:_*[\da-f])*\b/i,/(?:\d(?:_*\d)*)?\.(?:(?:\d(?:_*\d)*)?e[+-]?)?\d(?:_*\d)*|\d(?:_*\d)*\.?/i],punctuation:/:=|<<|>>|\(\||\|\)|->|\.(?=\w)|[{}[\];(),:?]/,operator:/\\\\|\|\.\.\||\.\.|\/[~\/=]?|[><]=?|[-+*^=~]/};
Prism.languages.lua={comment:/^#!.+|--(?:\[(=*)\[[\s\S]*?\]\1\]|.*)/m,string:{pattern:/(["'])(?:(?!\1)[^\\\r\n]|\\z(?:\r\n|\s)|\\(?:\r\n|[\s\S]))*\1|\[(=*)\[[\s\S]*?\]\2\]/,greedy:!0},number:/\b0x[a-f\d]+\.?[a-f\d]*(?:p[+-]?\d+)?\b|\b\d+(?:\.\B|\.?\d*(?:e[+-]?\d+)?\b)|\B\.\d+(?:e[+-]?\d+)?\b/i,keyword:/\b(?:and|break|do|else|elseif|end|false|for|function|goto|if|in|local|nil|not|or|repeat|return|then|true|until|while)\b/,function:/(?!\d)\w+(?=\s*(?:[({]))/,operator:[/[-+*%^&|#]|\/\/?|<[<=]?|>[>=]?|[=~]=?/,{pattern:/(^|[^.])\.\.(?!\.)/,lookbehind:!0}],punctuation:/[\[\](){},;]|\.+|:+/};
Prism.languages.erlang={comment:/%.+/,string:{pattern:/"(?:\\.|[^\\"\r\n])*"/,greedy:!0},"quoted-function":{pattern:/'(?:\\.|[^\\'\r\n])+'(?=\()/,alias:"function"},"quoted-atom":{pattern:/'(?:\\.|[^\\'\r\n])+'/,alias:"atom"},boolean:/\b(?:true|false)\b/,keyword:/\b(?:fun|when|case|of|end|if|receive|after|try|catch)\b/,number:[/\$\\?./,/\d+#[a-z0-9]+/i,/(?:\b\d+\.?\d*|\B\.\d+)(?:e[+-]?\d+)?/i],function:/\b[a-z][\w@]*(?=\()/,variable:{pattern:/(^|[^@])(?:\b|\?)[A-Z_][\w@]*/,lookbehind:!0},operator:[/[=\/<>:]=|=[:\/]=|\+\+?|--?|[=*\/!]|\b(?:bnot|div|rem|band|bor|bxor|bsl|bsr|not|and|or|xor|orelse|andalso)\b/,{pattern:/(^|[^<])<(?!<)/,lookbehind:!0},{pattern:/(^|[^>])>(?!>)/,lookbehind:!0}],atom:/\b[a-z][\w@]*/,punctuation:/[()[\]{}:;,.#|]|<<|>>/};
Prism.languages.fortran={"quoted-number":{pattern:/[BOZ](['"])[A-F0-9]+\1/i,alias:"number"},string:{pattern:/(?:\w+_)?(['"])(?:\1\1|&(?:\r\n?|\n)(?:\s*!.+(?:\r\n?|\n))?|(?!\1).)*(?:\1|&)/,inside:{comment:{pattern:/(&(?:\r\n?|\n)\s*)!.*/,lookbehind:!0}}},comment:{pattern:/!.*/,greedy:!0},boolean:/\.(?:TRUE|FALSE)\.(?:_\w+)?/i,number:/(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:[ED][+-]?\d+)?(?:_\w+)?/i,keyword:[/\b(?:INTEGER|REAL|DOUBLE ?PRECISION|COMPLEX|CHARACTER|LOGICAL)\b/i,/\b(?:END ?)?(?:BLOCK ?DATA|DO|FILE|FORALL|FUNCTION|IF|INTERFACE|MODULE(?! PROCEDURE)|PROGRAM|SELECT|SUBROUTINE|TYPE|WHERE)\b/i,/\b(?:ALLOCATABLE|ALLOCATE|BACKSPACE|CALL|CASE|CLOSE|COMMON|CONTAINS|CONTINUE|CYCLE|DATA|DEALLOCATE|DIMENSION|DO|END|EQUIVALENCE|EXIT|EXTERNAL|FORMAT|GO ?TO|IMPLICIT(?: NONE)?|INQUIRE|INTENT|INTRINSIC|MODULE PROCEDURE|NAMELIST|NULLIFY|OPEN|OPTIONAL|PARAMETER|POINTER|PRINT|PRIVATE|PUBLIC|READ|RETURN|REWIND|SAVE|SELECT|STOP|TARGET|WHILE|WRITE)\b/i,/\b(?:ASSIGNMENT|DEFAULT|ELEMENTAL|ELSE|ELSEWHERE|ELSEIF|ENTRY|IN|INCLUDE|INOUT|KIND|NULL|ONLY|OPERATOR|OUT|PURE|RECURSIVE|RESULT|SEQUENCE|STAT|THEN|USE)\b/i],operator:[/\*\*|\/\/|=>|[=\/]=|[<>]=?|::|[+\-*=%]|\.(?:EQ|NE|LT|LE|GT|GE|NOT|AND|OR|EQV|NEQV)\.|\.[A-Z]+\./i,{pattern:/(^|(?!\().)\/(?!\))/,lookbehind:!0}],punctuation:/\(\/|\/\)|[(),;:&]/};
!function(n){for(var a="(?!<#--)[^()\"']|\\((?:<expr>)*\\)|<#--[\\s\\S]*?--\x3e|\"(?:[^\\\\\"]|\\\\.)*\"|'(?:[^\\\\']|\\\\.)*'",e=0;e<2;e++)a=a.replace(/<expr>/g,a);a=a.replace(/<expr>/g,"[^sS]");var t={comment:/<#--[\s\S]*?-->/,string:[{pattern:/\br("|')(?:(?!\1)[^\\]|\\.)*\1/,greedy:!0},{pattern:RegExp("(\"|')(?:(?!\\1|\\$\\{)[^\\\\]|\\\\.|\\$\\{(?:<expr>)*?\\})*\\1".replace(/<expr>/g,a)),greedy:!0,inside:{interpolation:{pattern:RegExp("((?:^|[^\\\\])(?:\\\\\\\\)*)\\$\\{(?:<expr>)*?\\}".replace(/<expr>/g,a)),lookbehind:!0,inside:{"interpolation-punctuation":{pattern:/^\$\{|\}$/,alias:"punctuation"},rest:null}}}}],keyword:/\b(?:as)\b/,boolean:/\b(?:true|false)\b/,"builtin-function":{pattern:/((?:^|[^?])\?\s*)\w+/,lookbehind:!0,alias:"function"},function:/\w+(?=\s*\()/,number:/\d+(?:\.\d+)?/,operator:/\.\.[<*!]?|->|--|\+\+|&&|\|\||\?{1,2}|[-+*/%!=<>]=?|\b(?:gt|gte|lt|lte)\b/,punctuation:/[,;.:()[\]{}]/};t.string[1].inside.interpolation.inside.rest=t,n.languages.ftl={"ftl-comment":{pattern:/^<#--[\s\S]*/,alias:"comment"},"ftl-directive":{pattern:/^<[\s\S]+>$/,inside:{directive:{pattern:/(^<\/?)[#@][a-z]\w*/i,lookbehind:!0,alias:"keyword"},punctuation:/^<\/?|\/?>$/,content:{pattern:/[\s\S]*\S[\s\S]*/,alias:"ftl",inside:t}}},"ftl-interpolation":{pattern:/^\$\{[\s\S]*\}$/,inside:{punctuation:/^\$\{|\}$/,content:{pattern:/[\s\S]*\S[\s\S]*/,alias:"ftl",inside:t}}}},n.hooks.add("before-tokenize",function(e){var t=RegExp("<#--[\\s\\S]*?--\x3e|<\\/?[#@][a-zA-Z](?:<expr>)*?>|\\$\\{(?:<expr>)*?\\}".replace(/<expr>/g,a),"gi");n.languages["markup-templating"].buildPlaceholders(e,"ftl",t)}),n.hooks.add("after-tokenize",function(e){n.languages["markup-templating"].tokenizePlaceholders(e,"ftl")})}(Prism);
Prism.languages.go=Prism.languages.extend("clike",{keyword:/\b(?:break|case|chan|const|continue|default|defer|else|fallthrough|for|func|go(?:to)?|if|import|interface|map|package|range|return|select|struct|switch|type|var)\b/,builtin:/\b(?:bool|byte|complex(?:64|128)|error|float(?:32|64)|rune|string|u?int(?:8|16|32|64)?|uintptr|append|cap|close|complex|copy|delete|imag|len|make|new|panic|print(?:ln)?|real|recover)\b/,boolean:/\b(?:_|iota|nil|true|false)\b/,operator:/[*\/%^!=]=?|\+[=+]?|-[=-]?|\|[=|]?|&(?:=|&|\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\.\.\./,number:/(?:\b0x[a-f\d]+|(?:\b\d+\.?\d*|\B\.\d+)(?:e[-+]?\d+)?)i?/i,string:{pattern:/(["'`])(?:\\[\s\S]|(?!\1)[^\\])*\1/,greedy:!0}}),delete Prism.languages.go["class-name"];
Prism.languages.groovy=Prism.languages.extend("clike",{string:[{pattern:/("""|''')(?:[^\\]|\\[\s\S])*?\1|\$\/(?:\$\/\$|[\s\S])*?\/\$/,greedy:!0},{pattern:/(["'/])(?:\\.|(?!\1)[^\\\r\n])*\1/,greedy:!0}],keyword:/\b(?:as|def|in|abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|native|new|package|private|protected|public|return|short|static|strictfp|super|switch|synchronized|this|throw|throws|trait|transient|try|void|volatile|while)\b/,number:/\b(?:0b[01_]+|0x[\da-f_]+(?:\.[\da-f_p\-]+)?|[\d_]+(?:\.[\d_]+)?(?:e[+-]?[\d]+)?)[glidf]?\b/i,operator:{pattern:/(^|[^.])(?:~|==?~?|\?[.:]?|\*(?:[.=]|\*=?)?|\.[@&]|\.\.<|\.\.(?!\.)|-[-=>]?|\+[+=]?|!=?|<(?:<=?|=>?)?|>(?:>>?=?|=)?|&[&=]?|\|[|=]?|\/=?|\^=?|%=?)/,lookbehind:!0},punctuation:/\.+|[{}[\];(),.:$]/}),Prism.languages.insertBefore("groovy","string",{shebang:{pattern:/#!.+/,alias:"comment"}}),Prism.languages.insertBefore("groovy","punctuation",{"spock-block":/\b(?:setup|given|when|then|and|cleanup|expect|where):/}),Prism.languages.insertBefore("groovy","function",{annotation:{pattern:/(^|[^.])@\w+/,lookbehind:!0,alias:"punctuation"}}),Prism.hooks.add("wrap",function(e){if("groovy"===e.language&&"string"===e.type){var t=e.content[0];if("'"!=t){var n=/([^\\])(?:\$(?:\{.*?\}|[\w.]+))/;"$"===t&&(n=/([^\$])(?:\$(?:\{.*?\}|[\w.]+))/),e.content=e.content.replace(/&lt;/g,"<").replace(/&amp;/g,"&"),e.content=Prism.highlight(e.content,{expression:{pattern:n,lookbehind:!0,inside:Prism.languages.groovy}}),e.classes.push("/"===t?"regex":"gstring")}}});
Prism.languages.haskell={comment:{pattern:/(^|[^-!#$%*+=?&@|~.:<>^\\\/])(?:--[^-!#$%*+=?&@|~.:<>^\\\/].*|{-[\s\S]*?-})/m,lookbehind:!0},char:/'(?:[^\\']|\\(?:[abfnrtv\\"'&]|\^[A-Z@[\]^_]|NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|\d+|o[0-7]+|x[0-9a-fA-F]+))'/,string:{pattern:/"(?:[^\\"]|\\(?:[abfnrtv\\"'&]|\^[A-Z@[\]^_]|NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|\d+|o[0-7]+|x[0-9a-fA-F]+)|\\\s+\\)*"/,greedy:!0},keyword:/\b(?:case|class|data|deriving|do|else|if|in|infixl|infixr|instance|let|module|newtype|of|primitive|then|type|where)\b/,import_statement:{pattern:/((?:\r?\n|\r|^)\s*)import\s+(?:qualified\s+)?(?:[A-Z][\w']*)(?:\.[A-Z][\w']*)*(?:\s+as\s+(?:[A-Z][_a-zA-Z0-9']*)(?:\.[A-Z][\w']*)*)?(?:\s+hiding\b)?/m,lookbehind:!0,inside:{keyword:/\b(?:import|qualified|as|hiding)\b/}},builtin:/\b(?:abs|acos|acosh|all|and|any|appendFile|approxRational|asTypeOf|asin|asinh|atan|atan2|atanh|basicIORun|break|catch|ceiling|chr|compare|concat|concatMap|const|cos|cosh|curry|cycle|decodeFloat|denominator|digitToInt|div|divMod|drop|dropWhile|either|elem|encodeFloat|enumFrom|enumFromThen|enumFromThenTo|enumFromTo|error|even|exp|exponent|fail|filter|flip|floatDigits|floatRadix|floatRange|floor|fmap|foldl|foldl1|foldr|foldr1|fromDouble|fromEnum|fromInt|fromInteger|fromIntegral|fromRational|fst|gcd|getChar|getContents|getLine|group|head|id|inRange|index|init|intToDigit|interact|ioError|isAlpha|isAlphaNum|isAscii|isControl|isDenormalized|isDigit|isHexDigit|isIEEE|isInfinite|isLower|isNaN|isNegativeZero|isOctDigit|isPrint|isSpace|isUpper|iterate|last|lcm|length|lex|lexDigits|lexLitChar|lines|log|logBase|lookup|map|mapM|mapM_|max|maxBound|maximum|maybe|min|minBound|minimum|mod|negate|not|notElem|null|numerator|odd|or|ord|otherwise|pack|pi|pred|primExitWith|print|product|properFraction|putChar|putStr|putStrLn|quot|quotRem|range|rangeSize|read|readDec|readFile|readFloat|readHex|readIO|readInt|readList|readLitChar|readLn|readOct|readParen|readSigned|reads|readsPrec|realToFrac|recip|rem|repeat|replicate|return|reverse|round|scaleFloat|scanl|scanl1|scanr|scanr1|seq|sequence|sequence_|show|showChar|showInt|showList|showLitChar|showParen|showSigned|showString|shows|showsPrec|significand|signum|sin|sinh|snd|sort|span|splitAt|sqrt|subtract|succ|sum|tail|take|takeWhile|tan|tanh|threadToIOResult|toEnum|toInt|toInteger|toLower|toRational|toUpper|truncate|uncurry|undefined|unlines|until|unwords|unzip|unzip3|userError|words|writeFile|zip|zip3|zipWith|zipWith3)\b/,number:/\b(?:\d+(?:\.\d+)?(?:e[+-]?\d+)?|0o[0-7]+|0x[0-9a-f]+)\b/i,operator:/\s\.\s|[-!#$%*+=?&@|~.:<>^\\\/]*\.[-!#$%*+=?&@|~.:<>^\\\/]+|[-!#$%*+=?&@|~.:<>^\\\/]+\.[-!#$%*+=?&@|~.:<>^\\\/]*|[-!#$%*+=?&@|~:<>^\\\/]+|`(?:[A-Z][\w']*\.)*[_a-z][\w']*`/,hvariable:/\b(?:[A-Z][\w']*\.)*[_a-z][\w']*\b/,constant:/\b(?:[A-Z][\w']*\.)*[A-Z][\w']*\b/,punctuation:/[{}[\];(),.:]/},Prism.languages.hs=Prism.languages.haskell;
!function(e){var t=/\b(?:abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|exports|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|module|native|new|null|open|opens|package|private|protected|provides|public|requires|return|short|static|strictfp|super|switch|synchronized|this|throw|throws|to|transient|transitive|try|uses|var|void|volatile|while|with|yield)\b/,a=/\b[A-Z](?:\w*[a-z]\w*)?\b/;e.languages.java=e.languages.extend("clike",{"class-name":[a,/\b[A-Z]\w*(?=\s+\w+\s*[;,=())])/],keyword:t,function:[e.languages.clike.function,{pattern:/(\:\:)[a-z_]\w*/,lookbehind:!0}],number:/\b0b[01][01_]*L?\b|\b0x[\da-f_]*\.?[\da-f_p+-]+\b|(?:\b\d[\d_]*\.?[\d_]*|\B\.\d[\d_]*)(?:e[+-]?\d[\d_]*)?[dfl]?/i,operator:{pattern:/(^|[^.])(?:<<=?|>>>?=?|->|([-+&|])\2|[?:~]|[-+*/%&|^!=<>]=?)/m,lookbehind:!0}}),e.languages.insertBefore("java","string",{"triple-quoted-string":{pattern:/"""[ \t]*[\r\n](?:(?:"|"")?(?:\\.|[^"\\]))*"""/,greedy:!0,alias:"string"}}),e.languages.insertBefore("java","class-name",{annotation:{alias:"punctuation",pattern:/(^|[^.])@\w+/,lookbehind:!0},namespace:{pattern:/(\b(?:exports|import(?:\s+static)?|module|open|opens|package|provides|requires|to|transitive|uses|with)\s+)[a-z]\w*(?:\.[a-z]\w*)+/,lookbehind:!0,inside:{punctuation:/\./}},generics:{pattern:/<(?:[\w\s,.&?]|<(?:[\w\s,.&?]|<(?:[\w\s,.&?]|<[\w\s,.&?]*>)*>)*>)*>/,inside:{"class-name":a,keyword:t,punctuation:/[<>(),.:]/,operator:/[?&|]/}}})}(Prism);
!function(n){n.languages.php=n.languages.extend("clike",{keyword:/\b(?:__halt_compiler|abstract|and|array|as|break|callable|case|catch|class|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|eval|exit|extends|final|finally|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|namespace|new|or|parent|print|private|protected|public|require|require_once|return|static|switch|throw|trait|try|unset|use|var|while|xor|yield)\b/i,boolean:{pattern:/\b(?:false|true)\b/i,alias:"constant"},constant:[/\b[A-Z_][A-Z0-9_]*\b/,/\b(?:null)\b/i],comment:{pattern:/(^|[^\\])(?:\/\*[\s\S]*?\*\/|\/\/.*)/,lookbehind:!0}}),n.languages.insertBefore("php","string",{"shell-comment":{pattern:/(^|[^\\])#.*/,lookbehind:!0,alias:"comment"}}),n.languages.insertBefore("php","comment",{delimiter:{pattern:/\?>$|^<\?(?:php(?=\s)|=)?/i,alias:"important"}}),n.languages.insertBefore("php","keyword",{variable:/\$+(?:\w+\b|(?={))/i,package:{pattern:/(\\|namespace\s+|use\s+)[\w\\]+/,lookbehind:!0,inside:{punctuation:/\\/}}}),n.languages.insertBefore("php","operator",{property:{pattern:/(->)[\w]+/,lookbehind:!0}});var e={pattern:/{\$(?:{(?:{[^{}]+}|[^{}]+)}|[^{}])+}|(^|[^\\{])\$+(?:\w+(?:\[.+?]|->\w+)*)/,lookbehind:!0,inside:n.languages.php};n.languages.insertBefore("php","string",{"nowdoc-string":{pattern:/<<<'([^']+)'(?:\r\n?|\n)(?:.*(?:\r\n?|\n))*?\1;/,greedy:!0,alias:"string",inside:{delimiter:{pattern:/^<<<'[^']+'|[a-z_]\w*;$/i,alias:"symbol",inside:{punctuation:/^<<<'?|[';]$/}}}},"heredoc-string":{pattern:/<<<(?:"([^"]+)"(?:\r\n?|\n)(?:.*(?:\r\n?|\n))*?\1;|([a-z_]\w*)(?:\r\n?|\n)(?:.*(?:\r\n?|\n))*?\2;)/i,greedy:!0,alias:"string",inside:{delimiter:{pattern:/^<<<(?:"[^"]+"|[a-z_]\w*)|[a-z_]\w*;$/i,alias:"symbol",inside:{punctuation:/^<<<"?|[";]$/}},interpolation:e}},"single-quoted-string":{pattern:/'(?:\\[\s\S]|[^\\'])*'/,greedy:!0,alias:"string"},"double-quoted-string":{pattern:/"(?:\\[\s\S]|[^\\"])*"/,greedy:!0,alias:"string",inside:{interpolation:e}}}),delete n.languages.php.string,n.hooks.add("before-tokenize",function(e){if(/<\?/.test(e.code)){n.languages["markup-templating"].buildPlaceholders(e,"php",/<\?(?:[^"'/#]|\/(?![*/])|("|')(?:\\[\s\S]|(?!\1)[^\\])*\1|(?:\/\/|#)(?:[^?\n\r]|\?(?!>))*|\/\*[\s\S]*?(?:\*\/|$))*?(?:\?>|$)/gi)}}),n.hooks.add("after-tokenize",function(e){n.languages["markup-templating"].tokenizePlaceholders(e,"php")})}(Prism);
!function(d){function n(n,e){return n=n.replace(/<inner>/g,"(?:\\\\.|[^\\\\\\n\r]|(?:\r?\n|\r)(?!\r?\n|\r))"),e&&(n=n+"|"+n.replace(/_/g,"\\*")),RegExp("((?:^|[^\\\\])(?:\\\\{2})*)(?:"+n+")")}var e="(?:\\\\.|``.+?``|`[^`\r\\n]+`|[^\\\\|\r\\n`])+",t="\\|?__(?:\\|__)+\\|?(?:(?:\r?\n|\r)|$)".replace(/__/g,e),a="\\|?[ \t]*:?-{3,}:?[ \t]*(?:\\|[ \t]*:?-{3,}:?[ \t]*)+\\|?(?:\r?\n|\r)";d.languages.markdown=d.languages.extend("markup",{}),d.languages.insertBefore("markdown","prolog",{blockquote:{pattern:/^>(?:[\t ]*>)*/m,alias:"punctuation"},table:{pattern:RegExp("^"+t+a+"(?:"+t+")*","m"),inside:{"table-data-rows":{pattern:RegExp("^("+t+a+")(?:"+t+")*$"),lookbehind:!0,inside:{"table-data":{pattern:RegExp(e),inside:d.languages.markdown},punctuation:/\|/}},"table-line":{pattern:RegExp("^("+t+")"+a+"$"),lookbehind:!0,inside:{punctuation:/\||:?-{3,}:?/}},"table-header-row":{pattern:RegExp("^"+t+"$"),inside:{"table-header":{pattern:RegExp(e),alias:"important",inside:d.languages.markdown},punctuation:/\|/}}}},code:[{pattern:/(^[ \t]*(?:\r?\n|\r))(?: {4}|\t).+(?:(?:\r?\n|\r)(?: {4}|\t).+)*/m,lookbehind:!0,alias:"keyword"},{pattern:/``.+?``|`[^`\r\n]+`/,alias:"keyword"},{pattern:/^```[\s\S]*?^```$/m,greedy:!0,inside:{"code-block":{pattern:/^(```.*(?:\r?\n|\r))[\s\S]+?(?=(?:\r?\n|\r)^```$)/m,lookbehind:!0},"code-language":{pattern:/^(```).+/,lookbehind:!0},punctuation:/```/}}],title:[{pattern:/\S.*(?:\r?\n|\r)(?:==+|--+)(?=[ \t]*$)/m,alias:"important",inside:{punctuation:/==+$|--+$/}},{pattern:/(^\s*)#+.+/m,lookbehind:!0,alias:"important",inside:{punctuation:/^#+|#+$/}}],hr:{pattern:/(^\s*)([*-])(?:[\t ]*\2){2,}(?=\s*$)/m,lookbehind:!0,alias:"punctuation"},list:{pattern:/(^\s*)(?:[*+-]|\d+\.)(?=[\t ].)/m,lookbehind:!0,alias:"punctuation"},"url-reference":{pattern:/!?\[[^\]]+\]:[\t ]+(?:\S+|<(?:\\.|[^>\\])+>)(?:[\t ]+(?:"(?:\\.|[^"\\])*"|'(?:\\.|[^'\\])*'|\((?:\\.|[^)\\])*\)))?/,inside:{variable:{pattern:/^(!?\[)[^\]]+/,lookbehind:!0},string:/(?:"(?:\\.|[^"\\])*"|'(?:\\.|[^'\\])*'|\((?:\\.|[^)\\])*\))$/,punctuation:/^[\[\]!:]|[<>]/},alias:"url"},bold:{pattern:n("__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__",!0),lookbehind:!0,greedy:!0,inside:{content:{pattern:/(^..)[\s\S]+(?=..$)/,lookbehind:!0,inside:{}},punctuation:/\*\*|__/}},italic:{pattern:n("_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_",!0),lookbehind:!0,greedy:!0,inside:{content:{pattern:/(^.)[\s\S]+(?=.$)/,lookbehind:!0,inside:{}},punctuation:/[*_]/}},strike:{pattern:n("(~~?)(?:(?!~)<inner>)+?\\2",!1),lookbehind:!0,greedy:!0,inside:{content:{pattern:/(^~~?)[\s\S]+(?=\1$)/,lookbehind:!0,inside:{}},punctuation:/~~?/}},url:{pattern:n('!?\\[(?:(?!\\])<inner>)+\\](?:\\([^\\s)]+(?:[\t ]+"(?:\\\\.|[^"\\\\])*")?\\)| ?\\[(?:(?!\\])<inner>)+\\])',!1),lookbehind:!0,greedy:!0,inside:{variable:{pattern:/(\[)[^\]]+(?=\]$)/,lookbehind:!0},content:{pattern:/(^!?\[)[^\]]+(?=\])/,lookbehind:!0,inside:{}},string:{pattern:/"(?:\\.|[^"\\])*"(?=\)$)/}}}}),["url","bold","italic","strike"].forEach(function(e){["url","bold","italic","strike"].forEach(function(n){e!==n&&(d.languages.markdown[e].inside.content.inside[n]=d.languages.markdown[n])})}),d.hooks.add("after-tokenize",function(n){"markdown"!==n.language&&"md"!==n.language||!function n(e){if(e&&"string"!=typeof e)for(var t=0,a=e.length;t<a;t++){var i=e[t];if("code"===i.type){var r=i.content[1],o=i.content[3];if(r&&o&&"code-language"===r.type&&"code-block"===o.type&&"string"==typeof r.content){var l="language-"+r.content.trim().split(/\s+/)[0].toLowerCase();o.alias?"string"==typeof o.alias?o.alias=[o.alias,l]:o.alias.push(l):o.alias=[l]}}else n(i.content)}}(n.tokens)}),d.hooks.add("wrap",function(n){if("code-block"===n.type){for(var e="",t=0,a=n.classes.length;t<a;t++){var i=n.classes[t],r=/language-(.+)/.exec(i);if(r){e=r[1];break}}var o=d.languages[e];if(o){var l=n.content.replace(/&lt;/g,"<").replace(/&amp;/g,"&");n.content=d.highlight(l,o,e)}else if(e&&"none"!==e&&d.plugins.autoloader){var s="md-"+(new Date).valueOf()+"-"+Math.floor(1e16*Math.random());n.attributes.id=s,d.plugins.autoloader.loadLanguages(e,function(){var n=document.getElementById(s);n&&(n.innerHTML=d.highlight(n.textContent,d.languages[e],e))})}}}),d.languages.md=d.languages.markdown}(Prism);
Prism.languages.json={property:{pattern:/"(?:\\.|[^\\"\r\n])*"(?=\s*:)/,greedy:!0},string:{pattern:/"(?:\\.|[^\\"\r\n])*"(?!\s*:)/,greedy:!0},comment:/\/\/.*|\/\*[\s\S]*?(?:\*\/|$)/,number:/-?\d+\.?\d*(?:e[+-]?\d+)?/i,punctuation:/[{}[\],]/,operator:/:/,boolean:/\b(?:true|false)\b/,null:{pattern:/\bnull\b/,alias:"keyword"}};
Prism.languages.julia={comment:{pattern:/(^|[^\\])#.*/,lookbehind:!0},string:/("""|''')[\s\S]+?\1|("|')(?:\\.|(?!\2)[^\\\r\n])*\2/,keyword:/\b(?:abstract|baremodule|begin|bitstype|break|catch|ccall|const|continue|do|else|elseif|end|export|finally|for|function|global|if|immutable|import|importall|in|let|local|macro|module|print|println|quote|return|struct|try|type|typealias|using|while)\b/,boolean:/\b(?:true|false)\b/,number:/(?:\b(?=\d)|\B(?=\.))(?:0[box])?(?:[\da-f]+\.?\d*|\.\d+)(?:[efp][+-]?\d+)?j?/i,operator:/[-+*^%÷&$\\]=?|\/[\/=]?|!=?=?|\|[=>]?|<(?:<=?|[=:])?|>(?:=|>>?=?)?|==?=?|[~≠≤≥]/,punctuation:/[{}[\];(),.:]/,constant:/\b(?:(?:NaN|Inf)(?:16|32|64)?)\b/};
!function(e){e.languages.kotlin=e.languages.extend("clike",{keyword:{pattern:/(^|[^.])\b(?:abstract|actual|annotation|as|break|by|catch|class|companion|const|constructor|continue|crossinline|data|do|dynamic|else|enum|expect|external|final|finally|for|fun|get|if|import|in|infix|init|inline|inner|interface|internal|is|lateinit|noinline|null|object|open|operator|out|override|package|private|protected|public|reified|return|sealed|set|super|suspend|tailrec|this|throw|to|try|typealias|val|var|vararg|when|where|while)\b/,lookbehind:!0},function:[/\w+(?=\s*\()/,{pattern:/(\.)\w+(?=\s*\{)/,lookbehind:!0}],number:/\b(?:0[xX][\da-fA-F]+(?:_[\da-fA-F]+)*|0[bB][01]+(?:_[01]+)*|\d+(?:_\d+)*(?:\.\d+(?:_\d+)*)?(?:[eE][+-]?\d+(?:_\d+)*)?[fFL]?)\b/,operator:/\+[+=]?|-[-=>]?|==?=?|!(?:!|==?)?|[\/*%<>]=?|[?:]:?|\.\.|&&|\|\||\b(?:and|inv|or|shl|shr|ushr|xor)\b/}),delete e.languages.kotlin["class-name"],e.languages.insertBefore("kotlin","string",{"raw-string":{pattern:/("""|''')[\s\S]*?\1/,alias:"string"}}),e.languages.insertBefore("kotlin","keyword",{annotation:{pattern:/\B@(?:\w+:)?(?:[A-Z]\w*|\[[^\]]+\])/,alias:"builtin"}}),e.languages.insertBefore("kotlin","function",{label:{pattern:/\w+@|@\w+/,alias:"symbol"}});var n=[{pattern:/\$\{[^}]+\}/,inside:{delimiter:{pattern:/^\$\{|\}$/,alias:"variable"},rest:e.languages.kotlin}},{pattern:/\$\w+/,alias:"variable"}];e.languages.kotlin.string.inside=e.languages.kotlin["raw-string"].inside={interpolation:n}}(Prism);
!function(a){var e=/\\(?:[^a-z()[\]]|[a-z*]+)/i,n={"equation-command":{pattern:e,alias:"regex"}};a.languages.latex={comment:/%.*/m,cdata:{pattern:/(\\begin\{((?:verbatim|lstlisting)\*?)\})[\s\S]*?(?=\\end\{\2\})/,lookbehind:!0},equation:[{pattern:/\$\$(?:\\[\s\S]|[^\\$])+\$\$|\$(?:\\[\s\S]|[^\\$])+\$|\\\([\s\S]*?\\\)|\\\[[\s\S]*?\\\]/,inside:n,alias:"string"},{pattern:/(\\begin\{((?:equation|math|eqnarray|align|multline|gather)\*?)\})[\s\S]*?(?=\\end\{\2\})/,lookbehind:!0,inside:n,alias:"string"}],keyword:{pattern:/(\\(?:begin|end|ref|cite|label|usepackage|documentclass)(?:\[[^\]]+\])?\{)[^}]+(?=\})/,lookbehind:!0},url:{pattern:/(\\url\{)[^}]+(?=\})/,lookbehind:!0},headline:{pattern:/(\\(?:part|chapter|section|subsection|frametitle|subsubsection|paragraph|subparagraph|subsubparagraph|subsubsubparagraph)\*?(?:\[[^\]]+\])?\{)[^}]+(?=\}(?:\[[^\]]+\])?)/,lookbehind:!0,alias:"class-name"},function:{pattern:e,alias:"selector"},punctuation:/[[\]{}&]/},a.languages.tex=a.languages.latex,a.languages.context=a.languages.latex}(Prism);
!function(e){function n(e){return RegExp("(\\()"+e+"(?=[\\s\\)])")}function a(e){return RegExp("([\\s([])"+e+"(?=[\\s)])")}var t="[-+*/_~!@$%^=<>{}\\w]+",r="(\\()",i="(?=\\))",s="(?=\\s)",o={heading:{pattern:/;;;.*/,alias:["comment","title"]},comment:/;.*/,string:{pattern:/"(?:[^"\\]|\\.)*"/,greedy:!0,inside:{argument:/[-A-Z]+(?=[.,\s])/,symbol:RegExp("`"+t+"'")}},"quoted-symbol":{pattern:RegExp("#?'"+t),alias:["variable","symbol"]},"lisp-property":{pattern:RegExp(":"+t),alias:"property"},splice:{pattern:RegExp(",@?"+t),alias:["symbol","variable"]},keyword:[{pattern:RegExp(r+"(?:(?:lexical-)?let\\*?|(?:cl-)?letf|if|when|while|unless|cons|cl-loop|and|or|not|cond|setq|error|message|null|require|provide|use-package)"+s),lookbehind:!0},{pattern:RegExp(r+"(?:for|do|collect|return|finally|append|concat|in|by)"+s),lookbehind:!0}],declare:{pattern:n("declare"),lookbehind:!0,alias:"keyword"},interactive:{pattern:n("interactive"),lookbehind:!0,alias:"keyword"},boolean:{pattern:a("(?:t|nil)"),lookbehind:!0},number:{pattern:a("[-+]?\\d+(?:\\.\\d*)?"),lookbehind:!0},defvar:{pattern:RegExp(r+"def(?:var|const|custom|group)\\s+"+t),lookbehind:!0,inside:{keyword:/^def[a-z]+/,variable:RegExp(t)}},defun:{pattern:RegExp(r+"(?:cl-)?(?:defun\\*?|defmacro)\\s+"+t+"\\s+\\([\\s\\S]*?\\)"),lookbehind:!0,inside:{keyword:/^(?:cl-)?def\S+/,arguments:null,function:{pattern:RegExp("(^\\s)"+t),lookbehind:!0},punctuation:/[()]/}},lambda:{pattern:RegExp(r+"lambda\\s+\\((?:&?"+t+"\\s*)*\\)"),lookbehind:!0,inside:{keyword:/^lambda/,arguments:null,punctuation:/[()]/}},car:{pattern:RegExp(r+t),lookbehind:!0},punctuation:[/(?:['`,]?\(|[)\[\]])/,{pattern:/(\s)\.(?=\s)/,lookbehind:!0}]},l={"lisp-marker":RegExp("&[-+*/_~!@$%^=<>{}\\w]+"),rest:{argument:{pattern:RegExp(t),alias:"variable"},varform:{pattern:RegExp(r+t+"\\s+\\S[\\s\\S]*"+i),lookbehind:!0,inside:{string:o.string,boolean:o.boolean,number:o.number,symbol:o.symbol,punctuation:/[()]/}}}},p="\\S+(?:\\s+\\S+)*",d={pattern:RegExp(r+"[\\s\\S]*"+i),lookbehind:!0,inside:{"rest-vars":{pattern:RegExp("&(?:rest|body)\\s+"+p),inside:l},"other-marker-vars":{pattern:RegExp("&(?:optional|aux)\\s+"+p),inside:l},keys:{pattern:RegExp("&key\\s+"+p+"(?:\\s+&allow-other-keys)?"),inside:l},argument:{pattern:RegExp(t),alias:"variable"},punctuation:/[()]/}};o.lambda.inside.arguments=d,o.defun.inside.arguments=e.util.clone(d),o.defun.inside.arguments.inside.sublist=d,e.languages.lisp=o,e.languages.elisp=o,e.languages.emacs=o,e.languages["emacs-lisp"]=o}(Prism);
Prism.languages.makefile={comment:{pattern:/(^|[^\\])#(?:\\(?:\r\n|[\s\S])|[^\\\r\n])*/,lookbehind:!0},string:{pattern:/(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,greedy:!0},builtin:/\.[A-Z][^:#=\s]+(?=\s*:(?!=))/,symbol:{pattern:/^[^:=\r\n]+(?=\s*:(?!=))/m,inside:{variable:/\$+(?:[^(){}:#=\s]+|(?=[({]))/}},variable:/\$+(?:[^(){}:#=\s]+|\([@*%<^+?][DF]\)|(?=[({]))/,keyword:[/-include\b|\b(?:define|else|endef|endif|export|ifn?def|ifn?eq|include|override|private|sinclude|undefine|unexport|vpath)\b/,{pattern:/(\()(?:addsuffix|abspath|and|basename|call|dir|error|eval|file|filter(?:-out)?|findstring|firstword|flavor|foreach|guile|if|info|join|lastword|load|notdir|or|origin|patsubst|realpath|shell|sort|strip|subst|suffix|value|warning|wildcard|word(?:s|list)?)(?=[ \t])/,lookbehind:!0}],operator:/(?:::|[?:+!])?=|[|@]/,punctuation:/[:;(){}]/};
Prism.languages.objectivec=Prism.languages.extend("c",{keyword:/\b(?:asm|typeof|inline|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while|in|self|super)\b|(?:@interface|@end|@implementation|@protocol|@class|@public|@protected|@private|@property|@try|@catch|@finally|@throw|@synthesize|@dynamic|@selector)\b/,string:/("|')(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1|@"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"/,operator:/-[->]?|\+\+?|!=?|<<?=?|>>?=?|==?|&&?|\|\|?|[~^%?*\/@]/}),delete Prism.languages.objectivec["class-name"];
Prism.languages.pascal={comment:[/\(\*[\s\S]+?\*\)/,/\{[\s\S]+?\}/,/\/\/.*/],string:{pattern:/(?:'(?:''|[^'\r\n])*'|#[&$%]?[a-f\d]+)+|\^[a-z]/i,greedy:!0},keyword:[{pattern:/(^|[^&])\b(?:absolute|array|asm|begin|case|const|constructor|destructor|do|downto|else|end|file|for|function|goto|if|implementation|inherited|inline|interface|label|nil|object|of|operator|packed|procedure|program|record|reintroduce|repeat|self|set|string|then|to|type|unit|until|uses|var|while|with)\b/i,lookbehind:!0},{pattern:/(^|[^&])\b(?:dispose|exit|false|new|true)\b/i,lookbehind:!0},{pattern:/(^|[^&])\b(?:class|dispinterface|except|exports|finalization|finally|initialization|inline|library|on|out|packed|property|raise|resourcestring|threadvar|try)\b/i,lookbehind:!0},{pattern:/(^|[^&])\b(?:absolute|abstract|alias|assembler|bitpacked|break|cdecl|continue|cppdecl|cvar|default|deprecated|dynamic|enumerator|experimental|export|external|far|far16|forward|generic|helper|implements|index|interrupt|iochecks|local|message|name|near|nodefault|noreturn|nostackframe|oldfpccall|otherwise|overload|override|pascal|platform|private|protected|public|published|read|register|reintroduce|result|safecall|saveregisters|softfloat|specialize|static|stdcall|stored|strict|unaligned|unimplemented|varargs|virtual|write)\b/i,lookbehind:!0}],number:[/(?:[&%]\d+|\$[a-f\d]+)/i,/\b\d+(?:\.\d+)?(?:e[+-]?\d+)?/i],operator:[/\.\.|\*\*|:=|<[<=>]?|>[>=]?|[+\-*\/]=?|[@^=]/i,{pattern:/(^|[^&])\b(?:and|as|div|exclude|in|include|is|mod|not|or|shl|shr|xor)\b/,lookbehind:!0}],punctuation:/\(\.|\.\)|[()\[\]:;,.]/},Prism.languages.objectpascal=Prism.languages.pascal;
Prism.languages.perl={comment:[{pattern:/(^\s*)=\w+[\s\S]*?=cut.*/m,lookbehind:!0},{pattern:/(^|[^\\$])#.*/,lookbehind:!0}],string:[{pattern:/\b(?:q|qq|qx|qw)\s*([^a-zA-Z0-9\s{(\[<])(?:(?!\1)[^\\]|\\[\s\S])*\1/,greedy:!0},{pattern:/\b(?:q|qq|qx|qw)\s+([a-zA-Z0-9])(?:(?!\1)[^\\]|\\[\s\S])*\1/,greedy:!0},{pattern:/\b(?:q|qq|qx|qw)\s*\((?:[^()\\]|\\[\s\S])*\)/,greedy:!0},{pattern:/\b(?:q|qq|qx|qw)\s*\{(?:[^{}\\]|\\[\s\S])*\}/,greedy:!0},{pattern:/\b(?:q|qq|qx|qw)\s*\[(?:[^[\]\\]|\\[\s\S])*\]/,greedy:!0},{pattern:/\b(?:q|qq|qx|qw)\s*<(?:[^<>\\]|\\[\s\S])*>/,greedy:!0},{pattern:/("|`)(?:(?!\1)[^\\]|\\[\s\S])*\1/,greedy:!0},{pattern:/'(?:[^'\\\r\n]|\\.)*'/,greedy:!0}],regex:[{pattern:/\b(?:m|qr)\s*([^a-zA-Z0-9\s{(\[<])(?:(?!\1)[^\\]|\\[\s\S])*\1[msixpodualngc]*/,greedy:!0},{pattern:/\b(?:m|qr)\s+([a-zA-Z0-9])(?:(?!\1)[^\\]|\\[\s\S])*\1[msixpodualngc]*/,greedy:!0},{pattern:/\b(?:m|qr)\s*\((?:[^()\\]|\\[\s\S])*\)[msixpodualngc]*/,greedy:!0},{pattern:/\b(?:m|qr)\s*\{(?:[^{}\\]|\\[\s\S])*\}[msixpodualngc]*/,greedy:!0},{pattern:/\b(?:m|qr)\s*\[(?:[^[\]\\]|\\[\s\S])*\][msixpodualngc]*/,greedy:!0},{pattern:/\b(?:m|qr)\s*<(?:[^<>\\]|\\[\s\S])*>[msixpodualngc]*/,greedy:!0},{pattern:/(^|[^-]\b)(?:s|tr|y)\s*([^a-zA-Z0-9\s{(\[<])(?:(?!\2)[^\\]|\\[\s\S])*\2(?:(?!\2)[^\\]|\\[\s\S])*\2[msixpodualngcer]*/,lookbehind:!0,greedy:!0},{pattern:/(^|[^-]\b)(?:s|tr|y)\s+([a-zA-Z0-9])(?:(?!\2)[^\\]|\\[\s\S])*\2(?:(?!\2)[^\\]|\\[\s\S])*\2[msixpodualngcer]*/,lookbehind:!0,greedy:!0},{pattern:/(^|[^-]\b)(?:s|tr|y)\s*\((?:[^()\\]|\\[\s\S])*\)\s*\((?:[^()\\]|\\[\s\S])*\)[msixpodualngcer]*/,lookbehind:!0,greedy:!0},{pattern:/(^|[^-]\b)(?:s|tr|y)\s*\{(?:[^{}\\]|\\[\s\S])*\}\s*\{(?:[^{}\\]|\\[\s\S])*\}[msixpodualngcer]*/,lookbehind:!0,greedy:!0},{pattern:/(^|[^-]\b)(?:s|tr|y)\s*\[(?:[^[\]\\]|\\[\s\S])*\]\s*\[(?:[^[\]\\]|\\[\s\S])*\][msixpodualngcer]*/,lookbehind:!0,greedy:!0},{pattern:/(^|[^-]\b)(?:s|tr|y)\s*<(?:[^<>\\]|\\[\s\S])*>\s*<(?:[^<>\\]|\\[\s\S])*>[msixpodualngcer]*/,lookbehind:!0,greedy:!0},{pattern:/\/(?:[^\/\\\r\n]|\\.)*\/[msixpodualngc]*(?=\s*(?:$|[\r\n,.;})&|\-+*~<>!?^]|(?:lt|gt|le|ge|eq|ne|cmp|not|and|or|xor|x)\b))/,greedy:!0}],variable:[/[&*$@%]\{\^[A-Z]+\}/,/[&*$@%]\^[A-Z_]/,/[&*$@%]#?(?=\{)/,/[&*$@%]#?(?:(?:::)*'?(?!\d)[\w$]+)+(?:::)*/i,/[&*$@%]\d+/,/(?!%=)[$@%][!"#$%&'()*+,\-.\/:;<=>?@[\\\]^_`{|}~]/],filehandle:{pattern:/<(?![<=])\S*>|\b_\b/,alias:"symbol"},vstring:{pattern:/v\d+(?:\.\d+)*|\d+(?:\.\d+){2,}/,alias:"string"},function:{pattern:/sub [a-z0-9_]+/i,inside:{keyword:/sub/}},keyword:/\b(?:any|break|continue|default|delete|die|do|else|elsif|eval|for|foreach|given|goto|if|last|local|my|next|our|package|print|redo|require|return|say|state|sub|switch|undef|unless|until|use|when|while)\b/,number:/\b(?:0x[\dA-Fa-f](?:_?[\dA-Fa-f])*|0b[01](?:_?[01])*|(?:\d(?:_?\d)*)?\.?\d(?:_?\d)*(?:[Ee][+-]?\d+)?)\b/,operator:/-[rwxoRWXOezsfdlpSbctugkTBMAC]\b|\+[+=]?|-[-=>]?|\*\*?=?|\/\/?=?|=[=~>]?|~[~=]?|\|\|?=?|&&?=?|<(?:=>?|<=?)?|>>?=?|![~=]?|[%^]=?|\.(?:=|\.\.?)?|[\\?]|\bx(?:=|\b)|\b(?:lt|gt|le|ge|eq|ne|cmp|not|and|or|xor)\b/,punctuation:/[{}[\];(),:]/};
Prism.languages.sql={comment:{pattern:/(^|[^\\])(?:\/\*[\s\S]*?\*\/|(?:--|\/\/|#).*)/,lookbehind:!0},variable:[{pattern:/@(["'`])(?:\\[\s\S]|(?!\1)[^\\])+\1/,greedy:!0},/@[\w.$]+/],string:{pattern:/(^|[^@\\])("|')(?:\\[\s\S]|(?!\2)[^\\]|\2\2)*\2/,greedy:!0,lookbehind:!0},function:/\b(?:AVG|COUNT|FIRST|FORMAT|LAST|LCASE|LEN|MAX|MID|MIN|MOD|NOW|ROUND|SUM|UCASE)(?=\s*\()/i,keyword:/\b(?:ACTION|ADD|AFTER|ALGORITHM|ALL|ALTER|ANALYZE|ANY|APPLY|AS|ASC|AUTHORIZATION|AUTO_INCREMENT|BACKUP|BDB|BEGIN|BERKELEYDB|BIGINT|BINARY|BIT|BLOB|BOOL|BOOLEAN|BREAK|BROWSE|BTREE|BULK|BY|CALL|CASCADED?|CASE|CHAIN|CHAR(?:ACTER|SET)?|CHECK(?:POINT)?|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMNS?|COMMENT|COMMIT(?:TED)?|COMPUTE|CONNECT|CONSISTENT|CONSTRAINT|CONTAINS(?:TABLE)?|CONTINUE|CONVERT|CREATE|CROSS|CURRENT(?:_DATE|_TIME|_TIMESTAMP|_USER)?|CURSOR|CYCLE|DATA(?:BASES?)?|DATE(?:TIME)?|DAY|DBCC|DEALLOCATE|DEC|DECIMAL|DECLARE|DEFAULT|DEFINER|DELAYED|DELETE|DELIMITERS?|DENY|DESC|DESCRIBE|DETERMINISTIC|DISABLE|DISCARD|DISK|DISTINCT|DISTINCTROW|DISTRIBUTED|DO|DOUBLE|DROP|DUMMY|DUMP(?:FILE)?|DUPLICATE|ELSE(?:IF)?|ENABLE|ENCLOSED|END|ENGINE|ENUM|ERRLVL|ERRORS|ESCAPED?|EXCEPT|EXEC(?:UTE)?|EXISTS|EXIT|EXPLAIN|EXTENDED|FETCH|FIELDS|FILE|FILLFACTOR|FIRST|FIXED|FLOAT|FOLLOWING|FOR(?: EACH ROW)?|FORCE|FOREIGN|FREETEXT(?:TABLE)?|FROM|FULL|FUNCTION|GEOMETRY(?:COLLECTION)?|GLOBAL|GOTO|GRANT|GROUP|HANDLER|HASH|HAVING|HOLDLOCK|HOUR|IDENTITY(?:_INSERT|COL)?|IF|IGNORE|IMPORT|INDEX|INFILE|INNER|INNODB|INOUT|INSERT|INT|INTEGER|INTERSECT|INTERVAL|INTO|INVOKER|ISOLATION|ITERATE|JOIN|KEYS?|KILL|LANGUAGE|LAST|LEAVE|LEFT|LEVEL|LIMIT|LINENO|LINES|LINESTRING|LOAD|LOCAL|LOCK|LONG(?:BLOB|TEXT)|LOOP|MATCH(?:ED)?|MEDIUM(?:BLOB|INT|TEXT)|MERGE|MIDDLEINT|MINUTE|MODE|MODIFIES|MODIFY|MONTH|MULTI(?:LINESTRING|POINT|POLYGON)|NATIONAL|NATURAL|NCHAR|NEXT|NO|NONCLUSTERED|NULLIF|NUMERIC|OFF?|OFFSETS?|ON|OPEN(?:DATASOURCE|QUERY|ROWSET)?|OPTIMIZE|OPTION(?:ALLY)?|ORDER|OUT(?:ER|FILE)?|OVER|PARTIAL|PARTITION|PERCENT|PIVOT|PLAN|POINT|POLYGON|PRECEDING|PRECISION|PREPARE|PREV|PRIMARY|PRINT|PRIVILEGES|PROC(?:EDURE)?|PUBLIC|PURGE|QUICK|RAISERROR|READS?|REAL|RECONFIGURE|REFERENCES|RELEASE|RENAME|REPEAT(?:ABLE)?|REPLACE|REPLICATION|REQUIRE|RESIGNAL|RESTORE|RESTRICT|RETURNS?|REVOKE|RIGHT|ROLLBACK|ROUTINE|ROW(?:COUNT|GUIDCOL|S)?|RTREE|RULE|SAVE(?:POINT)?|SCHEMA|SECOND|SELECT|SERIAL(?:IZABLE)?|SESSION(?:_USER)?|SET(?:USER)?|SHARE|SHOW|SHUTDOWN|SIMPLE|SMALLINT|SNAPSHOT|SOME|SONAME|SQL|START(?:ING)?|STATISTICS|STATUS|STRIPED|SYSTEM_USER|TABLES?|TABLESPACE|TEMP(?:ORARY|TABLE)?|TERMINATED|TEXT(?:SIZE)?|THEN|TIME(?:STAMP)?|TINY(?:BLOB|INT|TEXT)|TOP?|TRAN(?:SACTIONS?)?|TRIGGER|TRUNCATE|TSEQUAL|TYPES?|UNBOUNDED|UNCOMMITTED|UNDEFINED|UNION|UNIQUE|UNLOCK|UNPIVOT|UNSIGNED|UPDATE(?:TEXT)?|USAGE|USE|USER|USING|VALUES?|VAR(?:BINARY|CHAR|CHARACTER|YING)|VIEW|WAITFOR|WARNINGS|WHEN|WHERE|WHILE|WITH(?: ROLLUP|IN)?|WORK|WRITE(?:TEXT)?|YEAR)\b/i,boolean:/\b(?:TRUE|FALSE|NULL)\b/i,number:/\b0x[\da-f]+\b|\b\d+\.?\d*|\B\.\d+\b/i,operator:/[-+*\/=%^~]|&&?|\|\|?|!=?|<(?:=>?|<|>)?|>[>=]?|\b(?:AND|BETWEEN|IN|LIKE|NOT|OR|IS|DIV|REGEXP|RLIKE|SOUNDS LIKE|XOR)\b/i,punctuation:/[;[\]()`,.]/};
Prism.languages.prolog={comment:[/%.+/,/\/\*[\s\S]*?\*\//],string:{pattern:/(["'])(?:\1\1|\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,greedy:!0},builtin:/\b(?:fx|fy|xf[xy]?|yfx?)\b/,variable:/\b[A-Z_]\w*/,function:/\b[a-z]\w*(?:(?=\()|\/\d+)/,number:/\b\d+\.?\d*/,operator:/[:\\=><\-?*@\/;+^|!$.]+|\b(?:is|mod|not|xor)\b/,punctuation:/[(){}\[\],]/};
Prism.languages.python={comment:{pattern:/(^|[^\\])#.*/,lookbehind:!0},"string-interpolation":{pattern:/(?:f|rf|fr)(?:("""|''')[\s\S]+?\1|("|')(?:\\.|(?!\2)[^\\\r\n])*\2)/i,greedy:!0,inside:{interpolation:{pattern:/((?:^|[^{])(?:{{)*){(?!{)(?:[^{}]|{(?!{)(?:[^{}]|{(?!{)(?:[^{}])+})+})+}/,lookbehind:!0,inside:{"format-spec":{pattern:/(:)[^:(){}]+(?=}$)/,lookbehind:!0},"conversion-option":{pattern:/![sra](?=[:}]$)/,alias:"punctuation"},rest:null}},string:/[\s\S]+/}},"triple-quoted-string":{pattern:/(?:[rub]|rb|br)?("""|''')[\s\S]+?\1/i,greedy:!0,alias:"string"},string:{pattern:/(?:[rub]|rb|br)?("|')(?:\\.|(?!\1)[^\\\r\n])*\1/i,greedy:!0},function:{pattern:/((?:^|\s)def[ \t]+)[a-zA-Z_]\w*(?=\s*\()/g,lookbehind:!0},"class-name":{pattern:/(\bclass\s+)\w+/i,lookbehind:!0},decorator:{pattern:/(^\s*)@\w+(?:\.\w+)*/im,lookbehind:!0,alias:["annotation","punctuation"],inside:{punctuation:/\./}},keyword:/\b(?:and|as|assert|async|await|break|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|nonlocal|not|or|pass|print|raise|return|try|while|with|yield)\b/,builtin:/\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\b/,boolean:/\b(?:True|False|None)\b/,number:/(?:\b(?=\d)|\B(?=\.))(?:0[bo])?(?:(?:\d|0x[\da-f])[\da-f]*\.?\d*|\.\d+)(?:e[+-]?\d+)?j?\b/i,operator:/[-+%=]=?|!=|\*\*?=?|\/\/?=?|<[<=>]?|>[=>]?|[&|^~]/,punctuation:/[{}[\];(),.:]/},Prism.languages.python["string-interpolation"].inside.interpolation.inside.rest=Prism.languages.python,Prism.languages.py=Prism.languages.python;
Prism.languages.r={comment:/#.*/,string:{pattern:/(['"])(?:\\.|(?!\1)[^\\\r\n])*\1/,greedy:!0},"percent-operator":{pattern:/%[^%\s]*%/,alias:"operator"},boolean:/\b(?:TRUE|FALSE)\b/,ellipsis:/\.\.(?:\.|\d+)/,number:[/\b(?:NaN|Inf)\b/,/(?:\b0x[\dA-Fa-f]+(?:\.\d*)?|\b\d+\.?\d*|\B\.\d+)(?:[EePp][+-]?\d+)?[iL]?/],keyword:/\b(?:if|else|repeat|while|function|for|in|next|break|NULL|NA|NA_integer_|NA_real_|NA_complex_|NA_character_)\b/,operator:/->?>?|<(?:=|<?-)?|[>=!]=?|::?|&&?|\|\|?|[+*\/^$@~]/,punctuation:/[(){}\[\],;]/};
Prism.languages.rust={comment:[{pattern:/(^|[^\\])\/\*[\s\S]*?\*\//,lookbehind:!0},{pattern:/(^|[^\\:])\/\/.*/,lookbehind:!0}],string:[{pattern:/b?r(#*)"(?:\\.|(?!"\1)[^\\\r\n])*"\1/,greedy:!0},{pattern:/b?"(?:\\.|[^\\\r\n"])*"/,greedy:!0}],char:{pattern:/b?'(?:\\(?:x[0-7][\da-fA-F]|u{(?:[\da-fA-F]_*){1,6}|.)|[^\\\r\n\t'])'/,alias:"string"},"lifetime-annotation":{pattern:/'[^\s>']+/,alias:"symbol"},keyword:/\b(?:abstract|alignof|as|async|await|be|box|break|const|continue|crate|do|dyn|else|enum|extern|false|final|fn|for|if|impl|in|let|loop|match|mod|move|mut|offsetof|once|override|priv|pub|pure|ref|return|sizeof|static|self|Self|struct|super|true|trait|type|typeof|union|unsafe|unsized|use|virtual|where|while|yield)\b/,attribute:{pattern:/#!?\[.+?\]/,greedy:!0,alias:"attr-name"},function:[/\w+(?=\s*\()/,/\w+!(?=\s*\(|\[)/],"macro-rules":{pattern:/\w+!/,alias:"function"},number:/\b(?:0x[\dA-Fa-f](?:_?[\dA-Fa-f])*|0o[0-7](?:_?[0-7])*|0b[01](?:_?[01])*|(?:\d(?:_?\d)*)?\.?\d(?:_?\d)*(?:[Ee][+-]?\d+)?)(?:_?(?:[iu](?:8|16|32|64)?|f32|f64))?\b/,"closure-params":{pattern:/\|[^|]*\|(?=\s*[{-])/,inside:{punctuation:/[|:,]/,operator:/[&*]/}},punctuation:/->|\.\.=|\.{1,3}|::|[{}[\];(),:]/,operator:/[-+*\/%!^]=?|=[=>]?|&[&=]?|\|[|=]?|<<?=?|>>?=?|[@?]/};
Prism.languages.smalltalk={comment:/"(?:""|[^"])*"/,character:{pattern:/\$./,alias:"string"},string:/'(?:''|[^'])*'/,symbol:/#[\da-z]+|#(?:-|([+\/\\*~<>=@%|&?!])\1?)|#(?=\()/i,"block-arguments":{pattern:/(\[\s*):[^\[|]*\|/,lookbehind:!0,inside:{variable:/:[\da-z]+/i,punctuation:/\|/}},"temporary-variables":{pattern:/\|[^|]+\|/,inside:{variable:/[\da-z]+/i,punctuation:/\|/}},keyword:/\b(?:nil|true|false|self|super|new)\b/,number:[/\d+r-?[\dA-Z]+(?:\.[\dA-Z]+)?(?:e-?\d+)?/,/\b\d+(?:\.\d+)?(?:e-?\d+)?/],operator:/[<=]=?|:=|~[~=]|\/\/?|\\\\|>[>=]?|[!^+\-*&|,@]/,punctuation:/[.;:?\[\](){}]/};
!function(E){var A=E.languages.plsql=E.languages.extend("sql",{comment:[/\/\*[\s\S]*?\*\//,/--.*/]}),T=A.keyword;Array.isArray(T)||(T=A.keyword=[T]),T.unshift(/\b(?:ACCESS|AGENT|AGGREGATE|ARRAY|ARROW|AT|ATTRIBUTE|AUDIT|AUTHID|BFILE_BASE|BLOB_BASE|BLOCK|BODY|BOTH|BOUND|BYTE|CALLING|CHAR_BASE|CHARSET(?:FORM|ID)|CLOB_BASE|COLAUTH|COLLECT|CLUSTERS?|COMPILED|COMPRESS|CONSTANT|CONSTRUCTOR|CONTEXT|CRASH|CUSTOMDATUM|DANGLING|DATE_BASE|DEFINE|DETERMINISTIC|DURATION|ELEMENT|EMPTY|EXCEPTIONS?|EXCLUSIVE|EXTERNAL|FINAL|FORALL|FORM|FOUND|GENERAL|HEAP|HIDDEN|IDENTIFIED|IMMEDIATE|INCLUDING|INCREMENT|INDICATOR|INDEXES|INDICES|INFINITE|INITIAL|ISOPEN|INSTANTIABLE|INTERFACE|INVALIDATE|JAVA|LARGE|LEADING|LENGTH|LIBRARY|LIKE[24C]|LIMITED|LONG|LOOP|MAP|MAXEXTENTS|MAXLEN|MEMBER|MINUS|MLSLABEL|MULTISET|NAME|NAN|NATIVE|NEW|NOAUDIT|NOCOMPRESS|NOCOPY|NOTFOUND|NOWAIT|NUMBER(?:_BASE)?|OBJECT|OCI(?:COLL|DATE|DATETIME|DURATION|INTERVAL|LOBLOCATOR|NUMBER|RAW|REF|REFCURSOR|ROWID|STRING|TYPE)|OFFLINE|ONLINE|ONLY|OPAQUE|OPERATOR|ORACLE|ORADATA|ORGANIZATION|ORL(?:ANY|VARY)|OTHERS|OVERLAPS|OVERRIDING|PACKAGE|PARALLEL_ENABLE|PARAMETERS?|PASCAL|PCTFREE|PIPE(?:LINED)?|PRAGMA|PRIOR|PRIVATE|RAISE|RANGE|RAW|RECORD|REF|REFERENCE|REM|REMAINDER|RESULT|RESOURCE|RETURNING|REVERSE|ROW(?:ID|NUM|TYPE)|SAMPLE|SB[124]|SEGMENT|SELF|SEPARATE|SEQUENCE|SHORT|SIZE(?:_T)?|SPARSE|SQL(?:CODE|DATA|NAME|STATE)|STANDARD|STATIC|STDDEV|STORED|STRING|STRUCT|STYLE|SUBMULTISET|SUBPARTITION|SUBSTITUTABLE|SUBTYPE|SUCCESSFUL|SYNONYM|SYSDATE|TABAUTH|TDO|THE|TIMEZONE_(?:ABBR|HOUR|MINUTE|REGION)|TRAILING|TRANSAC(?:TIONAL)?|TRUSTED|UB[124]|UID|UNDER|UNTRUSTED|VALIDATE|VALIST|VARCHAR2|VARIABLE|VARIANCE|VARRAY|VIEWS|VOID|WHENEVER|WRAPPED|ZONE)\b/i);var R=A.operator;Array.isArray(R)||(R=A.operator=[R]),R.unshift(/:=/)}(Prism);
Prism.languages.swift=Prism.languages.extend("clike",{string:{pattern:/("|')(?:\\(?:\((?:[^()]|\([^)]+\))+\)|\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,greedy:!0,inside:{interpolation:{pattern:/\\\((?:[^()]|\([^)]+\))+\)/,inside:{delimiter:{pattern:/^\\\(|\)$/,alias:"variable"}}}}},keyword:/\b(?:as|associativity|break|case|catch|class|continue|convenience|default|defer|deinit|didSet|do|dynamic(?:Type)?|else|enum|extension|fallthrough|final|for|func|get|guard|if|import|in|infix|init|inout|internal|is|lazy|left|let|mutating|new|none|nonmutating|operator|optional|override|postfix|precedence|prefix|private|protocol|public|repeat|required|rethrows|return|right|safe|self|Self|set|static|struct|subscript|super|switch|throws?|try|Type|typealias|unowned|unsafe|var|weak|where|while|willSet|__(?:COLUMN__|FILE__|FUNCTION__|LINE__))\b/,number:/\b(?:[\d_]+(?:\.[\de_]+)?|0x[a-f0-9_]+(?:\.[a-f0-9p_]+)?|0b[01_]+|0o[0-7_]+)\b/i,constant:/\b(?:nil|[A-Z_]{2,}|k[A-Z][A-Za-z_]+)\b/,atrule:/@\b(?:IB(?:Outlet|Designable|Action|Inspectable)|class_protocol|exported|noreturn|NS(?:Copying|Managed)|objc|UIApplicationMain|auto_closure)\b/,builtin:/\b(?:[A-Z]\S+|abs|advance|alignof(?:Value)?|assert|contains|count(?:Elements)?|debugPrint(?:ln)?|distance|drop(?:First|Last)|dump|enumerate|equal|filter|find|first|getVaList|indices|isEmpty|join|last|lexicographicalCompare|map|max(?:Element)?|min(?:Element)?|numericCast|overlaps|partition|print(?:ln)?|reduce|reflect|reverse|sizeof(?:Value)?|sort(?:ed)?|split|startsWith|stride(?:of(?:Value)?)?|suffix|swap|toDebugString|toString|transcode|underestimateCount|unsafeBitCast|with(?:ExtendedLifetime|Unsafe(?:MutablePointers?|Pointers?)|VaList))\b/}),Prism.languages.swift.string.inside.interpolation.inside.rest=Prism.languages.swift;
Prism.languages.tcl={comment:{pattern:/(^|[^\\])#.*/,lookbehind:!0},string:{pattern:/"(?:[^"\\\r\n]|\\(?:\r\n|[\s\S]))*"/,greedy:!0},variable:[{pattern:/(\$)(?:::)?(?:[a-zA-Z0-9]+::)*\w+/,lookbehind:!0},{pattern:/(\$){[^}]+}/,lookbehind:!0},{pattern:/(^\s*set[ \t]+)(?:::)?(?:[a-zA-Z0-9]+::)*\w+/m,lookbehind:!0}],function:{pattern:/(^\s*proc[ \t]+)[^\s]+/m,lookbehind:!0},builtin:[{pattern:/(^\s*)(?:proc|return|class|error|eval|exit|for|foreach|if|switch|while|break|continue)\b/m,lookbehind:!0},/\b(?:elseif|else)\b/],scope:{pattern:/(^\s*)(?:global|upvar|variable)\b/m,lookbehind:!0,alias:"constant"},keyword:{pattern:/(^\s*|\[)(?:after|append|apply|array|auto_(?:execok|import|load|mkindex|qualify|reset)|automkindex_old|bgerror|binary|catch|cd|chan|clock|close|concat|dde|dict|encoding|eof|exec|expr|fblocked|fconfigure|fcopy|file(?:event|name)?|flush|gets|glob|history|http|incr|info|interp|join|lappend|lassign|lindex|linsert|list|llength|load|lrange|lrepeat|lreplace|lreverse|lsearch|lset|lsort|math(?:func|op)|memory|msgcat|namespace|open|package|parray|pid|pkg_mkIndex|platform|puts|pwd|re_syntax|read|refchan|regexp|registry|regsub|rename|Safe_Base|scan|seek|set|socket|source|split|string|subst|Tcl|tcl(?:_endOfWord|_findLibrary|startOf(?:Next|Previous)Word|wordBreak(?:After|Before)|test|vars)|tell|time|tm|trace|unknown|unload|unset|update|uplevel|vwait)\b/m,lookbehind:!0},operator:/!=?|\*\*?|==|&&?|\|\|?|<[=<]?|>[=>]?|[-+~\/%?^]|\b(?:eq|ne|in|ni)\b/,punctuation:/[{}()\[\]]/};
Prism.languages["visual-basic"]={comment:{pattern:/(?:['‘’]|REM\b).*/i,inside:{keyword:/^REM/i}},directive:{pattern:/#(?:Const|Else|ElseIf|End|ExternalChecksum|ExternalSource|If|Region)(?:[^\S\r\n]_[^\S\r\n]*(?:\r\n?|\n)|.)+/i,alias:"comment",greedy:!0},string:{pattern:/\$?["“”](?:["“”]{2}|[^"“”])*["“”]C?/i,greedy:!0},date:{pattern:/#[^\S\r\n]*(?:\d+([/-])\d+\1\d+(?:[^\S\r\n]+(?:\d+[^\S\r\n]*(?:AM|PM)|\d+:\d+(?::\d+)?(?:[^\S\r\n]*(?:AM|PM))?))?|(?:\d+[^\S\r\n]*(?:AM|PM)|\d+:\d+(?::\d+)?(?:[^\S\r\n]*(?:AM|PM))?))[^\S\r\n]*#/i,alias:"builtin"},number:/(?:(?:\b\d+(?:\.\d+)?|\.\d+)(?:E[+-]?\d+)?|&[HO][\dA-F]+)(?:U?[ILS]|[FRD])?/i,boolean:/\b(?:True|False|Nothing)\b/i,keyword:/\b(?:AddHandler|AddressOf|Alias|And(?:Also)?|As|Boolean|ByRef|Byte|ByVal|Call|Case|Catch|C(?:Bool|Byte|Char|Date|Dbl|Dec|Int|Lng|Obj|SByte|Short|Sng|Str|Type|UInt|ULng|UShort)|Char|Class|Const|Continue|Date|Decimal|Declare|Default|Delegate|Dim|DirectCast|Do|Double|Each|Else(?:If)?|End(?:If)?|Enum|Erase|Error|Event|Exit|Finally|For|Friend|Function|Get(?:Type|XMLNamespace)?|Global|GoSub|GoTo|Handles|If|Implements|Imports|In|Inherits|Integer|Interface|Is|IsNot|Let|Lib|Like|Long|Loop|Me|Mod|Module|Must(?:Inherit|Override)|My(?:Base|Class)|Namespace|Narrowing|New|Next|Not(?:Inheritable|Overridable)?|Object|Of|On|Operator|Option(?:al)?|Or(?:Else)?|Out|Overloads|Overridable|Overrides|ParamArray|Partial|Private|Property|Protected|Public|RaiseEvent|ReadOnly|ReDim|RemoveHandler|Resume|Return|SByte|Select|Set|Shadows|Shared|short|Single|Static|Step|Stop|String|Structure|Sub|SyncLock|Then|Throw|To|Try|TryCast|TypeOf|U(?:Integer|Long|Short)|Using|Variant|Wend|When|While|Widening|With(?:Events)?|WriteOnly|Xor)\b/i,operator:[/[+\-*/\\^<=>&#@$%!]/,{pattern:/([^\S\r\n])_(?=[^\S\r\n]*[\r\n])/,lookbehind:!0}],punctuation:/[{}().,:?]/},Prism.languages.vb=Prism.languages["visual-basic"];
Prism.languages.vbnet=Prism.languages.extend("basic",{keyword:/(?:\b(?:ADDHANDLER|ADDRESSOF|ALIAS|AND|ANDALSO|AS|BEEP|BLOAD|BOOLEAN|BSAVE|BYREF|BYTE|BYVAL|CALL(?: ABSOLUTE)?|CASE|CATCH|CBOOL|CBYTE|CCHAR|CDATE|CDEC|CDBL|CHAIN|CHAR|CHDIR|CINT|CLASS|CLEAR|CLNG|CLOSE|CLS|COBJ|COM|COMMON|CONST|CONTINUE|CSBYTE|CSHORT|CSNG|CSTR|CTYPE|CUINT|CULNG|CUSHORT|DATA|DATE|DECIMAL|DECLARE|DEFAULT|DEF(?: FN| SEG|DBL|INT|LNG|SNG|STR)|DELEGATE|DIM|DIRECTCAST|DO|DOUBLE|ELSE|ELSEIF|END|ENUM|ENVIRON|ERASE|ERROR|EVENT|EXIT|FALSE|FIELD|FILES|FINALLY|FOR(?: EACH)?|FRIEND|FUNCTION|GET|GETTYPE|GETXMLNAMESPACE|GLOBAL|GOSUB|GOTO|HANDLES|IF|IMPLEMENTS|IMPORTS|IN|INHERITS|INPUT|INTEGER|INTERFACE|IOCTL|IS|ISNOT|KEY|KILL|LINE INPUT|LET|LIB|LIKE|LOCATE|LOCK|LONG|LOOP|LSET|ME|MKDIR|MOD|MODULE|MUSTINHERIT|MUSTOVERRIDE|MYBASE|MYCLASS|NAME|NAMESPACE|NARROWING|NEW|NEXT|NOT|NOTHING|NOTINHERITABLE|NOTOVERRIDABLE|OBJECT|OF|OFF|ON(?: COM| ERROR| KEY| TIMER)?|OPERATOR|OPEN|OPTION(?: BASE)?|OPTIONAL|OR|ORELSE|OUT|OVERLOADS|OVERRIDABLE|OVERRIDES|PARAMARRAY|PARTIAL|POKE|PRIVATE|PROPERTY|PROTECTED|PUBLIC|PUT|RAISEEVENT|READ|READONLY|REDIM|REM|REMOVEHANDLER|RESTORE|RESUME|RETURN|RMDIR|RSET|RUN|SBYTE|SELECT(?: CASE)?|SET|SHADOWS|SHARED|SHORT|SINGLE|SHELL|SLEEP|STATIC|STEP|STOP|STRING|STRUCTURE|SUB|SYNCLOCK|SWAP|SYSTEM|THEN|THROW|TIMER|TO|TROFF|TRON|TRUE|TRY|TRYCAST|TYPE|TYPEOF|UINTEGER|ULONG|UNLOCK|UNTIL|USHORT|USING|VIEW PRINT|WAIT|WEND|WHEN|WHILE|WIDENING|WITH|WITHEVENTS|WRITE|WRITEONLY|XOR)|\B(?:#CONST|#ELSE|#ELSEIF|#END|#IF))(?:\$|\b)/i,comment:[{pattern:/(?:!|REM\b).+/i,inside:{keyword:/^REM/i}},{pattern:/(^|[^\\:])'.*/,lookbehind:!0}]});
!function(){if("undefined"!=typeof self&&self.Prism&&self.document){var l="line-numbers",c=/\n(?!$)/g,m=function(e){var t=a(e)["white-space"];if("pre-wrap"===t||"pre-line"===t){var n=e.querySelector("code"),r=e.querySelector(".line-numbers-rows"),s=e.querySelector(".line-numbers-sizer"),i=n.textContent.split(c);s||((s=document.createElement("span")).className="line-numbers-sizer",n.appendChild(s)),s.style.display="block",i.forEach(function(e,t){s.textContent=e||"\n";var n=s.getBoundingClientRect().height;r.children[t].style.height=n+"px"}),s.textContent="",s.style.display="none"}},a=function(e){return e?window.getComputedStyle?getComputedStyle(e):e.currentStyle||null:null};window.addEventListener("resize",function(){Array.prototype.forEach.call(document.querySelectorAll("pre."+l),m)}),Prism.hooks.add("complete",function(e){if(e.code){var t=e.element,n=t.parentNode;if(n&&/pre/i.test(n.nodeName)&&!t.querySelector(".line-numbers-rows")){for(var r=!1,s=/(?:^|\s)line-numbers(?:\s|$)/,i=t;i;i=i.parentNode)if(s.test(i.className)){r=!0;break}if(r){t.className=t.className.replace(s," "),s.test(n.className)||(n.className+=" line-numbers");var l,a=e.code.match(c),o=a?a.length+1:1,u=new Array(o+1).join("<span></span>");(l=document.createElement("span")).setAttribute("aria-hidden","true"),l.className="line-numbers-rows",l.innerHTML=u,n.hasAttribute("data-start")&&(n.style.counterReset="linenumber "+(parseInt(n.getAttribute("data-start"),10)-1)),e.element.appendChild(l),m(n),Prism.hooks.run("line-numbers",e)}}}}),Prism.hooks.add("line-numbers",function(e){e.plugins=e.plugins||{},e.plugins.lineNumbers=!0}),Prism.plugins.lineNumbers={getLine:function(e,t){if("PRE"===e.tagName&&e.classList.contains(l)){var n=e.querySelector(".line-numbers-rows"),r=parseInt(e.getAttribute("data-start"),10)||1,s=r+(n.children.length-1);t<r&&(t=r),s<t&&(t=s);var i=t-r;return n.children[i]}}}}}();
!function(){if("undefined"!=typeof self&&self.Prism&&self.document){var r=[],i={},a=function(){};Prism.plugins.toolbar={};var t=Prism.plugins.toolbar.registerButton=function(t,a){var e;e="function"==typeof a?a:function(t){var e;return"function"==typeof a.onClick?((e=document.createElement("button")).type="button",e.addEventListener("click",function(){a.onClick.call(this,t)})):"string"==typeof a.url?(e=document.createElement("a")).href=a.url:e=document.createElement("span"),a.className&&e.classList.add(a.className),e.textContent=a.text,e},t in i?console.warn('There is a button with the key "'+t+'" registered already.'):r.push(i[t]=e)},e=Prism.plugins.toolbar.hook=function(n){var t=n.element.parentNode;if(t&&/pre/i.test(t.nodeName)&&!t.parentNode.classList.contains("code-toolbar")){var e=document.createElement("div");e.classList.add("code-toolbar"),t.parentNode.insertBefore(e,t),e.appendChild(t);var o=document.createElement("div");o.classList.add("toolbar"),document.body.hasAttribute("data-toolbar-order")&&(r=document.body.getAttribute("data-toolbar-order").split(",").map(function(t){return i[t]||a})),r.forEach(function(t){var e=t(n);if(e){var a=document.createElement("div");a.classList.add("toolbar-item"),a.appendChild(e),o.appendChild(a)}}),e.appendChild(o)}};t("label",function(t){var e=t.element.parentNode;if(e&&/pre/i.test(e.nodeName)&&e.hasAttribute("data-label")){var a,n,o=e.getAttribute("data-label");try{n=document.querySelector("template#"+o)}catch(t){}return n?a=n.content:(e.hasAttribute("data-url")?(a=document.createElement("a")).href=e.getAttribute("data-url"):a=document.createElement("span"),a.textContent=o),a}}),Prism.hooks.add("complete",e)}}();
!function(){if("undefined"!=typeof self&&self.Prism&&self.document)if(Prism.plugins.toolbar){var r=window.ClipboardJS||void 0;r||"function"!=typeof require||(r=require("clipboard"));var i=[];if(!r){var o=document.createElement("script"),e=document.querySelector("head");o.onload=function(){if(r=window.ClipboardJS)for(;i.length;)i.pop()()},o.src="https://cdnjs.cloudflare.com/ajax/libs/clipboard.js/2.0.0/clipboard.min.js",e.appendChild(o)}Prism.plugins.toolbar.registerButton("copy-to-clipboard",function(e){var t=document.createElement("button");return t.textContent="Copy",r?o():i.push(o),t;function o(){var o=new r(t,{text:function(){return e.code}});o.on("success",function(){t.textContent="Copied!",n()}),o.on("error",function(){t.textContent="Press Ctrl+C to copy",n()})}function n(){setTimeout(function(){t.textContent="Copy"},5e3)}})}else console.warn("Copy to Clipboard plugin loaded before Toolbar plugin.")}();
!function(){if("undefined"!=typeof self&&self.Prism&&self.document){var c=/(?:^|\s)match-braces(?:\s|$)/,a=/(?:^|\s)brace-hover(?:\s|$)/,l=/(?:^|\s)brace-selected(?:\s|$)/,n=/(?:^|\s)no-brace-hover(?:\s|$)/,t=/(?:^|\s)no-brace-select(?:\s|$)/,u={"(":")","[":"]","{":"}"},f={"(":"brace-round","[":"brace-square","{":"brace-curly"},m=0,r=/^(pair-\d+-)(open|close)$/;Prism.hooks.add("complete",function(e){var a=e.element,n=a.parentElement;if(n&&"PRE"==n.tagName){for(var t=[],r=a;r;r=r.parentElement)if(c.test(r.className)){t.push("(","[","{");break}if(0!=t.length){n.__listenerAdded||(n.addEventListener("mousedown",function(){var e=n.querySelector("code");Array.prototype.slice.call(e.querySelectorAll(".brace-selected")).forEach(function(e){e.className=e.className.replace(l," ")})}),Object.defineProperty(n,"__listenerAdded",{value:!0}));var o=Array.prototype.slice.call(a.querySelectorAll("span.token.punctuation")),i=[];t.forEach(function(e){for(var a=u[e],n=f[e],t=[],r=[],s=0;s<o.length;s++){var c=o[s];if(0==c.childElementCount){var l=c.textContent;l===e?(i.push({index:s,open:!0,element:c}),c.className+=" "+n,c.className+=" brace-open",r.push(s)):l===a&&(i.push({index:s,open:!1,element:c}),c.className+=" "+n,c.className+=" brace-close",r.length&&t.push([s,r.pop()]))}}t.forEach(function(e){var a="pair-"+m+++"-",n=o[e[0]],t=o[e[1]];n.id=a+"open",t.id=a+"close",[n,t].forEach(function(e){e.addEventListener("mouseenter",p),e.addEventListener("mouseleave",d),e.addEventListener("click",h)})})});var s=0;i.sort(function(e,a){return e.index-a.index}),i.forEach(function(e){e.open?(e.element.className+=" brace-level-"+(s%12+1),s++):(s=Math.max(0,s-1),e.element.className+=" brace-level-"+(s%12+1))})}}})}function s(e){var a=r.exec(e.id);return document.querySelector("#"+a[1]+("open"==a[2]?"close":"open"))}function p(){for(var e=this.parentElement;e;e=e.parentElement)if(n.test(e.className))return;[this,s(this)].forEach(function(e){e.className=(e.className.replace(a," ")+" brace-hover").replace(/\s+/g," ")})}function d(){[this,s(this)].forEach(function(e){e.className=e.className.replace(a," ")})}function h(){for(var e=this.parentElement;e;e=e.parentElement)if(t.test(e.className))return;[this,s(this)].forEach(function(e){e.className=(e.className.replace(l," ")+" brace-selected").replace(/\s+/g," ")})}}();
!function(){if("undefined"!=typeof Prism&&Prism.languages.diff){var o=/diff-([\w-]+)/i,m=/<\/?(?!\d)[^\s>\/=$<%]+(?:\s(?:\s*[^\s>\/=]+(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))|(?=[\s/>])))+)?\s*\/?>/gi,c=RegExp("(?:__|[^\r\\n<])*(?:\r\\n?|\n|(?:__|[^\r\\n<])(?![^\r\\n]))".replace(/__/g,m.source),"gi"),d=Prism.languages.diff.PREFIXES;Prism.hooks.add("before-sanity-check",function(e){var a=e.language;o.test(a)&&!e.grammar&&(e.grammar=Prism.languages[a]=Prism.languages.diff)}),Prism.hooks.add("before-tokenize",function(e){var a=e.language;o.test(a)&&!Prism.languages[a]&&(Prism.languages[a]=Prism.languages.diff)}),Prism.hooks.add("wrap",function(e){var a,s;if("diff"!==e.language){var r=o.exec(e.language);if(!r)return;a=r[1],s=Prism.languages[a]}if(e.type in d){var n,i=e.content.replace(m,"").replace(/&lt;/g,"<").replace(/&amp;/g,"&"),g=i.replace(/(^|[\r\n])./g,"$1");n=s?Prism.highlight(g,s,a):Prism.util.encode(g);var f,t=new Prism.Token("prefix",d[e.type],[/\w+/.exec(e.type)[0]]),u=Prism.Token.stringify(t,e.language),l=[];for(c.lastIndex=0;f=c.exec(n);)l.push(u+f[0]);/(?:^|[\r\n]).$/.test(i)&&l.push(u),e.content=l.join(""),s&&e.classes.push("language-"+a)}})}}();

../jforum2-code/src/main/resources/templates/default/js/karma.js
<#if karmaEnabled>
	function karmaVote(s, postId) {
		if (s.selectedIndex == 0) {
			return;
		}

		if (confirm("${I18n.getMessage("Karma.confirmVote")}")) {
			document.location = "${contextPath}/karma/insert/${start}/" + postId + "/" + s.value + "${extension}";
		}
		else {
			s.selectedIndex = 0;
		}
	}

	function karmaPointsCombo(postId)
	{
		document.write('<select name="karma" onchange="karmaVote(this,' + postId + ')">');
		document.write('<option value="">${I18n.getMessage("Karma.rateMessage")}<\/option>');

		for (var i = ${karmaMin}; i <= ${karmaMax}; i++) {
			document.write('<option value="' + i + '">' + i + '<\/option>');
		}

		document.write('<\/select>');
	}
</#if>
../jforum2-code/src/main/resources/templates/default/js/utils.js
function showEmail(beforeAt, afterAt)
{
	return beforeAt + "@" + afterAt;
}

var starOn = new Image();
starOn.src = "${contextPath}/templates/${templateName}/images/star_on.gif";

var starOff = new Image();
starOff.src = "${contextPath}/templates/${templateName}/images/star_off.gif";

function writeStars(q, postId)
{
	for (var i = 0; i < 5; i++) {
		var name = "star" + postId + "_" + i;
		document.write("<img name='" + name + "' alt='*' />");
		document.images[name].src = q > i ? starOn.src : starOff.src;
	}
}

function addBookmark(relationType, relationId)
{
	var w = window.open('${JForumContext.encodeURL("/bookmarks/insert/' + relationType + '/' + relationId + '")}', 'bookmark_add', 'width=700, height=200, scrollbars=auto, resizable=true');
	w.focus();
}

../jforum2-code/src/main/java/net/jforum/SessionFacade.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 12/03/2004 - 18:47:26
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;

import org.apache.log4j.Logger;

import net.jforum.cache.CacheEngine;
import net.jforum.cache.Cacheable;
import net.jforum.dao.DataAccessDriver;
import net.jforum.entities.UserSession;
import net.jforum.repository.SecurityRepository;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;

/**
 * @author Rafael Steil
 */
public class SessionFacade implements Cacheable
{
	private static final Logger LOGGER = Logger.getLogger(SessionFacade.class);

	// map session IDs to UserSession objects
	// creating new String object because we're synchronizing on it
	private static final String FQN = new String("sessions");
	// map session IDs to UserSession objects of whose online status is publicly visible.
	private static final String FQN_LOGGED = FQN + "/logged";
	// map different types of user count types (string names) to int user counts 
	private static final String FQN_COUNT = FQN + "/count";
    // map user IDs (int) to a set of session IDs (Set<String>)
	private static final String FQN_USER_ID = FQN + "/userId";
	private static final String ANONYMOUS_COUNT = "anonymousCount";
	private static final String LOGGED_COUNT = "loggedCount";
	
	private static CacheEngine cache;
	
	/**
	 * @see net.jforum.cache.Cacheable#setCacheEngine(net.jforum.cache.CacheEngine)
	 */
	@Override public void setCacheEngine(final CacheEngine engine)
	{
		SessionFacade.setEngine(engine);
	}
	
	private static void setEngine(final CacheEngine engine) 
	{
		cache = engine;
	}

	//TODO hack so csrf can access cache
	public static UserSession getUserSesssion (String sessionId) {
	    return (UserSession) cache.get(FQN, sessionId);
	}

	/**
	 * Add a new <code>UserSession</code> entry to the session.
	 * This method will make a call to <code>JForum.getRequest.getSession().getId()</code>
	 * to retrieve the session's id
	 * 
	 * @param userSession The user session object to add
	 * @see #add(UserSession, String)
	 */
	public static void add(final UserSession userSession)
	{
		add(userSession, JForumExecutionContext.getRequest().getSessionContext().getId());
	}

	/**
	 * Registers a new {@link UserSession}.
	 * <p>
	 * If a call to {@link UserSession#getUserId()} return a value different 
	 * of <code>SystemGlobals.getIntValue(ConfigKeys.ANONYMOUS_USER_ID)</code>, then 
	 * the user will be registered as "logged". Otherwise it will enter as anonymous.
	 * </p>
	 * 
	 * <p>
	 * Please note that, in order to keep the number of guest and logged users correct, 
	 * it's caller's responsibility to {@link #remove(String)} the record before adding it
	 * again if the current session is currently represented as "guest". 
	 * </p>
	 *  
	 * @param userSession the UserSession to add
	 * @param sessionId the user's session id
	 */

	public static void add(UserSession us, String sessionId) {
		if (us.getSessionId() == null || us.getSessionId().equals("")) {
			us.setSessionId(sessionId);
		}
		
		final String usSessId = us.getSessionId();

		synchronized (FQN) {
			cache.add(FQN, usSessId, us);

			if (!JForumExecutionContext.getForumContext().isBot()) {
				if (us.getUserId() != SystemGlobals.getIntValue(ConfigKeys.ANONYMOUS_USER_ID)) {
					changeUserCount(LOGGED_COUNT, true);

					cache.add(FQN_LOGGED, usSessId, us);

					final String userIdStr = String.valueOf(us.getUserId()); 

					Set<String> sessIds = (Set<String>)cache.get(FQN_USER_ID, userIdStr);
					if (sessIds == null) {
					    sessIds = new HashSet<>();
					}

					if (!sessIds.contains(usSessId)) {
					    sessIds.add(usSessId);
					}

					cache.add(FQN_USER_ID, userIdStr, sessIds);
				} else {
					// TODO: check the anonymous IP constraint
					changeUserCount(ANONYMOUS_COUNT, true);
				}
			}
		}
	}

	private static void changeUserCount(final String cacheEntryName, final boolean increment)
	{
		Integer count = (Integer)cache.get(FQN_COUNT, cacheEntryName);
		
		if (count == null) {
			count = Integer.valueOf(0);
		}
		
		if (increment) {
			count = Integer.valueOf(count.intValue() + 1);
		}
		else if (count.intValue() > 0) {
			count = Integer.valueOf(count.intValue() - 1);
		}
		
		cache.add(FQN_COUNT, cacheEntryName, count);
	}
	
	/**
	 * Add a new entry to the user's session
	 * 
	 * @param name The attribute name
	 * @param value The attribute value
	 */
	public static void setAttribute(final String name, final Object value)
	{
		JForumExecutionContext.getRequest().getSessionContext().setAttribute(name, value);
	}
	
	/**
	 * Removes an attribute from the session
	 * 
	 * @param name The key associated to the the attribute to remove
	 */
	public static void removeAttribute(final String name)
	{
		JForumExecutionContext.getRequest().getSessionContext().removeAttribute(name);
	}
	
	/**
	 * Gets an attribute value given its name
	 * 
	 * @param name The attribute name to retrieve the value
	 * @return The value as an Object, or null if no entry was found
	 */
	public static Object getAttribute(final String name)
	{
		return JForumExecutionContext.getRequest().getSessionContext().getAttribute(name);
	}

	/**
	 * Remove an entry from the session map
	 * 
	 * @param sessionId The session id to remove
	 */

	public static void remove(String sessionId) {
		if (cache == null) {
			LOGGER.warn("Got a null cache instance. #" + sessionId);
			return;
		}

		synchronized (FQN) {
			UserSession us = getUserSession(sessionId);

			if (us != null) {
				cache.remove(FQN_LOGGED, sessionId);
				removeSpecificUserSession(us.getUserId(), sessionId);

				if (us.getUserId() != SystemGlobals.getIntValue(ConfigKeys.ANONYMOUS_USER_ID)) {
					changeUserCount(LOGGED_COUNT, false);
				}
				else {
					changeUserCount(ANONYMOUS_COUNT, false);
				}
			}

			cache.remove(FQN, sessionId);
		}
	}
	
	public static void removeUserSessions(int userId) {
	    final String userIdStr = String.valueOf(userId);
	    Set<String> sessIds = (Set<String>)cache.get(FQN_USER_ID, userIdStr);
        if(sessIds != null) {
            for(final String sessId: sessIds) {
                remove(sessId);
            }
            cache.remove(FQN_USER_ID, userIdStr);
        }
	}

	private static void removeSpecificUserSession(int userId, String sessionId) {
	    final String userIdStr = String.valueOf(userId);
	    Set<String> sessIds = (Set<String>) cache.get(FQN_USER_ID, userIdStr);
	    if (sessIds != null) {
	        // remove if we have a session with the given session ID
	        if (sessIds.removeIf(s -> s.equals(sessionId))) {
	            // if removing caused the set to be empty (i.e.- we had only one session per user),
	            // remove the whole cache entry for this user. Otherwise, add the new session to the cache
	            if (sessIds.isEmpty()) {
	                cache.remove(FQN_USER_ID, userIdStr);
	            } else {
	                cache.add(FQN_USER_ID, userIdStr, sessIds);
	            }
	        }
	    }
	}

	/**
	 * Get all registered sessions
	 * 
	 * @return <code>ArrayList</code> with the sessions. Each entry
	 * is a <code>UserSession</code> object.
	 */
	public static List<UserSession> getAllSessions()
	{
		synchronized (FQN) {
			Collection<Object> values = cache.getValues(FQN);
			ArrayList<UserSession> list = new ArrayList<>();
			for (Iterator<?> iter = values.iterator(); iter.hasNext(); ) {
				list.add((UserSession)iter.next());
			}
			return list;
		}
	}
	
	/**
	 * Gets the {@link UserSession} instance of all logged users
	 * @return A list with the user sessions
	 */
	public static List<UserSession> getLoggedSessions()
	{
		synchronized (FQN) {
			Collection<Object> values = cache.getValues(FQN_LOGGED);
			ArrayList<UserSession> list = new ArrayList<>();
			for (Iterator<?> iter = values.iterator(); iter.hasNext(); ) {
				list.add((UserSession)iter.next());
			}			
			return list;
		}
	}
	
	/**
	 * Get the number of logged users
	 * @return the number of logged users
	 */
	public static int registeredSize()
	{
		final Integer count = (Integer)cache.get(FQN_COUNT, LOGGED_COUNT);

		return (count == null ? 0 : count.intValue());
	}
	
	/**
	 * Get the number of anonymous users
	 * @return the number of anonymous users
	 */
	public static int anonymousSize()
	{
		final Integer count = (Integer)cache.get(FQN_COUNT, ANONYMOUS_COUNT);

		return (count == null ? 0 : count.intValue());
	}
	
	public static void clear()
	{
		synchronized (FQN) {
			cache.add(FQN, new ConcurrentHashMap<String, UserSession>());
			cache.add(FQN_COUNT, LOGGED_COUNT, Integer.valueOf(0));
			cache.add(FQN_COUNT, ANONYMOUS_COUNT, Integer.valueOf(0));
			cache.remove(FQN_LOGGED);
			cache.remove(FQN_USER_ID);
		}
	}
	
	/**
	 * Gets the user's <code>UserSession</code> object
	 * 
	 * @return The <code>UserSession</code> associated to the user's session
	 */
	public static UserSession getUserSession()
	{
		return getUserSession(JForumExecutionContext.getRequest().getSessionContext().getId());
	}
	
	/**
	 * Gets a {@link UserSession} by the session id.
	 * 
	 * @param sessionId the session's id
	 * @return an <b>immutable</b> UserSession, or <code>null</code> if no entry found
	 */
	public static UserSession getUserSession(final String sessionId)
	{
		UserSession userSession = null;
		if (cache == null) {
			LOGGER.warn("Got a null cache in getUserSession. #" + sessionId);			
		} else {
			userSession = (UserSession)cache.get(FQN, sessionId);
		}
		return userSession;
	}

	/**
	 * Gets the number of session elements.
	 * 
	 * @return The number of session elements currently online (without bots)
	 */
	public static int size()
	{
		return (anonymousSize() + registeredSize());
	}

	/**
	 * Verify if there is an user in the session with the user id passed as parameter.
	 * 
	 * @param userId The user id to check for existence in the session
	 * @return A set of session ids associated to this user, if the user is
	 *         already registered into at least one session, or an empty set if it is not.
	 */
	public static Set<String> findSessionIdsOfUser(int userId) {
		Set<String> val = (Set<String>) cache.get(FQN_USER_ID, Integer.toString(userId));
		return val != null ? val : Collections.emptySet();
	}

	/**
	 * Verify is the user is logged in.
	 * 
	 * @return <code>true</code> if the user is logged, or <code>false</code> if is an anonymous user.
	 */
	public static boolean isLogged()
	{
		return "1".equals(SessionFacade.getAttribute(ConfigKeys.LOGGED));
	}
	
	/**
	 * Marks the current user session as "logged" in 
	 */
	public static void makeLogged()
	{
		SessionFacade.setAttribute(ConfigKeys.LOGGED, "1");
	}
	
	/**
	 * Marks the current user session as "logged" out
	 *
	 */
	public static void makeUnlogged()
	{
		SessionFacade.removeAttribute(ConfigKeys.LOGGED);
		SessionFacade.removeAttribute(ConfigKeys.LAST_POST_TIME);
	}
	
	/**
	 * Returns a map containing information about read time of a set of topics.
	 * @return a map where the key is the topicId represented as an Integer, and the
	 * value is a Long representing the read time of such topic. 
	 */
	public static Map<Integer, Long> getTopicsReadTime()
	{
		Map<Integer, Long> tracking = (Map<Integer, Long>)getAttribute(ConfigKeys.TOPICS_READ_TIME);
		
		if (tracking == null) {
			tracking = new ConcurrentHashMap<>();
			setAttribute(ConfigKeys.TOPICS_READ_TIME, tracking);
		}
		
		return tracking;
	}
	
	/**
	 * Returns a map with "all topics read" flags for some forum 
	 * @return a map where the key is the forum id represented as an Integer, 
	 * and the value is a Long representing the read time to be used in the verifications.
	 */
	public static Map<Integer, Long> getTopicsReadTimeByForum()
	{
		return (Map<Integer, Long>)getAttribute(ConfigKeys.TOPICS_READ_TIME_BY_FORUM);
	}

	/**
	 * Persists user session information.
	 * 
	 * @param sessionId The session which we're going to persist the database. 
	 * @see #storeSessionData(String)
	 */
	public static void storeSessionData (String sessionId) {
		UserSession us = SessionFacade.getUserSession(sessionId);
		if (us != null) {
			try {
				if (us.getUserId() != SystemGlobals.getIntValue(ConfigKeys.ANONYMOUS_USER_ID)) {
					DataAccessDriver.getInstance().newUserSessionDAO().update(us, JForumExecutionContext.getConnection());
				}
				SecurityRepository.remove(us.getUserId());
			}
			catch (Exception e) {
				LOGGER.warn("Error storing user session data: " + e, e);
			}
		}
	}
	
	public static void storeSessionData (UserSession us) {
	    if (us != null) {
            try {
                if (us.getUserId() != SystemGlobals.getIntValue(ConfigKeys.ANONYMOUS_USER_ID)) {
                    DataAccessDriver.getInstance().newUserSessionDAO().update(us, JForumExecutionContext.getConnection());
                }
            }
            catch (Exception e) {
                LOGGER.warn("Error storing user session data: " + e, e);
            }
        }
	}

}

../jforum2-code/src/main/java/net/jforum/HikariPooledConnection.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 30/11/2005 17:07:51
 * The JForum Project
 * http://www.jforum.net
 */

package net.jforum;

import java.beans.PropertyVetoException;
import java.sql.Connection;
import org.apache.log4j.Logger;

import com.zaxxer.hikari.HikariConfig;
import com.zaxxer.hikari.HikariDataSource;

import net.jforum.exceptions.DatabaseException;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;

public class HikariPooledConnection extends DBConnection
{
	private static final Logger LOGGER = Logger.getLogger(HikariPooledConnection.class);

	private transient HikariDataSource dataSource;

	/**
	 * @see net.jforum.DBConnection#init()
	 */
	@Override public void init() throws PropertyVetoException
	{
		HikariConfig config = new HikariConfig();
		config.setDriverClassName(SystemGlobals.getValue(ConfigKeys.DATABASE_CONNECTION_DRIVER));
		config.setJdbcUrl(SystemGlobals.getValue(ConfigKeys.DATABASE_CONNECTION_STRING));
		config.setMinimumIdle(SystemGlobals.getIntValue(ConfigKeys.DATABASE_POOL_MIN));		
		config.setMaximumPoolSize(SystemGlobals.getIntValue(ConfigKeys.DATABASE_POOL_MAX));
		// KeepaliveTime: The minimum allowed value is 30000ms (30 seconds)
		config.setKeepaliveTime(Math.max(30000L, 1000L * SystemGlobals.getIntValue(ConfigKeys.DATABASE_PING_DELAY)));

		this.dataSource = new HikariDataSource(config);

		try {
			// Try to validate the connection url
			final Connection conn = this.getConnection();

			if (conn != null) {
				this.releaseConnection(conn);
				this.databaseUp = true;
			}
		} catch (Exception e) {
			this.databaseUp = false;
		}
	}

	/**
	 * @see net.jforum.DBConnection#getConnection()
	 */
	@Override public Connection getConnection()
	{
		try {
			return this.dataSource.getConnection();
		}
		catch (Exception e) {
			LOGGER.error(e.getMessage(), e);
			throw new DatabaseException(e);
		}
	}

	/**
	 * @see net.jforum.DBConnection#realReleaseAllConnections()
	 */
	@Override public void realReleaseAllConnections()
	{
		try {
			dataSource.close();
			Thread.sleep(1000);
			this.databaseUp = false;
		} catch (InterruptedException e) {
			LOGGER.error(e.getMessage(), e);
			throw new DatabaseException(e);
		}
	}
}

../jforum2-code/src/main/java/net/jforum/ControllerUtils.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Mar 17, 2005 5:38:11 PM
 *
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum;

import java.lang.reflect.Method;
import java.util.Date;

import javax.servlet.http.Cookie;

import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;

import freemarker.template.SimpleHash;
import net.jforum.context.ForumContext;
import net.jforum.context.RequestContext;
import net.jforum.context.SessionContext;
import net.jforum.dao.DataAccessDriver;
import net.jforum.dao.UserDAO;
import net.jforum.dao.UserSessionDAO;
import net.jforum.entities.User;
import net.jforum.entities.UserSession;
import net.jforum.exceptions.DatabaseException;
import net.jforum.exceptions.ForumException;
import net.jforum.repository.SecurityRepository;
import net.jforum.security.SecurityConstants;
import net.jforum.sso.SSO;
import net.jforum.sso.SSOUtils;
import net.jforum.util.Hash;
import net.jforum.util.I18n;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;
import net.jforum.view.forum.common.BannerCommon;

/**
 * Common methods used by the controller.
 * 
 * @author Rafael Steil
 */
public class ControllerUtils
{
	private static final Logger LOGGER = Logger.getLogger(ControllerUtils.class);
	
	/**
	 * Setup common variables used by almost all templates.
	 * 
	 * @param context SimpleHash The context to use
     * @param jforumContext JForumContext
	 */
	public void prepareTemplateContext(final SimpleHash context, final ForumContext jforumContext)
	{
		final RequestContext request = JForumExecutionContext.getRequest();
		
		context.put("karmaEnabled", SecurityRepository.canAccess(SecurityConstants.PERM_KARMA_ENABLED));
		context.put("dateTimeFormat", SystemGlobals.getValue(ConfigKeys.DATE_TIME_FORMAT));
		context.put("autoLoginEnabled", SystemGlobals.getBoolValue(ConfigKeys.AUTO_LOGIN_ENABLED));
		context.put("sso", ConfigKeys.TYPE_SSO.equals(SystemGlobals.getValue(ConfigKeys.AUTHENTICATION_TYPE)));
		context.put("contextPath", request.getContextPath());
		context.put("serverName", request.getServerName());
		context.put("templateName", SystemGlobals.getValue(ConfigKeys.TEMPLATE_DIR));
		context.put("extension", SystemGlobals.getValue(ConfigKeys.SERVLET_EXTENSION));
		context.put("serverPort", Integer.toString(request.getServerPort()));
		context.put("I18n", I18n.getInstance());
		context.put("version", SystemGlobals.getValue(ConfigKeys.VERSION));
		context.put("forumTitle", SystemGlobals.getValue(ConfigKeys.FORUM_PAGE_TITLE));
		context.put("pageTitle", SystemGlobals.getValue(ConfigKeys.FORUM_PAGE_TITLE));
		context.put("metaKeywords", SystemGlobals.getValue(ConfigKeys.FORUM_PAGE_METATAG_KEYWORDS));
		context.put("metaDescription", SystemGlobals.getValue(ConfigKeys.FORUM_PAGE_METATAG_DESCRIPTION));
		context.put("forumLink", SystemGlobals.getValue(ConfigKeys.FORUM_LINK));
		context.put("homepageLink", SystemGlobals.getValue(ConfigKeys.HOMEPAGE_LINK));
		context.put("encoding", SystemGlobals.getValue(ConfigKeys.ENCODING));
		context.put("canAccessModerationLog", SecurityRepository.canAccess(SecurityConstants.PERM_MODERATION_LOG));
		context.put("JForumContext", jforumContext);
		context.put("bannerCommon", new BannerCommon());
		context.put("timestamp", Long.valueOf(System.currentTimeMillis()));
        String googleTracker = SystemGlobals.getValue(ConfigKeys.GA_ID);
        if (googleTracker != null && googleTracker.trim().length() > 0) {
            context.put("googleAnalyticsTracker", googleTracker.trim());
        }
		context.put("allowPM", SystemGlobals.getBoolValue(ConfigKeys.ALLOW_PM));
		context.put("socialEnabled", SystemGlobals.getBoolValue(ConfigKeys.SOCIAL_SHARING_ENABLED));
		context.put("socialSites", SystemGlobals.getValue(ConfigKeys.SOCIAL_SHARING_SITES));
		context.put("rssEnabled", SystemGlobals.getBoolValue(ConfigKeys.RSS_ENABLED));
		context.put("userListPublic", SystemGlobals.getBoolValue(ConfigKeys.USER_LIST_PUBLIC));
		context.put("moderationLogPublic", SystemGlobals.getBoolValue(ConfigKeys.MODERATION_LOG_PUBLIC));
		context.put("bannerPages", SystemGlobals.getValue(ConfigKeys.BANNER_PAGES_LIST));
		context.put("jQueryURL", SystemGlobals.getValue(ConfigKeys.JQUERY_URL));
		context.put("stopForumSpamWebURL", SystemGlobals.getValue(ConfigKeys.STOPFORUMSPAM_WEB_URL));
		context.put("whoisUrl", SystemGlobals.getValue(ConfigKeys.WHOIS_API_URL));
        context.put("announcement", SystemGlobals.getValue(ConfigKeys.ANNOUNCEMENT));
        context.put("avatarMaxHeight", SystemGlobals.getValue(ConfigKeys.AVATAR_MAX_HEIGHT));
        context.put("avatarMaxWidth", SystemGlobals.getValue(ConfigKeys.AVATAR_MAX_WIDTH));
	}

	/**
	 * Checks user credential / automatic login.
	 * 
	 * @param userSession The UserSession instance associated to the user's session
	 * @return <code>true</code> if auto login was enabled and the user was successfully logged in.
	 * @throws DatabaseException
	 */
	protected boolean checkAutoLogin(final UserSession userSession)
	{
		final String cookieName = SystemGlobals.getValue(ConfigKeys.COOKIE_NAME_DATA);

		final Cookie cookie = this.getCookieTemplate(cookieName);
		final Cookie hashCookie = this.getCookieTemplate(SystemGlobals.getValue(ConfigKeys.COOKIE_USER_HASH));
		final Cookie autoLoginCookie = this.getCookieTemplate(SystemGlobals.getValue(ConfigKeys.COOKIE_AUTO_LOGIN));

		if (hashCookie != null && cookie != null
				&& !cookie.getValue().equals(SystemGlobals.getValue(ConfigKeys.ANONYMOUS_USER_ID))
				&& autoLoginCookie != null 
				&& "1".equals(autoLoginCookie.getValue())) {
			final String uid = cookie.getValue();
			final String uidHash = hashCookie.getValue();

			// Load the user-specific security hash from the database
			try {
				final UserDAO userDao = DataAccessDriver.getInstance().newUserDAO();
				final String userHash = userDao.getUserAuthHash(Integer.parseInt(uid));
				
				if (StringUtils.isBlank(userHash)) {
					return false;
				}
				
				final String securityHash = Hash.md5(userHash);
	
				if (securityHash.equals(uidHash)) {
					final int userId = Integer.parseInt(uid);
					userSession.setUserId(userId);
					
					final User user = userDao.selectById(userId);
	
					if (user == null || user.getId() != userId || user.isDeleted()) {
						userSession.makeAnonymous();
						return false;
					}
	
					this.configureUserSession(userSession, user);
					
					return true;
				}
			}
			catch (Exception e) {
				throw new DatabaseException(e);
			}
			
			userSession.makeAnonymous();
		}
		
		return false;
	}

	/**
	 * Setup options and values for the user's session if authentication was OK.
	 * 
	 * @param userSession The UserSession instance of the user
	 * @param user The User instance of the authenticated user
	 */
	protected void configureUserSession(final UserSession userSession, final User user)
	{
		userSession.dataToUser(user);

		// As a user may come back to the forum before its
		// last visit's session expires, we should check for
		// existent user information and then, if found, store
		// it to the database before getting his information back.
		UserSession.changeOnUser(user, SessionFacade::storeSessionData);
 
        final UserSessionDAO userSessionDAO = DataAccessDriver.getInstance().newUserSessionDAO();
        // we fetch the last visit time based on the user session information stored in the DB
        final Date knownLastVisitTime = userSessionDAO.fetchLastVisitTime(userSession, JForumExecutionContext.getConnection());
        if (knownLastVisitTime == null) {
            // there's no available information about the user's last visit,
			// so let's set the current time as his last visit
            userSession.setLastVisit(new Date(System.currentTimeMillis()));
        } else {
            // Update the user's last visit time in the current session
            userSession.setLastVisit(knownLastVisitTime);
        }

		// If the execution point gets here, then the user has chosen "autoLogin"
		userSession.setAutoLogin(true);
		SessionFacade.makeLogged();

		I18n.load(user.getLang());
	}

	/**
	 * Checks for user authentication using some SSO implementation
     * @param userSession UserSession
     */
	protected void checkSSO(final UserSession userSession)
	{
		try {
			final SSO sso = (SSO) Class.forName(SystemGlobals.getValue(ConfigKeys.SSO_IMPLEMENTATION)).getDeclaredConstructor().newInstance();
			final String username = sso.authenticateUser(JForumExecutionContext.getRequest());

			if (username == null || username.trim().equals("")) {
				userSession.makeAnonymous();
			}
			else {
				final SSOUtils utils = new SSOUtils();

				if (!utils.userExists(username)) {
					final SessionContext session = JForumExecutionContext.getRequest().getSessionContext();

					String email = (String) session.getAttribute(SystemGlobals.getValue(ConfigKeys.SSO_EMAIL_ATTRIBUTE));
					String password = (String) session.getAttribute(SystemGlobals.getValue(ConfigKeys.SSO_PASSWORD_ATTRIBUTE));

					if (email == null) {
						email = SystemGlobals.getValue(ConfigKeys.SSO_DEFAULT_EMAIL);
					}

					if (password == null) {
						password = SystemGlobals.getValue(ConfigKeys.SSO_DEFAULT_PASSWORD);
					}

					utils.register(password, email);
				}

				this.configureUserSession(userSession, utils.getUser());
			}
		}
		catch (Exception e) {
			LOGGER.error(e.getMessage(), e);
			throw new ForumException("Error while executing SSO actions: " + e);
		}
	}

	/**
	 * Do a refresh in the user's session. This method will update the last visit time for the
	 * current user, as well checking for authentication if the session is new or the SSO user has
	 * changed
	 */
	public void refreshSession()
	{
		UserSession userSession = SessionFacade.getUserSession();
		final RequestContext request = JForumExecutionContext.getRequest();

		if (userSession == null) {
			userSession = new UserSession();
			userSession.registerBasicInfo();
			userSession.setSessionId(request.getSessionContext().getId());
			userSession.setIp(request.getRemoteAddr());
			SessionFacade.makeUnlogged();

			if (!JForumExecutionContext.getForumContext().isBot()) {
				// Non-SSO authentications can use auto login
				if (ConfigKeys.TYPE_SSO.equals(SystemGlobals.getValue(ConfigKeys.AUTHENTICATION_TYPE))) {
					this.checkSSO(userSession);
				}
				else {					
					if (SystemGlobals.getBoolValue(ConfigKeys.AUTO_LOGIN_ENABLED)) {
						this.checkAutoLogin(userSession);
					}
					else {
						userSession.makeAnonymous();
					}
				}
			}

			SessionFacade.add(userSession);
		}
		else if (ConfigKeys.TYPE_SSO.equals(SystemGlobals.getValue(ConfigKeys.AUTHENTICATION_TYPE))) {
			SSO sso;
			
			try {
				sso = (SSO) Class.forName(SystemGlobals.getValue(ConfigKeys.SSO_IMPLEMENTATION)).getDeclaredConstructor().newInstance();
			}
			catch (Exception e) {
				throw new ForumException(e);
			}

			// If SSO, then check if the session is valid
			if (!sso.isSessionValid(userSession, request)) {
				SessionFacade.remove(userSession.getSessionId());
				refreshSession();
			}
		}
		else {
			SessionFacade.getUserSession().updateSessionTime();
		}
	}

	/**
	 * Gets a cookie by its name.
	 * 
	 * @param name The cookie name to retrieve
	 * @return The <code>Cookie</code> object if found, or <code>null</code> otherwise
	 */
	public static Cookie getCookie(final String name)
	{
		final Cookie[] cookies = JForumExecutionContext.getRequest().getCookies();

		if (cookies != null) {
			for (int i = 0; i < cookies.length; i++) {
				final Cookie cookie = cookies[i];

				if (cookie.getName().equals(name)) {
					return cookie;
				}
			}
		}

		return null;
	}
	
	/**
	 * Template method to get a cookie.
	 * Useful to situations when a subclass
	 * wants to have a different way to 
	 * retrieve a cookie.
	 * @param name The cookie name to retrieve
	 * @return The Cookie object if found, or null otherwise
	 * @see #getCookie(String)
	 */
	protected Cookie getCookieTemplate(final String name)
	{
		return ControllerUtils.getCookie(name);
	}

	/**
	 * Add or update a cookie. This method adds a cookie, serializing its value using XML.
	 * 
	 * @param name The cookie name.
	 * @param value The cookie value
	 */
	public static void addCookie(final String name, final String value)
	{
		String tmpValue = value;
		int maxAge = 3600 * 24 * 365;
		
		if (value == null) {
			maxAge = 0;
			tmpValue = "";
		}
		
		final Cookie cookie = new Cookie(name, tmpValue);
		cookie.setMaxAge(maxAge);
		String contextPath = SystemGlobals.getValue("context.path");
		if (contextPath.equals("")) {
			cookie.setPath("/");
		} else {
			cookie.setPath(contextPath);
		}

		try {
			String version = SystemGlobals.getValue("servlet.version"); // will be of the form "3.0"
			int majorVersion = Integer.parseInt(version.substring(0, version.indexOf(".")));
			if (majorVersion >= 3) {
				// setHttpOnly was introduced in Servlet API 3.0
				Class<Cookie> cookieClass = javax.servlet.http.Cookie.class;
				Method httpOnlyMethod = cookieClass.getMethod("setHttpOnly", new Class[] {boolean.class});
				httpOnlyMethod.invoke(cookie, new Object[] {Boolean.TRUE});
			}
		} catch (Exception ex) {
			LOGGER.warn("Could not set httpOnly for cookie '"+name+"': "+ex.getMessage());
		}

		JForumExecutionContext.getResponse().addCookie(cookie);
	}
	
	/**
	 * Template method to add a cookie.
	 * Useful to sustain when a subclass wants to add
	 * a cookie in a fashion different than the normal 
	 * behavior
	 * @param name The cookie name
	 * @param value The cookie value
	 * @see #addCookie(String, String)
	 */
	protected void addCookieTemplate(final String name, final String value)
	{
		ControllerUtils.addCookie(name, value);
	}
}

../jforum2-code/src/main/java/net/jforum/JForumBaseServlet.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 27/08/2004 - 18:22:10
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum;

import java.io.File;
import java.io.IOException;

import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;

import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;

import freemarker.cache.FileTemplateLoader;
import freemarker.cache.MultiTemplateLoader;
import freemarker.cache.TemplateLoader;
import freemarker.template.Configuration;
import freemarker.template.TemplateException;
import net.jforum.exceptions.ForumStartupException;
import net.jforum.repository.ModulesRepository;
import net.jforum.repository.Tpl;
import net.jforum.util.I18n;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;

/**
 * @author Rafael Steil
 */
public class JForumBaseServlet extends HttpServlet
{
	private static final Logger LOGGER = Logger.getLogger(JForumBaseServlet.class);
	private static final long serialVersionUID = -587702931480527827L;

	@Override public void init(final ServletConfig config) throws ServletException
	{
		super.init(config);

		try {
			boolean isDevelopment = SystemGlobals.getBoolValue(ConfigKeys.DEVELOPMENT);
			if (LOGGER.isEnabledFor(Level.INFO)) {
				LOGGER.info("Starting JForum. Development mode is " + isDevelopment);
			}

			ConfigLoader.startCacheEngine();

			// Configure the template engine
			final Configuration templateCfg = new Configuration(Configuration.VERSION_2_3_32);
			if (isDevelopment) {
				templateCfg.setTemplateUpdateDelayMilliseconds(2000);
			} else {
				templateCfg.setTemplateUpdateDelayMilliseconds(3600000);
			}
			templateCfg.setSetting("number_format", "#");
			templateCfg.setSharedVariable("startupTime", Long.valueOf(System.currentTimeMillis()));

			// Create the default template loader
			final String defaultTemplatePath = SystemGlobals.getApplicationPath() + File.separator + "templates";
			final FileTemplateLoader defaultLoader = new FileTemplateLoader(new File(defaultTemplatePath));

			final String extraTemplatePath = SystemGlobals.getValue(ConfigKeys.FREEMARKER_EXTRA_TEMPLATE_PATH);

			if (StringUtils.isNotBlank(extraTemplatePath)) {
				// An extra template path is configured, we need a MultiTemplateLoader
				final FileTemplateLoader extraLoader = new FileTemplateLoader(new File(extraTemplatePath));
				final TemplateLoader[] loaders = new TemplateLoader[] { extraLoader, defaultLoader };
				final MultiTemplateLoader multiLoader = new MultiTemplateLoader(loaders);
				templateCfg.setTemplateLoader(multiLoader);
			} 
			else {
				// An extra template path is not configured, we only need the default loader
				templateCfg.setTemplateLoader(defaultLoader);
			}

			ModulesRepository.init(SystemGlobals.getValue(ConfigKeys.CONFIG_DIR));

			this.loadConfigStuff();

			JForumExecutionContext.setTemplateConfig(templateCfg);
		} 
		catch (TemplateException e) {
			throw new ForumStartupException("Error while starting JForum", e);
		}
		catch (IOException e) {
			throw new ForumStartupException("Error while starting JForum", e);
		}
	}

	protected void loadConfigStuff()
	{
		ConfigLoader.loadUrlPatterns();
		I18n.load();
		Tpl.load(SystemGlobals.getValue(ConfigKeys.TEMPLATES_MAPPING));
	}
}

../jforum2-code/src/main/java/net/jforum/JForumExecutionContext.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 29/01/2006 - 12:19:11
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum;

import java.io.IOException;
import java.sql.Connection;

import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;

import freemarker.ext.beans.BeansWrapper;
import freemarker.ext.beans.BeansWrapperBuilder;
import freemarker.template.Configuration;
import freemarker.template.SimpleHash;
import net.jforum.context.ForumContext;
import net.jforum.context.RequestContext;
import net.jforum.context.ResponseContext;
import net.jforum.exceptions.ForumException;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;

/**
 * Data execution context. 
 * 
 * @author Rafael Steil
 */
public class JForumExecutionContext
{
    private static ThreadLocal<JForumExecutionContext> userData = new ThreadLocal<>();
	private static final Logger LOGGER = Logger.getLogger(JForumExecutionContext.class);
	private static Configuration templateConfig;
	private static final BeansWrapper BEANS_WRAPPER = new BeansWrapperBuilder(Configuration.VERSION_2_3_32).build();

	private transient Connection conn;
    private ForumContext forumContext;
    private transient final SimpleHash context = new SimpleHash(BEANS_WRAPPER); 
    private transient String redirectTo;
    private String contentType;
    private transient boolean isCustomContent;
    private transient boolean enableRollback;

	/**
	 * Gets the execution context.
	 * @return JForumExecutionContext
	 */
	public static JForumExecutionContext get()
	{
		JForumExecutionContext executionContext = userData.get();

		if (executionContext == null) {
			executionContext = new JForumExecutionContext();
			userData.set(executionContext);
		}

		return executionContext;
	}

	/**
	 * Checks if there is an execution context already set
	 * @return <code>true</code> if there is an execution context
	 * @see #get()
	 */
	public static boolean exists()
	{
		return (userData.get() != null);
	}

	/**
	 * Sets the default template configuration 
	 * @param config The template configuration to set
	 */
	public static void setTemplateConfig(final Configuration config)
	{
		templateConfig = config;
	}

	/**
	 * Gets a reference to the default template configuration settings.
	 * @return The template configuration instance
	 */
	public static Configuration getTemplateConfig()
	{
		return templateConfig;
	}

	/**
	 * Sets the execution context
	 * @param executionContext JForumExecutionContext
	 */
	public static void set(final JForumExecutionContext executionContext)
	{
		userData.set(executionContext);
	}

	/**
	 * Sets a connection
	 * @param conn The connection to use
	 */
	public void setConnection(final Connection conn)
	{
		this.conn = conn;
	}

	/**
	 * Gets the current thread's connection
	 * @return Connection
	 */
	public static Connection getConnection() 
	{
		return getConnection(true);
	}

	public static Connection getConnection(final boolean validate)
	{
		final JForumExecutionContext executionContext = get();
		Connection conn = executionContext.conn;

		if (validate && conn == null) {
			conn = DBConnection.getImplementation().getConnection();

			try {
				conn.setAutoCommit(!SystemGlobals.getBoolValue(ConfigKeys.DATABASE_USE_TRANSACTIONS));
			}
			catch (Exception e) {
                //catch error autocommit
				LOGGER.error(e);
            }

			executionContext.setConnection(conn);
			set(executionContext);
		}
	    
		return conn; 
	}

    public static ForumContext getForumContext()
    {
        return userData.get().forumContext;
    }

    public void setForumContext(final ForumContext forumContext)
    {
        this.forumContext = forumContext;
    }

    /**
	 * Gets the current thread's request
	 * @return WebContextRequest
	 */
	public static RequestContext getRequest() {
		return getForumContext().getRequest();
	}

	/**
	 * Gets the current thread's response
	 * @return HttpServletResponse
	 */
	public static ResponseContext getResponse() {
		return getForumContext().getResponse();
	}

	/**
	 * Gets the current thread's template context
	 * @return SimpleHash
	 */
	public static SimpleHash getTemplateContext() {
		return userData.get().context;
	}

	/**
	 * Gets the current thread's <code>DataHolder</code> instance
     * @param redirect String
     */
	public static void setRedirect(final String redirect) {
		userData.get().redirectTo = redirect;
	}

	/**
	 * Sets the content type for the current http response.
	 * @param cntType String
	 */
	public static void setContentType(final String cntType) {
		userData.get().contentType = cntType;
	}

	/**
	 * Gets the content type for the current request.
	 * @return String
	 */
	public static String getContentType()
	{
		return userData.get().contentType;
	}

	/**
	 * Gets the URL to redirect to, if any.
	 * @return The URL to redirect, of <code>null</code> if none.
	 */
	public static String getRedirectTo()
	{
		final JForumExecutionContext executionContext = userData.get();
		return (executionContext == null ? null : executionContext.redirectTo);
	}

	/**
	 * Marks the request to use a binary content-type.
	 * @param enable boolean
	 */
	public static void enableCustomContent(final boolean enable) {
		userData.get().isCustomContent = enable;
	}

	/**
	 * Checks if the current request is binary
	 * @return <code>true</code> if the content type for the current request is any binary data.
	 */
	public static boolean isCustomContent()
	{
		return userData.get().isCustomContent;
	}

	/**
	 * Forces the request to not commit the connection.
	 */
	public static void enableRollback() {
		userData.get().enableRollback = true;
	}

	/**
	 * Check if commit is disabled or not for the current request.
	 * @return <code>true</code> if a commit should NOT be made
	 */
	public static boolean shouldRollback() {
		return userData.get().enableRollback;
	}

    /**
     * Send UNAUTHORIZED to the browser and ask user to login via basic authentication
     */
	public static void requestBasicAuthentication()  
	{
		getResponse().addHeader("WWW-Authenticate", "Basic realm=\"JForum\"");

		try {
			getResponse().sendError(HttpServletResponse.SC_UNAUTHORIZED);
		}
		catch (IOException e) {
			throw new ForumException(e);
		}

		enableCustomContent(true);
    }

	/**
	 * Finishes the execution context
	 */
	public static void finish()
	{
		final Connection conn = JForumExecutionContext.getConnection(false);

		if (conn != null) {
			if (SystemGlobals.getBoolValue(ConfigKeys.DATABASE_USE_TRANSACTIONS)) {
				if (JForumExecutionContext.shouldRollback()) {
					try {
						conn.rollback();
					}
					catch (Exception e) {
						LOGGER.error("Error while rolling back a transaction", e);
					}
				}
				else {
					try {
						conn.commit();
					}
					catch (Exception e) {
						LOGGER.error("Error while commiting a transaction", e);
					}
				}
			}

			try {
				DBConnection.getImplementation().releaseConnection(conn);
			}
			catch (Exception e) {
				LOGGER.error("Error while releasing the connection : " + e, e);
			}
		}

		userData.set(null);
	}

	/**
	 * Creating SimpleHash objects in one central place lets us confine
	 * the FreeMarker version information to this class.
	 */
	public static SimpleHash newSimpleHash() {
		return new SimpleHash(BEANS_WRAPPER);
	}
}

../jforum2-code/src/main/java/net/jforum/ContextListener.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum;

import java.io.File;
import javax.servlet.ServletContext;
import javax.servlet.ServletContextEvent;
import javax.servlet.ServletContextListener;

import org.apache.log4j.Logger;

import net.jforum.util.log.LoggerHelper;
import net.jforum.util.preferences.SystemGlobals;
import net.jforum.util.stats.Stats;

/**
 * @author Andowson Chang
 */

public class ContextListener implements ServletContextListener {

    private static final Logger LOGGER = Logger.getLogger(ContextListener.class);
    /* (non-Javadoc)
     * @see javax.servlet.ServletContextListener#contextInitialized(javax.servlet.ServletContextEvent)
     */
    @Override public void contextInitialized (ServletContextEvent sce) {
        final ServletContext application = sce.getServletContext();
        String appPath = application.getRealPath("");
        if (appPath != null && appPath.endsWith(File.separator)) {
			// On Tomcat, getRealPath ends with a "/", whereas on Jetty, it does not. The next line allows for that.
        	appPath = appPath.substring(0, appPath.lastIndexOf(File.separator));
        }
		LOGGER.info("application root is "+appPath);
        LoggerHelper.checkLoggerInitialization(appPath + "/WEB-INF", appPath + "/WEB-INF/classes");
        ConfigLoader.startSystemglobals(appPath);
        SystemGlobals.setValue("context.path", application.getContextPath());
        final String containerInfo = application.getServerInfo();
		SystemGlobals.setValue("server.info", containerInfo);
		SystemGlobals.setValue("servlet.version", application.getMajorVersion()+"."+application.getMinorVersion());
		// initialize EventBus
		Stats.init();
        LOGGER.info(application.getContextPath() + " initialized in " + containerInfo);
    }

    /* (non-Javadoc)
     * @see javax.servlet.ServletContextListener#contextDestroyed(javax.servlet.ServletContextEvent)
     */
    @Override public void contextDestroyed (ServletContextEvent sce) {
		// stop EventBus
        Stats.stop();
/*
        Enumeration<Driver> drivers = DriverManager.getDrivers();
        while (drivers.hasMoreElements()) {
            Driver driver = drivers.nextElement();
            LOGGER.debug("unregister JDBC Driver " + driver.getClass().getName());
            try {
                DriverManager.deregisterDriver(driver);
            } catch (SQLException e) {
                e.printStackTrace();
                LOGGER.error(e.getMessage(), e);
            }
        }
*/
        LOGGER.info(sce.getServletContext().getContextPath() + " destroyed");
    }
}

../jforum2-code/src/main/java/net/jforum/DBConnection.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 25/08/2004 23:03:14
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum;

import java.sql.Connection;
import java.sql.SQLException;

import org.apache.log4j.Logger;

import net.jforum.exceptions.DatabaseException;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;

/**
 * Base class for all database connection implementations that
 * may be used with JForum.
 * Default implementations are <code>PooledConnection</code>, which
 * is the default connection pool implementation, and <code>SimpleConnection</code>,
 * which opens a new connection on every request.  
 * 
 * @author Rafael Steil
 * @version $Id$
 */
public abstract class DBConnection 
{
	private static final Logger LOGGER = Logger.getLogger(DBConnection.class);
	protected transient boolean databaseUp;
	
	private static DBConnection instance;

	/**
	 * Creates an instance of some <code>DBConnection </code>implementation. 
	 * 
	 * @return <code>true</code> if the instance was successfully created, 
	 * or <code>false</code> if some exception was thrown.
	 */
	public static boolean createInstance()
	{
		boolean succ = true;
		try {
			instance = (DBConnection)Class.forName(SystemGlobals.getValue(
					ConfigKeys.DATABASE_CONNECTION_IMPLEMENTATION)).getDeclaredConstructor().newInstance();
		}
		catch (Exception e) {
			 LOGGER.warn("Error creating the database connection implementation instance. " + e);
			 LOGGER.error(e.getMessage(), e);
			 succ = false;
		}
		
		return succ;
	}
	
	/**
	 * Gets the current <code>DBConnection</code> implementation's instance
	 * 
	 * @return DBConnection
	 */
	public static DBConnection getImplementation()
	{
		return instance;
	}
	
	/**
	 * Checks if database connection is up.
	 *  
	 * @return <code>true</code> if a connection to the database
	 * was successfully created, or <code>false</code> if not.
	 */
	public boolean isDatabaseUp()
	{
		return this.databaseUp;
	}
	
	/**
	 * Initializes the implementation. 
	 * Connection pools may use this method to init the connections from the
	 * database, while non-pooled implementation can provide an empty method
	 * block if no other initialization is necessary.
	 * <br>
	 * Please note that this method will be called just once, at system startup.
	 * 
	 *  @throws Exception
	 */
	public abstract void init() throws Exception;
	
	/**
	 * Gets a connection.
	 * Connection pools' normal behavior will be to once connection
	 * from the pool, while non-pooled implementations will want to
	 * go to the database and get the connection in time the method
	 * is called.
	 * 
	 * @return Connection
	 */
	public abstract Connection getConnection();
	
	/**
	 * Releases a connection.
	 * Connection pools will want to put the connection back to the pool list,
	 * while non-pooled implementations should call <code>close()</code> directly
	 * in the connection object.
	 * 
	 * @param conn The connection to release
	 * @throws DatabaseException
	 */
	public void releaseConnection(final Connection conn)
	{        
		if (conn != null) {
			try {
				conn.close();
			}
			catch (SQLException e) { 
				LOGGER.error(e.getMessage(), e);
				throw new DatabaseException(e);
			}
		}
	}
	
	/**
	 * Close all open connections.
	 */
	public void realReleaseAllConnections() 
	{	
		LOGGER.info("real release all connections now");
		this.databaseUp = false;
	}
}

../jforum2-code/src/main/java/net/jforum/SimpleConnection.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 25/08/2004 23:32:20
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

import org.apache.log4j.Logger;

import net.jforum.exceptions.DatabaseException;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;

/**
 * Non-pooled connection implementation.
 * This class will ask a new connection to the database on every
 * <code>getConnection()</code> class. Uses of this class include
 * systems where a connection pool is not permitted or the 
 * connections' life time is too short, not justifying to have
 * a connection pool.
 * 
 * @author Rafael Steil
 * @version $Id$
 */
public class SimpleConnection extends DBConnection 
{
	private static final Logger LOGGER = Logger.getLogger(SimpleConnection.class);
	
	/** 
	 * @see net.jforum.DBConnection#init()
	 * 	 @throws DatabaseException  
	 */
	@Override public void init() throws DatabaseException
	{
		try {
			Class.forName(SystemGlobals.getValue(ConfigKeys.DATABASE_CONNECTION_DRIVER));
			
			// Try to validate the connection url
			final Connection conn = this.getConnection();
		
			if (conn != null) {
				this.releaseConnection(conn);
			}
			
			this.databaseUp = true;
		}
		catch (Exception e) {
			this.databaseUp = false;
			throw new DatabaseException(e);
		}
	}

	/** 
	 * @see net.jforum.DBConnection#getConnection()
	 */
	@Override public Connection getConnection()
	{
		try {
			return DriverManager.getConnection(SystemGlobals.getValue(ConfigKeys.DATABASE_CONNECTION_STRING));
		}
		catch (SQLException e) {
			LOGGER.error(e.getMessage(), e);
			throw new DatabaseException(e);
		}
	}
}

../jforum2-code/src/main/java/net/jforum/C3P0PooledConnection.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 30/11/2005 17:07:51
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum;

import java.beans.PropertyVetoException;
import java.lang.reflect.Method;
import java.sql.Connection;
import java.sql.SQLException;

import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;

import com.mchange.v2.c3p0.ComboPooledDataSource;
import com.mchange.v2.c3p0.DataSources;

import net.jforum.exceptions.DatabaseException;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public class C3P0PooledConnection extends DBConnection
{
	private static final Logger LOGGER = Logger.getLogger(C3P0PooledConnection.class);
	
	private transient ComboPooledDataSource dataSource;
	
	/**
	 * 
	 * @see net.jforum.DBConnection#init()
	 */
	@Override public void init() throws PropertyVetoException
	{
		this.dataSource = new ComboPooledDataSource();
		
		this.dataSource.setDriverClass(SystemGlobals.getValue(ConfigKeys.DATABASE_CONNECTION_DRIVER));
		this.dataSource.setJdbcUrl(SystemGlobals.getValue(ConfigKeys.DATABASE_CONNECTION_STRING));
		this.dataSource.setMinPoolSize(SystemGlobals.getIntValue(ConfigKeys.DATABASE_POOL_MIN));
		this.dataSource.setMaxPoolSize(SystemGlobals.getIntValue(ConfigKeys.DATABASE_POOL_MAX));
		this.dataSource.setIdleConnectionTestPeriod(SystemGlobals.getIntValue(ConfigKeys.DATABASE_PING_DELAY));
		
		this.extraParams();
		
		try {
			// Try to validate the connection url
			final Connection conn = this.getConnection();

			if (conn != null) {
				this.releaseConnection(conn);
				this.databaseUp = true;
			}
		} catch (Exception e) {
			this.databaseUp = false;
		}
	}
	
	private void extraParams()
	{
		final String extra = SystemGlobals.getValue(ConfigKeys.C3P0_EXTRA_PARAMS);
		
		if (StringUtils.isNotBlank(extra)) {
			final String[] param = extra.split(";");
			
			for (int i = 0; i < param.length; i++) {
				final String[] keyvalue = param[i].trim().split("=");
				
				if (keyvalue.length == 2) {
					this.invokeSetter(keyvalue[0], keyvalue[1]);
				}
			}
		}
	}
	
	/**
	 * Huge hack to invoke methods without the need of an external configuration file
	 * and without knowing the argument's type
	 */
	private void invokeSetter(final String propertyName, final String value)
	{
		try {
			final String setter = "set" + propertyName.substring(0, 1).toUpperCase() + propertyName.substring(1);
			
			final Method[] methods = this.dataSource.getClass().getMethods();
			
			for (int i = 0; i < methods.length; i++) {
				final Method method = methods[i];
				
				if (method.getName().equals(setter)) {
					final Class<?>[] paramTypes = method.getParameterTypes();
					
					if (paramTypes[0] == String.class) {
						method.invoke(this.dataSource, new Object[] { value });
					}
					else if (paramTypes[0] == int.class) {
						method.invoke(this.dataSource, new Object[] { Integer.valueOf(value) });
					}
					else if (paramTypes[0] == boolean.class) {
						method.invoke(this.dataSource, new Object[] { Boolean.valueOf(value) });
					}
				}
			}
		}
		catch (Exception e) {
			LOGGER.error(e.getMessage(), e);
		}
	}
	
	/**
	 * @see net.jforum.DBConnection#getConnection()
	 */
	@Override public Connection getConnection()
	{
		try {
			return this.dataSource.getConnection();
		}
		catch (Exception e) {
			LOGGER.error(e.getMessage(), e);
			throw new DatabaseException(e);
		}
	}

	/**
	 * @see net.jforum.DBConnection#realReleaseAllConnections()
	 */
	@Override public void realReleaseAllConnections()
	{
		try {
			DataSources.destroy(this.dataSource);
			Thread.sleep(1000);
			this.databaseUp = false;
		} catch (SQLException e) {
			LOGGER.error(e.getMessage(), e);
			throw new DatabaseException(e);
		} catch (InterruptedException e) {
			LOGGER.error(e.getMessage(), e);
			throw new DatabaseException(e);
		}		
	}
}

../jforum2-code/src/main/java/net/jforum/InstallServlet.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 27/08/2004 - 18:12:26
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum;

import java.io.BufferedWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.owasp.csrfguard.CsrfGuard;

import freemarker.template.SimpleHash;
import freemarker.template.Template;
import net.jforum.context.ForumContext;
import net.jforum.context.JForumContext;
import net.jforum.context.RequestContext;
import net.jforum.context.ResponseContext;
import net.jforum.context.web.WebRequestContext;
import net.jforum.context.web.WebResponseContext;
import net.jforum.exceptions.ExceptionWriter;
import net.jforum.repository.ModulesRepository;
import net.jforum.util.I18n;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public class InstallServlet extends JForumBaseServlet
{
    private static final long serialVersionUID = 959359188496986295L;

    /** 
     * @see javax.servlet.http.HttpServlet#service(javax.servlet.ServletRequest, javax.servlet.ServletResponse)
     */
    @Override
    public void service(final HttpServletRequest req, final HttpServletResponse res) throws ServletException, IOException
    {
        try {
            final String encoding = SystemGlobals.getValue(ConfigKeys.ENCODING);
            req.setCharacterEncoding(encoding);

            // Request
            final RequestContext request = new WebRequestContext(req);
            final ResponseContext response = new WebResponseContext(res);

            request.setCharacterEncoding(encoding);

            final JForumExecutionContext executionContext = JForumExecutionContext.get();

            final ForumContext forumContext = new JForumContext(
                                                                request.getContextPath(),
                                                                SystemGlobals.getValue(ConfigKeys.SERVLET_EXTENSION),
                                                                request,
                                                                response,
                                                                false
                );

            executionContext.setForumContext(forumContext);

            // Assigns the information to user's thread 
            JForumExecutionContext.set(executionContext);

            if (SystemGlobals.getBoolValue(ConfigKeys.INSTALLED)) {
                JForumExecutionContext.setRedirect(request.getContextPath() 
                                                   + "/forums/list" + SystemGlobals.getValue(ConfigKeys.SERVLET_EXTENSION));
            }
            else {
                // Context
                final SimpleHash context = JForumExecutionContext.getTemplateContext();
                context.put("contextPath", req.getContextPath());
                context.put("serverName", req.getServerName());
                context.put("templateName", "default");
                context.put("serverPort", Integer.toString(req.getServerPort()));
                context.put("I18n", I18n.getInstance());
                context.put("encoding", encoding);
                context.put("extension", SystemGlobals.getValue(ConfigKeys.SERVLET_EXTENSION));
                context.put("JForumContext", forumContext);
                context.put("version", SystemGlobals.getValue(ConfigKeys.VERSION));	
                CsrfGuard csrfGuard = CsrfGuard.getInstance();
                context.put("OWASP_CSRFTOKEN", csrfGuard.getTokenValue(req));

                // Module and Action
                final String moduleClass = ModulesRepository.getModuleClass(request.getModule());

                context.put("moduleName", request.getModule());
                context.put("action", request.getAction());

                final BufferedWriter out = new BufferedWriter(new OutputStreamWriter(response.getOutputStream(), encoding));

                try {
                    if (moduleClass != null) {
                        // Here we go, baby
                        final Command command = (Command)Class.forName(moduleClass).getDeclaredConstructor().newInstance();
                        final Template template = command.process(request, response, context);

                        if (JForumExecutionContext.getRedirectTo() == null) {
                            response.setContentType("text/html; charset=" + encoding);

                            template.process(context, out);
                            out.flush();
                        }
                    } else {
                        throw new Exception(request.getModule() + " module not found.\nAdd \"install=net.jforum.view.install.InstallAction\" to modulesMapping.properties if you want to reinstall JForum.");
                    }
                }
                catch (Exception e) {
                    response.setContentType("text/html; charset=" + encoding);
                    new ExceptionWriter().handleExceptionData(e, out, request);
                }
            }

            final String redirectTo = JForumExecutionContext.getRedirectTo();

            if (redirectTo != null) {
                response.sendRedirect(response.encodeRedirectURL(redirectTo));
            }
        }
        finally {
            JForumExecutionContext.finish();
        }
    }
}

../jforum2-code/src/main/java/net/jforum/JForum.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Mar 3, 2003 / 11:43:35 AM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum;

import java.io.BufferedWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.lang.reflect.InvocationTargetException;
import java.sql.Connection;
import java.sql.Statement;
import java.util.List;
import java.util.Properties;

import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.owasp.csrfguard.CsrfGuard;
import org.quartz.SchedulerException;

import freemarker.template.SimpleHash;
import freemarker.template.Template;
import net.jforum.api.integration.mail.pop.POPJobStarter;
import net.jforum.context.JForumContext;
import net.jforum.context.RequestContext;
import net.jforum.context.ResponseContext;
import net.jforum.context.web.WebRequestContext;
import net.jforum.context.web.WebResponseContext;
import net.jforum.dao.DataAccessDriver;
import net.jforum.dao.MySQLVersionWorkarounder;
import net.jforum.dao.SqlServerVersionWorkarounder;
import net.jforum.dao.UserDAO;
import net.jforum.entities.Banlist;
import net.jforum.entities.User;
import net.jforum.entities.UserSession;
import net.jforum.exceptions.ExceptionWriter;
import net.jforum.exceptions.ForumStartupException;
import net.jforum.repository.BBCodeRepository;
import net.jforum.repository.BanlistRepository;
import net.jforum.repository.ModulesRepository;
import net.jforum.repository.RankingRepository;
import net.jforum.repository.RegEmailRepository;
import net.jforum.repository.SecurityRepository;
import net.jforum.repository.SmiliesRepository;
import net.jforum.summary.SummaryScheduler;
import net.jforum.util.FileMonitor;
import net.jforum.util.I18n;
import net.jforum.util.bbcode.BBCodeHandler;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;
import net.jforum.util.stats.StatsEvent;

/**
 * Front Controller.
 * 
 * @author Rafael Steil
 */
public class JForum extends JForumBaseServlet 
{
    private static final Logger LOGGER = Logger.getLogger(JForum.class);

    private static final long serialVersionUID = 7160936607198716279L;

    /**
     * @see javax.servlet.Servlet#init(javax.servlet.ServletConfig)
     */
    @Override
    public void init(final ServletConfig config) throws ServletException
    {
        super.init(config);
        this.startApplication();

        // Start database
        ForumStartup.startDatabase();

        try {
            final Connection conn = DBConnection.getImplementation().getConnection();
            conn.setAutoCommit(!SystemGlobals.getBoolValue(ConfigKeys.DATABASE_USE_TRANSACTIONS));

            // Try to fix some MySQL problems
            if ("mysql".equals(SystemGlobals.getValue(ConfigKeys.DATABASE_DRIVER_NAME))) {
                final MySQLVersionWorkarounder dbWorkarounder = new MySQLVersionWorkarounder();
                dbWorkarounder.handleWorkarounds(conn);	
            }			

            // Try to fix some SQL Server problems
            if ("sqlserver".equals(SystemGlobals.getValue(ConfigKeys.DATABASE_DRIVER_NAME))) {
                final SqlServerVersionWorkarounder dbWorkarounder2 = new SqlServerVersionWorkarounder();
                dbWorkarounder2.handleWorkarounds(conn);
            }

            // Continues loading the forum
            final JForumExecutionContext executionContext = JForumExecutionContext.get();
            executionContext.setConnection(conn);
            JForumExecutionContext.set(executionContext);

            // Init general forum stuff
            ForumStartup.startForumRepository();
            RankingRepository.loadRanks();
            SmiliesRepository.loadSmilies();
            BanlistRepository.loadBanlist();
            RegEmailRepository.load();
        }
        catch (Exception e) {
            LOGGER.error(e.getMessage(), e);
            throw new ForumStartupException("Error while starting jforum", e);
        }
        finally {
            JForumExecutionContext.finish();
        }

		// may kick off reindexing, so needs the DB fully started up
		ConfigLoader.startSearchIndexer();
    }

    /**
     * @see javax.servlet.http.HttpServlet#service(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)
     */
    @Override
    public void service(final HttpServletRequest req, final HttpServletResponse res) throws IOException, ServletException
    {
        Writer out = null;
        JForumContext forumContext = null;
        RequestContext request = null;
        ResponseContext response = null;
        final String encoding = SystemGlobals.getValue(ConfigKeys.ENCODING);

        try {
            // Initializes the execution context
            final JForumExecutionContext executionContext = JForumExecutionContext.get();

            request = new WebRequestContext(req);
            response = new WebResponseContext(res);

            this.checkDatabaseStatus();

            forumContext = new JForumContext(request.getContextPath(),
                                             SystemGlobals.getValue(ConfigKeys.SERVLET_EXTENSION),
                                             request,
                                             response
                );
            executionContext.setForumContext(forumContext);

            JForumExecutionContext.set(executionContext);

            // Setup stuff
            final SimpleHash context = JForumExecutionContext.getTemplateContext();

            final ControllerUtils utils = new ControllerUtils();
            utils.refreshSession();

            context.put(ConfigKeys.LOGGED, SessionFacade.isLogged());

			boolean isDevelopment = SystemGlobals.getBoolValue(ConfigKeys.DEVELOPMENT);
            context.put(ConfigKeys.DEVELOPMENT, isDevelopment ? "true" : "false");

            // Process security data
            SecurityRepository.load(SessionFacade.getUserSession().getUserId());

            utils.prepareTemplateContext(context, forumContext);

            final String module = request.getModule();

            // Gets the module class name
            String moduleClass = module == null 
                ? null : ModulesRepository.getModuleClass(module);

            if (moduleClass == null) {
                new StatsEvent("Bad module requests", req.getRequestURL()).record();
                // Module not found, send 404 not found response
                //response.sendError(HttpServletResponse.SC_NOT_FOUND);
                response.sendRedirect(request.getContextPath());
            }
            else {
                final boolean shouldBan = this.shouldBan(request.getRemoteAddr());

                if (shouldBan && !"logout".equals(request.getAction())) {
                    moduleClass = ModulesRepository.getModuleClass("forums");
                    context.put("moduleName", "forums");
                    ((WebRequestContext)request).changeAction("banned");
                }
                else {
                    context.put("moduleName", module);
                    context.put("action", request.getAction());
                    CsrfGuard csrfGuard = CsrfGuard.getInstance();
                    context.put("OWASP_CSRFTOKEN", csrfGuard.getTokenValue(req));
                }

                if (shouldBan && SystemGlobals.getBoolValue(ConfigKeys.BANLIST_SEND_403FORBIDDEN)) {
                    new StatsEvent("Banned page requests", req.getRequestURL()).record();
                    response.sendError(HttpServletResponse.SC_FORBIDDEN);
                }
                else {
                    context.put("language", I18n.getUserLanguage());
                    context.put("session", SessionFacade.getUserSession());
                    context.put("request", req);
                    context.put("response", response);

					// add overridable colors
                    context.put("colorOrange", SystemGlobals.getValue("color.orange"));
                    context.put("colorDarkBlue", SystemGlobals.getValue("color.darkblue"));
                    context.put("colorVeryLight", SystemGlobals.getValue("color.verylight"));
                    context.put("colorQuiteLight", SystemGlobals.getValue("color.quitelight"));
                    context.put("colorLightGray", SystemGlobals.getValue("color.lightgray"));

                    new StatsEvent("All page requests", req.getRequestURL()).record();
                    out = this.processCommand(out, request, response, encoding, context, moduleClass);
                }
            }
        }
        catch (Exception e) {
            this.handleException(out, response, encoding, e, request);
        }
        finally {
            this.handleFinally(out, forumContext, response);
        }
    }

    private Writer processCommand(final Writer out, final RequestContext request, final ResponseContext response, 
                                  final String encoding, final SimpleHash context, final String moduleClass) throws Exception 
    {
        Writer outWriter = out;
        // Here we go, baby
        final Command command = this.retrieveCommand(moduleClass);
        final Template template = command.process(request, response, context);

        if (JForumExecutionContext.getRedirectTo() == null) {
            String contentType = JForumExecutionContext.getContentType();

            if (contentType == null) {
                contentType = "text/html; charset=" + encoding;
            }

            response.setContentType(contentType);

            // X-Frame-Options header
            String xFrameOptions = SystemGlobals.getValue(ConfigKeys.HTTP_XFRAMEOPTIONS);
            if (xFrameOptions != null && (xFrameOptions.trim().length() > 0)) {
                response.setHeader("X-Frame-Options", xFrameOptions.trim());
            }

            // Binary content are expected to be fully 
            // handled in the action, including outputstream manipulation
            if (!JForumExecutionContext.isCustomContent()) {
                outWriter = new BufferedWriter(new OutputStreamWriter(response.getOutputStream(), encoding));
                template.process(JForumExecutionContext.getTemplateContext(), outWriter);
                outWriter.flush();
            }
        }

        return outWriter;
    }

    private void checkDatabaseStatus()
    {
        if (!DBConnection.getImplementation().isDatabaseUp()) {
            ForumStartup.startDatabase();			
        }
    }

    private void handleFinally(final Writer out, final JForumContext forumContext, final ResponseContext response) throws IOException
    {
        try {
            if (out != null) { out.close(); }
        }
        catch (Exception e) {
            // catch close error
            LOGGER.error(e);
        }

        final String redirectTo = JForumExecutionContext.getRedirectTo();
        JForumExecutionContext.finish();

        if (redirectTo != null) {
            if (forumContext != null && forumContext.isEncodingDisabled()) {
                response.sendRedirect(redirectTo);
            } 
            else {
                response.sendRedirect(response.encodeRedirectURL(redirectTo));
            }
        }
    }

    private void handleException(final Writer out, final ResponseContext response, final String encoding, 
                                 final Exception exception, final RequestContext request) throws IOException
                                 {
        JForumExecutionContext.enableRollback();
        new StatsEvent("Error page", exception.getMessage()).record();

        if (exception.toString().indexOf("ClientAbortException") == -1) {
            if (response != null) {
                response.setContentType("text/html; charset=" + encoding);
            }
            if (out == null && response != null) {
                new ExceptionWriter().handleExceptionData(exception,  new BufferedWriter(new OutputStreamWriter(response.getOutputStream(), encoding)), request);				
            }
            else {				
                new ExceptionWriter().handleExceptionData(exception, out, request);
            }
        }
    }

    protected void startApplication()
    {
        try {
            if (SystemGlobals.getValue(ConfigKeys.DATABASE_CONNECTION_DRIVER) == null) {
                SystemGlobals.loadAdditionalDefaults(SystemGlobals.getValue(ConfigKeys.DATABASE_DRIVER_CONFIG));
            }			

            SystemGlobals.loadQueries(SystemGlobals.getValue(ConfigKeys.SQL_QUERIES_GENERIC),
                                      SystemGlobals.getValue(ConfigKeys.SQL_QUERIES_DRIVER));

            final String quartzConfig = SystemGlobals.getValue(ConfigKeys.QUARTZ_CONFIG);
            SystemGlobals.loadAdditionalDefaults(quartzConfig);

            ConfigLoader.createLoginAuthenticator();
            ConfigLoader.loadDaoImplementation();
            ConfigLoader.listenForChanges();
            ConfigLoader.startSummaryJob();
            ConfigLoader.startPop3Integration();
            // BB Code
            BBCodeRepository.setBBCollection(new BBCodeHandler().parse());
        }
        catch (Exception e) {
            throw new ForumStartupException("Error while starting JForum", e);
        }
    }	

    private boolean shouldBan(final String ip)
    {
        final Banlist banlist = new Banlist();

        final UserDAO dao = DataAccessDriver.getInstance().newUserDAO();
        final User user = dao.selectById(SessionFacade.getUserSession().getUserId());
        banlist.setUserId(user.getId());
        banlist.setEmail(user.getEmail());
        banlist.setIp(ip);

        return BanlistRepository.shouldBan(banlist);
    }

    private Command retrieveCommand(final String moduleClass) throws InstantiationException, IllegalAccessException, ClassNotFoundException, IllegalArgumentException, InvocationTargetException, NoSuchMethodException, SecurityException
    {
        return (Command)Class.forName(moduleClass).getDeclaredConstructor().newInstance();
    }

    /** 
     * @see javax.servlet.GenericServlet#destroy()
     */
    @Override
    public void destroy() 
    {
        super.destroy();
        LOGGER.info("Destroying JForum...");

        // stop Scheduler
        try {
            LOGGER.debug("Stop Quartz Scheduler ...");
            POPJobStarter.stopJob();
            SummaryScheduler.stopJob();			
        } catch (SchedulerException e) {			
            LOGGER.error(e.getMessage(), e);
        }		

        // stop FileMonitor threads
        LOGGER.debug("Close file monitors ...");
        closeFileMonitor();

        // invalidate all sessions to force SessionFacade.storeSessionData()		
        if (LOGGER.isDebugEnabled()) {
        	LOGGER.debug("Current sessions: " + SessionFacade.size());
        }
        final List<UserSession> sessions = SessionFacade.getAllSessions();
        for (UserSession userSession: sessions) {
            final HttpSession session = (HttpSession)getServletContext().getAttribute(userSession.getSessionId());
            if (session != null)
				session.invalidate();
            if (LOGGER.isDebugEnabled()) {
            	LOGGER.debug("Current sessions: " + SessionFacade.size());
            }
        }

        // stop database and release all connections
        try {
            if ("hsqldb".equals(SystemGlobals.getValue(ConfigKeys.DATABASE_DRIVER_NAME))) {
                LOGGER.debug("shutdwon hsqldb");
                Connection conn  = JForumExecutionContext.getConnection();
                Statement stmt = conn.createStatement();
                stmt.execute("SHUTDOWN");
                stmt.close();
                JForumExecutionContext.finish();
            }
            DBConnection.getImplementation().realReleaseAllConnections();
        }
        catch (Exception e) { 
            LOGGER.error(e.getMessage(), e); 
        }

        // stop cache engine
        try {			
            ConfigLoader.stopCacheEngine();
        }
        catch (Exception e) { 
            LOGGER.error(e.getMessage(), e); 
        }
    }

    private static void closeFileMonitor()
    {
        FileMonitor.getInstance().removeFileChangeListener(SystemGlobals.getValue(ConfigKeys.QUARTZ_CONFIG));
        FileMonitor.getInstance().removeFileChangeListener(SystemGlobals.getValue(ConfigKeys.INSTALLATION_CONFIG));
        FileMonitor.getInstance().removeFileChangeListener(SystemGlobals.getValue(ConfigKeys.DEFAULT_CONFIG));
        FileMonitor.getInstance().removeFileChangeListener(SystemGlobals.getValue(ConfigKeys.SQL_QUERIES_DRIVER));
        FileMonitor.getInstance().removeFileChangeListener(SystemGlobals.getValue(ConfigKeys.SQL_QUERIES_GENERIC));

        final String baseDir = I18n.getBaseDir();
        final Properties localeNames = I18n.getLocaleNames();
        FileMonitor.getInstance().removeFileChangeListener(baseDir + localeNames.getProperty(SystemGlobals.getValue(ConfigKeys.I18N_DEFAULT)));
        FileMonitor.getInstance().removeFileChangeListener(baseDir + localeNames.getProperty(SystemGlobals.getValue(ConfigKeys.I18N_DEFAULT_ADMIN)));		
    }	
}

../jforum2-code/src/main/java/net/jforum/UrlPatternCollection.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms,
 * with or without modification, are permitted provided
 * that the following conditions are met:
 *
 * 1) Redistributions of source code must retain the above
 * copyright notice, this list of conditions and the
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the
 * above copyright notice, this list of conditions and
 * the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor
 * the names of its contributors may be used to endorse
 * or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
 * IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 *
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum;

import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

/**
 * Keeps a collection of <code>UrlPattern</code> objects.
 *
 * @author Rafael Steil
 * @version $Id$
 */
public final class UrlPatternCollection
{
    private static Map<String, UrlPattern> patternsMap = new ConcurrentHashMap<>();

    /**
     * Try to find a <code>UrlPattern</code> by its name.
     *
     * @param name The pattern name
     * @return The <code>UrlPattern</code> object if a match was found, or <code>null</code> if not
     */
    public static UrlPattern findPattern(final String name)
    {
        return UrlPatternCollection.patternsMap.get(name);
    }

    /**
     * Adds a new <code>UrlPattern</code>.
     *
     * @param name The pattern name
     * @param value The pattern value
     */
    public static void addPattern(final String name, final String value)
    {
        UrlPatternCollection.patternsMap.put(name, new UrlPattern(name, value));
    }
    
    private UrlPatternCollection() {}
}

../jforum2-code/src/main/java/net/jforum/Command.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Mar 3, 2003 / 10:55:19 AM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum;

import java.io.File;
import java.io.IOException;

import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;

import freemarker.template.SimpleHash;
import freemarker.template.Template;
import net.jforum.context.RequestContext;
import net.jforum.context.ResponseContext;
import net.jforum.exceptions.ForumException;
import net.jforum.exceptions.TemplateNotFoundException;
import net.jforum.repository.Tpl;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;
import net.jforum.util.preferences.TemplateKeys;

/**
 * <code>Command</code> Pattern implementation.
 * All View Helper classes, which are instead to configure and process
 * presentation actions must extend this class. 
 * 
 * @author Rafael Steil
 */
public abstract class Command 
{
	private static final Logger LOGGER = Logger.getLogger(Command.class);
	private static final Class<?>[] NO_ARGS_CLASS = new Class[0];
	private static final Object[] NO_ARGS_OBJECT = new Object[0];
	
	private transient boolean ignoreAction;
	
	protected transient String templateName;
	protected transient RequestContext request;
	protected transient ResponseContext response;
	protected transient SimpleHash context;

	protected void setTemplateName(final String templateName)
	{
        String templateToRequest = templateName;
        if (request != null && request.isMobileRequest()) {
            templateToRequest += ".mobile";
        }
		this.templateName = Tpl.name(templateToRequest);
	}
	
	protected void enableIgnoreAction()
	{
		this.ignoreAction = true;
	}
	
	/**
	 * Base method for listings. 
	 * May be used as general listing or as helper
	 * to another specialized type of listing. Subclasses
	 * must implement it to the cases where some invalid
	 * action is called ( which means that the exception will
	 * be caught and the general listing will be used )
	 */
	public abstract void list() ;
	
	/**
	 * Process and manipulate a requisition.
	 * @return <code>Template</code> reference
     * @param request WebContextRequest
     * @param response WebContextResponse
	 */
	public Template process(final RequestContext request, final ResponseContext response, final SimpleHash context)
	{
		this.request = request;
		this.response = response;
		this.context = context;
		
		final String action = this.request.getAction();

		if (!this.ignoreAction) {
			try {
				this.getClass().getMethod(action, NO_ARGS_CLASS).invoke(this, NO_ARGS_OBJECT);
			}
			catch (NoSuchMethodException e) {		
				this.list();		
			}
			catch (Exception e)
            {
                throw new ForumException(e);
			}
		}
		
		if (JForumExecutionContext.getRedirectTo() != null) {
			this.setTemplateName(TemplateKeys.EMPTY);
		}
		else if (request.getAttribute("template") != null) {
			this.setTemplateName((String)request.getAttribute("template"));
		}
		
		if (JForumExecutionContext.isCustomContent()) {
			return null;
		}
		
		if (this.templateName == null) {
			throw new TemplateNotFoundException("Template for action " + action + " is not defined");
		}

		final String defaultTemplatePath = SystemGlobals.getApplicationPath() + File.separator + "templates";
		final String extraTemplatePath = SystemGlobals.getValue(ConfigKeys.FREEMARKER_EXTRA_TEMPLATE_PATH);
		
		final String templateFile = new StringBuilder(SystemGlobals.getValue(ConfigKeys.TEMPLATE_DIR)).
                append('/').append(this.templateName).toString();
        
		if (StringUtils.isNotBlank(extraTemplatePath)) {
			LOGGER.debug("Template file is " + extraTemplatePath + File.separator + templateFile);
			if (!new File(extraTemplatePath, templateFile).isFile()) {
	        	throw new TemplateNotFoundException("Template file " + templateFile + " doesn't exist");
	        }
		}
		else {
			LOGGER.debug("Template file is " + defaultTemplatePath + File.separator + templateFile);
	        if (!new File(defaultTemplatePath, templateFile).isFile()) {
	        	throw new TemplateNotFoundException("Template file " + templateFile + " doesn't exist");
	        }			
		}
        
		try {
            return JForumExecutionContext.getTemplateConfig().getTemplate(
                new StringBuilder(SystemGlobals.getValue(ConfigKeys.TEMPLATE_DIR)).
                append('/').append(this.templateName).toString(),
                SystemGlobals.getValue(ConfigKeys.ENCODING));
        }
        catch (IOException e) {
            throw new ForumException(e);
        }
    }
}

../jforum2-code/src/main/java/net/jforum/ForumStartup.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.

 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:

 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 13/11/2004 01:53:12
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum;

import org.apache.log4j.Logger;

import net.jforum.dao.CategoryDAO;
import net.jforum.dao.ConfigDAO;
import net.jforum.dao.DataAccessDriver;
import net.jforum.dao.ForumDAO;
import net.jforum.exceptions.DatabaseException;
import net.jforum.exceptions.RepositoryStartupException;
import net.jforum.repository.ForumRepository;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public final class ForumStartup 
{
	private static final Logger LOGGER = Logger.getLogger(ForumStartup.class);
	
	/**
	 * Starts the database implementation
	 * @return <code>true</code> if everything were OK
	 * @throws DatabaseException if something were wrong
	 */
	public static boolean startDatabase()
	{
		boolean result = false;
		try {
			if (DBConnection.createInstance()) {
				DBConnection.getImplementation().init();
				result = true;
			}
		}
		catch (Exception e) {
			throw new DatabaseException("Error while trying to start the database: " + e, e);
		}
		
		return result;	
	}
	
	/**
	 * Starts the cache control for forums and categories.
	 * @throws RepositoryStartupException when something was wrong.
	 */
	public static void startForumRepository()
	{
		try {
			final ForumDAO forumDao = DataAccessDriver.getInstance().newForumDAO();
			final CategoryDAO categoryDao = DataAccessDriver.getInstance().newCategoryDAO();
			final ConfigDAO configModel = DataAccessDriver.getInstance().newConfigDAO();

			ForumRepository.start(forumDao, categoryDao, configModel);
		}
		catch (Exception e) {
			LOGGER.error("Unable to bootstrap JForum repository.", e);
			throw new RepositoryStartupException("Error while trying to start ForumRepository: " + e, e);
		}
	}
	
	private ForumStartup() {}
}

../jforum2-code/src/main/java/net/jforum/ConfigLoader.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 02/11/2004 12:45:37
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Iterator;
import java.util.Map;
import java.util.Properties;

import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.quartz.SchedulerException;

import net.jforum.api.integration.mail.pop.POPJobStarter;
import net.jforum.cache.CacheEngine;
import net.jforum.cache.Cacheable;
import net.jforum.dao.DataAccessDriver;
import net.jforum.exceptions.CacheEngineStartupException;
import net.jforum.exceptions.ForumException;
import net.jforum.search.SearchFacade;
import net.jforum.sso.LoginAuthenticator;
import net.jforum.summary.SummaryScheduler;
import net.jforum.util.FileMonitor;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.QueriesFileListener;
import net.jforum.util.preferences.SystemGlobals;
import net.jforum.util.preferences.SystemGlobalsListener;

/**
 * General utilities methods for loading configurations for JForum.
 * 
 * @author Rafael Steil
 * @version $Id$
 */
public final class ConfigLoader 
{
    private static final Logger LOGGER = Logger.getLogger(ConfigLoader.class);
    private static CacheEngine cache;

    /**
     * Start ( or restart ) <code>SystemGlobals</code>.
     * This method loads all configuration keys set at
     * <i>SystemGlobals.properties</i>, <i>&lt;user.name&gt;.properties</i>
     * and database specific stuff.
     * 
     * @param appPath The application root's directory
     */
    public static void startSystemglobals(final String appPath)
    {
        SystemGlobals.initGlobals(appPath, appPath + "/WEB-INF/config/SystemGlobals.properties");
    }

    /**
     * Loads module mappings for the system.
     * 
     * @param baseConfigDir The directory where the file <i>modulesMapping.properties</i> is.
     * @return The <code>java.util.Properties</code> instance, with the loaded modules 
     */
    public static Properties loadModulesMapping(final String baseConfigDir)
    {
        FileInputStream fis = null;

        try {
            final Properties modulesMapping = new Properties();
            fis = new FileInputStream(baseConfigDir + "/modulesMapping.properties");
            modulesMapping.load(fis);

            return modulesMapping;
        }
        catch (IOException e) {
            throw new ForumException( e);
        }
        finally {
            if (fis != null) {
                try { fis.close(); } catch (Exception e) { LOGGER.error(e.getMessage(), e); }
            }
        }
    }

    public static void createLoginAuthenticator()
    {
        final String className = SystemGlobals.getValue(ConfigKeys.LOGIN_AUTHENTICATOR);

        try {
            final LoginAuthenticator authenticator = (LoginAuthenticator) Class.forName(className).getDeclaredConstructor().newInstance();
            SystemGlobals.setObjectValue(ConfigKeys.LOGIN_AUTHENTICATOR_INSTANCE, authenticator);
        }
        catch (Exception e) {
            throw new ForumException("Error while trying to create a login.authenticator instance ("
                + className + "): " + e, e);
        }
    }

    /**
     * Load url patterns.
     * The method tries to load url patterns from <i>WEB-INF/config/urlPattern.properties</i>
     */
    public static void loadUrlPatterns()  
    {
        FileInputStream fis = null;

        try {
            final Properties properties = new Properties();
            fis = new FileInputStream(SystemGlobals.getValue(ConfigKeys.CONFIG_DIR) + "/urlPattern.properties");
            properties.load(fis);

            for (final Iterator<Map.Entry<Object, Object>> iter = properties.entrySet().iterator(); iter.hasNext(); ) {
                final Map.Entry<Object, Object> entry = iter.next();
                UrlPatternCollection.addPattern((String)entry.getKey(), (String)entry.getValue());
            }
        }
        catch (IOException e) {
            throw new ForumException(e);
        }
        finally {
            if (fis != null) {
                try { fis.close(); } catch (Exception e) { LOGGER.error(e.getMessage(), e); }
            }
        }
    }

    /**
     * Register a file change listener for following resources:
     * <ul>
     *   <li>
     *     SystemGlobalsListener
     *     <ul>
     *       <li><i>SystemGlobals.properties</i></li>
     *       <li><i>quartz-jforum.properties</i></li>
     *       <li>if exists: <i>jforum-custom.conf</i></li>
     *     </ul>
     *   </li>
     *   <li>
     *     QueriesFileListener
     *     <ul>
     *       <li><i>generic_queries.sql</i></li>
     *       <li><i>&lt;database_name&gt;.sql</i></li>
     *     </ul>
     *   </li>
     * </ul>      
     */
    public static void listenForChanges()
    {
        final int fileChangesDelay = SystemGlobals.getIntValue(ConfigKeys.FILECHANGES_DELAY);

        if (fileChangesDelay > 0) {
            // Queries
            FileMonitor.getInstance().addFileChangeListener(new QueriesFileListener(),
                                                            SystemGlobals.getValue(ConfigKeys.SQL_QUERIES_GENERIC), fileChangesDelay);

            FileMonitor.getInstance().addFileChangeListener(new QueriesFileListener(),
                                                            SystemGlobals.getValue(ConfigKeys.SQL_QUERIES_DRIVER), fileChangesDelay);

            // System Properties
            FileMonitor.getInstance().addFileChangeListener(new SystemGlobalsListener(),
                                                            SystemGlobals.getValue(ConfigKeys.DEFAULT_CONFIG), fileChangesDelay);

            if (new File(SystemGlobals.getValue(ConfigKeys.INSTALLATION_CONFIG)).exists()) {
                FileMonitor.getInstance().addFileChangeListener(new SystemGlobalsListener(),
                                                                SystemGlobals.getValue(ConfigKeys.INSTALLATION_CONFIG), fileChangesDelay);
            }

            // Quartz Properties
            FileMonitor.getInstance().addFileChangeListener(new SystemGlobalsListener(),
                                                            SystemGlobals.getValue(ConfigKeys.QUARTZ_CONFIG), fileChangesDelay);
        }
    }

    public static void loadDaoImplementation()
    {
        // Start the dao.driver implementation
        final String driver = SystemGlobals.getValue(ConfigKeys.DAO_DRIVER);

        if (LOGGER.isEnabledFor(Level.INFO)) {
        	LOGGER.info("Loading data access driver " + driver);
        }

        try {
            final DataAccessDriver dad = (DataAccessDriver)Class.forName(driver).getDeclaredConstructor().newInstance();
            DataAccessDriver.init(dad);
        }
        catch (Exception e) {
            throw new ForumException(e);
        }
    }

    public static void startCacheEngine()
    {
        try {
            final String cacheImpl = SystemGlobals.getValue(ConfigKeys.CACHE_IMPLEMENTATION);
            if (LOGGER.isEnabledFor(Level.INFO)) {
            	LOGGER.info("Using cache engine: " + cacheImpl);
            }

            cache = (CacheEngine)Class.forName(cacheImpl).getDeclaredConstructor().newInstance();
            cache.init();

            final String str = SystemGlobals.getValue(ConfigKeys.CACHEABLE_OBJECTS);
            if (str == null || str.trim().equals("")) {
                LOGGER.warn("Cannot find Cacheable objects to associate the cache engine instance.");
                return;
            }

            final String[] cacheableObjects = str.split(",");
            for (int i = 0; i < cacheableObjects.length; i++) {
            	if (LOGGER.isEnabledFor(Level.INFO)) {
            		LOGGER.info("Creating an instance of " + cacheableObjects[i].trim());
            	}
                final Object obj = Class.forName(cacheableObjects[i].trim()).getDeclaredConstructor().newInstance();

                if (obj instanceof Cacheable) {
                    ((Cacheable)obj).setCacheEngine(cache);
                }
                else {
                	if (LOGGER.isEnabledFor(Level.ERROR)) {
                		LOGGER.error(cacheableObjects[i] + " is not an instance of net.jforum.cache.Cacheable");
                	}
                }
            }
        }
        catch (Exception e) {
            throw new CacheEngineStartupException("Error while starting the cache engine", e);
        }
    }

    public static void stopCacheEngine()
    {
        if (cache != null) {
            cache.stop();
        }
    }

    public static void startSearchIndexer()
    {
        SearchFacade.init();
    }

    /**
     * Init a Job who will send e-mails to the all users with a summary of posts...
     * @throws SchedulerException
     * @throws IOException
     */
    public static void startSummaryJob() throws SchedulerException {
        SummaryScheduler.startJob();
    }

    public static void startPop3Integration() throws SchedulerException
    {
        POPJobStarter.startJob();
    }

    private ConfigLoader() {}
}

../jforum2-code/src/main/java/net/jforum/DataSourceConnection.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Jan 7, 2005 7:44:40 PM
 *
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum;

import java.sql.Connection;
import java.sql.SQLException;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;

import org.apache.log4j.Logger;

import net.jforum.exceptions.DatabaseException;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;

/**
 * DataSource connection implementation for JForum.
 * The datasource name should be set in the key 
 * <code>database.datasource.name</code> at 
 * SystemGlobals.properties.
 * 
 * @author Rafael Steil
 * @version $Id$
 */
public class DataSourceConnection extends DBConnection
{
	private static final Logger LOGGER = Logger.getLogger(DataSourceConnection.class);
	
	private transient DataSource dataSource;
	
	/**
	 * @see net.jforum.DBConnection#init()
	 */
	@Override public void init() throws NamingException 
	{
		final Context context = new InitialContext();
		this.dataSource = (DataSource)context.lookup(SystemGlobals.getValue(
				ConfigKeys.DATABASE_DATASOURCE_NAME));
		try {
			// Try to validate the connection url
			final Connection conn = this.getConnection();

			if (conn != null) {
				this.releaseConnection(conn);
				this.databaseUp = true;
			}
		} catch (DatabaseException e) {
			this.databaseUp = false;
		}
	}
	/**
	 * @see net.jforum.DBConnection#getConnection()
	 * @throws DatabaseException
	 */
	@Override public Connection getConnection()
	{
		try {
			return this.dataSource.getConnection();
		}
		catch (SQLException e) {
			LOGGER.error(e.getMessage(), e);
			throw new DatabaseException(e);
		}
	}
}

../jforum2-code/src/main/java/net/jforum/ForumSessionListener.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on May 11, 2003 / 11:30:45 AM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpSession;
import javax.servlet.http.HttpSessionEvent;
import javax.servlet.http.HttpSessionListener;

import org.apache.log4j.Logger;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public class ForumSessionListener implements HttpSessionListener 
{
	private static final Logger LOGGER = Logger.getLogger(ForumSessionListener.class);
	
	/** 
	 * @see javax.servlet.http.HttpSessionListener#sessionCreated(javax.servlet.http.HttpSessionEvent)
	 */
	@Override public void sessionCreated(final HttpSessionEvent event) {
		final HttpSession session = event.getSession(); 
        final ServletContext context = session.getServletContext(); 
        context.setAttribute(session.getId(), session);
        LOGGER.debug("Session Created: " +  session.getId());
	}

	/** 
	 * @see javax.servlet.http.HttpSessionListener#sessionDestroyed(javax.servlet.http.HttpSessionEvent)
	 */
	@Override public void sessionDestroyed(final HttpSessionEvent event) 
	{
		final HttpSession session = event.getSession();	
		final String sessionId = session.getId();

		try {
			SessionFacade.storeSessionData(sessionId);
		}
		catch (Exception e) {
			LOGGER.warn(e);
		}

		SessionFacade.remove(sessionId);

        final ServletContext context = session.getServletContext(); 
        context.removeAttribute(sessionId);
        if (LOGGER.isDebugEnabled()) {
        	LOGGER.debug("Session Destroyed: " +  sessionId);
        }
	}
}

../jforum2-code/src/main/java/net/jforum/PooledConnection.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Mar 3, 2003 / 14:43:35 AM
 * The JForum Project
 * http://www.jforum.net
 */

package net.jforum;

/**
 * This call exists only for backward compatibility.
 * It just extends {@link C3P0PooledConnection}
 * 
 * @author Rafael Steil
 * @version $Id$
 */
public class PooledConnection extends C3P0PooledConnection {
}

../jforum2-code/src/main/java/net/jforum/UrlPattern.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms,
 * with or without modification, are permitted provided
 * that the following conditions are met:
 *
 * 1) Redistributions of source code must retain the above
 * copyright notice, this list of conditions and the
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the
 * above copyright notice, this list of conditions and
 * the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor
 * the names of its contributors may be used to endorse
 * or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
 * IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 *
 *
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum;

import java.util.Arrays;

/**
 * URL Patterns keeper.
 * Represents a single URL pattern. Each pattern is composed
 * by a name, the pattern itself, the pattern's size and the
 * split variables. <br><br>
 *
 * The pattern is expected in the form <i>var1, var2, varN</i>, in the
 * correct order. This means that if <i>var1</i> comes first, it <b>must</b>
 * come first in the URL. The same is valid to others.<br><br>
 *
 * Please note that "first" here is "first" after regular URL, which is
 * composed by server and servlet name, in the most simple case.<br><br>
 *
 * <b>Example:</b><br>
 *
 * URL: <i>http://localhost:8080/webappName/someDir/myServlet/news/view/3.page</i>.
 * <br>
 * In this case, <i>http://localhost:8080/webappName/someDir/myServlet/</i> is the
 * regular URL, the part that we don't care about. We only want the part
 * <i>news/view/3.page</i> ( where .page is the servlet extension ).
 * <br>For this URL, we could make the following pattern:<br><br>
 *
 * <i>news.view.1 = news_id</i><br><br>
 *
 * Here, <i>news.view.1</i> is the pattern's name, and <i>news_id</i> is
 * the patterns itself. <br>
 * Another example:<br><br>
 *
 * <i>news.view.2 = page, news_id</i><br><br>
 *
 * In this case we have a new var called <i>page</i>, that represents the page being seen.<br>
 * Each entry is composed in the form:<br><br>
 *
 * <i>&lt;moduleName&gt;.&lt;actionName&gt;.&lt;numberOfParameters&gt; = &lt;var 1&gt;,&lt;var n&gt;</i>
 * <br><br>
 *
 * Please note that module and action's name aren't pattern's composition, so
 * don't put them there. The system will consider that the pattern only contains
 * the variables different to each request ( e.g, id's ). If the pattern you're
 * constructing doesn't have any variable, just leave it blank, like<br><br>
 *
 * <i>myModule.myAction.0 = </i><br><br>
 *
 * @author Rafael Steil
 * @version $Id$
 */
public class UrlPattern
{
    private transient final String name;
    private transient final String value;
    private transient int size;
    private transient String[] vars;

    public UrlPattern(final String name, final String value)
    {
        this.name = name;
        this.value = value;

        this.processPattern();
    }

    private void processPattern()
    {
        final String[] patterns = this.value.split(",");

        this.vars = new String[patterns.length];
        this.size = patterns[0].trim().equals("") ? 0 : patterns.length;

        for (int i = 0; i < this.size; i++) {
            this.vars[i] = patterns[i].trim();
        }
    }

    /**
     * Gets the pattern name
     *
     * @return String with the pattern name
     */
    public String getName()
    {
        return this.name;
    }

    /**
     * Get pattern's total vars
     *
     * @return The total
     */
    public int getSize()
    {
        return this.size;        
    }

    /**
     * Gets the vars.
     * The URL variables are in the correct order, which means
     * that the first position always will be "something1", the
     * second "something2" and so on. The system expects this
     * order never changes from requisition to requisition.
     *
     * @return The vars
     */
    public String[] getVars()
    {
        return Arrays.copyOf(this.vars, this.vars.length);
    }
}

../jforum2-code/src/main/java/net/jforum/view/forum/AjaxAction.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 09/08/2007 09:31:17
 * 
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.view.forum;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.commons.text.StringEscapeUtils;
import org.apache.log4j.Logger;
import org.apache.lucene.document.Document;

import net.jforum.Command;
import net.jforum.JForumExecutionContext;
import net.jforum.SessionFacade;
import net.jforum.dao.DataAccessDriver;
import net.jforum.dao.PostDAO;
import net.jforum.entities.ModerationLog;
import net.jforum.entities.Post;
import net.jforum.entities.User;
import net.jforum.repository.PostRepository;
import net.jforum.search.LuceneManager;
import net.jforum.search.SearchFacade;
import net.jforum.util.SafeHtml;
import net.jforum.util.mail.Spammer;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;
import net.jforum.util.preferences.TemplateKeys;
import net.jforum.view.forum.common.PostCommon;

/**
 * @author Rafael Steil
 */
public class AjaxAction extends Command
{
	private static final Logger LOGGER = Logger.getLogger(AjaxAction.class);

	private static class TestSpammer extends Spammer {
		public TestSpammer(String to) {
			List<User> l = new ArrayList<>();

			User user = new User();
			user.setEmail(to);

			l.add(user);

			this.setUsers(l);

			this.setTemplateParams(JForumExecutionContext.newSimpleHash());
			this.prepareMessage("JForum Test Mail", null);
		}

		@Override protected String processTemplate() {
			return ("Test mail from JForum Admin Panel. Sent at " + new Date());
		}

		@Override protected void createTemplate(String messageFile) throws IOException {}
	}

	/**
	 * Sends a test message and set the status message in context
	 *  sender The sender's email address
	 *  host the smtp host
	 *  auth if need authorization or not
	 *  username the smtp server username, if auth is needed
	 *  password the smtp server password, if auth is needed
	 *  to the recipient
	 */
	public void sendTestMail()
	{
		String sender = this.request.getParameter("sender");
		String host = this.request.getParameter("host");
		String port = this.request.getParameter("port");
		String auth = this.request.getParameter("auth");
		String ssl = this.request.getParameter("ssl");
		String username = this.request.getParameter("username");
		String password = this.request.getParameter("password");
		String to = this.request.getParameter("to");
		String additionalProperties = this.request.getParameter("additionalProperties");

		// Save the current values
		String originalHost = SystemGlobals.getValue(ConfigKeys.MAIL_SMTP_HOST);
		String originalAuth = SystemGlobals.getValue(ConfigKeys.MAIL_SMTP_AUTH);
		String originalUsername = SystemGlobals.getValue(ConfigKeys.MAIL_SMTP_USERNAME);
		String originalPassword = SystemGlobals.getValue(ConfigKeys.MAIL_SMTP_PASSWORD);
		String originalSender = SystemGlobals.getValue(ConfigKeys.MAIL_SENDER);
		String originalSSL = SystemGlobals.getValue(ConfigKeys.MAIL_SMTP_SSL);
		String originalPort = SystemGlobals.getValue(ConfigKeys.MAIL_SMTP_PORT);
		String originalAdditionalProps = SystemGlobals.getValue(ConfigKeys.MAIL_SMTP_ADDITIONAL_PROPERTIES);

		// Now put the new ones
		SystemGlobals.setValue(ConfigKeys.MAIL_SMTP_HOST, host);
		SystemGlobals.setValue(ConfigKeys.MAIL_SMTP_AUTH, auth);
		SystemGlobals.setValue(ConfigKeys.MAIL_SMTP_USERNAME, username);
		SystemGlobals.setValue(ConfigKeys.MAIL_SMTP_PASSWORD, password);
		SystemGlobals.setValue(ConfigKeys.MAIL_SENDER, sender);
		SystemGlobals.setValue(ConfigKeys.MAIL_SMTP_SSL, ssl);
		SystemGlobals.setValue(ConfigKeys.MAIL_SMTP_PORT, port);
		SystemGlobals.setValue(ConfigKeys.MAIL_SMTP_ADDITIONAL_PROPERTIES, additionalProperties);

		String status = "OK";

		// Send the test mail
		Spammer s = new TestSpammer(to);
		try {
			s.dispatchMessages();
		}
		catch (Exception e) {
			status = StringEscapeUtils.escapeEcmaScript(e.toString());
			LOGGER.error(e.toString(), e);
		}
		finally {
			// Restore the original values
			SystemGlobals.setValue(ConfigKeys.MAIL_SMTP_HOST, originalHost);
			SystemGlobals.setValue(ConfigKeys.MAIL_SMTP_AUTH, originalAuth);
			SystemGlobals.setValue(ConfigKeys.MAIL_SMTP_USERNAME, originalUsername);
			SystemGlobals.setValue(ConfigKeys.MAIL_SMTP_PASSWORD, originalPassword);
			SystemGlobals.setValue(ConfigKeys.MAIL_SENDER, originalSender);
			SystemGlobals.setValue(ConfigKeys.MAIL_SMTP_SSL, originalSSL);
			SystemGlobals.setValue(ConfigKeys.MAIL_SMTP_PORT, originalPort);
			SystemGlobals.setValue(ConfigKeys.MAIL_SMTP_ADDITIONAL_PROPERTIES, originalAdditionalProps);
		}

		this.setTemplateName(TemplateKeys.AJAX_TEST_MAIL);
		this.context.put("status", status);
	}

	public void isPostIndexed()
	{
		int postId = this.request.getIntParameter("post_id");

		this.setTemplateName(TemplateKeys.AJAX_IS_POST_INDEXED);

		LuceneManager manager = SearchFacade.manager();
		Document doc = manager.luceneSearch().findDocumentByPostId(postId);

		this.context.put("doc", doc);
	}

	public void loadPostContents()
	{
		// edit_area has id begin with 'x' to be compliant to XHTML, so we need to remove it.
		String id = this.request.getParameter("id");
		if (id == null || "".equals(id)) return;
		int postId = Integer.parseInt(id.substring(1));
		PostDAO dao = DataAccessDriver.getInstance().newPostDAO();
		Post post = dao.selectById(postId);
		this.setTemplateName(TemplateKeys.AJAX_LOAD_POST);
		this.context.put("post", post);
	}

	public void savePost()
	{
		// edit_area has id begin with 'x' to be compliant to XHTML, so we need to remove it.
		String id = this.request.getParameter("id");
		if (id == null || "".equals(id)) return;
		int postId = Integer.parseInt(id.substring(1));
		PostDAO postDao = DataAccessDriver.getInstance().newPostDAO();
		Post post = postDao.selectById(postId);

		String originalMessage = post.getText();

		if (PostCommon.canEditPost(post)) {
			post.setText(this.request.getParameter("value"));
			postDao.update(post);
			SearchFacade.update(post);
		}
		//post = PostCommon.preparePostForDisplay(post);

		boolean isModerator = SessionFacade.getUserSession().isModerator(post.getForumId());

		if (SystemGlobals.getBoolValue(ConfigKeys.MODERATION_LOGGING_ENABLED)
				&& isModerator && post.getUserId() != SessionFacade.getUserSession().getUserId()) {
			ModerationHelper helper = new ModerationHelper();

			this.request.addParameter("log_original_message", originalMessage);
			this.request.addParameter("post_id", String.valueOf(post.getId()));
			this.request.addParameter("topic_id", String.valueOf(post.getTopicId()));

			ModerationLog log = helper.buildModerationLogFromRequest();
			log.getPosterUser().setId(post.getUserId());

			helper.saveModerationLog(log);
		}

		if (SystemGlobals.getBoolValue(ConfigKeys.POSTS_CACHE_ENABLED)) {
			PostRepository.update(post.getTopicId(), PostCommon.preparePostForDisplay(post));
		} else {
			post = PostCommon.preparePostForDisplay(post);
		}

		this.setTemplateName(TemplateKeys.AJAX_LOAD_POST);
		this.context.put("post", post);
	}

	public void previewPost()
	{
		Post post = new Post();

		post.setText(this.request.getParameter("text"));
		post.setSubject(this.request.getParameter("subject"));
		post.setHtmlEnabled("true".equals(this.request.getParameter("html")));
		post.setBbCodeEnabled("true".equals(this.request.getParameter("bbcode")));
		post.setSmiliesEnabled("true".equals(this.request.getParameter("smilies")));

		if (post.isHtmlEnabled()) {
			post.setText(SafeHtml.makeSafe(post.getText()));
		}

		post = PostCommon.preparePostForDisplay(post);
		post.setSubject(StringEscapeUtils.escapeEcmaScript(post.getSubject()));
		post.setText(StringEscapeUtils.escapeEcmaScript(post.getText()));

		this.setTemplateName(TemplateKeys.AJAX_PREVIEW_POST);
		this.context.put("post", post);
	}

	/**
	 * @see net.jforum.Command#list()
	 */
	@Override public void list()
	{
		this.enableIgnoreAction();
	}
}

../jforum2-code/src/main/java/net/jforum/view/forum/RSSAction.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 13/10/2004 23:47:06
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.view.forum;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import freemarker.template.SimpleHash;
import freemarker.template.Template;
import net.jforum.Command;
import net.jforum.JForumExecutionContext;
import net.jforum.SessionFacade;
import net.jforum.context.RequestContext;
import net.jforum.context.ResponseContext;
import net.jforum.dao.DataAccessDriver;
import net.jforum.dao.PostDAO;
import net.jforum.dao.TopicDAO;
import net.jforum.dao.UserDAO;
import net.jforum.entities.Forum;
import net.jforum.entities.Post;
import net.jforum.entities.Topic;
import net.jforum.entities.User;
import net.jforum.repository.ForumRepository;
import net.jforum.util.I18n;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;
import net.jforum.util.preferences.TemplateKeys;
import net.jforum.util.rss.HottestTopicsRSS;
import net.jforum.util.rss.RSSAware;
import net.jforum.util.rss.RecentTopicsRSS;
import net.jforum.util.rss.TopicPostsRSS;
import net.jforum.util.rss.TopicRSS;
import net.jforum.util.rss.UserPostsRSS;
import net.jforum.util.stats.StatsEvent;
import net.jforum.view.forum.common.TopicsCommon;

/**
 * @author Rafael Steil
 */
public class RSSAction extends Command 
{
	private static final String RSS_CONTENTS = "rssContents";

	/**
	 * RSS for all N first topics for some given forum
	 */
	public void forumTopics()
	{
		final int forumId = this.request.getIntParameter("forum_id");
		final Forum forum = ForumRepository.getForum(forumId);

		// Handle if forum doesn't  exist
		if (forum == null) {
			this.context.put(RSS_CONTENTS, "<!-- The requested forum does not exist-->");
			return;
		}

		if (!TopicsCommon.isTopicAccessible(forumId)) {
			JForumExecutionContext.requestBasicAuthentication();
            return;
		}

		final List<Post> posts = DataAccessDriver.getInstance().newPostDAO().selectLatestByForumForRSS(
			forumId, SystemGlobals.getIntValue(ConfigKeys.TOPICS_PER_PAGE));

		final String[] param = { forum.getName() };

		final RSSAware rss = new TopicRSS(I18n.getMessage("RSS.ForumTopics.title", param),
			I18n.getMessage("RSS.ForumTopics.description", param),
			forumId, 
			posts);

		this.context.put(RSS_CONTENTS, rss.createRSS());
        new StatsEvent("RSS forum", request.getRequestURL()).record();
	}

	/**
	 * RSS for all N first posts for some given topic
	 */
	public void topicPosts()
	{
		final int topicId = this.request.getIntParameter("topic_id");

		final TopicDAO topicDao = DataAccessDriver.getInstance().newTopicDAO();

		final Topic topic = topicDao.selectById(topicId);

		// Handle if topic doesn't  exist
		if (topic.getId() == 0) {
			this.context.put(RSS_CONTENTS, "<!-- The requested topic does not exist-->");
			return;
		}

		if (!TopicsCommon.isTopicAccessible(topic.getForumId())) {
			JForumExecutionContext.requestBasicAuthentication(); 
            return;
		}

		topicDao.incrementTotalViews(topic.getId());

		final PostDAO postDao = DataAccessDriver.getInstance().newPostDAO();
		final List<Post> posts = postDao.selectAllByTopic(topicId);

		final String[] param = { topic.getTitle() };

		final String title = I18n.getMessage("RSS.TopicPosts.title", param);
		final String description = I18n.getMessage("RSS.TopicPosts.description", param);

		final RSSAware rss = new TopicPostsRSS(title, description, topic.getForumId(), posts);
		this.context.put(RSS_CONTENTS, rss.createRSS());
        new StatsEvent("RSS single topic", request.getRequestURL()).record();
	}

	public void recentTopics()
	{
		final String title = I18n.getMessage("RSS.RecentTopics.title", 
			new Object[] { SystemGlobals.getValue(ConfigKeys.FORUM_NAME) });
		final String description = I18n.getMessage("RSS.RecentTopics.description");

		final List<Post> posts = DataAccessDriver.getInstance().newPostDAO().selectLatestForRSS(
			SystemGlobals.getIntValue(ConfigKeys.TOPICS_PER_PAGE));

		final List<Post> authPosts = new ArrayList<>();  
		final Iterator<Post> iter = posts.iterator();  
		while ( iter.hasNext() ) {  
		     Post post = iter.next();  
		     if ( TopicsCommon.isTopicAccessible(post.getForumId(), false) ) {  
		         authPosts.add(post);  
		     }  
		 }  
		RSSAware rss = new RecentTopicsRSS(title, description, authPosts);
		this.context.put(RSS_CONTENTS, rss.createRSS());
        new StatsEvent("RSS recent topics", request.getRequestURL()).record();
	}

	public void hottestTopics()
	{
		String title = I18n.getMessage("RSS.HottestTopics.title", 
			new Object[] { SystemGlobals.getValue(ConfigKeys.FORUM_NAME) });
		String description = I18n.getMessage("RSS.HottestTopics.description");

		List<Post> posts = DataAccessDriver.getInstance().newPostDAO().selectHotForRSS(
			SystemGlobals.getIntValue(ConfigKeys.HOTTEST_TOPICS));

		List<Post> authPosts = new ArrayList<>();  
		Iterator<Post> iter = posts.iterator();  
		while ( iter.hasNext() ) {  
		     Post post = iter.next();  
		     if ( TopicsCommon.isTopicAccessible(post.getForumId(), false) ) {  
		         authPosts.add(post);  
		     }  
		 }  
		RSSAware rss = new HottestTopicsRSS(title, description, authPosts);
		this.context.put(RSS_CONTENTS, rss.createRSS());
        new StatsEvent("RSS hot topics", request.getRequestURL()).record();
	}

    public void userPosts() {
        int userId = this.request.getIntParameter("user_id");
        UserDAO userDAO = DataAccessDriver.getInstance().newUserDAO();
        User user = userDAO.selectById(userId);

        String title = I18n.getMessage("RSS.UserPosts.title", 
			new Object[] { SystemGlobals.getValue(ConfigKeys.FORUM_NAME), user.getUsername()});
        String description = I18n.getMessage("RSS.UserPosts.description", 
			new Object[] { user.getUsername() });

        PostDAO postDAO = DataAccessDriver.getInstance().newPostDAO();
        int postsPerPage = SystemGlobals.getIntValue(ConfigKeys.POSTS_PER_PAGE);
        List<Post> posts = postDAO.selectByUserByLimit(userId, 0, postsPerPage);

		// Remove topics that the user should not see (like MO topics for non-moderators)
		removeUnauthorizedPosts(posts);

        RSSAware rss = new UserPostsRSS(title, description, userId, posts);
        this.context.put("rssContents", rss.createRSS());
        new StatsEvent("RSS user posts", request.getRequestURL()).record();
    }

    /**
    * Remove topics that the user should not see (like MO topics for non-noderators)
    * @param posts
    */
    private void removeUnauthorizedPosts(List<Post> posts) {
        for (Iterator<Post> iter = posts.iterator(); iter.hasNext(); ) {
            Post p = iter.next();
            Forum f = ForumRepository.getForum(p.getForumId());
            if ((f == null)
					|| !ForumRepository.isCategoryAccessible(f.getCategoryId())
		     		|| !TopicsCommon.isTopicAccessible(p.getForumId(), false))
                iter.remove();
        }
    }

	/**
	 * Empty method, do nothing
	 *  
	 * @see net.jforum.Command#list()
	 */
	@Override public void list()
	{
		// Empty method
	}

	/** 
	 * @see net.jforum.Command#process(net.jforum.context.RequestContext, net.jforum.context.ResponseContext, freemarker.template.SimpleHash) 
	 */
	@Override public Template process(final RequestContext request,
			final ResponseContext response,
			final SimpleHash context)
	{
        if (!SessionFacade.isLogged() && UserAction.hasBasicAuthentication(request)) {
            new UserAction().validateLogin(request);
            JForumExecutionContext.setRedirect(null);
        }

        JForumExecutionContext.setContentType("text/xml");
		super.setTemplateName(TemplateKeys.RSS);

		return super.process(request, response, context);
	}

}

../jforum2-code/src/main/java/net/jforum/view/forum/BookmarkAction.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Jan 16, 2005 4:48:39 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.view.forum;

import java.util.Iterator;
import java.util.List;

import org.apache.commons.lang3.StringUtils;

import freemarker.template.SimpleHash;
import freemarker.template.Template;
import net.jforum.Command;
import net.jforum.JForumExecutionContext;
import net.jforum.SessionFacade;
import net.jforum.context.RequestContext;
import net.jforum.context.ResponseContext;
import net.jforum.dao.BookmarkDAO;
import net.jforum.dao.DataAccessDriver;
import net.jforum.entities.Bookmark;
import net.jforum.entities.BookmarkType;
import net.jforum.entities.Forum;
import net.jforum.entities.Topic;
import net.jforum.entities.User;
import net.jforum.repository.ForumRepository;
import net.jforum.util.I18n;
import net.jforum.util.SafeHtml;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;
import net.jforum.util.preferences.TemplateKeys;
import net.jforum.util.stats.StatsEvent;

/**
 * @author Rafael Steil
 */
public class BookmarkAction extends Command
{
	public void insert()
	{
		int type = this.request.getIntParameter("relation_type");
		if (type == BookmarkType.FORUM) {
			this.addForum();
		}
		else if (type == BookmarkType.TOPIC) {
			this.addTopic();
		}
		else if (type == BookmarkType.USER) {
			this.addUser();
		}
		else {
			this.error("Bookmarks.invalidType");
		}
	}

	private void addForum()
	{
		Forum forum = ForumRepository.getForum(this.request.getIntParameter("relation_id"));
		String title = forum.getName();
		String description = forum.getDescription();

		Bookmark bookmark = DataAccessDriver.getInstance().newBookmarkDAO().selectForUpdate(
				forum.getId(), BookmarkType.FORUM, SessionFacade.getUserSession().getUserId());
		if (bookmark != null) {
			if (bookmark.getTitle() != null) {
				title = bookmark.getTitle();
			}

			if (bookmark.getDescription() != null) {
				description = bookmark.getDescription();
			}

			this.context.put("bookmark", bookmark);
		}

		this.setTemplateName(TemplateKeys.BOOKMARKS_ADD_FORUM);
		this.context.put("title", title);
		this.context.put("description", description);
		this.context.put("relationType", Integer.valueOf(BookmarkType.FORUM));
		this.context.put("relationId", Integer.valueOf(forum.getId()));
	}

	private void addTopic()
	{
		Topic topic = DataAccessDriver.getInstance().newTopicDAO().selectById(
				this.request.getIntParameter("relation_id"));
		String title = topic.getTitle();

		Bookmark bookmark = DataAccessDriver.getInstance().newBookmarkDAO().selectForUpdate(
				topic.getId(), BookmarkType.TOPIC, SessionFacade.getUserSession().getUserId());
		if (bookmark != null) {
			if (bookmark.getTitle() != null) {
				title = bookmark.getTitle();
			}

			this.context.put("description", bookmark.getDescription());
			this.context.put("bookmark", bookmark);
		}

		this.setTemplateName(TemplateKeys.BOOKMARKS_ADD_TOPIC);
		this.context.put("title", title);
		this.context.put("relationType", Integer.valueOf(BookmarkType.TOPIC));
		this.context.put("relationId", Integer.valueOf(topic.getId()));
	}

	private void addUser()
	{
		User user = DataAccessDriver.getInstance().newUserDAO().selectById(
				this.request.getIntParameter("relation_id"));
		String title = user.getUsername();

		Bookmark bookmark = DataAccessDriver.getInstance().newBookmarkDAO().selectForUpdate(
				user.getId(), BookmarkType.USER, SessionFacade.getUserSession().getUserId());
		if (bookmark != null) {
			if (bookmark.getTitle() != null) {
				title = bookmark.getTitle();
			}

			this.context.put("description", bookmark.getDescription());
			this.context.put("bookmark", bookmark);
		}

		this.setTemplateName(TemplateKeys.BOOKMARKS_ADD_USER);
		this.context.put("title", title);
		this.context.put("relationType", Integer.valueOf(BookmarkType.USER));
		this.context.put("relationId", Integer.valueOf(user.getId()));
	}

	public void insertSave()
	{
		Bookmark bookmark = new Bookmark();

		bookmark.setDescription(SafeHtml.makeSafe(this.request.getParameter("description")));
		bookmark.setTitle(SafeHtml.makeSafe(this.request.getParameter("title")));

		String publicVisible = this.request.getParameter("visible");
		bookmark.setPublicVisible(publicVisible != null && publicVisible.length() > 0);

		bookmark.setRelationId(this.request.getIntParameter("relation_id"));
		bookmark.setRelationType(this.request.getIntParameter("relation_type"));
		bookmark.setUserId(SessionFacade.getUserSession().getUserId());

		DataAccessDriver.getInstance().newBookmarkDAO().add(bookmark);
		this.setTemplateName(TemplateKeys.BOOKMARKS_INSERT_SAVE);
        new StatsEvent("Save bookmark", request.getRequestURL()).record();
	}

	public void updateSave()
	{
		int id = this.request.getIntParameter("bookmark_id");
		BookmarkDAO bookmarkDao = DataAccessDriver.getInstance().newBookmarkDAO();
		Bookmark bookmark = bookmarkDao.selectById(id);

		if (!this.sanityCheck(bookmark)) {
			return;
		}

		bookmark.setDescription(SafeHtml.makeSafe(this.request.getParameter("description")));
		bookmark.setTitle(SafeHtml.makeSafe(this.request.getParameter("title")));

		String visible = this.request.getParameter("visible");
		bookmark.setPublicVisible(StringUtils.isNotBlank(visible));

		bookmarkDao.update(bookmark);
		this.setTemplateName(TemplateKeys.BOOKMARKS_UPDATE_SAVE);
	}

	public void edit()
	{
		int id = this.request.getIntParameter("bookmark_id");
		BookmarkDAO bookmarkDao = DataAccessDriver.getInstance().newBookmarkDAO();
		Bookmark bookmark = bookmarkDao.selectById(id);

		if (!this.sanityCheck(bookmark)) {
			return;
		}

		this.setTemplateName(TemplateKeys.BOOKMARKS_EDIT);
		this.context.put("bookmark", bookmark);
	}

	public void delete()
	{
		int id = this.request.getIntParameter("bookmark_id");
		BookmarkDAO bookmarkDao = DataAccessDriver.getInstance().newBookmarkDAO();
		Bookmark bookmark = bookmarkDao.selectById(id);

		if (!this.sanityCheck(bookmark)) {
			return;
		}

		bookmarkDao.remove(id);

		JForumExecutionContext.setRedirect(this.request.getContextPath() + "/bookmarks/list/" + bookmark.getUserId()
				+ SystemGlobals.getValue(ConfigKeys.SERVLET_EXTENSION));
	}

	private boolean sanityCheck(Bookmark bookmark)
	{
		if (bookmark == null) {
			this.error("Bookmarks.notFound");
			return false;
		}

		if (bookmark.getUserId() != SessionFacade.getUserSession().getUserId()) {
			this.error("Bookmarks.notOwner");
			return false;
		}

		return true;
	}

	private void error(final String message)
	{
		this.setTemplateName(TemplateKeys.BOOKMARKS_ERROR);
		this.context.put("message", I18n.getMessage(message));
	}

	public void anonymousIsDenied()
	{
		this.error("Bookmarks.anonymousIsDenied");
	}

	/**
	 * @see net.jforum.Command#list()
	 */
	/*
	public void list()
	{
		int userId = this.request.getIntParameter("user_id");

		User user = DataAccessDriver.getInstance().newUserDAO().selectById(userId);
		if (user.getId() == 0) {
			this.error("Bookmarks.notFound");
		}
		else {
			this.setTemplateName(TemplateKeys.BOOKMARKS_LIST);
			this.context.put("bookmarks", DataAccessDriver.getInstance().newBookmarkDAO().selectByUser(userId));
			this.context.put("forumType", Integer.valueOf(BookmarkType.FORUM));
			this.context.put("userType", Integer.valueOf(BookmarkType.USER));
			this.context.put("topicType", Integer.valueOf(BookmarkType.TOPIC));
			this.context.put("user", user);
			this.context.put("loggedUserId", Integer.valueOf(SessionFacade.getUserSession().getUserId()));
			this.context.put("pageTitle", I18n.getMessage("Bookmarks.for")+" "+user.getUsername());
		}
	}
	*/
	@Override public void list()
	{
		int userId = 0;
		try {
			userId = this.request.getIntParameter("user_id");
		} catch (NumberFormatException nfex) {
			// no userId passed - means we're accessing our own bookmarks
			if (SessionFacade.isLogged()) {
				userId = SessionFacade.getUserSession().getUserId();
			} else {
				this.error("Bookmarks.notFound");
				return;
			}
		}

		this.setTemplateName(TemplateKeys.BOOKMARKS_LIST);
		List<Bookmark> bookmarks = DataAccessDriver.getInstance().newBookmarkDAO().selectByUser(userId);
		// remove bookmarks from list that are in forums which this user is not allowed to see
		for (Iterator<Bookmark> iter = bookmarks.iterator(); iter.hasNext(); ) {
			Bookmark b = iter.next();
			Forum f = ForumRepository.getForum(b.getForumId());
			if (f == null || !ForumRepository.isCategoryAccessible(f.getCategoryId())) {
				iter.remove();
			}
		}

		// a user viewing his own bookmarks also gets to see his topic and forum watches
		if (userId == SessionFacade.getUserSession().getUserId()) {
			this.context.put("watchedForums",
							DataAccessDriver.getInstance().newForumDAO().selectWatchesByUser(userId));
			this.context.put("watchedTopics",
							DataAccessDriver.getInstance().newTopicDAO().selectWatchesByUser(userId));
		}

		this.context.put("bookmarks", bookmarks);
		this.context.put("forumType", Integer.valueOf(BookmarkType.FORUM));
		this.context.put("userType", Integer.valueOf(BookmarkType.USER));
		this.context.put("topicType", Integer.valueOf(BookmarkType.TOPIC));
		User u = DataAccessDriver.getInstance().newUserDAO().selectById(userId);
		this.context.put("user", u);
		this.context.put("loggedUserId", Integer.valueOf(SessionFacade.getUserSession().getUserId()));
		this.context.put("pageTitle", I18n.getMessage("Bookmarks.for")+" "+u.getUsername());
		this.context.put("fr", new ForumRepository());

		new StatsEvent("Bookmarks page", request.getRequestURL()).record();
	}

	/**
	 * @see net.jforum.Command#process(net.jforum.context.RequestContext, net.jforum.context.ResponseContext, freemarker.template.SimpleHash) 
	 */
	@Override public Template process(final RequestContext request, final ResponseContext response, final SimpleHash context)
	{
		if (SessionFacade.getUserSession().getUserId() == SystemGlobals.getIntValue(ConfigKeys.ANONYMOUS_USER_ID)
				&& !request.getAction().equals("list")) {
			request.addParameter("action", "anonymousIsDenied");
		}

		return super.process(request, response, context);
	}
}

../jforum2-code/src/main/java/net/jforum/view/forum/RecentTopicsAction.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Oct 19, 2004
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.view.forum;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import net.jforum.Command;
import net.jforum.JForumExecutionContext;
import net.jforum.dao.DataAccessDriver;
import net.jforum.dao.TopicDAO;
import net.jforum.dao.UserDAO;
import net.jforum.entities.Forum;
import net.jforum.entities.Topic;
import net.jforum.entities.User;
import net.jforum.repository.ForumRepository;
import net.jforum.repository.TopicRepository;
import net.jforum.util.I18n;
import net.jforum.util.TopicTypeComparator;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;
import net.jforum.util.preferences.TemplateKeys;
import net.jforum.util.stats.StatsEvent;
import net.jforum.view.forum.common.TopicsCommon;
import net.jforum.view.forum.common.ViewCommon;

/**
 * Display a list of recent Topics
 * 
 * @author James Yong
 * @author Rafael Steil
 */
public class RecentTopicsAction extends Command 
{
    private transient List<Forum> forums;

	@Override public void list()
	{
		final TopicDAO tdao = DataAccessDriver.getInstance().newTopicDAO();
		int totalTopics = tdao.countAllTopics();

		int start = ViewCommon.getStartPage();
		int topicsPerPage = SystemGlobals.getIntValue(ConfigKeys.TOPICS_PER_PAGE);
		List<Topic> topics = topics(start, topicsPerPage);

		TopicsCommon.topicListingBase();
		this.context.put("topicsPerPage", Integer.valueOf(topicsPerPage));
		this.context.put("topics", topics);
		this.context.put("forums", this.forums);
		this.context.put("pageTitle", I18n.getMessage("ForumBase.recentTopics"));

		ViewCommon.contextToPagination(start, totalTopics, topicsPerPage);

		this.setTemplateName(TemplateKeys.RECENT_LIST);

		new StatsEvent("Recent topics page", request.getRequestURL()).record();
	}

	private List<Topic> topics (int start, int limit)
	{
		final int postsPerPage = SystemGlobals.getIntValue(ConfigKeys.POSTS_PER_PAGE);
		final List<Topic> topics = TopicRepository.getRecentTopics(start, limit);
		topics.sort(new TopicTypeComparator(true));

		this.forums = new ArrayList<>(postsPerPage);

		for (final Iterator<Topic> iter = topics.iterator(); iter.hasNext(); ) {
			final Topic topic = iter.next();

			if (TopicsCommon.isTopicAccessible(topic.getForumId())) {
				final Forum forum = ForumRepository.getForum(topic.getForumId());
				forums.add(forum);
			} else {
				iter.remove();
			}
		}

		JForumExecutionContext.getRequest().removeAttribute("template");

		return TopicsCommon.prepareTopics(topics);
	}

	public void showTopicsByUser() 
	{
		final DataAccessDriver dad = DataAccessDriver.getInstance();
		final UserDAO udao = dad.newUserDAO();
		final TopicDAO tdao = dad.newTopicDAO();
		final User user = udao.selectById(this.request.getIntParameter("user_id"));

		if (user.getId() == 0) {
			this.context.put("message", I18n.getMessage("User.notFound"));
			this.setTemplateName(TemplateKeys.USER_NOT_FOUND);
			return;
		} 

		TopicsCommon.topicListingBase();

		final int start = ViewCommon.getStartPage();
		final int topicsPerPage = SystemGlobals.getIntValue(ConfigKeys.TOPICS_PER_PAGE);
		final int postsPerPage = SystemGlobals.getIntValue(ConfigKeys.POSTS_PER_PAGE);

		this.setTemplateName(TemplateKeys.RECENT_USER_TOPICS_SHOW);

		int totalTopics = tdao.countUserTopics(user.getId());

		this.context.put("u", user);
		this.context.put("pageTitle", I18n.getMessage("ForumListing.userTopics") + " " + user.getUsername());

		this.context.put("postsPerPage", Integer.valueOf(postsPerPage));

		final List<Topic> topics = tdao.selectByUserByLimit(user.getId(), start, topicsPerPage);
		topics.sort(new TopicTypeComparator(true));

		final List<Topic> list = TopicsCommon.prepareTopics(topics);
		final Map<Integer, Forum> forums = new HashMap<>();

		for (final Iterator<Topic> iter = list.iterator(); iter.hasNext(); ) {
			final Topic topic = iter.next();

			final Forum forum = ForumRepository.getForum(topic.getForumId());

			if (forum == null) {
				iter.remove();
				totalTopics--;
				continue;
			}

			forums.put(Integer.valueOf(topic.getForumId()), forum);
		}

		this.context.put("topics", list);
		this.context.put("forums", forums);

		ViewCommon.contextToPagination(start, totalTopics, topicsPerPage);
	}
}

../jforum2-code/src/main/java/net/jforum/view/forum/TopDownloadsAction.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Sept 17, 2010
 * The JForum Project
 * http://www.jforum.net
 */

package net.jforum.view.forum;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import net.jforum.Command;
import net.jforum.JForumExecutionContext;
import net.jforum.dao.AttachmentDAO;
import net.jforum.dao.DataAccessDriver;
import net.jforum.entities.Forum;
import net.jforum.entities.TopDownloadInfo;
import net.jforum.entities.Topic;
import net.jforum.repository.ForumRepository;
import net.jforum.repository.TopicRepository;
import net.jforum.util.I18n;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;
import net.jforum.util.preferences.TemplateKeys;
import net.jforum.util.stats.StatsEvent;
import net.jforum.view.forum.common.TopicsCommon;

/**
 * @author Andowson
 */

public class TopDownloadsAction extends Command 
{
	private transient List<Forum> forums;
	private transient List<Topic> topics;

	/* (non-Javadoc)
	 * @see net.jforum.Command#list()
	 */
	@Override
	public void list() {
		final int postsPerPage = SystemGlobals.getIntValue(ConfigKeys.POSTS_PER_PAGE);

		this.setTemplateName(TemplateKeys.TOP_DOWNLOADS_LIST);

		this.context.put("postsPerPage", Integer.valueOf(postsPerPage));
		this.context.put("topDownloads", this.topDownloads());
		this.context.put("forums", this.forums);
		this.context.put("topics", this.topics);
		this.context.put("pageTitle", I18n.getMessage("ForumBase.topDownloads"));

		this.request.removeAttribute("template");

		new StatsEvent("Top downloads page", request.getRequestURL()).record();
	}

	private List<TopDownloadInfo> topDownloads()
	{
		final int limit = SystemGlobals.getIntValue(ConfigKeys.TOP_DOWNLOADS);
		final AttachmentDAO dao = DataAccessDriver.getInstance().newAttachmentDAO();
		final List<TopDownloadInfo> tmpTopDownloads = dao.selectTopDownloads(limit);

		this.forums = new ArrayList<>(limit);
		this.topics = new ArrayList<>(limit);

		for (final Iterator<TopDownloadInfo> iter = tmpTopDownloads.iterator(); iter.hasNext(); ) {
			final TopDownloadInfo tdi = iter.next();

			if (TopicsCommon.isTopicAccessible(tdi.getForumId())) {
				// Get name of forum that the topic refers to
				final Forum forum = ForumRepository.getForum(tdi.getForumId());
				Topic topic = new Topic();
				topic.setForumId(tdi.getForumId());
				topic.setId(tdi.getTopicId());
				topic =	TopicRepository.getTopic(topic);
				forums.add(forum);
				topics.add(topic);
			}
			else {
				iter.remove();
			}
		}

		JForumExecutionContext.getRequest().removeAttribute("template");

		return tmpTopDownloads;
	}
}

../jforum2-code/src/main/java/net/jforum/view/forum/CaptchaAction.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Dec 28, 2004 1:28:12 AM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.view.forum;

import net.jforum.Command;
import net.jforum.JForumExecutionContext;
import net.jforum.SessionFacade;
import net.jforum.util.Captcha;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public class CaptchaAction extends Command
{
	public void generate()
	{
		SessionFacade.getUserSession().createNewCaptcha();
		
		JForumExecutionContext.enableCustomContent(true);
		JForumExecutionContext.setContentType("image/jpg");
		
		Captcha.getInstance().writeCaptchaImage();
	}
	
	/**
	 * @see net.jforum.Command#list()
	 */
	@Override public void list() 
	{
		this.generate();
	}
}

../jforum2-code/src/main/java/net/jforum/view/forum/SearchAction.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 14/01/2004 / 22:02:56
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.view.forum;

import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;

import org.apache.log4j.Logger;

import freemarker.template.SimpleHash;
import net.jforum.Command;
import net.jforum.SessionFacade;
import net.jforum.context.RequestContext;
import net.jforum.context.ResponseContext;
import net.jforum.context.web.WebRequestContext;
import net.jforum.entities.UserSession;
import net.jforum.repository.ForumRepository;
import net.jforum.search.ContentSearchOperation;
import net.jforum.search.NewMessagesSearchOperation;
import net.jforum.search.SearchArgs;
import net.jforum.search.SearchOperation;
import net.jforum.search.SearchResult;
import net.jforum.util.I18n;
import net.jforum.util.SafeHtml;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;
import net.jforum.util.preferences.TemplateKeys;
import net.jforum.util.stats.StatsEvent;
import net.jforum.view.forum.common.TopicsCommon;
import net.jforum.view.forum.common.ViewCommon;

/**
 * @author Rafael Steil
 */

public class SearchAction extends Command 
{
    private static final Logger LOGGER = Logger.getLogger(SearchAction.class);

	public SearchAction() { }
	
	public SearchAction(RequestContext request, ResponseContext response, SimpleHash context) 
	{
		this.request = request;
		this.response = response;
		this.context = context;
	}

	public void filters()
	{
		this.setTemplateName(TemplateKeys.SEARCH_FILTERS);
		this.context.put("categories", ForumRepository.getAllCategories());
		this.context.put("pageTitle", I18n.getMessage("ForumBase.search"));

        int forumId = -1;
        try {
            forumId = this.request.getIntParameter("forum_id");
        } catch (NumberFormatException nfex) { }
        this.context.put("forum_id", forumId);
	}
	
    public void newMessages() {
        UserSession userSession = SessionFacade.getUserSession();
        Date lastVisit = userSession.getLastVisit();

        SearchArgs args = this.buildSearchArgs();
        args.setDateRange(lastVisit, new Date());

        search(new NewMessagesSearchOperation(), args);
    }

    public void search() {
		SearchArgs args = null;
		try {
			args = this.buildSearchArgs();
		} catch (RuntimeException rex) {
			context.put("error", I18n.getMessage("Search.malformed"));
			filters();
			return;
		}
		new StatsEvent("Search", SafeHtml.makeSafe(args.rawKeywords())).record();
		this.search(new ContentSearchOperation(), args);
    }

    private void search (SearchOperation operation, SearchArgs args)
	{
		int start = args.startFrom();
		int recordsPerPage = SystemGlobals.getIntValue(ConfigKeys.TOPICS_PER_PAGE);

		SearchResult<?> searchResults = operation.performSearch(args);
		operation.prepareForDisplay();
		List<?> results = operation.filterResults(operation.getResults());
		this.setTemplateName(operation.viewTemplate());

		this.context.put("results", results);
		this.context.put("categories", ForumRepository.getAllCategories());
		this.context.put("searchArgs", args);
		this.context.put("fr", new ForumRepository());
		this.context.put("pageTitle", I18n.getMessage("ForumBase.search"));
		this.context.put("openModeration", "1".equals(this.request.getParameter("openModeration")));
		this.context.put("postsPerPage", Integer.valueOf(SystemGlobals.getIntValue(ConfigKeys.POSTS_PER_PAGE)));

		//ViewCommon.contextToPagination(start, results.size(), recordsPerPage);
		//ViewCommon.contextToPagination(start, searchResults.getNumberOfHits(), recordsPerPage);
		ViewCommon.contextToPagination(start, searchResults.getTotalHits(), recordsPerPage);
		TopicsCommon.topicListingBase();
	}

	private SearchArgs buildSearchArgs() {
        SearchArgs args = new SearchArgs();

        args.setKeywords(this.request.getParameter("search_keywords"));

        args.setSearchIn(request.getParameter("search_in"));

        args.setOrderBy(this.request.getParameter("sort_by"));
        args.setOrderDir(this.request.getParameter("sort_dir"));
        args.startFetchingAtRecord(ViewCommon.getStartPage());
        args.setMatchType(this.request.getParameter("match_type"));

        // setter handles these optional properties if not passed
        args.setGroupByForum("true".equals(this.request.getParameter("groupByForum")));
        args.setSearchDate(this.request.getParameter("search_date"));
        setDateRange(args, this.request.getParameter("search_date"));

        args.setUserId(this.request.getParameter("user_id"));
        args.setUsername(this.request.getParameter("username"));

		if (this.request.getParameter("search_forum") != null && !"".equals(this.request.getParameter("search_forum"))) {
			args.setForumId(this.request.getIntParameter("search_forum"));
		}

        return args;
    }

    private void setDateRange (SearchArgs args, String requestDateRange) {
        if (requestDateRange == null || requestDateRange.equals("ALL")) {
            args.setDateRange(null, null);
        } else {
            Calendar cal = new GregorianCalendar();
            try {
                int numDaysAgo = Integer.parseInt(requestDateRange);
                cal.add(Calendar.DATE, -numDaysAgo);
                Date fromDate = cal.getTime();
                Date toDate = new Date();
                args.setDateRange(fromDate, toDate);
            } catch (NumberFormatException e) {
				String ip = null;
				if (request instanceof WebRequestContext) {
					ip = ((WebRequestContext) request).getRemoteAddr();
				}
				LOGGER.error(requestDateRange + " is not a date. Not possible through the UI. IP " + ip);
				throw new RuntimeException(I18n.getMessage("Search.malformed"));
            }
        }
    }

	/** 
	 * @see net.jforum.Command#list()
	 */
	@Override public void list()  
	{
		this.filters();
	}
}

../jforum2-code/src/main/java/net/jforum/view/forum/UserAction.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on May 12, 2003 / 8:31:25 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.view.forum;

import java.io.File;
import java.io.FileNotFoundException;
import java.security.SecureRandom;
import java.util.Base64;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.ConcurrentHashMap;

import org.apache.commons.io.FileUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;

import net.jforum.Command;
import net.jforum.ControllerUtils;
import net.jforum.JForumExecutionContext;
import net.jforum.SessionFacade;
import net.jforum.context.RequestContext;
import net.jforum.dao.BanlistDAO;
import net.jforum.dao.DataAccessDriver;
import net.jforum.dao.UserDAO;
import net.jforum.dao.UserSessionDAO;
import net.jforum.entities.Banlist;
import net.jforum.entities.Bookmark;
import net.jforum.entities.User;
import net.jforum.entities.UserSession;
import net.jforum.repository.BanlistRepository;
import net.jforum.repository.ForumRepository;
import net.jforum.repository.RankingRepository;
import net.jforum.repository.RegEmailRepository;
import net.jforum.repository.SecurityRepository;
import net.jforum.security.SecurityConstants;
import net.jforum.security.StopForumSpam;
import net.jforum.util.Hash;
import net.jforum.util.I18n;
import net.jforum.util.concurrent.Executor;
import net.jforum.util.mail.ActivationKeySpammer;
import net.jforum.util.mail.EmailSenderTask;
import net.jforum.util.mail.LostPasswordSpammer;
import net.jforum.util.mail.MailChecker;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;
import net.jforum.util.preferences.TemplateKeys;
import net.jforum.util.stats.StatsEvent;
import net.jforum.view.forum.common.UserCommon;
import net.jforum.view.forum.common.ViewCommon;

/**
 * @author Rafael Steil
 */
public class UserAction extends Command 
{
	private static final Logger LOGGER = Logger.getLogger(UserAction.class);

	private static final String USERNAME = "username";
	private static final String USER_ID = "user_id";
	private static final String PAGE_TITLE = "pageTitle";
	private static final String MESSAGE = "message";
	private static final String EMAIL = "email";

	private transient final UserDAO userDao = DataAccessDriver.getInstance().newUserDAO();
	private transient  final UserSessionDAO userSessionDao = DataAccessDriver.getInstance().newUserSessionDAO();

	private boolean canEdit()
	{
		final int tmpId = SessionFacade.getUserSession().getUserId();
		final boolean canEdit = SessionFacade.isLogged() && tmpId == this.request.getIntParameter(USER_ID);

		if (!canEdit) {
			this.profile();
		}

		return canEdit;
	}

	public void edit()
	{
		if (this.canEdit()) {
			final int userId = this.request.getIntParameter(USER_ID);
			final User user = userDao.selectById(userId);

			this.context.put("u", user);
			this.context.put("action", "editSave");
			this.context.put(PAGE_TITLE, I18n.getMessage("UserProfile.profileFor") + " " + user.getUsername());
			this.context.put("avatarAllowExternalUrl", SystemGlobals.getBoolValue(ConfigKeys.AVATAR_ALLOW_EXTERNAL_URL));
			this.context.put("avatarPath", SystemGlobals.getValue(ConfigKeys.AVATAR_IMAGE_DIR));
			this.setTemplateName(TemplateKeys.USER_EDIT);
		} 
	}

	public void editDone()
	{
		this.context.put("editDone", true);
		this.edit();
	}

	public void editSave()
	{
		if (this.canEdit()) {
			final int userId = this.request.getIntParameter(USER_ID);
			final List<String> warns = UserCommon.saveUser(userId);

			if (!warns.isEmpty()) {
				this.context.put("warns", warns);
				this.edit();
			} 
			else {
				JForumExecutionContext.setRedirect(this.request.getContextPath()
					+ "/user/editDone/" + userId
					+ SystemGlobals.getValue(ConfigKeys.SERVLET_EXTENSION));
			}
		}
	}

	private void registrationDisabled()
	{
		this.setTemplateName(TemplateKeys.USER_REGISTRATION_DISABLED);
		this.context.put(MESSAGE, I18n.getMessage("User.registrationDisabled"));
	}

	private void insert(final boolean hasErrors)
	{
		final int userId = SessionFacade.getUserSession().getUserId();

		if ((!SystemGlobals.getBoolValue(ConfigKeys.REGISTRATION_ENABLED)
				&& !SecurityRepository.get(userId).canAccess(SecurityConstants.PERM_ADMINISTRATION))
				|| ConfigKeys.TYPE_SSO.equals(SystemGlobals.getValue(ConfigKeys.AUTHENTICATION_TYPE))) {
			this.registrationDisabled();
			return;
		}

		if (!hasErrors && SystemGlobals.getBoolValue(ConfigKeys.AGREEMENT_SHOW) && !this.agreementAccepted()) {
			this.setTemplateName(TemplateKeys.AGREEMENT_LIST);
			this.context.put("agreementContents", this.agreementContents());
			return;
		}

		this.setTemplateName(TemplateKeys.USER_INSERT);
		this.context.put("action", "insertSave");
		this.context.put(USERNAME, this.request.getParameter(USERNAME));
		this.context.put(EMAIL, this.request.getParameter(EMAIL));
		this.context.put(PAGE_TITLE, I18n.getMessage("ForumBase.register"));

		if (SystemGlobals.getBoolValue(ConfigKeys.CAPTCHA_REGISTRATION)){
			this.context.put("captcha_reg", true);
		}

		SessionFacade.removeAttribute(ConfigKeys.AGREEMENT_ACCEPTED);
	}

	public void insert() 
	{
		this.insert(false);
	}

	public void acceptAgreement()
	{
		SessionFacade.setAttribute(ConfigKeys.AGREEMENT_ACCEPTED, "1");
		JForumExecutionContext.setRedirect(this.request.getContextPath()
			+ "/user/insert"
			+ SystemGlobals.getValue(ConfigKeys.SERVLET_EXTENSION));
	}

	private String agreementContents()
	{
		StringBuilder contents = new StringBuilder();

		try {
			String directory = new StringBuilder()
				.append(SystemGlobals.getApplicationPath()) 
				.append(SystemGlobals.getValue(ConfigKeys.AGREEMENT_FILES_PATH)) 
				.append('/')
				.toString();

			String filename = "terms_" + I18n.getUserLanguage() + ".txt";

			File file = new File(directory + filename);

			if (!file.exists()) {
				filename = SystemGlobals.getValue(ConfigKeys.AGREEMENT_DEFAULT_FILE);
				file = new File(directory + filename);

				if (!file.exists()) {
					throw new FileNotFoundException("Could not locate any terms agreement file");
				}
			}

			contents.append(FileUtils.readFileToString(file, SystemGlobals.getValue(ConfigKeys.ENCODING)));
		}
		catch (Exception e) {
			LOGGER.warn("Failed to read agreement data: " + e, e);
			contents = new StringBuilder(I18n.getMessage("User.agreement.noAgreement"));
		}

		return contents.toString();
	}

	private boolean agreementAccepted()
	{
		return "1".equals(SessionFacade.getAttribute(ConfigKeys.AGREEMENT_ACCEPTED));
	}

	public void insertSave()
	{
		UserSession userSession = SessionFacade.getUserSession();
		int userId = userSession.getUserId();

		if ((!SystemGlobals.getBoolValue(ConfigKeys.REGISTRATION_ENABLED)
				&& !SecurityRepository.get(userId).canAccess(SecurityConstants.PERM_ADMINISTRATION))
				|| ConfigKeys.TYPE_SSO.equals(SystemGlobals.getValue(ConfigKeys.AUTHENTICATION_TYPE))) {
			this.registrationDisabled();
			return;
		}

		User user = new User();

		String username = this.request.getParameter(USERNAME);
		String password = this.request.getParameter("password");
		String email = this.request.getParameter(EMAIL);
		String captchaResponse = this.request.getParameter("captchaResponse");
		String ip = this.request.getRemoteAddr();

		boolean error = false;
		if (StringUtils.isBlank(username)
				|| StringUtils.isBlank(password)) {
			this.context.put("error", I18n.getMessage("UsernamePasswordCannotBeNull"));
			error = true;
		}

		username = username.trim();

        if (!error && username != null && username.length() > SystemGlobals.getIntValue(ConfigKeys.USERNAME_MAX_LENGTH)) {
			this.context.put("error", I18n.getMessage("User.usernameTooBig"));
			error = true;
		}

		if (!error && username != null && (username.indexOf('<') > -1 || username.indexOf('>') > -1)) {
			this.context.put("error", I18n.getMessage("User.usernameInvalidChars"));
			error = true;
		}

		if (!error && userDao.isUsernameRegistered(username)) {
			this.context.put("error", I18n.getMessage("UsernameExists"));
			error = true;
		}

		password = password.trim();

        int pwdMinLength = SystemGlobals.getIntValue(ConfigKeys.PASSWORD_MIN_LENGTH);
        if (!error && password.length() < pwdMinLength) {
			this.context.put("error", I18n.getMessage("User.passwordTooShort", new Integer[] { pwdMinLength }));
			error = true;
		}

		if (!error && userDao.findByEmail(email) != null) {
			this.context.put("error", I18n.getMessage("User.emailExists", new String[] { email }));
			error = true;
		}

		if (!error && SystemGlobals.getBoolValue(ConfigKeys.CAPTCHA_REGISTRATION) && !userSession.validateCaptchaResponse(captchaResponse)){
			this.context.put("error", I18n.getMessage("CaptchaResponseFails"));
			error = true;
		}

        // check if the email is "well formed"
        if (!error && !MailChecker.checkEmail(email)) {
            this.context.put("error", I18n.getMessage("User.emailInvalid", new String[] { email }));
            error = true;
        }

        // check if the email is from an allowed domain
		// This can also be used to allow individual addresses, not just domains.
		int groupId = RegEmailRepository.canRegister(email.trim());
		if (groupId < 0) {
			this.context.put("error", I18n.getMessage("User.emailInvalid", new String[] { email }));
			error = true;
		}

		final BanlistDAO banlistDao = DataAccessDriver.getInstance().newBanlistDAO();
		boolean stopForumSpamEnabled = SystemGlobals.getBoolValue(ConfigKeys.STOPFORUMSPAM_API_ENABLED);
		if (stopForumSpamEnabled && StopForumSpam.checkIp(ip)) {
			LOGGER.info("Forum Spam found! Block it: " + ip);
			final Banlist banlist = new Banlist();
			banlist.setIp(ip);
			if (!BanlistRepository.shouldBan(banlist)) {
				banlistDao.insert(banlist);
				BanlistRepository.add(banlist);
			}
			error = true;
		} else if (stopForumSpamEnabled && StopForumSpam.checkEmail(email)) {
			LOGGER.info("Forum Spam found! Block it: " + email);
			final Banlist banlist = new Banlist();
			banlist.setEmail(email);
			if (!BanlistRepository.shouldBan(banlist)) {
				banlistDao.insert(banlist);
				BanlistRepository.add(banlist);
			} else { // email already exists, block source ip now
				LOGGER.info("Forum Spam found! Block it: " + ip);
				final Banlist banlist2 = new Banlist();
				banlist2.setIp(ip);
				banlistDao.insert(banlist2);
				BanlistRepository.add(banlist2);
			}
			error = true;
		}

		if (error) {
			this.insert(true);
			return;
		}

		user.setUsername(username);
		user.setPassword(Hash.sha512(password+SystemGlobals.getValue(ConfigKeys.USER_HASH_SEQUENCE)));
		user.setEmail(email);

		boolean needMailActivation = SystemGlobals.getBoolValue(ConfigKeys.MAIL_USER_EMAIL_AUTH);

		if (needMailActivation) {
			user.setActivationKey(Hash.md5(username + System.currentTimeMillis() + SystemGlobals.getValue(ConfigKeys.USER_HASH_SEQUENCE) + new SecureRandom().nextInt(999999)));
		}

		int newUserId = userDao.addNew(user, groupId);

		if (needMailActivation) {
			Executor.execute(new EmailSenderTask(new ActivationKeySpammer(user)));

			this.setTemplateName(TemplateKeys.USER_INSERT_ACTIVATE_MAIL);
			this.context.put(MESSAGE, I18n.getMessage("User.GoActivateAccountMessage"));
		} 
		else if(SecurityRepository.get(userId).canAccess(SecurityConstants.PERM_ADMINISTRATION)) {
			JForumExecutionContext.setRedirect(this.request.getContextPath()
				+ "/adminUsers/list"
				+ SystemGlobals.getValue(ConfigKeys.SERVLET_EXTENSION));
		}
		else {
			this.logNewRegisteredUserIn(newUserId, user);
		}

		if (!needMailActivation) {
			userDao.writeUserActive(newUserId);
		}
	}

	public void activateAccount()
	{
		String hash = this.request.getParameter("hash");
		int userId = Integer.parseInt(this.request.getParameter(USER_ID));

		User user = userDao.selectById(userId);

		boolean isValid = userDao.validateActivationKeyHash(userId, hash);

		if (isValid) {
			// Activate the account
			userDao.writeUserActive(userId);
			this.logNewRegisteredUserIn(userId, user);
		} 
		else {
			this.setTemplateName(TemplateKeys.USER_INVALID_ACTIVATION);
			this.context.put(MESSAGE, I18n.getMessage("User.invalidActivationKey", 
				new Object[] { this.request.getContextPath()
					+ "/user/activateManual"
					+ SystemGlobals.getValue(ConfigKeys.SERVLET_EXTENSION) 
				}
			));
		}
	}

	public void activateManual()
	{
		this.setTemplateName(TemplateKeys.ACTIVATE_ACCOUNT_MANUAL);
	}

	private void logNewRegisteredUserIn(final int userId, final User user) 
	{
		UserSession userSession = SessionFacade.getUserSession();
		SessionFacade.remove(userSession.getSessionId());
		userSession.setAutoLogin(true);
		userSession.setUserId(userId);
		userSession.setUsername(user.getUsername());
		userSession.setLastVisit(new Date(System.currentTimeMillis()));
		userSession.setStartTime(new Date(System.currentTimeMillis()));
		SessionFacade.makeLogged();

		SessionFacade.add(userSession);

		// Finalizing.. show the user the congratulations page
		JForumExecutionContext.setRedirect(this.request.getContextPath()
			+ "/user/registrationComplete"
			+ SystemGlobals.getValue(ConfigKeys.SERVLET_EXTENSION));
	}

	public void registrationComplete()
	{
		int userId = SessionFacade.getUserSession().getUserId();

		// prevent increment total users through directly type in url
		if (userId <= ForumRepository.lastRegisteredUser().getId()) {
			JForumExecutionContext.setRedirect(this.request.getContextPath()
					+ "/forums/list"
					+ SystemGlobals.getValue(ConfigKeys.SERVLET_EXTENSION));
			return;
		}

		ForumRepository.setLastRegisteredUser(userDao.selectById(userId));
		ForumRepository.incrementTotalUsers();

		String profilePage = JForumExecutionContext.getForumContext().encodeURL("/user/edit/" + userId);
		String homePage = JForumExecutionContext.getForumContext().encodeURL("/forums/list");

		String message = I18n.getMessage("User.RegistrationCompleteMessage", 
				new Object[] { profilePage, homePage });
		this.context.put(MESSAGE, message);
		this.setTemplateName(TemplateKeys.USER_REGISTRATION_COMPLETE);
	}

	public void validateLogin()
	{
		String password;
		String username;

		if (parseBasicAuthentication()) {
			username = (String)this.request.getAttribute(USERNAME);
			password = (String)this.request.getAttribute("password");
		} 
		else {
			username = this.request.getParameter(USERNAME);
			password = this.request.getParameter("password");
		}

		boolean validInfo = false;

		if (password.length() > 0) {
			User user = this.validateLogin(username, password);

			if (user != null) {
				// Note: here we only want to set the redirect location if it hasn't already been
				// set. This will give the LoginAuthenticator a chance to set the redirect location.
				this.buildSucessfulLoginRedirect();

				SessionFacade.makeLogged();

				UserSession userSession = new UserSession(SessionFacade.getUserSession());

				// Remove the "guest" session
				SessionFacade.remove(userSession.getSessionId());

				userSession.dataToUser(user);
		 
				// we fetch the last visit time based on the user session information stored in the DB
				final Date knownLastVisitTime = userSessionDao.fetchLastVisitTime(userSession, JForumExecutionContext.getConnection());
				if (knownLastVisitTime == null) {
					// there's no available information about the user's last visit,
					// so let's set the current time as his last visit
					userSession.setLastVisit(new Date(System.currentTimeMillis()));
				}
				else {
					// Update the user's last visit time in the current session
					userSession.setLastVisit(knownLastVisitTime);
				}

				I18n.load(user.getLang());

				// Autologin
				if (this.request.getParameter("autologin") != null
						&& SystemGlobals.getBoolValue(ConfigKeys.AUTO_LOGIN_ENABLED)) {
					userSession.setAutoLogin(true);

					// Generate the user-specific hash
					String systemHash = Hash.md5(SystemGlobals.getValue(ConfigKeys.USER_HASH_SEQUENCE) + user.getId());
					String userHash = Hash.md5(System.currentTimeMillis() + systemHash);

					// Persist the user hash
					userDao.saveUserAuthHash(user.getId(), userHash);

					systemHash = Hash.md5(userHash);

					ControllerUtils.addCookie(SystemGlobals.getValue(ConfigKeys.COOKIE_AUTO_LOGIN), "1");
					ControllerUtils.addCookie(SystemGlobals.getValue(ConfigKeys.COOKIE_USER_HASH), systemHash);
				}
				else {
					// Remove cookies for safety
					ControllerUtils.addCookie(SystemGlobals.getValue(ConfigKeys.COOKIE_USER_HASH), null);
					ControllerUtils.addCookie(SystemGlobals.getValue(ConfigKeys.COOKIE_AUTO_LOGIN), null);
				}

				SessionFacade.add(userSession);
				SessionFacade.setAttribute(ConfigKeys.TOPICS_READ_TIME, new ConcurrentHashMap<Integer, Long>());
				ControllerUtils.addCookie(SystemGlobals.getValue(ConfigKeys.COOKIE_NAME_DATA), 
					Integer.toString(user.getId()));

				SecurityRepository.load(user.getId(), true);
				validInfo = true;
			}
		}

		// Invalid login
		if (!validInfo) {
			this.context.put("invalidLogin", "1");
			this.setTemplateName(TemplateKeys.USER_VALIDATE_LOGIN);

			if (isValidReturnPath()) {
				this.context.put("returnPath", this.request.getParameter("returnPath"));
			}
		} 
		else if (isValidReturnPath()) {
			JForumExecutionContext.setRedirect(this.request.getParameter("returnPath"));
		}
	}

	private void buildSucessfulLoginRedirect()
	{
		if (JForumExecutionContext.getRedirectTo() == null) {
			String forwardedHost = request.getHeader("X-Forwarded-Host");

			if (forwardedHost == null 
					|| SystemGlobals.getBoolValue(ConfigKeys.LOGIN_IGNORE_XFORWARDEDHOST)) {
				JForumExecutionContext.setRedirect(this.request.getContextPath()
					+ "/forums/list"
					+ SystemGlobals.getValue(ConfigKeys.SERVLET_EXTENSION));
			}
			else {
				JForumExecutionContext.setRedirect(this.request.getScheme()
					+ "://"
					+ forwardedHost
					+ this.request.getContextPath()
					+ "/forums/list"
					+ SystemGlobals.getValue(ConfigKeys.SERVLET_EXTENSION)); 
			}
		}
	}

    public void validateLogin(final RequestContext request)  {
        this.request = request;
        validateLogin();
    }

    public static boolean hasBasicAuthentication(final RequestContext request) {
        String auth = request.getHeader("Authorization");
        return (auth != null && auth.startsWith("Basic "));
    }

    private boolean parseBasicAuthentication()
	{
		if (hasBasicAuthentication(request)) {
			String auth = request.getHeader("Authorization");
			String decoded;

			decoded = new String(Base64.getDecoder().decode(auth.substring(6)));

			int p = decoded.indexOf(':');
			if (p != -1) {
				request.setAttribute(USERNAME, decoded.substring(0, p));
				request.setAttribute("password", decoded.substring(p + 1));
				return true;
			}
		}
		return false;
	}

    private User validateLogin(final String name, final String password)
	{
        return userDao.validateLogin(name, password);
	}

	public void profile()
	{
		DataAccessDriver da = DataAccessDriver.getInstance();

		User user = userDao.selectById(this.request.getIntParameter(USER_ID));

		if (user.getId() == 0) {
			this.userNotFound();
		}
		else {
			this.setTemplateName(TemplateKeys.USER_PROFILE);
			this.context.put("karmaEnabled", SecurityRepository.canAccess(SecurityConstants.PERM_KARMA_ENABLED));
			this.context.put("rank", new RankingRepository());
			this.context.put("u", user);
			this.context.put("avatarAllowExternalUrl", SystemGlobals.getBoolValue(ConfigKeys.AVATAR_ALLOW_EXTERNAL_URL));
			this.context.put("avatarPath", SystemGlobals.getValue(ConfigKeys.AVATAR_IMAGE_DIR));
			this.context.put("showAvatar", SystemGlobals.getBoolValue(ConfigKeys.AVATAR_SHOW));
			this.context.put("showKarma", SystemGlobals.getBoolValue(ConfigKeys.KARMA_SHOW));

			int loggedId = SessionFacade.getUserSession().getUserId();
			int count = 0;

			List<Bookmark> bookmarks = da.newBookmarkDAO().selectByUser(user.getId());
			for (Iterator<Bookmark> iter = bookmarks.iterator(); iter.hasNext(); ) {
				Bookmark bookmark = iter.next();

				if (bookmark.isPublicVisible() || loggedId == user.getId()) {
					count++;
				}
			}

			this.context.put(PAGE_TITLE, I18n.getMessage("UserProfile.allAbout")+" "+user.getUsername());
			this.context.put("nbookmarks", Integer.valueOf(count));
			this.context.put("ntopics", Integer.valueOf(da.newTopicDAO().countUserTopics(user.getId())));
			this.context.put("nposts", Integer.valueOf(da.newPostDAO().countUserPosts(user.getId())));
			this.context.put("isLogged", SessionFacade.isLogged());
			this.context.put("isAdmin", SessionFacade.getUserSession().isAdmin());
			this.context.put("isModerator", SessionFacade.getUserSession().isModerator());

			new StatsEvent("User profile page", request.getRequestURL()).record();
		}
	}

	private void userNotFound()
	{
		this.context.put(MESSAGE, I18n.getMessage("User.notFound"));
		this.setTemplateName(TemplateKeys.USER_NOT_FOUND);
	}

	public void logout()
	{
		JForumExecutionContext.setRedirect(this.request.getContextPath()
			+ "/forums/list"
			+ SystemGlobals.getValue(ConfigKeys.SERVLET_EXTENSION));

		UserSession userSession = SessionFacade.getUserSession();
		SessionFacade.storeSessionData(userSession.getSessionId());

		SessionFacade.makeUnlogged();
		SessionFacade.remove(userSession.getSessionId());

		// Disable auto login
		userSession.setAutoLogin(false);
		userSession.makeAnonymous();

		SessionFacade.add(userSession);
	}

	public void login()
	{
		if (ConfigKeys.TYPE_SSO.equals(SystemGlobals.getValue(ConfigKeys.AUTHENTICATION_TYPE))) {
			this.registrationDisabled();
			return;
		}

		if (isValidReturnPath()) {
			this.context.put("returnPath", this.request.getParameter("returnPath"));
		}
		else if (!SystemGlobals.getBoolValue(ConfigKeys.LOGIN_IGNORE_REFERER)) {
			String referer = this.request.getHeader("Referer");

			if (referer != null) {
				this.context.put("returnPath", referer);
			}
		}

		this.context.put(PAGE_TITLE, I18n.getMessage("ForumBase.login"));
		this.setTemplateName(TemplateKeys.USER_LOGIN);
	}

	// Lost password form
	public void lostPassword() 
	{
		this.setTemplateName(TemplateKeys.USER_LOSTPASSWORD);
		this.context.put(PAGE_TITLE, I18n.getMessage("PasswordRecovery.title"));
	}

	public User prepareLostPassword(String origUsername, final String email)
	{
		String username = origUsername;
		User user = null;

		if (email != null && !email.trim().equals("")) {
			username = userDao.getUsernameByEmail(email);
		}

		if (username != null && !username.trim().equals("")) {
			List<User> l = userDao.findByName(username, true);
			if (!l.isEmpty()) {
				user = l.get(0);
			}
		}

		if (user == null) {
			return null;
		}

		String hash = Hash.md5(user.getEmail() 
				+ System.currentTimeMillis() 
				+ SystemGlobals.getValue(ConfigKeys.USER_HASH_SEQUENCE) 
				+ new SecureRandom().nextInt(999999));
		userDao.writeLostPasswordHash(user.getEmail(), hash);

		user.setActivationKey(hash);

		return user;
	}

	// Send lost password email
	public void lostPasswordSend()
	{
		String email = this.request.getParameter(EMAIL);
		String username = this.request.getParameter(USERNAME);

		User user = this.prepareLostPassword(username, email);
		// The user no longer gets told if no active account exists.
		/*
		if (user == null) {
			// user could not be found
			this.context.put(MESSAGE,
					I18n.getMessage("PasswordRecovery.invalidUserEmail"));
			this.lostPassword();
			return;
		}
		*/
		if (user != null) {
			Executor.execute(new EmailSenderTask(new LostPasswordSpammer(user)));
		}

		this.setTemplateName(TemplateKeys.USER_LOSTPASSWORD_SEND);
		this.context.put(MESSAGE, I18n.getMessage(
			"PasswordRecovery.emailSent",
			new String[] { 
					this.request.getContextPath()
					+ "/user/login"
					+ SystemGlobals.getValue(ConfigKeys.SERVLET_EXTENSION) 
				}));
	}

	// Recover user password ( aka, ask him a new one )
	public void recoverPassword()
	{
		String hash = this.request.getParameter("hash");

		this.setTemplateName(TemplateKeys.USER_RECOVERPASSWORD);
		this.context.put("recoverHash", hash);
	}

	public void recoverPasswordValidate()
	{
		String hash = this.request.getParameter("recoverHash");
		String email = this.request.getParameter(EMAIL);

		String message;
		boolean isOk = userDao.validateLostPasswordHash(email, hash);

		if (isOk) {
			String password = this.request.getParameter("newPassword");
			userDao.saveNewPassword(Hash.sha512(password+SystemGlobals.getValue(ConfigKeys.USER_HASH_SEQUENCE)), email);

			message = I18n.getMessage("PasswordRecovery.ok",
				new String[] { this.request.getContextPath()
					+ "/user/login"
					+ SystemGlobals.getValue(ConfigKeys.SERVLET_EXTENSION) });
		} 
		else {
			message = I18n.getMessage("PasswordRecovery.invalidData");
		}

		this.setTemplateName(TemplateKeys.USER_RECOVERPASSWORD_VALIDATE);
		this.context.put(MESSAGE, message);
	}

	@Override public void list()
	{
		UserSession userSession = SessionFacade.getUserSession();
		// only logged-in users get to see the member list
		if (userSession != null
			&& (SystemGlobals.getBoolValue(ConfigKeys.USER_LIST_PUBLIC)
				 || userSession.isAdmin() || userSession.isModerator()))
		{
			int start = this.preparePagination(userDao.getTotalUsers());
			int usersPerPage = SystemGlobals.getIntValue(ConfigKeys.USERS_PER_PAGE);

			List<User> users = userDao.selectAll(start, usersPerPage);
			this.context.put("users", users);
			this.context.put(PAGE_TITLE, I18n.getMessage("ForumBase.usersList"));
			this.setTemplateName(TemplateKeys.USER_LIST);

			new StatsEvent("Member list", request.getRequestURL()).record();
		} else {
			JForumExecutionContext.setRedirect(this.request.getContextPath());
		}
	}

	public void listGroup()
	{
		int groupId = this.request.getIntParameter("group_id");

		int start = this.preparePagination(userDao.getTotalUsersByGroup(groupId));
		int usersPerPage = SystemGlobals.getIntValue(ConfigKeys.USERS_PER_PAGE);

		List<User> users = userDao.selectAllByGroup(groupId, start ,usersPerPage);

		this.context.put("users", users);
		this.setTemplateName(TemplateKeys.USER_LIST);
	}

	/**
	 * @deprecated probably will be removed. Use KarmaAction to load Karma
	 */
	@Deprecated
	public void searchKarma() 
	{
		int start = this.preparePagination(userDao.getTotalUsers());
		int usersPerPage = SystemGlobals.getIntValue(ConfigKeys.USERS_PER_PAGE);

		//Load all users with your karma
		List<User> users = userDao.selectAllWithKarma(start ,usersPerPage);
		this.context.put("users", users);
		this.setTemplateName(TemplateKeys.USER_SEARCH_KARMA);
	}

	private int preparePagination(int totalUsers)
	{
		int start = ViewCommon.getStartPage();
		int usersPerPage = SystemGlobals.getIntValue(ConfigKeys.USERS_PER_PAGE);

		ViewCommon.contextToPagination(start, totalUsers, usersPerPage);

		return start;
	}

	private boolean isValidReturnPath() {
		if (request.getParameter("returnPath") != null) {
			return request.getParameter("returnPath").startsWith(SystemGlobals.getValue(ConfigKeys.FORUM_LINK));
		} else {
			return false;
		}
	}
}

../jforum2-code/src/main/java/net/jforum/view/forum/PostAction.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on May 3, 2003 / 5:05:18 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.view.forum;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import net.jforum.Command;
import net.jforum.JForumExecutionContext;
import net.jforum.SessionFacade;
import net.jforum.context.RequestContext;
import net.jforum.dao.AttachmentDAO;
import net.jforum.dao.DataAccessDriver;
import net.jforum.dao.ForumDAO;
import net.jforum.dao.KarmaDAO;
import net.jforum.dao.PollDAO;
import net.jforum.dao.PostDAO;
import net.jforum.dao.TopicDAO;
import net.jforum.dao.UserDAO;
import net.jforum.entities.Attachment;
import net.jforum.entities.Category;
import net.jforum.entities.Forum;
import net.jforum.entities.KarmaStatus;
import net.jforum.entities.ModerationLog;
import net.jforum.entities.Poll;
import net.jforum.entities.PollChanges;
import net.jforum.entities.Post;
import net.jforum.entities.QuotaLimit;
import net.jforum.entities.Topic;
import net.jforum.entities.User;
import net.jforum.entities.UserSession;
import net.jforum.exceptions.AttachmentException;
import net.jforum.exceptions.ForumException;
import net.jforum.repository.ForumRepository;
import net.jforum.repository.PostRepository;
import net.jforum.repository.RankingRepository;
import net.jforum.repository.SecurityRepository;
import net.jforum.repository.SmiliesRepository;
import net.jforum.repository.SpamRepository;
import net.jforum.repository.TopicRepository;
import net.jforum.security.PermissionControl;
import net.jforum.security.SecurityConstants;
import net.jforum.util.I18n;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;
import net.jforum.util.preferences.TemplateKeys;
import net.jforum.util.stats.StatsEvent;
import net.jforum.view.forum.common.AttachmentCommon;
import net.jforum.view.forum.common.ForumCommon;
import net.jforum.view.forum.common.PollCommon;
import net.jforum.view.forum.common.PostCommon;
import net.jforum.view.forum.common.TopicsCommon;
import net.jforum.view.forum.common.ViewCommon;

import org.apache.commons.lang3.StringUtils;

import freemarker.template.SimpleHash;

/**
 * @author Rafael Steil
 */
public class PostAction extends Command 
{
    public PostAction() {
	}

	public PostAction(RequestContext request, SimpleHash templateContext) {
		super.context = templateContext;
		super.request = request;
	}

	@Override public void list()
	{
		PostDAO postDao = DataAccessDriver.getInstance().newPostDAO();
		PollDAO pollDao = DataAccessDriver.getInstance().newPollDAO();
		TopicDAO topicDao = DataAccessDriver.getInstance().newTopicDAO();

		UserSession us = SessionFacade.getUserSession();
		int anonymousUser = SystemGlobals.getIntValue(ConfigKeys.ANONYMOUS_USER_ID);
		boolean logged = SessionFacade.isLogged();

		int topicId = this.request.getIntParameter("topic_id");

		Topic topic = TopicRepository.getTopic(new Topic(topicId));

		if (topic == null) {
			topic = topicDao.selectById(topicId);
		}

		// The topic exists?
		if (topic.getId() == 0) {
			this.topicNotFound();
			return;
		}

		// Shall we proceed?
		Forum forum = ForumRepository.getForum(topic.getForumId());

		if (!logged) {
			if (forum == null || !ForumRepository.isCategoryAccessible(forum.getCategoryId())) {
				this.setTemplateName(ViewCommon.contextToLogin());
				return;
			}
		}
		else if (!TopicsCommon.isTopicAccessible(topic.getForumId())) {
			return;
		}

		int count = SystemGlobals.getIntValue(ConfigKeys.POSTS_PER_PAGE);
		int start = ViewCommon.getStartPage();

		PermissionControl pc = SecurityRepository.get(us.getUserId());

		boolean moderatorCanEdit = pc.canAccess(SecurityConstants.PERM_MODERATION_POST_EDIT);

		List<Post> helperList = PostCommon.topicPosts(postDao, moderatorCanEdit, us.getUserId(), topic.getId(), start, count);

		// Ugly assumption:
		// Is moderation pending for the topic?
		if (topic.isModerated() && helperList.isEmpty()) {
			this.notModeratedYet();
			return;
		}

		// Set the topic status as read
		if (logged) {
			topicDao.updateReadStatus(topic.getId(), us.getUserId(), true);
		}

		boolean canVoteOnPoll = logged && SecurityRepository.canAccess(SecurityConstants.PERM_VOTE);
		Poll poll = null;

		if (topic.isVote()) {
			// It has a poll associated with the topic
			poll = pollDao.selectById(topic.getVoteId());

			if (canVoteOnPoll) {
				canVoteOnPoll = !pollDao.hasUserVotedOnPoll(topic.getVoteId(), us.getUserId());
			}
		}

		topicDao.incrementTotalViews(topic.getId());
		topic.setTotalViews(topic.getTotalViews() + 1);

		if (us.getUserId() != anonymousUser) {
			SessionFacade.getTopicsReadTime().put(Integer.valueOf(topic.getId()),
				Long.valueOf(System.currentTimeMillis()));
		}

		boolean karmaEnabled = SecurityRepository.canAccess(SecurityConstants.PERM_KARMA_ENABLED);
		Map<Integer, Integer> userVotes = new HashMap<>();

		if (logged && karmaEnabled) {
			userVotes = DataAccessDriver.getInstance().newKarmaDAO().getUserVotes(topic.getId(), us.getUserId());
		}

        Category category = ForumRepository.getCategory(forum.getCategoryId());

		this.setTemplateName(TemplateKeys.POSTS_LIST);
		this.context.put("attachmentsEnabled", pc.canAccess(SecurityConstants.PERM_ATTACHMENTS_ENABLED, Integer.toString(topic.getForumId())));
		this.context.put("canDownloadAttachments", pc.canAccess(SecurityConstants.PERM_ATTACHMENTS_DOWNLOAD));
		this.context.put("thumbShowBox", SystemGlobals.getBoolValue(ConfigKeys.ATTACHMENTS_IMAGES_THUMB_BOX_SHOW));
		this.context.put("thumbShowHover", SystemGlobals.getBoolValue(ConfigKeys.ATTACHMENTS_IMAGES_THUMB_HOVER_SHOW));
		this.context.put("am", new AttachmentCommon(this.request, topic.getForumId()));
		this.context.put("karmaVotes", userVotes);
		this.context.put("canRemove", pc.canAccess(SecurityConstants.PERM_MODERATION_POST_REMOVE));
		this.context.put("moderatorCanEdit", moderatorCanEdit);
		this.context.put("editAfterReply", SystemGlobals.getBoolValue(ConfigKeys.POSTS_EDIT_AFTER_REPLY));
		this.context.put("allCategories", ForumCommon.getAllCategoriesAndForums(false));
		this.context.put("topic", topic);
        this.context.put("category", category);
		this.context.put("poll", poll);
		this.context.put("canVoteOnPoll", canVoteOnPoll);
		this.context.put("rank", new RankingRepository());
		this.context.put("posts", helperList);
		this.context.put("forum", forum);
		this.context.put("karmaMin", Integer.valueOf(SystemGlobals.getValue(ConfigKeys.KARMA_MIN_POINTS)));
		this.context.put("karmaMax", Integer.valueOf(SystemGlobals.getValue(ConfigKeys.KARMA_MAX_POINTS)));
		this.context.put("avatarAllowExternalUrl", SystemGlobals.getBoolValue(ConfigKeys.AVATAR_ALLOW_EXTERNAL_URL));
		this.context.put("avatarPath", SystemGlobals.getValue(ConfigKeys.AVATAR_IMAGE_DIR));
		this.context.put("moderationLoggingEnabled", SystemGlobals.getBoolValue(ConfigKeys.MODERATION_LOGGING_ENABLED));
		this.context.put("needCaptcha", User.needsCaptcha(us.getUserId()));

		this.context.put("showAvatar", SystemGlobals.getBoolValue(ConfigKeys.AVATAR_SHOW));
		this.context.put("showKarma", SystemGlobals.getBoolValue(ConfigKeys.KARMA_SHOW));
		this.context.put("showIP", SystemGlobals.getBoolValue(ConfigKeys.IP_SHOW));
		this.context.put("showOnline", SystemGlobals.getBoolValue(ConfigKeys.ONLINE_SHOW));

		Map<Integer, User> topicPosters = topicDao.topicPosters(topic.getId());

		for (Iterator<User> iter = topicPosters.values().iterator(); iter.hasNext(); ) {
			ViewCommon.prepareUserSignature(iter.next());
		}

		this.context.put("users", topicPosters);
		this.context.put("anonymousPosts", pc.canAccess(SecurityConstants.PERM_ANONYMOUS_POST, Integer.toString(topic.getForumId())));
		this.context.put("watching", topicDao.isUserSubscribed(topicId, SessionFacade.getUserSession().getUserId()));
		this.context.put("pageTitle", topic.getTitle());
		this.context.put("isAdmin", pc.canAccess(SecurityConstants.PERM_ADMINISTRATION));
		this.context.put("readonly", !pc.canAccess(SecurityConstants.PERM_READ_ONLY_FORUMS,	Integer.toString(topic.getForumId())));
		this.context.put("replyOnly", !pc.canAccess(SecurityConstants.PERM_REPLY_ONLY, Integer.toString(topic.getForumId())));

		this.context.put("isModerator", us.isModerator(topic.getForumId()));

		ViewCommon.contextToPagination(start, topic.getTotalReplies() + 1, count);

		TopicsCommon.topicListingBase();
		TopicRepository.updateTopic(topic);

        new StatsEvent("View topic", request.getRequestURL()).record();
	}

	/**
	 * Given a postId, sends the user to the right page
	 */
	public void preList()
	{
		int postId = this.request.getIntParameter("post_id");

		PostDAO dao = DataAccessDriver.getInstance().newPostDAO();

		int count = dao.countPreviousPosts(postId);
		int postsPerPage = SystemGlobals.getIntValue(ConfigKeys.POSTS_PER_PAGE);

		int topicId = 0;

		if (this.request.getParameter("topic_id") != null) {
			topicId = this.request.getIntParameter("topic_id");
		}

		if (topicId == 0) {
			Post post = dao.selectById(postId);
			topicId = post.getTopicId();
		}

		String page = "";

		if (count > postsPerPage) {
			page = Integer.toString(postsPerPage * ((count - 1) / postsPerPage)) + "/";
		} 

		JForumExecutionContext.setRedirect(this.request.getContextPath() + "/posts/list/"
			+ page + topicId
			+ SystemGlobals.getValue(ConfigKeys.SERVLET_EXTENSION) 
			+ "#p" + postId);
	}

	/**
	 * Votes on a poll.
	 */
	public void vote()
	{
		int pollId = this.request.getIntParameter("poll_id");
		int topicId = this.request.getIntParameter("topic_id");

		if (SessionFacade.isLogged() && this.request.getParameter("poll_option") != null) {
			Topic topic = TopicRepository.getTopic(new Topic(topicId));

			if (topic == null) {
				topic = DataAccessDriver.getInstance().newTopicDAO().selectRaw(topicId);
			}

			if (topic.getStatus() == Topic.STATUS_LOCKED) {
				this.topicLocked();
				return;
			}

			// They voted, save the value
			int optionId = this.request.getIntParameter("poll_option");

			PollDAO dao = DataAccessDriver.getInstance().newPollDAO();

			//vote on the poll
			UserSession user = SessionFacade.getUserSession();
			dao.voteOnPoll(pollId, optionId, user.getUserId(), request.getRemoteAddr());
		}

		JForumExecutionContext.setRedirect(this.request.getContextPath() 
			+ "/posts/list/"
			+ topicId
			+ SystemGlobals.getValue(ConfigKeys.SERVLET_EXTENSION));
	}

	public void listByUser()
	{
		PostDAO pm = DataAccessDriver.getInstance().newPostDAO();
		UserDAO um = DataAccessDriver.getInstance().newUserDAO();
		TopicDAO tm = DataAccessDriver.getInstance().newTopicDAO();

		User user = um.selectById(this.request.getIntParameter("user_id"));

		if (user.getId() == 0) {
			this.context.put("message", I18n.getMessage("User.notFound"));
			this.setTemplateName(TemplateKeys.USER_NOT_FOUND);
			return;
		} 

		int count = SystemGlobals.getIntValue(ConfigKeys.POSTS_PER_PAGE);
		int start = ViewCommon.getStartPage();
		int postsPerPage = SystemGlobals.getIntValue(ConfigKeys.POSTS_PER_PAGE);

		List<Post> posts = pm.selectByUserByLimit(user.getId(), start, postsPerPage);
		int totalMessages = pm.countUserPosts(user.getId());

		// get list of forums
		Map<Integer, Topic> topics = new HashMap<>();
		Map<Integer, Forum> forums = new HashMap<>();

		for (Iterator<Post> iter = posts.iterator(); iter.hasNext(); ) {
			Post post = iter.next();

			if (!topics.containsKey(Integer.valueOf(post.getTopicId()))) {
				Topic topic = TopicRepository.getTopic(new Topic(post.getTopicId()));
				if (topic == null) {
					topic = tm.selectRaw(post.getTopicId());
				}

				this.context.put("attachmentsEnabled", SecurityRepository.canAccess(
						SecurityConstants.PERM_ATTACHMENTS_ENABLED, Integer.toString(topic.getForumId())));
				this.context.put("am", new AttachmentCommon(this.request, topic.getForumId()));

				topics.put(Integer.valueOf(topic.getId()), topic);
			}

			if (!forums.containsKey(Integer.valueOf(post.getForumId()))) {
				Forum forum = ForumRepository.getForum(post.getForumId());

				if (forum == null) {
					// OK, probably the user does not have permission to see this forum
					iter.remove();
					totalMessages--;
					continue;
				}

				forums.put(Integer.valueOf(forum.getId()), forum);
			}

			PostCommon.preparePostForDisplay(post);
		}

		this.setTemplateName(TemplateKeys.POSTS_USER_POSTS_LIST);

		this.context.put("canDownloadAttachments", SecurityRepository.canAccess(SecurityConstants.PERM_ATTACHMENTS_DOWNLOAD));
		this.context.put("allCategories", ForumCommon.getAllCategoriesAndForums(false));
		this.context.put("posts", posts);
		this.context.put("topics", topics);
		this.context.put("forums", forums);
        this.context.put("repository", new ForumRepository());
		this.context.put("u", user);
		this.context.put("pageTitle", I18n.getMessage("PostShow.userPosts") + " " + user.getUsername());
		this.context.put("karmaMin", Integer.valueOf(SystemGlobals.getValue(ConfigKeys.KARMA_MIN_POINTS)));
		this.context.put("karmaMax", Integer.valueOf(SystemGlobals.getValue(ConfigKeys.KARMA_MAX_POINTS)));

		ViewCommon.contextToPagination(start, totalMessages, count);
	}

	public void review()
	{
		PostDAO postDao = DataAccessDriver.getInstance().newPostDAO();
		TopicDAO topicDao = DataAccessDriver.getInstance().newTopicDAO();

		int userId = SessionFacade.getUserSession().getUserId();
		int topicId = this.request.getIntParameter("topic_id");

		Topic topic = TopicRepository.getTopic(new Topic(topicId));

		if (topic == null) {
			topic = topicDao.selectById(topicId);
		}

		if (!TopicsCommon.isTopicAccessible(topic.getForumId())) {
			return;
		}

		int count = SystemGlobals.getIntValue(ConfigKeys.POSTS_PER_PAGE);
		int start = ViewCommon.getStartPage();

		Map<Integer, User> usersMap = topicDao.topicPosters(topic.getId());
		List<Post> helperList = PostCommon.topicPosts(postDao, false, userId, topic.getId(), start, count);
		Collections.reverse(helperList);

		this.setTemplateName(TemplateKeys.POSTS_REVIEW);
		this.context.put("posts", helperList);
		this.context.put("users", usersMap);
	}

	private void topicNotFound() {
		this.setTemplateName(TemplateKeys.POSTS_TOPIC_NOT_FOUND);
		this.context.put("message", I18n.getMessage("PostShow.TopicNotFound"));
	}

	private void postNotFound() {
		this.setTemplateName(TemplateKeys.POSTS_POST_NOT_FOUND);
		this.context.put("message", I18n.getMessage("PostShow.PostNotFound"));
	}

	private void replyOnly()
	{
		this.setTemplateName(TemplateKeys.POSTS_REPLY_ONLY);
		this.context.put("message", I18n.getMessage("PostShow.replyOnly"));
	}

	private boolean isReplyOnly(int forumId)
	{
		return !SecurityRepository.canAccess(SecurityConstants.PERM_REPLY_ONLY, 
				Integer.toString(forumId));
	}

	public void reply()
	{
		this.insert();
	}

	public void insert()
	{
		int forumId;

		// If we have a topic_id, then it should be a reply
		if (this.request.getParameter("topic_id") != null) {
			int topicId = this.request.getIntParameter("topic_id");

			Topic topic = TopicRepository.getTopic(new Topic(topicId));

			if (topic == null) {
				topic = DataAccessDriver.getInstance().newTopicDAO().selectRaw(topicId);

				if (topic.getId() == 0) {
					throw new ForumException("Could not find a topic with id #" + topicId);
				}
			}

			forumId = topic.getForumId();

			if (topic.getStatus() == Topic.STATUS_LOCKED) {
				this.topicLocked();
				return;
			}

			this.context.put("topic", topic);
			this.context.put("setType", false);
			this.context.put("pageTitle", I18n.getMessage("PostForm.reply")+" "+topic.getTitle());
		}
		else {
			forumId = this.request.getIntParameter("forum_id");

			if (this.isReplyOnly(forumId)) {
				this.replyOnly();
				return;
			}
			this.context.put("setType", true);
			this.context.put("pageTitle", I18n.getMessage("PostForm.title"));
		}
		
		if (!this.anonymousPost(forumId)
				|| this.isForumReadonly(forumId, this.request.getParameter("topic_id") != null) 
				|| !TopicsCommon.isTopicAccessible(forumId)) {
			return;
		}
		
		Forum forum = ForumRepository.getForum(forumId);

		int userId = SessionFacade.getUserSession().getUserId();

		this.setTemplateName(TemplateKeys.POSTS_INSERT);

		// Attachments
		boolean attachmentsEnabled = SecurityRepository.canAccess(
			SecurityConstants.PERM_ATTACHMENTS_ENABLED, Integer.toString(forumId));

		if (attachmentsEnabled && !SessionFacade.isLogged() 
			&& !SystemGlobals.getBoolValue(ConfigKeys.ATTACHMENTS_ANONYMOUS)) {
			attachmentsEnabled = false;
		}

		this.context.put("attachmentsEnabled", attachmentsEnabled);

		if (attachmentsEnabled) {
			QuotaLimit ql = new AttachmentCommon(this.request, forumId).getQuotaLimit(userId);
			this.context.put("maxAttachmentsSize", Long.valueOf(ql != null ? ql.getSizeInBytes() : 1));
			this.context.put("maxAttachments", SystemGlobals.getValue(ConfigKeys.ATTACHMENTS_MAX_POST));
		}

		this.context.put("moderationLoggingEnabled", SystemGlobals.getBoolValue(ConfigKeys.MODERATION_LOGGING_ENABLED));
		this.context.put("smilies", SmiliesRepository.getSmilies());
		this.context.put("forum", forum);
		this.context.put("action", "insertSave");
		this.context.put("start", this.request.getParameter("start"));
		this.context.put("isNewPost", true);
		this.context.put("needCaptcha", User.needsCaptcha(userId));
		this.context.put("htmlAllowed",
			SecurityRepository.canAccess(SecurityConstants.PERM_HTML_DISABLED, Integer.toString(forumId)));
		this.context.put("canCreateStickyOrAnnouncementTopics",
			SecurityRepository.canAccess(SecurityConstants.PERM_CREATE_STICKY_ANNOUNCEMENT_TOPICS));
		this.context.put("canCreatePolls",
			SecurityRepository.canAccess(SecurityConstants.PERM_CREATE_POLL));

		User user = DataAccessDriver.getInstance().newUserDAO().selectById(userId);

		ViewCommon.prepareUserSignature(user);

		if (this.request.getParameter("preview") != null) {
			user.setNotifyOnMessagesEnabled(this.request.getParameter("notify") != null);
		}

		this.context.put("user", user);
	}

	public void edit()  {
		this.edit(false, null);
	}

	private void edit(boolean preview, Post origPost)
	{
		Post post = origPost;
		int userId = SessionFacade.getUserSession().getUserId();

		if (!preview) {
			PostDAO pm = DataAccessDriver.getInstance().newPostDAO();
			post = pm.selectById(this.request.getIntParameter("post_id"));

			// The post exist?
			if (post.getId() == 0) {
				this.postNotFound();
				return;
			}
		}

		boolean isModerator = SessionFacade.getUserSession().isModerator(post.getForumId());
		boolean canEdit = PostCommon.canEditPost(post);

		if (!canEdit) {
			this.setTemplateName(TemplateKeys.POSTS_EDIT_CANNOTEDIT);
			this.context.put("message", I18n.getMessage("CannotEditPost"));
		}
		else {
			Topic topic = TopicRepository.getTopic(new Topic(post.getTopicId()));

			if (topic == null) {
				topic = DataAccessDriver.getInstance().newTopicDAO().selectRaw(post.getTopicId());
			}

			if (!TopicsCommon.isTopicAccessible(topic.getForumId())) {
				return;
			}

			if (topic.getStatus() == Topic.STATUS_LOCKED && !isModerator) {
				this.topicLocked();
				return;
			}

			if (preview && this.request.getParameter("topic_type") != null) {
				topic.setType(this.request.getIntParameter("topic_type"));
			}

			if (post.hasAttachments()) {
				this.context.put("attachments", 
						DataAccessDriver.getInstance().newAttachmentDAO().selectAttachments(post.getId()));
			}

			Poll poll = null;

			if (topic.isVote() && topic.getFirstPostId() == post.getId()) {
				// It has a poll associated with the topic
				PollDAO poolDao = DataAccessDriver.getInstance().newPollDAO();
				poll = poolDao.selectById(topic.getVoteId());
			}

			this.setTemplateName(TemplateKeys.POSTS_EDIT);

			this.context.put("attachmentsEnabled", SecurityRepository.canAccess(
					SecurityConstants.PERM_ATTACHMENTS_ENABLED, Integer.toString(post.getForumId())));

			this.context.put("moderationLoggingEnabled", SystemGlobals.getBoolValue(ConfigKeys.MODERATION_LOGGING_ENABLED));

			QuotaLimit ql = new AttachmentCommon(this.request, post.getForumId()).getQuotaLimit(userId);
			this.context.put("maxAttachmentsSize", Long.valueOf(ql != null ? ql.getSizeInBytes() : 1));
			this.context.put("isEdit", true);
			this.context.put("maxAttachments", SystemGlobals.getValue(ConfigKeys.ATTACHMENTS_MAX_POST));
			this.context.put("smilies", SmiliesRepository.getSmilies());
			this.context.put("forum", ForumRepository.getForum(post.getForumId()));
			this.context.put("action", "editSave");
			this.context.put("post", post);
			this.context.put("setType", post.getId() == topic.getFirstPostId());
			this.context.put("topic", topic);
			this.context.put("poll", poll);
			this.context.put("pageTitle", I18n.getMessage("PostShow.messageTitle") + " " + post.getSubject());
			this.context.put("isModerator", isModerator);
			this.context.put("start", this.request.getParameter("start"));
			this.context.put("htmlAllowed", SecurityRepository.canAccess(SecurityConstants.PERM_HTML_DISABLED, 
					Integer.toString(topic.getForumId())));
			this.context.put("canCreateStickyOrAnnouncementTopics",
					SecurityRepository.canAccess(SecurityConstants.PERM_CREATE_STICKY_ANNOUNCEMENT_TOPICS));
			this.context.put("canCreatePolls",
					SecurityRepository.canAccess(SecurityConstants.PERM_CREATE_POLL));
		}

		UserDAO udao = DataAccessDriver.getInstance().newUserDAO();
		User user = udao.selectById(userId);
		ViewCommon.prepareUserSignature(user);

		if (preview) {
			user.setNotifyOnMessagesEnabled(this.request.getParameter("notify") != null);

			if (user.getId() != post.getUserId()) {
				// Probably a moderator is editing the message
				User previewUser = udao.selectById(post.getUserId());
				ViewCommon.prepareUserSignature(previewUser);
				this.context.put("previewUser", previewUser);
			}
		}

		this.context.put("user", user);
	}

	public void quote()
	{
		PostDAO pm = DataAccessDriver.getInstance().newPostDAO();
		Post post = pm.selectById(this.request.getIntParameter("post_id"));

		if (post.getId() == 0) {
			this.postNotFound();
			return;
		}

		if (post.isModerationNeeded()) {
			this.notModeratedYet();
			return;
		}

		if (!this.anonymousPost(post.getForumId())) {
			return;
		}

		Topic topic = TopicRepository.getTopic(new Topic(post.getTopicId()));

		if (topic == null) {
			topic = DataAccessDriver.getInstance().newTopicDAO().selectRaw(post.getTopicId());
		}

		if (!TopicsCommon.isTopicAccessible(topic.getForumId())) {
			return;
		}

		if (topic.getStatus() == Topic.STATUS_LOCKED) {
			this.topicLocked();
			return;
		}

		this.setTemplateName(TemplateKeys.POSTS_QUOTE);

		this.context.put("forum", ForumRepository.getForum(post.getForumId()));
		this.context.put("action", "insertSave");
		this.context.put("post", post);

		UserDAO um = DataAccessDriver.getInstance().newUserDAO();
		User user = um.selectById(post.getUserId());

		int userId = SessionFacade.getUserSession().getUserId();

		this.context.put("attachmentsEnabled", SecurityRepository.canAccess(
			SecurityConstants.PERM_ATTACHMENTS_ENABLED, Integer.toString(topic.getForumId())));

		QuotaLimit ql = new AttachmentCommon(this.request, topic.getForumId()).getQuotaLimit(userId);
		this.context.put("maxAttachmentsSize", Long.valueOf(ql != null ? ql.getSizeInBytes() : 1));

		this.context.put("moderationLoggingEnabled", SystemGlobals.getBoolValue(ConfigKeys.MODERATION_LOGGING_ENABLED));
		this.context.put("maxAttachments", SystemGlobals.getValue(ConfigKeys.ATTACHMENTS_MAX_POST));
		this.context.put("isNewPost", true);
		this.context.put("topic", topic);
		this.context.put("quote", "true");
		this.context.put("quoteUser", user.getUsername());
		this.context.put("setType", false);
		this.context.put("htmlAllowed", SecurityRepository.canAccess(SecurityConstants.PERM_HTML_DISABLED, 
			Integer.toString(topic.getForumId())));
		this.context.put("start", this.request.getParameter("start"));
		this.context.put("user", DataAccessDriver.getInstance().newUserDAO().selectById(userId));
		this.context.put("pageTitle", I18n.getMessage("PostForm.reply") + " " + topic.getTitle());
		this.context.put("smilies", SmiliesRepository.getSmilies());

		this.context.put("needCaptcha", User.needsCaptcha(userId));
	}

	/* check for spam in subject or body, except for admins */
	private String validatePost (Post post) {
		String str = post.getSubject();
		String spam = SpamRepository.findSpam(str);
		if (spam != null)
			return I18n.getMessage("PostForm.spam");

		str = post.getText();
		spam = SpamRepository.findSpam(str);
		if (spam != null)
			return I18n.getMessage("PostForm.spam");

		return null;
	}

	public void editSave()
	{
		PostDAO postDao = DataAccessDriver.getInstance().newPostDAO();
		PollDAO pollDao = DataAccessDriver.getInstance().newPollDAO();
		TopicDAO topicDao = DataAccessDriver.getInstance().newTopicDAO();

		Post post = postDao.selectById(this.request.getIntParameter("post_id"));

		if (!PostCommon.canEditPost(post)) {
			this.cannotEdit();
			return;
		}

		boolean isModerator = SessionFacade.getUserSession().isModerator(post.getForumId());

		String originalMessage = post.getText();

		post = PostCommon.fillPostFromRequest(post, true);
		// check for subject or body containing spam
		String error = validatePost(post);
        if (error != null && ! isModerator) {
            this.context.put("post", post);
            this.context.put("errorMessage", error);
            this.edit(false, post);
            return;
        }

		// The user wants to preview the message before posting it?
		if ("1".equals(this.request.getParameter("preview"))) {
			this.context.put("preview", true);

			Post postPreview = new Post(post);
			this.context.put("postPreview", PostCommon.preparePostForDisplay(postPreview));

			this.edit(true, post);
		}
		else {
			AttachmentCommon attachments = new AttachmentCommon(this.request, post.getForumId());

			try {
				attachments.preProcess();
			}
			catch (AttachmentException e) {
				JForumExecutionContext.enableRollback();
				post.setText(this.request.getParameter("message"));
				this.context.put("errorMessage", e.getMessage());
				this.context.put("post", post);
				this.edit(false, post);
				return;
			}

			Topic topic = TopicRepository.getTopic(new Topic(post.getTopicId()));

			if (topic == null) {
				topic = topicDao.selectById(post.getTopicId());
			}

			if (!TopicsCommon.isTopicAccessible(topic.getForumId())) {
				return;
			}

			if (topic.getStatus() == Topic.STATUS_LOCKED
					&& !SecurityRepository.canAccess(SecurityConstants.PERM_MODERATION_POST_EDIT)) {
				this.topicLocked();
				return;
			}

			// If the corresponding setting is turned on, don't allow editing of posts after replies are available
			// ... unless the user is a moderator, of course
			if (topic.getLastPostId() > post.getId()
				&& ! SystemGlobals.getBoolValue(ConfigKeys.POSTS_EDIT_AFTER_REPLY)
				&& ! SessionFacade.getUserSession().isModerator(post.getForumId()))
			{
				this.cannotEdit();
				return;
			}

			post.setTopicType(this.request.getIntParameter("topic_type"));
			postDao.update(post);

			// Attachments
			attachments.editAttachments(post.getId(), post.getForumId());
			attachments.insertAttachments(post);
			post.hasAttachments(attachments.getAttachments(post.getId(), post.getForumId()).size() > 0);

			// The first message (the one which originated the topic) was changed
			if (topic.getFirstPostId() == post.getId()) {
				topic.setTitle(post.getSubject());

				int newType = this.request.getIntParameter("topic_type");
				boolean changeType = SecurityRepository.canAccess(SecurityConstants.PERM_CREATE_STICKY_ANNOUNCEMENT_TOPICS)
					&& newType != topic.getType();

				if (changeType) {
					topic.setType(newType);
				}

				// for wiki topics we send out notifications upon edits
				if (topic.getType() == Topic.TYPE_WIKI) {
					TopicsCommon.notifyUsers(topic, post);
				}

				// Poll
				Poll poll = PollCommon.fillPollFromRequest();

				if (poll != null && !topic.isVote()) {
					// They added a poll
					poll.setTopicId(topic.getId());

					if (!this.ensurePollMinimumOptions(post, poll)) {
						return;
					}

					pollDao.addNew(poll);
					topic.setVoteId(poll.getId());

				} 
				else if (poll != null) {
					if (!this.ensurePollMinimumOptions(post, poll)) {
						return;
					}

					// They edited the poll in the topic
					Poll existing = pollDao.selectById(topic.getVoteId());
					PollChanges changes = new PollChanges(existing, poll);

					if (changes.hasChanges()) {
						poll.setId(existing.getId());
						poll.setChanges(changes);
						pollDao.update(poll);
					}

				} 
				else if (topic.isVote()) {
					// They deleted the poll from the topic
					pollDao.delete(topic.getVoteId());
					topic.setVoteId(0);
				}

				topicDao.update(topic);
				topic = topicDao.selectById(post.getTopicId());

				if (changeType) {
					TopicRepository.addTopic(topic);
				}
				else {
					TopicRepository.updateTopic(topic);
				}
			} else {
				topicDao.update(topic);
				topic = topicDao.selectById(post.getTopicId());
				TopicRepository.updateTopic(topic);
			}

			// Update forum last post info 
			ForumRepository.reloadForum(post.getForumId());

			if (SystemGlobals.getBoolValue(ConfigKeys.MODERATION_LOGGING_ENABLED)
					&& isModerator && post.getUserId() != SessionFacade.getUserSession().getUserId()) {
				ModerationHelper helper = new ModerationHelper();
				this.request.addParameter("log_original_message", originalMessage);
				ModerationLog log = helper.buildModerationLogFromRequest();
				log.getPosterUser().setId(post.getUserId());
				helper.saveModerationLog(log);
			}

			if (this.request.getParameter("notify") == null) {
				topicDao.removeSubscription(post.getTopicId(), SessionFacade.getUserSession().getUserId());
			}

			String path = this.request.getContextPath() + "/posts/list/";
			int start = ViewCommon.getStartPage();

			if (start > 0) {
				path = new StringBuilder(path).append(start).append('/').toString();
			}

			path = new StringBuilder(path).append(post.getTopicId())
			    .append(SystemGlobals.getValue(ConfigKeys.SERVLET_EXTENSION))
			    .append("#p")
			    .append(post.getId())
			    .toString();
			JForumExecutionContext.setRedirect(path);

			if (SystemGlobals.getBoolValue(ConfigKeys.POSTS_CACHE_ENABLED)) {
				PostRepository.update(post.getTopicId(), PostCommon.preparePostForDisplay(post));
			}
		}
	}

	private boolean ensurePollMinimumOptions(Post post, Poll poll)
	{
		if (poll.getOptions().size() < 2) {
			// It is not a valid poll, cancel the post
			JForumExecutionContext.enableRollback();
			post.setText(this.request.getParameter("message"));
			post.setId(0);
			this.context.put("errorMessage", I18n.getMessage("PostForm.needMorePollOptions"));
			this.context.put("post", post);
			this.context.put("poll", poll);
			this.edit();
			return false;
		}

		return true;
	}

	public void waitingModeration()
	{
		this.setTemplateName(TemplateKeys.POSTS_WAITING);

		int topicId = this.request.getIntParameter("topic_id");
		String path = this.request.getContextPath();

		if (topicId == 0) {
			path = new StringBuilder(path).append("/forums/show/").append(this.request.getParameter("forum_id")).toString();
		}
		else {
			path = new StringBuilder(path).append("/posts/list/").append(topicId).toString();
		}

		this.context.put("message", I18n.getMessage("PostShow.waitingModeration", 
				new String[] { path + SystemGlobals.getValue(ConfigKeys.SERVLET_EXTENSION) }));
	}

	private void notModeratedYet()
	{
		this.setTemplateName(TemplateKeys.POSTS_NOT_MODERATED);
		this.context.put("message", I18n.getMessage("PostShow.notModeratedYet"));
	}

	public void insertSave()
	{
		int forumId = this.request.getIntParameter("forum_id");
		boolean firstPost = false;

		boolean newTopic = this.request.getParameter("topic_id") == null;

		if (!this.anonymousPost(forumId) || !TopicsCommon.isTopicAccessible(forumId)
				|| this.isForumReadonly(forumId, newTopic)) {
			return;
		}

		TopicDAO topicDao = DataAccessDriver.getInstance().newTopicDAO();
		PostDAO postDao = DataAccessDriver.getInstance().newPostDAO();
		PollDAO pollDao = DataAccessDriver.getInstance().newPollDAO();
		ForumDAO forumDao = DataAccessDriver.getInstance().newForumDAO();
		
		Topic topic = new Topic(-1);
		if (!newTopic) {
			int topicId = this.request.getIntParameter("topic_id");

			topic = TopicRepository.getTopic(new Topic(topicId));
			if (topic == null) {
				topic = topicDao.selectById(topicId);
			}

			// Could not find the topic. The topicId sent was invalid
			if (topic == null || topic.getId() == 0) {
				newTopic = true;
			}
			else {
				// Cannot insert new messages on locked topics
				if (topic.getStatus() == Topic.STATUS_LOCKED) {
					this.topicLocked();
					return;
				}
			}
		}

		// We don't use "else if" here because there is a possibility of the
		// checking above set the newTopic var to true
		if (newTopic) {
			if (this.isReplyOnly(forumId)) {
				this.replyOnly();
				return;
			}

			if (this.request.getParameter("topic_type") != null) {
				topic.setType(this.request.getIntParameter("topic_type"));

				if (topic.getType() != Topic.TYPE_NORMAL 
						&& !SecurityRepository.canAccess(SecurityConstants.PERM_CREATE_STICKY_ANNOUNCEMENT_TOPICS)) {
					topic.setType(Topic.TYPE_NORMAL);
				}
			}
		}

		UserSession us = SessionFacade.getUserSession();
		User user = DataAccessDriver.getInstance().newUserDAO().selectById(us.getUserId());

		if ("1".equals(this.request.getParameter("quick")) && SessionFacade.isLogged()) {
			this.request.addParameter("notify", user.isNotifyOnMessagesEnabled() ? "1" : null);
			this.request.addParameter("attach_sig", user.isAttachSignatureEnabled() ? "1" : "0");
		}

		// Set the Post
		Post post = PostCommon.fillPostFromRequest();

		if (post.getText() == null || post.getText().trim().equals("")) {
			this.insert();
			return;
		}

		boolean isModerator = SessionFacade.getUserSession().isModerator(post.getForumId());

		// check for subject or body containing spam
		String error = validatePost(post);
        if (error != null && ! isModerator) {
            this.context.put("post", post);
            this.context.put("errorMessage", error);
            this.insert();
            return;
        }

		// Check the elapsed time since the last post from the user
		int delay = SystemGlobals.getIntValue(ConfigKeys.POSTS_NEW_DELAY);

		if (delay > 0) {
			Long lastPostTime = (Long)SessionFacade.getAttribute(ConfigKeys.LAST_POST_TIME);

			if (lastPostTime != null && (System.currentTimeMillis() < (lastPostTime.longValue() + delay))) {
				this.context.put("post", post);
				this.context.put("start", this.request.getParameter("start"));
				this.context.put("error", I18n.getMessage("PostForm.tooSoon"));
				this.insert();
				return;
			}
		}

		topic.setForumId(forumId);
		post.setForumId(forumId);

		if (StringUtils.isBlank(post.getSubject())) {
			post.setSubject(topic.getTitle());
		}

		boolean needCaptcha = User.needsCaptcha(us.getUserId())
			&& SystemGlobals.getBoolValue(ConfigKeys.CAPTCHA_POSTS)
			&& request.getSessionContext().getAttribute(ConfigKeys.REQUEST_IGNORE_CAPTCHA) == null;

		if (needCaptcha && !us.validateCaptchaResponse(this.request.getParameter("captcha_anwser"))) {
			this.context.put("post", post);
			this.context.put("start", this.request.getParameter("start"));
			this.context.put("error", I18n.getMessage("CaptchaResponseFails"));
			this.insert();
			return;
		}

		boolean preview = "1".equals(this.request.getParameter("preview"));

		if (!preview) {
			AttachmentCommon attachments = new AttachmentCommon(this.request, forumId);

			try {
				attachments.preProcess();
			}
			catch (AttachmentException e) {
				JForumExecutionContext.enableRollback();
				post.setText(this.request.getParameter("message"));
				post.setId(0);
				this.context.put("errorMessage", e.getMessage());
				this.context.put("post", post);
				this.insert();
				return;
			}

			Forum forum = ForumRepository.getForum(forumId);
			PermissionControl pc = SecurityRepository.get(us.getUserId());

			// Moderators and admins don't need to have their messages moderated
			boolean moderate = forum.isModerated() 
				&& !pc.canAccess(SecurityConstants.PERM_MODERATION)
				&& !pc.canAccess(SecurityConstants.PERM_ADMINISTRATION);

			if (newTopic) {
				topic.setTime(new Date());
				topic.setTitle(this.request.getParameter("subject"));
				topic.setModerated(moderate);
				topic.setPostedBy(user);
				topic.setFirstPostTime(topic.getTime());

				int topicId = topicDao.addNew(topic);
				topic.setId(topicId);
				firstPost = true;
			}

			if (!firstPost && pc.canAccess(
					SecurityConstants.PERM_REPLY_WITHOUT_MODERATION, Integer.toString(topic.getForumId()))) {
				moderate = false;
			}

			// Topic watch
			if (this.request.getParameter("notify") != null) {
				this.watch(topicDao, topic.getId(), user.getId());
			}

			post.setTopicId(topic.getId());

			// add a poll
			Poll poll = PollCommon.fillPollFromRequest();

			if (poll != null && newTopic) {
				poll.setTopicId(topic.getId());

				if (poll.getOptions().size() < 2) {
					//it is not a valid poll, cancel the post
					JForumExecutionContext.enableRollback();
					post.setText(this.request.getParameter("message"));
					post.setId(0);
					this.context.put("errorMessage", I18n.getMessage("PostForm.needMorePollOptions"));
					this.context.put("post", post);
					this.context.put("poll", poll);
					this.insert();
					return;
				}

				pollDao.addNew(poll);
				topic.setVoteId(poll.getId());
			}

			// Save the remaining stuff
			post.setModerate(moderate);
			post.setKarma(new KarmaStatus());
			int postId = postDao.addNew(post);

			if (newTopic) {
				topic.setFirstPostId(postId);
			}

			if (!moderate) {
				topic.setLastPostId(postId);
				topic.setLastPostBy(user);
				topic.setLastPostDate(post.getTime());
				topic.setLastPostTime(post.getTime());
			}

			topicDao.update(topic);

			attachments.insertAttachments(post);
			post.hasAttachments(attachments.getAttachments(post.getId(), forumId).size() > 0);
			topic.setHasAttach(topic.hasAttach()||post.hasAttachments());

			post.setTopicType(topic.getType());
			postDao.index(post);

			if (!moderate) {
				StringBuilder path = new StringBuilder(512);
				path.append(this.request.getContextPath()).append("/posts/list/");

				int start = ViewCommon.getStartPage();

				path.append(this.startPage(topic, start)).append('/')
					.append(topic.getId()).append(SystemGlobals.getValue(ConfigKeys.SERVLET_EXTENSION))
					.append("#p").append(postId);

				JForumExecutionContext.setRedirect(path.toString());

				if (newTopic) {
					// Notify "forum new topic" users
					ForumCommon.notifyUsers(forum, topic, post);
				}
				else {
					topic.setTotalReplies(topic.getTotalReplies() + 1);
					TopicsCommon.notifyUsers(topic, post);
				}

				// Update forum stats, cache and etc
				DataAccessDriver.getInstance().newUserDAO().incrementPosts(post.getUserId());

				TopicsCommon.updateBoardStatus(topic, postId, firstPost, topicDao, forumDao);
				ForumRepository.updateForumStats(topic, user, post);
				ForumRepository.reloadForum(post.getForumId());

				int anonymousUser = SystemGlobals.getIntValue(ConfigKeys.ANONYMOUS_USER_ID);

				if (user.getId() != anonymousUser) {
					SessionFacade.getTopicsReadTime().put(Integer.valueOf(topic.getId()),
						Long.valueOf(post.getTime().getTime()));
				}

				if (SystemGlobals.getBoolValue(ConfigKeys.POSTS_CACHE_ENABLED)) {
					PostRepository.append(post.getTopicId(), PostCommon.preparePostForDisplay(post));
				}
			}
			else {
				JForumExecutionContext.setRedirect(this.request.getContextPath() 
					+ "/posts/waitingModeration/" 
					+ (firstPost ? 0 : topic.getId())
					+ "/" + topic.getForumId()
					+ SystemGlobals.getValue(ConfigKeys.SERVLET_EXTENSION));
			}

			if (delay > 0) {
				SessionFacade.setAttribute(ConfigKeys.LAST_POST_TIME, Long.valueOf(System.currentTimeMillis()));
			}
		}
		else {
			this.context.put("preview", true);
			this.context.put("post", post);
			this.context.put("start", this.request.getParameter("start"));

			Post postPreview = new Post(post);
			this.context.put("postPreview", PostCommon.preparePostForDisplay(postPreview));

			this.insert();
		}
	}

	private int startPage(Topic topic, int currentStart) {
		int postsPerPage = SystemGlobals.getIntValue(ConfigKeys.POSTS_PER_PAGE);

		int newStart = (topic.getTotalReplies() + 1) / postsPerPage * postsPerPage;

		return newStart > currentStart ? newStart : currentStart;
	}

	public void delete()
	{
		if (!SecurityRepository.canAccess(SecurityConstants.PERM_MODERATION_POST_REMOVE)) {
			this.setTemplateName(TemplateKeys.POSTS_CANNOT_DELETE);
			this.context.put("message", I18n.getMessage("CannotRemovePost"));

			return;
		}

		// Post
		PostDAO postDao = DataAccessDriver.getInstance().newPostDAO();
		Post post = postDao.selectById(this.request.getIntParameter("post_id"));

		if (post.getId() == 0) {
			this.postNotFound();
			return;
		}

		TopicDAO topicDao = DataAccessDriver.getInstance().newTopicDAO();
		Topic topic = topicDao.selectRaw(post.getTopicId());

		if (!TopicsCommon.isTopicAccessible(topic.getForumId())) {
			return;
		}

		postDao.delete(post);

		// Karma
		KarmaDAO karmaDao = DataAccessDriver.getInstance().newKarmaDAO();
		karmaDao.deletePostKarma(post.getId());
		karmaDao.updateUserKarma(post.getUserId());

		// Attachments
		new AttachmentCommon(this.request, post.getForumId()).deleteAttachments(post.getId(), post.getForumId());

		// It was the last remaining post in the topic?
		int totalPosts = topicDao.getTotalPosts(post.getTopicId());

		if (totalPosts > 0) {
			// Topic
			topicDao.decrementTotalReplies(post.getTopicId());

			int maxPostId = topicDao.getMaxPostId(post.getTopicId());
			if (maxPostId > -1) {
				topicDao.setLastPostId(post.getTopicId(), maxPostId);
			}

			int minPostId = topicDao.getMinPostId(post.getTopicId());
			if (minPostId > -1) {
			  topicDao.setFirstPostId(post.getTopicId(), minPostId);
			}
	        
			// Forum
			ForumDAO fm = DataAccessDriver.getInstance().newForumDAO();

			maxPostId = fm.getMaxPostId(post.getForumId());
			if (maxPostId > -1) {
				fm.setLastPost(post.getForumId(), maxPostId);
			}

			String returnPath = this.request.getContextPath() + "/posts/list/";

			int page = ViewCommon.getStartPage();

			if (page > 0) {
				int postsPerPage = SystemGlobals.getIntValue(ConfigKeys.POSTS_PER_PAGE);

				if (totalPosts % postsPerPage == 0) {
					page -= postsPerPage;
				}

				returnPath = new StringBuilder(returnPath).append(page).append('/').toString();
			}

			JForumExecutionContext.setRedirect(returnPath 
				+ post.getTopicId() 
				+ SystemGlobals.getValue(ConfigKeys.SERVLET_EXTENSION));

			// Update the cache
			if (TopicRepository.isTopicCached(topic)) {
				topic = topicDao.selectById(topic.getId());
				TopicRepository.updateTopic(topic);
			}
		}
		else {
			// OK, all posts were removed. Time to say goodbye
			TopicsCommon.deleteTopic(post.getTopicId(), post.getForumId(), false);

			JForumExecutionContext.setRedirect(this.request.getContextPath() 
				+ "/forums/show/" 
				+ post.getForumId()
				+ SystemGlobals.getValue(ConfigKeys.SERVLET_EXTENSION));
		}

		this.request.addOrReplaceParameter("log_original_message", post.getText());
		ModerationHelper moderationHelper = new ModerationHelper();
		ModerationLog moderationLog = moderationHelper.buildModerationLogFromRequest();
		moderationLog.getPosterUser().setId(post.getUserId());
		moderationHelper.saveModerationLog(moderationLog);

		PostRepository.remove(topic.getId(), post);
		TopicRepository.loadMostRecentTopics();
		TopicRepository.loadHottestTopics();
		ForumRepository.reloadForum(post.getForumId());
	}

	private void watch(TopicDAO tm, int topicId, int userId)  
	{
		if (!tm.isUserSubscribed(topicId, userId)) {
			tm.subscribeUser(topicId, userId);
		}
	}

    public void watch()
    {
        if (!SessionFacade.isLogged()) {
            this.list();
        } else {
            int topicId = this.request.getIntParameter("topic_id");
            int userId = SessionFacade.getUserSession().getUserId();
            this.watch(DataAccessDriver.getInstance().newTopicDAO(), topicId, userId);

            if ("XMLHttpRequest".equals(this.request.getHeader("X-Requested-With"))) {
                this.setTemplateName(TemplateKeys.AJAX_JSON);
                this.context.put("json", "{\"message\":\"" + I18n.getMessage("ForumBase.topicWatched.ajax") + "\"}");
            } else {
                this.list();
            }
        }
    }

    public void unwatch()
    {
        if (!SessionFacade.isLogged()) {
        	this.setTemplateName(ViewCommon.contextToLogin());
        } else {
            int topicId = this.request.getIntParameter("topic_id");
            int userId = SessionFacade.getUserSession().getUserId();
            int start = ViewCommon.getStartPage();
            DataAccessDriver.getInstance().newTopicDAO().removeSubscription(topicId, userId);

            if ("XMLHttpRequest".equals(this.request.getHeader("X-Requested-With"))) {
                this.setTemplateName(TemplateKeys.AJAX_JSON);
                this.context.put("json", "{\"message\":\""+I18n.getMessage("ForumBase.topicUnwatched.ajax")+"\"}");
            } else {
                String returnPath = request.getContextPath() + "/posts/list/";
                if (start > 0)
                    returnPath += start + "/";
				returnPath += topicId + SystemGlobals.getValue(ConfigKeys.SERVLET_EXTENSION);

                this.setTemplateName(TemplateKeys.POSTS_UNWATCH);
                this.context.put("pageTitle", I18n.getMessage("PostShow.unwatch"));
                this.context.put("message", I18n.getMessage("ForumBase.unwatched", new String[] { returnPath }));
            }
        }
    }

	public void downloadAttach()
	{
		int id = this.request.getIntParameter("attach_id");

		if (!SessionFacade.isLogged() && !SystemGlobals.getBoolValue(ConfigKeys.ATTACHMENTS_ANONYMOUS)) {
			String referer = this.request.getHeader("Referer");

			if (referer != null) {
				this.setTemplateName(ViewCommon.contextToLogin(referer));
			}
			else {
				this.setTemplateName(ViewCommon.contextToLogin());
			}

			return;
		}

		AttachmentDAO am = DataAccessDriver.getInstance().newAttachmentDAO();
		Attachment a = am.selectAttachmentById(id);
		if (a == null) {
			this.setTemplateName(TemplateKeys.POSTS_ATTACH_NOTFOUND);
			this.context.put("message", I18n.getMessage("Attachments.notFound"));
			return;
		}

		PostDAO postDao = DataAccessDriver.getInstance().newPostDAO();
		Post post = postDao.selectById(a.getPostId());

		String forumId = Integer.toString(post.getForumId());

		boolean attachmentsEnabled = SecurityRepository.canAccess(SecurityConstants.PERM_ATTACHMENTS_ENABLED, forumId);
		boolean attachmentsDownload = SecurityRepository.canAccess(SecurityConstants.PERM_ATTACHMENTS_DOWNLOAD, forumId);

		if (!attachmentsEnabled && !attachmentsDownload) {
			this.setTemplateName(TemplateKeys.POSTS_CANNOT_DOWNLOAD);
			this.context.put("message", I18n.getMessage("Attachments.featureDisabled"));
			return;
		}

		String filename = SystemGlobals.getValue(ConfigKeys.ATTACHMENTS_STORE_DIR)
			+ "/"
			+ a.getInfo().getPhysicalFilename();

		if (!new File(filename).exists()) {
			this.setTemplateName(TemplateKeys.POSTS_ATTACH_NOTFOUND);
			this.context.put("message", I18n.getMessage("Attachments.notFound"));
			return;
		}

		try (FileInputStream fis = new FileInputStream(filename);
				OutputStream os = response.getOutputStream())
			{
			// the preview should not count for the download count
			if (this.request.getParameter("pv") == null) {
				a.getInfo().setDownloadCount(a.getInfo().getDownloadCount() + 1);
			}
			am.updateAttachment(a);

			if (am.isPhysicalDownloadMode(a.getInfo().getExtension().getExtensionGroupId())) {
				this.response.setContentType("application/octet-stream");
			}
			else {
				this.response.setContentType(a.getInfo().getMimetype());
			}

			if (this.request.getHeader("User-Agent").indexOf("Firefox") != -1) {
				this.response.setHeader("Content-Disposition", "attachment; filename=\""
					+ new String(a.getInfo().getRealFilename().getBytes(SystemGlobals.getValue(ConfigKeys.ENCODING)),
						SystemGlobals.getValue(ConfigKeys.DEFAULT_CONTAINER_ENCODING)) + "\";");
			}
			else {
				this.response.setHeader("Content-Disposition", "attachment; filename=\""
					+ ViewCommon.toUtf8String(a.getInfo().getRealFilename()) + "\";");
			}

			this.response.setContentLength((int)a.getInfo().getFilesize());

			int c;
			byte[] b = new byte[4096];
			while ((c = fis.read(b)) != -1) {
				os.write(b, 0, c);
			}


			JForumExecutionContext.enableCustomContent(true);
		}
		catch (IOException e) {
			throw new ForumException(e);
		}
	}

	private void cannotEdit()
	{
		this.setTemplateName(TemplateKeys.POSTS_EDIT_CANNOTEDIT);
		this.context.put("message", I18n.getMessage("CannotEditPost"));
	}

	private void topicLocked() 
	{
		this.setTemplateName(TemplateKeys.POSTS_TOPIC_LOCKED);
		this.context.put("message", I18n.getMessage("PostShow.topicLocked"));
	}

	public void listSmilies()
	{
		this.setTemplateName(TemplateKeys.POSTS_LIST_SMILIES);
		this.context.put("smilies", SmiliesRepository.getSmilies());
	}

	private boolean isForumReadonly(int forumId, boolean isReply) {
		if (!SecurityRepository.canAccess(SecurityConstants.PERM_READ_ONLY_FORUMS, Integer.toString(forumId))) {
			if (isReply) {
				this.list();
			}
			else {
				JForumExecutionContext.setRedirect(this.request.getContextPath() + "/forums/show/" + forumId
					+ SystemGlobals.getValue(ConfigKeys.SERVLET_EXTENSION));
			}

			return true;
		}

		return false;
	}

	private boolean anonymousPost(int forumId)  
	{
		// Check if anonymous posts are allowed
		if (!SessionFacade.isLogged()
				&& !SecurityRepository.canAccess(SecurityConstants.PERM_ANONYMOUS_POST, Integer.toString(forumId))) {
			this.setTemplateName(ViewCommon.contextToLogin());

			return false;
		}

		return true;
	}
}

../jforum2-code/src/main/java/net/jforum/view/forum/HottestTopicsAction.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Mar 02, 2007
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.view.forum;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import net.jforum.Command;
import net.jforum.JForumExecutionContext;
import net.jforum.dao.DataAccessDriver;
import net.jforum.dao.UserDAO;
import net.jforum.entities.Forum;
import net.jforum.entities.Topic;
import net.jforum.entities.User;
import net.jforum.repository.ForumRepository;
import net.jforum.repository.TopicRepository;
import net.jforum.util.I18n;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;
import net.jforum.util.preferences.TemplateKeys;
import net.jforum.util.stats.StatsEvent;
import net.jforum.view.forum.common.TopicsCommon;
import net.jforum.view.forum.common.ViewCommon;

/**
 * Display a list of hottest Topics
 * 
 * @author James Yong
 * @author Rafael Steil
 * @author Andowson Chang 
 */
public class HottestTopicsAction extends Command 
{
	private transient List<Forum> forums;

	@Override public void list()
	{
		final int postsPerPage = SystemGlobals.getIntValue(ConfigKeys.POSTS_PER_PAGE);

		this.setTemplateName(TemplateKeys.HOTTEST_LIST);

		this.context.put("postsPerPage", Integer.valueOf(postsPerPage));
		this.context.put("topics", this.topics());
		this.context.put("forums", this.forums);
		this.context.put("pageTitle", I18n.getMessage("ForumBase.hottestTopics"));

		TopicsCommon.topicListingBase();
		this.request.removeAttribute("template");
	}

	private List<Topic> topics()
	{
        new StatsEvent("Hot topics page", request.getRequestURL()).record();

		final int postsPerPage = SystemGlobals.getIntValue(ConfigKeys.POSTS_PER_PAGE);
		final List<Topic> tmpTopics = TopicRepository.loadHottestTopics();

		this.forums = new ArrayList<>(postsPerPage);

		for (final Iterator<Topic> iter = tmpTopics.iterator(); iter.hasNext(); ) {
			final Topic topic = iter.next();

			if (TopicsCommon.isTopicAccessible(topic.getForumId())) {
				// Get name of forum that the topic refers to
				final Forum forum = ForumRepository.getForum(topic.getForumId());
				forums.add(forum);
			}
			else {
				iter.remove();
			}
		}

		JForumExecutionContext.getRequest().removeAttribute("template");

		return TopicsCommon.prepareTopics(tmpTopics);
	}

	public void showTopicsByUser() 
	{
		final DataAccessDriver dad = DataAccessDriver.getInstance();

		final UserDAO udao = dad.newUserDAO();
		final User user = udao.selectById(this.request.getIntParameter("user_id"));

		if (user.getId() == 0) {
			this.context.put("message", I18n.getMessage("User.notFound"));
			this.setTemplateName(TemplateKeys.USER_NOT_FOUND);
			return;
		} 

		TopicsCommon.topicListingBase();

		final int start = ViewCommon.getStartPage();
		final int topicsPerPage = SystemGlobals.getIntValue(ConfigKeys.TOPICS_PER_PAGE);
		final int postsPerPage = SystemGlobals.getIntValue(ConfigKeys.POSTS_PER_PAGE);

		this.setTemplateName(TemplateKeys.HOTTEST_USER_TOPICS_SHOW);

		int totalTopics = dad.newTopicDAO().countUserTopics(user.getId());

		this.context.put("u", user);
		this.context.put("pageTitle", I18n.getMessage("ForumListing.userTopics") + " " + user.getUsername());

		this.context.put("postsPerPage", Integer.valueOf(postsPerPage));

		final List<Topic> topics = dad.newTopicDAO().selectByUserByLimit(user.getId(), start, topicsPerPage);

		final List<Topic> list = TopicsCommon.prepareTopics(topics);
		final Map<Integer, Forum> forums = new HashMap<>();

		for (final Iterator<Topic> iter = list.iterator(); iter.hasNext(); ) {
			final Topic topic = iter.next();

			final Forum forum = ForumRepository.getForum(topic.getForumId());

			if (forum == null) {
				iter.remove();
				totalTopics--;
				continue;
			}

			forums.put(Integer.valueOf(topic.getForumId()), forum);
		}

		this.context.put("topics", list);
		this.context.put("forums", forums);

		ViewCommon.contextToPagination(start, totalTopics, topicsPerPage);
	}
}

../jforum2-code/src/main/java/net/jforum/view/forum/PrivateMessageAction.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 20/05/2004 - 21:05:45
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.view.forum;

import java.util.List;

import net.jforum.Command;
import net.jforum.SessionFacade;
import net.jforum.dao.DataAccessDriver;
import net.jforum.dao.PrivateMessageDAO;
import net.jforum.dao.UserDAO;
import net.jforum.entities.Post;
import net.jforum.entities.PrivateMessage;
import net.jforum.entities.PrivateMessageType;
import net.jforum.entities.User;
import net.jforum.entities.UserSession;
import net.jforum.repository.SmiliesRepository;
import net.jforum.util.I18n;
import net.jforum.util.SafeHtml;
import net.jforum.util.concurrent.Executor;
import net.jforum.util.mail.EmailSenderTask;
import net.jforum.util.mail.PrivateMessageSpammer;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;
import net.jforum.util.preferences.TemplateKeys;
import net.jforum.util.stats.Stats;
import net.jforum.util.stats.StatsEvent;
import net.jforum.view.forum.common.PostCommon;
import net.jforum.view.forum.common.ViewCommon;

/**
 * @author Rafael Steil
 */
public class PrivateMessageAction extends Command
{
	public void inbox()
	{
		if (!SessionFacade.isLogged()) {
			this.setTemplateName(ViewCommon.contextToLogin());
			return;
		}
		
		User user = new User();
		user.setId(SessionFacade.getUserSession().getUserId());

 		int postsPerPage = SystemGlobals.getIntValue(ConfigKeys.POSTS_PER_PAGE);
 		int start = ViewCommon.getStartPage();
 		
 		PrivateMessageDAO pmdao = DataAccessDriver.getInstance().newPrivateMessageDAO();
 		
 		int totalMessages = pmdao.getTotalInbox(user.getId());
 		
 		List<PrivateMessage> pmList = pmdao.selectFromInbox(user.getId(), start, postsPerPage);

		this.setTemplateName(TemplateKeys.PM_INBOX);
		this.context.put("inbox", true);
		this.context.put("pmList", pmList);
		this.context.put("pageTitle", I18n.getMessage("ForumBase.privateMessages")+" "+I18n.getMessage("PrivateMessage.inbox"));
		this.putTypes();		
 
 		ViewCommon.contextToPagination(start, totalMessages, postsPerPage);
 		this.context.put("postsPerPage", Integer.valueOf(postsPerPage));

		new StatsEvent("PM inbox page", request.getRequestURL()).record();
	}
	
	public void sentbox()
	{
		if (!SessionFacade.isLogged()) {
			this.setTemplateName(ViewCommon.contextToLogin());
			return;
		}
		
		User user = new User();
		user.setId(SessionFacade.getUserSession().getUserId());
		
		int postsPerPage = SystemGlobals.getIntValue(ConfigKeys.POSTS_PER_PAGE);
		int start = ViewCommon.getStartPage();
		
		PrivateMessageDAO pmdao = DataAccessDriver.getInstance().newPrivateMessageDAO();
		
		int totalMessages = pmdao.getTotalSent(user.getId());
		
		List<PrivateMessage> pmList = DataAccessDriver.getInstance().newPrivateMessageDAO().selectFromSent(user.getId(), start, postsPerPage);

		this.context.put("sentbox", true);
		this.context.put("pmList", pmList);
		this.setTemplateName(TemplateKeys.PM_SENTBOX);
		this.context.put("pageTitle", I18n.getMessage("ForumBase.privateMessages")+" "+I18n.getMessage("PrivateMessage.sentbox"));
		this.putTypes();

		ViewCommon.contextToPagination(start, totalMessages, postsPerPage);
		this.context.put("postsPerPage", Integer.valueOf(postsPerPage));

		new StatsEvent("PM sent page", request.getRequestURL()).record();
	}

	private void putTypes()
	{
		this.context.put("NEW", Integer.valueOf(PrivateMessageType.NEW));
		this.context.put("READ", Integer.valueOf(PrivateMessageType.READ));
		this.context.put("UNREAD", Integer.valueOf(PrivateMessageType.UNREAD));
	}

	public void send() 
	{
		if (!SessionFacade.isLogged()) {
			this.setTemplateName(ViewCommon.contextToLogin());
			return;
		}

		User user = DataAccessDriver.getInstance().newUserDAO().selectById(SessionFacade.getUserSession().getUserId());

		ViewCommon.prepareUserSignature(user);

		this.sendFormCommon(user);
	}

	public void sendTo()
	{
		if (!SessionFacade.isLogged()) {
			this.setTemplateName(ViewCommon.contextToLogin());
			return;
		}
		
		User user = DataAccessDriver.getInstance().newUserDAO().selectById(SessionFacade.getUserSession().getUserId());

		int userId = this.request.getIntParameter("user_id");

		if (userId > 0){
			User recipient = DataAccessDriver.getInstance().newUserDAO().selectById(userId);

			this.context.put("pmRecipient", recipient);
			this.context.put("toUserId", Integer.valueOf(recipient.getId()));
			this.context.put("toUsername", recipient.getUsername());
			this.context.put("pageTitle", I18n.getMessage("PrivateMessage.title") 
				+ " " + I18n.getMessage("PrivateMessage.to") 
				+ " " + recipient.getUsername());
		}

		this.sendFormCommon(user);
	}
	
	private void sendFormCommon(User user)
	{
		this.setTemplateName(TemplateKeys.PM_SENDFORM);
		
		this.context.put("user", user);
		this.context.put("moduleName", "pm");
		this.context.put("action", "sendSave");
		this.context.put("htmlAllowed", true);
		this.context.put("attachmentsEnabled", false);
		this.context.put("maxAttachments", SystemGlobals.getValue(ConfigKeys.ATTACHMENTS_MAX_POST));
		this.context.put("maxAttachmentsSize", Integer.valueOf(0));
		this.context.put("moderationLoggingEnabled", false);
		this.context.put("smilies", SmiliesRepository.getSmilies());
	}
	
	public void sendSave()
	{
		if (!SessionFacade.isLogged()) {
			this.setTemplateName(ViewCommon.contextToLogin());
			return;
		}
		
		UserDAO userDao = DataAccessDriver.getInstance().newUserDAO();
		
		String toUserIdStr = this.request.getParameter("toUserId");
		String toUsername = this.request.getParameter("toUsername");

		int toUserId = -1;
		
		// If we don't have a user id, then probably the user
		// inserted the username by hand in the form's field
		if (toUserIdStr == null || "".equals(toUserIdStr.trim())) {
			List<User> list = userDao.findByName(toUsername, true);
			
			if (!list.isEmpty()) {
				User user = list.get(0);
				toUserId = user.getId();
			}
		}
		else {
			toUserId = Integer.parseInt(toUserIdStr);
		}
		
		// We failed to get the user id?
		if (toUserId == -1) {
			this.setTemplateName(TemplateKeys.PM_SENDSAVE_USER_NOTFOUND);
			this.context.put("message", I18n.getMessage("PrivateMessage.userIdNotFound"));
			return;
		}

		PrivateMessage pm = new PrivateMessage();
		pm.setPost(PostCommon.fillPostFromRequest());

		// Sender
		User fromUser = new User();
		fromUser.setId(SessionFacade.getUserSession().getUserId());
		pm.setFromUser(fromUser);

		// Recipient
		User toUser = userDao.selectById(toUserId);
		pm.setToUser(toUser);

		boolean preview = "1".equals(this.request.getParameter("preview"));

		if (preview) {
			this.context.put("preview", true);
			this.context.put("post", pm.getPost());
			
			Post postPreview = new Post(pm.getPost());
			this.context.put("postPreview", PostCommon.preparePostForDisplay(postPreview));
			this.context.put("pm", pm);

			this.send();			
		}
		else {
			// Check the elapsed time since the last post (or private message) from the user
			int delay = SystemGlobals.getIntValue(ConfigKeys.POSTS_NEW_DELAY);

			if (delay > 0) {
				Long lastPostTime = (Long) SessionFacade.getAttribute(ConfigKeys.LAST_POST_TIME);

				if (lastPostTime != null && (System.currentTimeMillis() < (lastPostTime.longValue() + delay))) {
					this.setTemplateName(TemplateKeys.PM_SENDSAVE_USER_NOTFOUND);
					this.context.put("message", I18n.getMessage("PostForm.tooSoon"));
					return;
				}
			}

            DataAccessDriver.getInstance().newPrivateMessageDAO().send(pm);

			this.setTemplateName(TemplateKeys.PM_SENDSAVE);
			this.context.put("message", I18n.getMessage("PrivateMessage.messageSent", 
				new String[] { this.request.getContextPath() 
					+ "/pm/inbox"
					+ SystemGlobals.getValue(ConfigKeys.SERVLET_EXTENSION)}));

			// If the target user is in the forum, then increment his private message count
			UserSession.changeOnUser(toUser.getId(), us -> us.setPrivateMessages(us.getPrivateMessages() + 1));

			if (toUser.getEmail() != null 
				&& toUser.getEmail().trim().length() > 0
				&& SystemGlobals.getBoolValue(ConfigKeys.MAIL_NOTIFY_ANSWERS)) {
				Executor.execute(new EmailSenderTask(new PrivateMessageSpammer(toUser)));
			}

			new StatsEvent(Stats.ForbidDetailDisplay.SENT_PMS.toString(),
					"From " + pm.getFromUser().getUsername() +
					" to " + pm.getToUser().getUsername()).record();

			if (delay > 0) {
				SessionFacade.setAttribute(ConfigKeys.LAST_POST_TIME, Long.valueOf(System.currentTimeMillis()));
			}
		}
	}

	public void findUser()
	{
		boolean showResult = false;
		String username = SafeHtml.makeSafe(this.request.getParameter("username"));

		if (username != null && !username.equals("")) {
			List<User> namesList = DataAccessDriver.getInstance().newUserDAO().findByName(username, false);
			this.context.put("namesList", namesList);
			showResult = true;
		}

		this.setTemplateName(TemplateKeys.PM_FIND_USER);
		
		this.context.put("username", username);
		this.context.put("showResult", showResult);
	}
	
	public void read()
	{
		if (!SessionFacade.isLogged()) {
			this.setTemplateName(ViewCommon.contextToLogin());
			return;
		}
		
		int id = this.request.getIntParameter("id");
		
		PrivateMessage pm = new PrivateMessage();
		pm.setId(id);
		
		pm = DataAccessDriver.getInstance().newPrivateMessageDAO().selectById(pm);
		
		// Don't allow the read of messages that don't belongs to the current user
		UserSession us = SessionFacade.getUserSession();
		int userId = us.getUserId();
		
		if (pm.getToUser().getId() == userId || pm.getFromUser().getId() == userId) {
			pm.getPost().setText(PostCommon.preparePostForDisplay(pm.getPost()).getText());
			
			// Update the message status, if needed
			if (pm.getType() == PrivateMessageType.NEW) {
				pm.setType(PrivateMessageType.READ);
				DataAccessDriver.getInstance().newPrivateMessageDAO().updateType(pm);
				
				int totalMessages = us.getPrivateMessages();

				if (totalMessages > 0) {
					UserSession.changeOnUser(us.getUserId(), uSession -> uSession.setPrivateMessages(totalMessages - 1));
				}
			}
			
			User user = pm.getFromUser();
			ViewCommon.prepareUserSignature(user);
            
			this.context.put("pm", pm);
			this.setTemplateName(TemplateKeys.PM_READ);
		}
		else {
			this.setTemplateName(TemplateKeys.PM_READ_DENIED);
			this.context.put("message", I18n.getMessage("PrivateMessage.readDenied"));
		}
	}
	
	public void review()
	{
		this.read();
		this.setTemplateName(TemplateKeys.PM_READ_REVIEW);
	}
	
	public void delete()
	{
		if (!SessionFacade.isLogged()) {
			this.setTemplateName(ViewCommon.contextToLogin());
			return;
		}
		
		String ids[] = this.request.getParameterValues("id");
		
		if (ids != null && ids.length > 0) {
			PrivateMessage[] deleteList = new PrivateMessage[ids.length];
			
			int unreadCount = 0;
			PrivateMessageDAO dao = DataAccessDriver.getInstance().newPrivateMessageDAO();
			
			for (int i = 0; i < ids.length; i++) {
				PrivateMessage pm = dao.selectById(new PrivateMessage(Integer.parseInt(ids[i])));
				
				if (pm.getType() == PrivateMessageType.NEW) {
					unreadCount++;
				}
				
				deleteList[i] = pm;
			}

			UserSession us = SessionFacade.getUserSession();

			dao.delete(deleteList, us.getUserId());

			// Subtracts the number of deleted messages
			final int total = (us.getPrivateMessages() - unreadCount < 0) ? 0 : (us.getPrivateMessages() - unreadCount);

			UserSession.changeOnUser(us.getUserId(), uSession -> us.setPrivateMessages(total));
		}

		this.setTemplateName(TemplateKeys.PM_DELETE);
		this.context.put("message", I18n.getMessage("PrivateMessage.deleteDone", 
			new String[] { this.request.getContextPath() 
				+ "/pm/inbox"
				+ SystemGlobals.getValue(ConfigKeys.SERVLET_EXTENSION) }));
	}
	
	public void reply()
	{
		if (!SessionFacade.isLogged()) {
			this.setTemplateName(ViewCommon.contextToLogin());
			return;
		}
		
		int id = this.request.getIntParameter("id");
		
		PrivateMessage pm = new PrivateMessage();
		pm.setId(id);
		pm = DataAccessDriver.getInstance().newPrivateMessageDAO().selectById(pm);
		
		int userId = SessionFacade.getUserSession().getUserId();
		
		if (pm.getToUser().getId() != userId && pm.getFromUser().getId() != userId) {
			this.setTemplateName(TemplateKeys.PM_READ_DENIED);
			this.context.put("message", I18n.getMessage("PrivateMessage.readDenied"));
			return;
		}
		
		pm.getPost().setSubject(I18n.getMessage("PrivateMessage.replyPrefix") + pm.getPost().getSubject());
		
		this.context.put("pm", pm);
		this.context.put("pmReply", true);
		
		this.sendFormCommon(DataAccessDriver.getInstance().newUserDAO().selectById(
				SessionFacade.getUserSession().getUserId()));
	}
	
	public void quote()
	{
		if (!SessionFacade.isLogged()) {
			this.setTemplateName(ViewCommon.contextToLogin());
			return;
		}
		
		int id = this.request.getIntParameter("id");
		
		PrivateMessage pm = new PrivateMessage();
		pm.setId(id);
		pm = DataAccessDriver.getInstance().newPrivateMessageDAO().selectById(pm);

		int userId = SessionFacade.getUserSession().getUserId();
		
		if (pm.getToUser().getId() != userId && pm.getFromUser().getId() != userId) {
			this.setTemplateName(TemplateKeys.PM_READ_DENIED);
			this.context.put("message", I18n.getMessage("PrivateMessage.readDenied"));
			return;
		}
		
		pm.getPost().setSubject(I18n.getMessage("PrivateMessage.replyPrefix") + pm.getPost().getSubject());
		
		this.sendFormCommon(DataAccessDriver.getInstance().newUserDAO().selectById(userId));
		
		this.context.put("quote", "true");
		this.context.put("quoteUser", pm.getFromUser().getUsername());
		this.context.put("post", pm.getPost());
		this.context.put("pm", pm);
	}
	
	/** 
	 * @see net.jforum.Command#list()
	 */
	@Override public void list()
	{
		this.inbox();
	}
}

../jforum2-code/src/main/java/net/jforum/view/forum/ModerationHelper.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms,
 * with or without modification, are permitted provided
 * that the following conditions are met:
 *
 * 1) Redistributions of source code must retain the above
 * copyright notice, this list of conditions and the
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the
 * above copyright notice, this list of conditions and
 * the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor
 * the names of its contributors may be used to endorse
 * or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
 * IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 *
 * Created on 10/03/2004 - 18:43:12
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.view.forum;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.apache.log4j.Logger;

import freemarker.template.SimpleHash;
import net.jforum.JForumExecutionContext;
import net.jforum.SessionFacade;
import net.jforum.context.RequestContext;
import net.jforum.dao.DataAccessDriver;
import net.jforum.dao.ForumDAO;
import net.jforum.dao.ModerationLogDAO;
import net.jforum.dao.TopicDAO;
import net.jforum.entities.Forum;
import net.jforum.entities.ModerationLog;
import net.jforum.entities.Topic;
import net.jforum.entities.User;
import net.jforum.repository.ForumRepository;
import net.jforum.repository.PostRepository;
import net.jforum.repository.SecurityRepository;
import net.jforum.repository.TopicRepository;
import net.jforum.security.SecurityConstants;
import net.jforum.util.I18n;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;
import net.jforum.util.preferences.TemplateKeys;
import net.jforum.view.forum.common.ForumCommon;

/**
 * @author Rafael Steil
 */
public class ModerationHelper
{
	private static final Logger LOGGER = Logger.getLogger(ModerationHelper.class);

	public static final int SUCCESS = 1;
	public static final int FAILURE = 2;
	public static final int IGNORE = 3;

	public int doModeration(String returnUrl)
	{
		int status = FAILURE;

		if (SecurityRepository.canAccess(SecurityConstants.PERM_MODERATION)) {
			// Deleting topics
			RequestContext request = JForumExecutionContext.getRequest();

			if (request.getParameter("topicRemove") != null) {
				if (SecurityRepository.canAccess(SecurityConstants.PERM_MODERATION_POST_REMOVE)) {
					this.removeTopics();

					status = SUCCESS;
				}
			}
			else if (request.getParameter("topicMove") != null) {
				if (SecurityRepository.canAccess(SecurityConstants.PERM_MODERATION_TOPIC_MOVE)) {
					this.moveTopics();

					status = IGNORE;
				}
			}
			else if (request.getParameter("topicLock") != null) {
				if (SecurityRepository.canAccess(SecurityConstants.PERM_MODERATION_TOPIC_LOCK_UNLOCK)) {
					this.lockUnlockTopics(Topic.STATUS_LOCKED);

					status = SUCCESS;
				}
			}
			else if (request.getParameter("topicUnlock") != null) {
				if (SecurityRepository.canAccess(SecurityConstants.PERM_MODERATION_TOPIC_LOCK_UNLOCK)) {
					this.lockUnlockTopics(Topic.STATUS_UNLOCKED);

					status = SUCCESS;
				}
			}
		}

		if (status == ModerationHelper.FAILURE) {
			this.denied();
		}
		else if (status == ModerationHelper.SUCCESS && returnUrl != null) {
			JForumExecutionContext.setRedirect(returnUrl);
		}

		return status;
	}

	public void saveModerationLog(ModerationLog log)
	{
		ModerationLogDAO dao = DataAccessDriver.getInstance().newModerationLogDAO();
		dao.add(log);
	}

	public ModerationLog buildModerationLogFromRequest()
	{
		RequestContext request = JForumExecutionContext.getRequest();

		ModerationLog log = new ModerationLog();

		User user = new User();
		user.setId(SessionFacade.getUserSession().getUserId());
		log.setUser(user);

		log.setDescription(request.getParameter("log_description"));
		log.setOriginalMessage(request.getParameter("log_original_message"));
		log.setType(request.getIntParameter("log_type"));

		if (request.getParameter("post_id") != null) {
			log.setPostId(request.getIntParameter("post_id"));
		}

		String[] values = request.getParameterValues("topic_id");

		if (values != null && values.length == 1) {
			log.setTopicId(request.getIntParameter("topic_id"));
		}

		return log;
	}

	public int doModeration()
	{
		return this.doModeration(null);
	}

	private void removeTopics()
	{
		String[] topics = JForumExecutionContext.getRequest().getParameterValues("topic_id");

		List<Integer> forumsList = new ArrayList<>();
		TopicDAO tm = DataAccessDriver.getInstance().newTopicDAO();
		ForumDAO fm = DataAccessDriver.getInstance().newForumDAO();

		List<Topic> topicsToDelete = new ArrayList<>();

		// if there's a trash can forum, deleting means moving to that forum, without leaving a forwarding marker
		int trashForumId = SystemGlobals.getIntValue(ConfigKeys.FORUM_TRASHCAN);
		boolean move = trashForumId > 0;

		if (topics != null && topics.length > 0) {
			ModerationLog log = this.buildModerationLogFromRequest();
			if (move) {
				log.setDescription("-");
				log.setType(4); // composted
			}

			for (int i = 0; i < topics.length; i++) {
				Topic topic = tm.selectRaw(Integer.parseInt(topics[i]));

				log.setTopicId(topic.getId());
				log.setPosterUser(topic.getPostedBy());
				Forum forum = ForumRepository.getForum(topic.getForumId());
				if (forum != null) {
					log.setOriginalMessage(forum.getName()+": \""+topic.getTitle()+"\"");
				} else {
					log.setOriginalMessage(I18n.getMessage("Config.Form.Forum")+" #"+topic.getForumId()+": \""+topic.getTitle()+"\"");
				}

				this.saveModerationLog(log);

				// ??? shouldn't all forum IDs be the same?
				if (!forumsList.contains(Integer.valueOf(topic.getForumId()))) {
					forumsList.add(Integer.valueOf(topic.getForumId()));
				}

				topicsToDelete.add(topic);
				PostRepository.clearCache(topic.getId());
			}

			if (move) {
				fm.moveTopics(topics, forumsList.get(0), trashForumId, false);
			}
			else {
				tm.deleteTopics(topicsToDelete, false);
			}

			TopicRepository.loadMostRecentTopics();
			TopicRepository.loadHottestTopics();

			// Reload changed forums
			for (Iterator<Integer> iter = forumsList.iterator(); iter.hasNext(); ) {
				int forumId = iter.next().intValue();

				TopicRepository.clearCache(forumId);

				int postId = fm.getMaxPostId(forumId);

				if (postId > -1) {
					fm.setLastPost(forumId, postId);
				}
				else {
					LOGGER.warn("Could not find last post id for forum " + forumId);
				}

				ForumRepository.reloadForum(forumId);
			}

			// reload trash forum
			if (move) {
				TopicRepository.clearCache(trashForumId);
				ForumRepository.reloadForum(trashForumId);
			}
		}
	}

	private void lockUnlockTopics(int status)
	{
		String[] topics = JForumExecutionContext.getRequest().getParameterValues("topic_id");

		if (topics != null && topics.length > 0) {
			int[] ids = new int[topics.length];

			ModerationLog log = this.buildModerationLogFromRequest();

			for (int i = 0; i < topics.length; i++) {
				ids[i] = Integer.parseInt(topics[i]);
				log.setTopicId(ids[i]);
				this.saveModerationLog(log);
			}

			DataAccessDriver.getInstance().newTopicDAO().lockUnlock(ids, status);

			// Clear the cache
			Topic topic = DataAccessDriver.getInstance().newTopicDAO().selectById(ids[0]);
			TopicRepository.clearCache(topic.getForumId());
		}
	}

	private void moveTopics()
	{
		SimpleHash context = JForumExecutionContext.getTemplateContext();

		context.put("persistData", JForumExecutionContext.getRequest().getParameter("persistData"));
		context.put("allCategories", ForumCommon.getAllCategoriesAndForums(false));

		String[] topics = JForumExecutionContext.getRequest().getParameterValues("topic_id");

		if (topics.length > 0) {
			// If forum_id is null, get from the database
			String forumId = JForumExecutionContext.getRequest().getParameter("forum_id");

			if (forumId == null) {
				int topicId = Integer.parseInt(topics[0]);

				Topic topic = TopicRepository.getTopic(new Topic(topicId));

				if (topic == null) {
					topic = DataAccessDriver.getInstance().newTopicDAO().selectRaw(topicId);
				}

				forumId = Integer.toString(topic.getForumId());
			}

			context.put("forum_id", forumId);

			StringBuilder sb = new StringBuilder(128);

			for (int i = 0; i < topics.length - 1; i++) {
				sb.append(topics[i]).append(',');
			}

			sb.append(topics[topics.length - 1]);

			context.put("topics", sb.toString());
		}
	}

	public int moveTopicsSave(String successUrl)
	{
		int status = SUCCESS;

		if (!SecurityRepository.canAccess(SecurityConstants.PERM_MODERATION_TOPIC_MOVE)) {
			status = FAILURE;
		}
		else {
			RequestContext request = JForumExecutionContext.getRequest();
			String topics = request.getParameter("topics");

			if (topics != null) {
				int fromForumId = Integer.parseInt(request.getParameter("forum_id"));
				int toForumId = Integer.parseInt(request.getParameter("to_forum"));

				String[] topicList = topics.split(",");

				DataAccessDriver.getInstance().newForumDAO().moveTopics(topicList, fromForumId, toForumId, true);

				ModerationLog log = this.buildModerationLogFromRequest();

				for (int i = 0; i < topicList.length; i++) {
					int topicId = Integer.parseInt(topicList[i]);
					log.setTopicId(topicId);
					this.saveModerationLog(log);
				}

				ForumRepository.reloadForum(fromForumId);
				ForumRepository.reloadForum(toForumId);

				TopicRepository.clearCache(fromForumId);
				TopicRepository.clearCache(toForumId);

				TopicRepository.loadMostRecentTopics();
				TopicRepository.loadHottestTopics();
			}
		}

		if (status == FAILURE) {
			this.denied();
		}
		else {
			this.moderationDone(successUrl);
		}

		return status;
	}

	public String moderationDone(String redirectUrl)
	{
		JForumExecutionContext.getRequest().setAttribute("template", TemplateKeys.MODERATION_DONE);
		JForumExecutionContext.getTemplateContext().put("message", I18n.getMessage("Moderation.ModerationDone", new String[] { redirectUrl }));

		return TemplateKeys.MODERATION_DONE;
	}

	public void denied()
	{
		this.denied(I18n.getMessage("Moderation.Denied"));
	}

	public void denied(String message)
	{
		JForumExecutionContext.getRequest().setAttribute("template", TemplateKeys.MODERATION_DENIED);
		JForumExecutionContext.getTemplateContext().put("message", message);
	}
}

../jforum2-code/src/main/java/net/jforum/view/forum/ForumAction.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Apr 24, 2003 / 10:15:07 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.view.forum;

import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import net.jforum.Command;
import net.jforum.JForumExecutionContext;
import net.jforum.SessionFacade;
import net.jforum.dao.DataAccessDriver;
import net.jforum.dao.ForumDAO;
import net.jforum.dao.ModerationDAO;
import net.jforum.dao.UserDAO;
import net.jforum.entities.Forum;
import net.jforum.entities.Topic;
import net.jforum.entities.TopicModerationInfo;
import net.jforum.entities.User;
import net.jforum.entities.UserSession;
import net.jforum.repository.ForumRepository;
import net.jforum.repository.SecurityRepository;
import net.jforum.security.SecurityConstants;
import net.jforum.util.I18n;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;
import net.jforum.util.preferences.TemplateKeys;
import net.jforum.util.stats.StatsEvent;
import net.jforum.view.admin.ModerationAction;
import net.jforum.view.forum.common.ForumCommon;
import net.jforum.view.forum.common.PostCommon;
import net.jforum.view.forum.common.TopicsCommon;
import net.jforum.view.forum.common.ViewCommon;

/**
 * @author Rafael Steil
 */
public class ForumAction extends Command
{
	/**
	 * List all the forums (first page of forum index)
	 */
	@Override public void list()
	{
		this.setTemplateName(TemplateKeys.FORUMS_LIST);

		this.context.put("allCategories", ForumCommon.getAllCategoriesAndForums(true));
		this.context.put("topicsPerPage", Integer.valueOf(SystemGlobals.getIntValue(ConfigKeys.TOPICS_PER_PAGE)));
		this.context.put("postsPerPage", Integer.valueOf(SystemGlobals.getIntValue(ConfigKeys.POSTS_PER_PAGE)));
		this.context.put("forumTrashcan", Integer.valueOf(SystemGlobals.getIntValue(ConfigKeys.FORUM_TRASHCAN)));

		this.context.put("totalMessages", Integer.valueOf(ForumRepository.getTotalMessages()));
		this.context.put("totalRegisteredUsers", ForumRepository.totalUsers());
		this.context.put("lastUser", ForumRepository.lastRegisteredUser());

		GregorianCalendar gc = new GregorianCalendar();
		this.context.put("now", ViewCommon.formatDatePatternOnly(gc.getTime()));
		this.context.put("forumRepository", new ForumRepository());

		// Online Users
		this.context.put("showOnline", SystemGlobals.getBoolValue(ConfigKeys.ONLINE_SHOW));
		this.context.put("totalOnlineUsers", Integer.valueOf(SessionFacade.size()));
		int aid = SystemGlobals.getIntValue(ConfigKeys.ANONYMOUS_USER_ID);

		List<UserSession> onlineUsersList = SessionFacade.getLoggedSessions();

		// Check for an optional language parameter
		UserSession currentUser = SessionFacade.getUserSession();
		if (currentUser.getUserId() == aid) {
			String lang = this.request.getParameter("lang");

			if (lang != null && I18n.languageExists(lang)) {
				currentUser.setLang(lang);
			}
		}

		UserDAO userDao = DataAccessDriver.getInstance().newUserDAO();

		User user = userDao.selectById(currentUser.getUserId());
		// If the user is a first-time visitor, set the last visit to NOW 
		if (user.getLastVisit() == null) {
			user.setLastVisit(new Date());
		}
		this.context.put("lastVisit", ViewCommon.formatDate(user.getLastVisit()));
		// update the time of the last visit to NOW
		userDao.updateLastVisit(currentUser.getUserId(), new Date());

		// If there are only guest users, then just register a single one.
		// In any other situation, we do not show the "guest" username
		if (onlineUsersList.isEmpty()) {
			UserSession us = new UserSession();

			us.setUserId(aid);
			us.setUsername(I18n.getMessage("Guest"));
			us.setStartTime(new Date(System.currentTimeMillis()));

			onlineUsersList.add(us);
		}

		int registeredSize = SessionFacade.registeredSize();
		int anonymousSize = SessionFacade.anonymousSize();
		int totalOnlineUsers = registeredSize + anonymousSize;

		this.context.put("userSessions", onlineUsersList);
		this.context.put("totalOnlineUsers", Integer.valueOf(totalOnlineUsers));
		this.context.put("totalRegisteredOnlineUsers", Integer.valueOf(registeredSize));
		this.context.put("totalAnonymousUsers", Integer.valueOf(anonymousSize));

        new StatsEvent("Show index page", "").record();
	}

	public void moderation()
	{
		this.context.put("openModeration", true);
		this.show();
	}

	/**
	 * Display all topics in a forum
	 */
	public void show()
	{
		int forumId = this.request.getIntParameter("forum_id");
		ForumDAO fm = DataAccessDriver.getInstance().newForumDAO();

		// The user can access this forum?
		Forum forum = ForumRepository.getForum(forumId);

		if (forum == null || !ForumRepository.isCategoryAccessible(forum.getCategoryId())) {
			new ModerationHelper().denied(I18n.getMessage("ForumListing.denied"));
			return;
		}

		int start = ViewCommon.getStartPage();

		List<Topic> tmpTopics = TopicsCommon.topicsByForum(forumId, start);

		this.setTemplateName(TemplateKeys.FORUMS_SHOW);

		// Moderation
		UserSession userSession = SessionFacade.getUserSession();
		boolean isLogged = SessionFacade.isLogged();
		boolean isModerator = userSession.isModerator(forumId);

		boolean canApproveMessages = (isLogged && isModerator 
			&& SecurityRepository.canAccess(SecurityConstants.PERM_MODERATION_APPROVE_MESSAGES));

		Map<Integer, TopicModerationInfo> topicsToApprove = new HashMap<>();

		if (canApproveMessages) {
			ModerationDAO mdao = DataAccessDriver.getInstance().newModerationDAO();
			topicsToApprove = mdao.topicsByForum(forumId);
			this.context.put("postFormatter", new PostCommon());
		}

		this.context.put("topicsToApprove", topicsToApprove);

		this.context.put("attachmentsEnabled", SecurityRepository.canAccess(SecurityConstants.PERM_ATTACHMENTS_ENABLED,
		        Integer.toString(forumId))
		        || SecurityRepository.canAccess(SecurityConstants.PERM_ATTACHMENTS_DOWNLOAD));

		this.context.put("topics", TopicsCommon.prepareTopics(tmpTopics));
		this.context.put("allCategories", ForumCommon.getAllCategoriesAndForums(false));
        this.context.put("category", ForumRepository.getCategory(forum.getCategoryId()));
		this.context.put("forum", forum);
		this.context.put("pageTitle", forum.getName());
		this.context.put("canApproveMessages", canApproveMessages);
		this.context.put("replyOnly", !SecurityRepository.canAccess(SecurityConstants.PERM_REPLY_ONLY, Integer.toString(forum.getId())));

		this.context.put("readonly", !SecurityRepository.canAccess(SecurityConstants.PERM_READ_ONLY_FORUMS, Integer.toString(forumId)));

		this.context.put("watching", fm.isUserSubscribed(forumId, userSession.getUserId()));

		// Pagination
		int topicsPerPage = SystemGlobals.getIntValue(ConfigKeys.TOPICS_PER_PAGE);
		int postsPerPage = SystemGlobals.getIntValue(ConfigKeys.POSTS_PER_PAGE);
		int totalTopics = forum.getTotalTopics();

		ViewCommon.contextToPagination(start, totalTopics, topicsPerPage);
		this.context.put("postsPerPage", Integer.valueOf(postsPerPage));

		TopicsCommon.topicListingBase();
		this.context.put("moderator", isLogged && isModerator);
        new StatsEvent("Show forum listing", request.getRequestURL()).record();
	}

	// Make a URL to some action
	private String makeRedirect(String action)
	{
		String path = this.request.getContextPath() + "/forums/" + action + "/";
		String thisPage = this.request.getParameter("start");

		if (thisPage != null && !thisPage.equals("0")) {
			path = new StringBuilder(path).append(thisPage).append('/').toString();
		}

		String forumId = this.request.getParameter("forum_id");

		if (forumId == null) {
			forumId = this.request.getParameter("persistData");
		}

		path = new StringBuilder(path).append(forumId).append(SystemGlobals.getValue(ConfigKeys.SERVLET_EXTENSION)).toString();

		return path;
	}

	// Mark all topics as read
	public void readAll()
	{
		String forumId = this.request.getParameter("forum_id");

		if (forumId != null) {
			Map<Integer, Long> tracking = SessionFacade.getTopicsReadTimeByForum();

			if (tracking == null) {
				tracking = new ConcurrentHashMap<>();
			}

			tracking.put(Integer.valueOf(forumId), Long.valueOf(System.currentTimeMillis()));
			SessionFacade.setAttribute(ConfigKeys.TOPICS_READ_TIME_BY_FORUM, tracking);
		}

		if (forumId != null) {
			JForumExecutionContext.setRedirect(this.makeRedirect("show"));
		}
		else {
			JForumExecutionContext.setRedirect(this.request.getContextPath() + "/forums/list"
		        + SystemGlobals.getValue(ConfigKeys.SERVLET_EXTENSION));
		}
	}

	// Messages since last visit
	public void newMessages()
	{
		this.request.addParameter("from_date", SessionFacade.getUserSession().getLastVisit());
		this.request.addParameter("to_date", new Date());

		SearchAction searchAction = new SearchAction(this.request, this.response, this.context);
		searchAction.newMessages();

		this.setTemplateName(TemplateKeys.SEARCH_NEW_MESSAGES);
	}

	public void approveMessages()
	{
		if (SessionFacade.getUserSession().isModerator(this.request.getIntParameter("forum_id"))) {
			new ModerationAction(this.context, this.request).doSave();
		}

		JForumExecutionContext.setRedirect(this.request.getContextPath() + "/forums/show/"
			+ this.request.getParameter("forum_id") + SystemGlobals.getValue(ConfigKeys.SERVLET_EXTENSION));
	}

	public void banned()
	{
		this.setTemplateName(TemplateKeys.FORUMS_BANNED);
		this.context.put("message", I18n.getMessage("ForumBanned.banned"));
	}

	private String redirectLinkToShowAction(int forumId)
	{
		int start = ViewCommon.getStartPage();

		return this.request.getContextPath() + "/forums/show/" + (start > 0 ? start + "/" : "") + forumId
			+ SystemGlobals.getValue(ConfigKeys.SERVLET_EXTENSION);
	}

	/**
	 * Action when users click on "watch this forum"
	 * It gets the forum_id and userId, and put them into a watch_forum table in the database;
	 */
    public void watchForum() {
        int forumId = this.request.getIntParameter("forum_id");
        int userId = SessionFacade.getUserSession().getUserId();
		ForumDAO dao = DataAccessDriver.getInstance().newForumDAO();

		if (SessionFacade.isLogged() && !dao.isUserSubscribed(forumId, userId)) {
			dao.subscribeUser(forumId, userId);
		}

		if ("XMLHttpRequest".equals(this.request.getHeader("X-Requested-With"))) {
            this.setTemplateName(TemplateKeys.AJAX_JSON);
			this.context.put("json", "{\"message\":\"" + I18n.getMessage("ForumBase.forumWatched.ajax") + "\"}");
        } else {
            JForumExecutionContext.setRedirect(this.redirectLinkToShowAction(forumId));
        }
    }

	/**
	 * Unwatch the forum watched.
	 */
	public void unwatchForum()
	{
		if (SessionFacade.isLogged()) {
			int forumId = this.request.getIntParameter("forum_id");
			int userId = SessionFacade.getUserSession().getUserId();
			DataAccessDriver.getInstance().newForumDAO().removeSubscription(forumId, userId);

			if ("XMLHttpRequest".equals(this.request.getHeader("X-Requested-With"))) {
                this.setTemplateName(TemplateKeys.AJAX_JSON);
                this.context.put("json", "{\"message\":\"" + I18n.getMessage("ForumBase.forumUnwatched.ajax") + "\"}");
            } else {
				String returnPath = this.redirectLinkToShowAction(forumId);
				this.setTemplateName(TemplateKeys.POSTS_UNWATCH);
				this.context.put("message", I18n.getMessage("ForumBase.forumUnwatched", new String[] { returnPath }));
			}
		} else {
			this.setTemplateName(ViewCommon.contextToLogin());
		}
	}
}

../jforum2-code/src/main/java/net/jforum/view/forum/BannerAction.java
/*
 * Copyright (c) 2003, 2004 Rafael Steil
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms,
 * with or without modification, are permitted provided
 * that the following conditions are met:
 *
 * 1) Redistributions of source code must retain the above
 * copyright notice, this list of conditions and the
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the
 * above copyright notice, this list of conditions and
 * the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor
 * the names of its contributors may be used to endorse
 * or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
 * IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 *
 * Created on Apr 2, 2005 / 9:12:07 AM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.view.forum;

import net.jforum.Command;
import net.jforum.JForumExecutionContext;
import net.jforum.dao.BannerDAO;
import net.jforum.dao.DataAccessDriver;
import net.jforum.entities.Banner;

/**
 * @author Samuel Yung
 */
public class BannerAction extends Command
{	
	/**
	 * dummy listing... there's no need to list in banners
	 */
	@Override public void list()
	{
		// Empty method
	}

	/**
	 * redirect
	 */
	public void redirect() 
	{
		final int bannerId = this.request.getIntParameter("banner_id");
		final BannerDAO dao = DataAccessDriver.getInstance().newBannerDAO();
		final Banner banner = dao.selectById(bannerId);
		banner.setClicks(banner.getClicks() + 1);
		dao.update(banner);
		JForumExecutionContext.setRedirect(banner.getUrl());
	}
}

../jforum2-code/src/main/java/net/jforum/view/forum/KarmaAction.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Jan 11, 2005 11:44:06 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.view.forum;

import net.jforum.Command;
import net.jforum.JForumExecutionContext;
import net.jforum.SessionFacade;
import net.jforum.dao.DataAccessDriver;
import net.jforum.dao.KarmaDAO;
import net.jforum.dao.PostDAO;
import net.jforum.entities.Karma;
import net.jforum.entities.KarmaStatus;
import net.jforum.entities.Post;
import net.jforum.repository.PostRepository;
import net.jforum.repository.SecurityRepository;
import net.jforum.security.SecurityConstants;
import net.jforum.util.I18n;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;
import net.jforum.util.preferences.TemplateKeys;
import net.jforum.view.forum.common.PostCommon;
import net.jforum.view.forum.common.ViewCommon;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public class KarmaAction extends Command
{
	public void insert()
	{
		if (!SecurityRepository.canAccess(SecurityConstants.PERM_KARMA_ENABLED)) {
			this.error("Karma.featureDisabled", null);
			return;
		}

		int postId = this.request.getIntParameter("post_id");
		int fromUserId = SessionFacade.getUserSession().getUserId();

		PostDAO pm = DataAccessDriver.getInstance().newPostDAO();
		Post post = pm.selectById(postId);

		if (fromUserId == SystemGlobals.getIntValue(ConfigKeys.ANONYMOUS_USER_ID)) {
			this.error("Karma.anonymousIsDenied", post);
			return;
		}

		if (post.getUserId() == fromUserId) {
			this.error("Karma.cannotSelfVote", post);
			return;
		}

		KarmaDAO km = DataAccessDriver.getInstance().newKarmaDAO();
		
		if (!km.userCanAddKarma(fromUserId, postId)) {
			this.error("Karma.alreadyVoted", post);
			return;
		}
		
		// Check range
		int points = this.request.getIntParameter("points");
		
		if (points < SystemGlobals.getIntValue(ConfigKeys.KARMA_MIN_POINTS)
				|| points > SystemGlobals.getIntValue(ConfigKeys.KARMA_MAX_POINTS)) {
			this.error("Karma.invalidRange", post);
			return;
		}

		Karma karma = new Karma();
		karma.setFromUserId(fromUserId);
		karma.setPostUserId(post.getUserId());
		karma.setPostId(postId);
		karma.setTopicId(post.getTopicId());
		karma.setPoints(points);

		km.addKarma(karma);
		
		post.setKarma(new KarmaStatus(post.getId(), points));
		
		if (SystemGlobals.getBoolValue(ConfigKeys.POSTS_CACHE_ENABLED)) {
			PostRepository.update(post.getTopicId(), PostCommon.preparePostForDisplay(post));
		}

		JForumExecutionContext.setRedirect(this.urlToTopic(post));
	}

	private void error(String message, Post post)
	{
		this.setTemplateName(TemplateKeys.KARMA_ERROR);

		if (post != null) {
			this.context.put("message", I18n.getMessage(message, new String[] { this.urlToTopic(post) }));
		}
		else {
			this.context.put("message", I18n.getMessage(message));
		}
	}

	private String urlToTopic(Post post)
	{
		return JForumExecutionContext.getRequest().getContextPath() + "/posts/list/" 
			+ ViewCommon.getStartPage()
			+ "/" + post.getTopicId()
			+ SystemGlobals.getValue(ConfigKeys.SERVLET_EXTENSION)
			+ "#p" + post.getId();
	}

	/**
	 * @see net.jforum.Command#list()
	 */
	@Override public void list() 
	{
		this.setTemplateName(TemplateKeys.KARMA_LIST);
		this.context.put("message", I18n.getMessage("invalidAction"));
	}
}

../jforum2-code/src/main/java/net/jforum/view/forum/ModerationAction.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 02/10/2005 20:04:15
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.view.forum;

import java.util.Iterator;
import java.util.List;

import net.jforum.Command;
import net.jforum.SessionFacade;
import net.jforum.JForumExecutionContext;
import net.jforum.dao.DataAccessDriver;
import net.jforum.dao.ModerationLogDAO;
import net.jforum.dao.PostDAO;
import net.jforum.dao.TopicDAO;
import net.jforum.entities.ModerationLog;
import net.jforum.entities.Post;
import net.jforum.entities.Topic;
import net.jforum.entities.UserSession;
import net.jforum.repository.ForumRepository;
import net.jforum.repository.SecurityRepository;
import net.jforum.security.SecurityConstants;
import net.jforum.util.I18n;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;
import net.jforum.util.preferences.TemplateKeys;
import net.jforum.util.stats.StatsEvent;
import net.jforum.view.forum.common.PostCommon;
import net.jforum.view.forum.common.ViewCommon;

/**
 * @author Rafael Steil
 */
public class ModerationAction extends Command
{
	private static final String RETURN_URL = "returnUrl";

	/**
	 * @throws UnsupportedOperationException always
	 * @see net.jforum.Command#list()
	 */
	@Override public void list()
	{
		throw new UnsupportedOperationException();
	}

	public void showActivityLog() 
	{
		UserSession userSession = SessionFacade.getUserSession();
		// only logged-in users get to see the member list
		if (userSession == null
			|| (!SystemGlobals.getBoolValue(ConfigKeys.MODERATION_LOG_PUBLIC)
				 && !userSession.isAdmin() && !userSession.isModerator()))
		{
			JForumExecutionContext.setRedirect(this.request.getContextPath());
			return;
		}

		final ModerationLogDAO dao = DataAccessDriver.getInstance().newModerationLogDAO();

		final int start = ViewCommon.getStartPage();
		final int recordsPerPage = SystemGlobals.getIntValue(ConfigKeys.TOPICS_PER_PAGE);

		final List<ModerationLog> list = dao.selectAll(start, recordsPerPage);
		final boolean canAccessFullModerationLog = SecurityRepository.canAccess(SecurityConstants.PERM_FULL_MODERATION_LOG);

		final PostDAO postDao = DataAccessDriver.getInstance().newPostDAO();
		final TopicDAO topicDao = DataAccessDriver.getInstance().newTopicDAO();

		for (final Iterator<ModerationLog> iter = list.iterator(); iter.hasNext();) {
			final ModerationLog log = iter.next();

			if (log.getPostId() > 0) {
				final Post post = postDao.selectById(log.getPostId());

				if (post.getId() > 0 && ForumRepository.getForum(post.getForumId()) == null) {
					iter.remove();
					continue;
				}
			}
			else if (log.getTopicId() > 0) {
				Topic topic = topicDao.selectRaw(log.getTopicId());

				if (topic.getId() > 0 && ForumRepository.getForum(topic.getForumId()) == null) {
					iter.remove();
					continue;
				}
			}

			if (log.getOriginalMessage() != null && canAccessFullModerationLog) {
				Post post = new Post();
				post.setText(log.getOriginalMessage());

				log.setOriginalMessage(PostCommon.preparePostForDisplay(post).getText());
			}
		}

		this.setTemplateName(TemplateKeys.MODERATION_SHOW_ACTIVITY_LOG);
		this.context.put("activityLog", list);
		this.context.put("canAccessFullModerationLog", canAccessFullModerationLog);
		this.context.put("pageTitle", I18n.getMessage("ModerationLog.moderationLog"));

		int totalRecords = dao.totalRecords();

		ViewCommon.contextToPagination(start, totalRecords, recordsPerPage);

		new StatsEvent("Moderation log", request.getRequestURL()).record();
	}

	public void doModeration()
	{
		String returnUrl = this.request.getParameter(RETURN_URL);

		new ModerationHelper().doModeration(returnUrl);

		this.context.put(RETURN_URL, returnUrl);

		if (JForumExecutionContext.getRequest().getParameter("topicMove") != null) {
			this.setTemplateName(TemplateKeys.MODERATION_MOVE_TOPICS);
		}
	}

	public void moveTopic()
	{
		new ModerationHelper().moveTopicsSave(this.request.getParameter(RETURN_URL));
	}

	public void moderationDone()
	{
		this.setTemplateName(new ModerationHelper().moderationDone(this.request.getParameter(RETURN_URL)));
	}
}

../jforum2-code/src/main/java/net/jforum/view/forum/JSAction.java
/*
 * Created on 27/06/2005 00:20:38
 */
package net.jforum.view.forum;

import net.jforum.Command;
import net.jforum.JForumExecutionContext;
/**
 * Loads and parse javascript files with FTL statements.
 * 
 * @author Rafael Steil
 * @version $Id$
 */
public class JSAction extends Command
{
	/**
	 * Loads and parses a javascript file. 
	 * The filename should be into the "js" directory and should
	 * have the extension ".js".
	 * @see net.jforum.Command#list()
	 */
	@Override public void list() 
	{
		JForumExecutionContext.setContentType("text/javascript");
		
		final String filename = this.request.getParameter("js");
		
		this.templateName = "js/" + filename + ".js";
	}
}

../jforum2-code/src/main/java/net/jforum/view/forum/common/ViewCommon.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 02/04/2004 - 20:31:35
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.view.forum.common;

import net.jforum.JForumExecutionContext;
import net.jforum.SessionFacade;
import net.jforum.context.RequestContext;
import net.jforum.entities.User;
import net.jforum.entities.UserSession;
import net.jforum.exceptions.ForumException;
import net.jforum.util.SafeHtml;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;
import net.jforum.util.preferences.TemplateKeys;

import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URLEncoder;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;

import org.ocpsoft.prettytime.PrettyTime;

import freemarker.template.SimpleHash;

/**
 * @author Rafael Steil
 */

public final class ViewCommon
{
	private static final Logger LOGGER = Logger.getLogger(ViewCommon.class);

	/**
	 * Prepared the user context to use data pagination. 
	 * The following variables are set to the context:
	 * <p>
	 * 	<ul>
	 * 		<li> <i>totalPages</i> - total number of pages
	 * 		<li> <i>recordsPerPage</i> - how many records will be shown on each page
	 * 		<li> <i>totalRecords</i> - number of records found
	 * 		<li> <i>thisPage</i> - the current page being shown
	 * 		<li> <i>start</i> - 
	 * 	</ul>
	 * </p>
	 * @param start int
	 * @param totalRecords  int
	 * @param recordsPerPage int
	 */
	public static void contextToPagination(final int start, final int totalRecords, final int recordsPerPage)
	{
		final SimpleHash context = JForumExecutionContext.getTemplateContext();

		context.put("totalPages", Double.valueOf(Math.ceil((double) totalRecords / (double) recordsPerPage)));
		context.put("recordsPerPage", Integer.valueOf(recordsPerPage));
		context.put("totalRecords", Integer.valueOf(totalRecords));
		context.put("thisPage", Double.valueOf(Math.ceil((double) (start + 1) / (double) recordsPerPage)));
		context.put("start", Integer.valueOf(start));
	}

	/**
	 * Prepares the template context to show the login page, using the current URI as return path.
	 * @return TemplateKeys.USER_LOGIN
	 */
	public static String contextToLogin() 
	{
		final RequestContext request = JForumExecutionContext.getRequest();

		String uri = request.getRequestURI();
		final String ctxPath = request.getContextPath() + "/";
		
		if (uri != null && uri.startsWith(ctxPath)) {
			uri = uri.substring(ctxPath.length());
		}
		
		final String query = request.getQueryString();
		final String returnPath = query == null ? uri : uri + "?" + query;

		return contextToLogin(returnPath);
	}

	/**
	 * Prepares the template context to show the login page, using "returnPath" as return path
	 * @param origReturnPath the URI to use as return path
	 * @return TemplateKeys.USER_LOGIN
	 */
	public static String contextToLogin(final String origReturnPath)
	{
		String returnPath = origReturnPath;
		JForumExecutionContext.getTemplateContext().put("returnPath", returnPath);

		if (ConfigKeys.TYPE_SSO.equals(SystemGlobals.getValue(ConfigKeys.AUTHENTICATION_TYPE))) {
			String redirect = SystemGlobals.getValue(ConfigKeys.SSO_REDIRECT);

			if (StringUtils.isNotEmpty(redirect)) {
				final URI redirectUri = URI.create(redirect);

				if (!redirectUri.isAbsolute()) {
					throw new ForumException("SSO redirect URL should start with a scheme");
				}

				try {
					returnPath = URLEncoder.encode( ViewCommon.getForumLink() + returnPath, "UTF-8");
				}
				catch (UnsupportedEncodingException e) {
					LOGGER.error(e);
				}

				if (redirect.indexOf('?') == -1) {
					redirect = new StringBuilder(redirect).append('?').toString();
				}
				else {
					redirect = new StringBuilder(redirect).append('&').toString();
				}

				redirect = new StringBuilder(redirect).append("returnUrl=").append(returnPath).toString();

				JForumExecutionContext.setRedirect(redirect);
			}
		}

		return TemplateKeys.USER_LOGIN;
	}

	/**
	 * Returns the initial page to start fetching records from.
	 * 
	 * @return The initial page number
	 */
	public static int getStartPage()
	{
		final String str = JForumExecutionContext.getRequest().getParameter("start");
		int start;

		if (StringUtils.isEmpty(str)) {
			start = 0;
		}
		else {
			start = Integer.parseInt(str);

			if (start < 0) {
				start = 0;
			}
		}

		return start;
	}

	/**
	 * Gets the forum base link.
	 * The returned link has a trailing slash
	 * @return The forum link, with the trailing slash
	 */
	public static String getForumLink()
	{
		String forumLink = SystemGlobals.getValue(ConfigKeys.FORUM_LINK);

		if (forumLink.charAt(forumLink.length() - 1) != '/') {
			forumLink = new StringBuilder(forumLink).append('/').toString();
		}

		return forumLink;
	}

	public static String toUtf8String(final String str)
	{
		final StringBuilder stringBuffer = new StringBuilder();

		for (int i = 0; i < str.length(); i++) {
			final char chr = str.charAt(i);

			if ((chr >= 0) && (chr <= 255)) {
				stringBuffer.append(chr);
			}
			else {
				byte[] byt;

				try {
					byt = Character.toString(chr).getBytes("utf-8");
				}
				catch (Exception ex) {
					LOGGER.error(ex.getMessage(), ex);

					byt = new byte[0];
				}

				for (int j = 0; j < byt.length; j++) {
					int key = byt[j];

					if (key < 0) {
						key += 256;
					}

					stringBuffer.append('%').append(Integer.toHexString(key).toUpperCase());
				}
			}
		}

		return stringBuffer.toString();
	}

	/**
	 * Formats a date using the pattern defined in the configuration file.
	 * The key is the value of {@link net.jforum.util.preferences.ConfigKeys#DATE_TIME_FORMAT}
	 * Pretty dates are shown together with local, which are shown as a tooltip text (ConfigKeys.DATE_TIME_PRETTY).
	 * The board default locale, the user locale (if available) and the board timezone are considered.
	 * @param date the date to format
	 * @return the string with the formatted date
	 */
	public static String formatDate (final Date date) 
	{
		Locale locale = new Locale(SystemGlobals.getValue(ConfigKeys.I18N_DEFAULT));
		UserSession us = SessionFacade.getUserSession();
		if (us != null && us.getLang() != null) {
			// JForum only uses locales that are 5 characters long, except for the default locale
			if (us.getLang().length() == 5) {
				locale = new Locale(us.getLang().substring(0, 2), us.getLang().substring(3));
			}
		}

		final SimpleDateFormat sdf = new SimpleDateFormat(SystemGlobals.getValue(ConfigKeys.DATE_TIME_FORMAT), locale);
		if (StringUtils.isBlank(SystemGlobals.getValue(ConfigKeys.TIMEZONE))) {
			sdf.setTimeZone(TimeZone.getTimeZone(Calendar.getInstance().getTimeZone().getID()));
		} else {
			sdf.setTimeZone(TimeZone.getTimeZone(SystemGlobals.getValue(ConfigKeys.TIMEZONE)));
		}

		if (SystemGlobals.getBoolValue(ConfigKeys.DATE_TIME_PRETTY)) {
			PrettyTime pt = new PrettyTime(locale);
			return "<span title=\""+sdf.format(date)+"\">"+pt.format(date)+"</span>";
		} else {
			return sdf.format(date);
		}
	}

	/**
	* Formats a date using ONLY the pattern defined in the configuration file.
	* For places where pretty dates are not needed
	* @param date the date to format
	* @return the string with the formatted date
	 */
	public static String formatDatePatternOnly (final Date date) 
	{
        final Locale defaultLocale = new Locale(SystemGlobals.getValue(ConfigKeys.I18N_DEFAULT));
		final SimpleDateFormat sdf = new SimpleDateFormat(SystemGlobals.getValue(ConfigKeys.DATE_TIME_FORMAT), defaultLocale);
		if (StringUtils.isBlank(SystemGlobals.getValue(ConfigKeys.TIMEZONE))) {
			sdf.setTimeZone(TimeZone.getTimeZone(Calendar.getInstance().getTimeZone().getID()));
		} else {
			sdf.setTimeZone(TimeZone.getTimeZone(SystemGlobals.getValue(ConfigKeys.TIMEZONE)));
		}
		return sdf.format(date);
	}

	/**
	 * Replaces some string with another value
	 * @param stringBuffer the StrinbBuilder with the contents to work on
	 * @param what the string to be replaced
	 * @param with the new value
	 * @return the new string
	 */
	public static String replaceAll(StringBuilder sb, String what, String with)
	{
		// https://coderanch.com/t/670780
		// Pattern.matcher takes a CharSequence, so no need to transform sb into a String
		return Pattern.compile(Pattern.quote(what))
						.matcher(sb)
						.replaceAll(Matcher.quoteReplacement(with));
	}

	/**
	 * Parse the user's signature, to make it proper to visualization
	 * @param user the user instance
	 */
	public static void prepareUserSignature(final User user)
	{
		if (user.getSignature() != null) {
			final StringBuilder sb = new StringBuilder(user.getSignature());

			replaceAll(sb, "\n", "<br />");

			user.setSignature(PostCommon.prepareTextForDisplayExceptCodeTag(user.getSignature(), true, true));
			user.setSignature(SafeHtml.ensureAllAttributesAreSafe(user.getSignature()));
		}
	}

	private ViewCommon() {}
}

../jforum2-code/src/main/java/net/jforum/view/forum/common/UserCommon.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 29/11/2004 23:07:10
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.view.forum.common;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;

import javax.imageio.ImageIO;

import org.apache.commons.fileupload.FileItem;
import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;

import net.jforum.JForumExecutionContext;
import net.jforum.SessionFacade;
import net.jforum.context.RequestContext;
import net.jforum.dao.DataAccessDriver;
import net.jforum.dao.UserDAO;
import net.jforum.entities.User;
import net.jforum.repository.SpamRepository;
import net.jforum.util.Hash;
import net.jforum.util.I18n;
import net.jforum.util.SafeHtml;
import net.jforum.util.image.ImageUtils;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;

/**
 * @author Rafael Steil
 */
public final class UserCommon 
{
	private static final Logger LOGGER = Logger.getLogger(UserCommon.class);
	private static final String IMAGE_AVATAR = SystemGlobals.getValue(ConfigKeys.AVATAR_STORE_DIR);

	/**
	 * Updates the user information
	 * 
	 * @param userId int The user id we are saving
     * @return List
	 */
	public static List<String> saveUser(final int userId)
	{
		final List<String> errors = new ArrayList<>();

		final UserDAO userDao = DataAccessDriver.getInstance().newUserDAO();
		final User user = userDao.selectById(userId);

		final RequestContext request = JForumExecutionContext.getRequest();
		final boolean isAdmin = SessionFacade.getUserSession().isAdmin();

		if (isAdmin) {
			final String username = request.getParameter("username");

			if (username != null) {
				user.setUsername(username.trim());
			}

			if (request.getParameter("rank_special") != null) {
				user.setRankId(request.getIntParameter("rank_special"));
			}
		}

		user.setId(userId);
		user.setIcq(SafeHtml.makeSafe(request.getParameter("icq")));
		user.setTwitter(SafeHtml.makeSafe(request.getParameter("twitter")));
		user.setSkype(SafeHtml.makeSafe(request.getParameter("skype")));
		user.setFrom(SafeHtml.makeSafe(request.getParameter("location")));
		user.setOccupation(checkForSpam(request.getParameter("occupation"), isAdmin));
		user.setInterests(checkForSpam(request.getParameter("interests"), isAdmin));
		user.setBiography(checkForSpam(request.getParameter("biography"), isAdmin));
		user.setSignature(checkForSpam(request.getParameter("signature"), isAdmin));
		user.setViewEmailEnabled(request.getParameter("viewemail").equals("1"));
		user.setNotifyPrivateMessagesEnabled(request.getParameter("notifypm").equals("1"));
		user.setNotifyOnMessagesEnabled(request.getParameter("notifyreply").equals("1"));
		user.setAttachSignatureEnabled(request.getParameter("attachsig").equals("1"));
		user.setHtmlEnabled(request.getParameter("allowhtml").equals("1"));
		user.setLang(request.getParameter("language"));
		user.setBbCodeEnabled("1".equals(request.getParameter("allowbbcode")));
		user.setSmiliesEnabled("1".equals(request.getParameter("allowsmilies")));
		user.setNotifyAlways("1".equals(request.getParameter("notify_always")));
		user.setNotifyText("1".equals(request.getParameter("notify_text")));

		String website = SafeHtml.makeSafe(request.getParameter("website"));
		if (StringUtils.isNotEmpty(website) && !website.toLowerCase(Locale.US).startsWith("http://") 
				&& !website.toLowerCase(Locale.US).startsWith("https://")) {
			website = "http://" + website;
		}

		user.setWebSite(website);

		String currentPassword = request.getParameter("current_password");
		String currentPasswordMD5 = "", currentPasswordSHA512 = "", currentPasswordSHA512Salt = "";
		final boolean isCurrentPasswordEmpty = currentPassword == null || "".equals(currentPassword.trim());

		if (isAdmin || !isCurrentPasswordEmpty) {
			if (!isCurrentPasswordEmpty) {
				currentPasswordMD5 = Hash.md5(currentPassword);
				currentPasswordSHA512 = Hash.sha512(currentPassword);
				currentPasswordSHA512Salt = Hash.sha512(currentPassword+SystemGlobals.getValue(ConfigKeys.USER_HASH_SEQUENCE));
			}

			if (isAdmin
					|| user.getPassword().equals(currentPasswordMD5)
					|| user.getPassword().equals(currentPasswordSHA512)
					|| user.getPassword().equals(currentPasswordSHA512Salt)) {
				user.setEmail(SafeHtml.makeSafe(request.getParameter("email")));

				String newPassword = request.getParameter("new_password");

				if (! StringUtils.isBlank(newPassword)) {
					newPassword = newPassword.trim();

					int pwdMinLength = SystemGlobals.getIntValue(ConfigKeys.PASSWORD_MIN_LENGTH);
					if (newPassword.length() < pwdMinLength) {
						errors.add(I18n.getMessage("User.passwordTooShort", new Integer[] { pwdMinLength }));
					} else {
						user.setPassword(Hash.sha512(newPassword+SystemGlobals.getValue(ConfigKeys.USER_HASH_SEQUENCE)));
					}
				}
			}
			else {
				errors.add(I18n.getMessage("User.currentPasswordInvalid"));
			}
		}

		if (request.getParameter("avatardel") != null) {
			final File file = new File(IMAGE_AVATAR + user.getAvatar());
			if (file.exists()) {
				final boolean result = file.delete();
				if (!result) {
					LOGGER.error("Delete file failed: " + file.getName());
				}
			}
			user.setAvatar(null);
		}

		if (request.getObjectParameter("avatar") != null) {
			try {
				UserCommon.handleAvatar(user);
			}
			catch (Exception e) {
				LOGGER.warn("Problems while uploading the avatar: " + e);
				errors.add(I18n.getMessage("User.avatarUploadError"));
			}
		} 
		else if (SystemGlobals.getBoolValue(ConfigKeys.AVATAR_ALLOW_EXTERNAL_URL)) {
			final String avatarUrl = request.getParameter("avatarUrl");
			if (StringUtils.isNotEmpty(avatarUrl)) {
				if (avatarUrl.toLowerCase(Locale.US).startsWith("http://") 
						|| avatarUrl.toLowerCase(Locale.US).startsWith("https://")) {
					// make sure it's really an image
					try {
						BufferedImage image = ImageIO.read(new URL(avatarUrl));
						if (image != null) {
							user.setAvatar(avatarUrl);
						} else {
							user.setAvatar(null);
							errors.add("URL is not an image");
						}
					} catch (MalformedURLException e) {
						e.printStackTrace();
						errors.add("URL malformed");
					} catch (IOException e) {
						e.printStackTrace();
						errors.add("read image error");
					}
				}
				else {
					errors.add(I18n.getMessage("User.avatarUrlShouldHaveHttp"));
				}
			}
		}

		if (errors.isEmpty()) {
			userDao.update(user);
		}

		if (SessionFacade.getUserSession().getUserId() == userId) {
		    SessionFacade.getUserSession().setLang(user.getLang());
		}
		return errors;
	}

    private static String checkForSpam (String text, boolean isAdmin) {
		String result = SpamRepository.findSpam(text);
        if (isAdmin || (result == null)) {
			return SafeHtml.makeSafe(text);
        } else {
			return "";
		}
    }

	/**
	 * @param user User
	 */
	private static void handleAvatar(final User user)
	{
		boolean result = false;
		// Delete old avatar file
		if (user.getAvatar() != null) {
			final File avatarFile = new File(user.getAvatar());

			final File fileToDelete = new File(IMAGE_AVATAR + avatarFile.getName());

			if (fileToDelete.exists()) {
				result = fileToDelete.delete();
				if (!result) {
					LOGGER.error("Delete file failed: " + fileToDelete.getName());
				}
			}
		}

		final String fileName = Hash.md5(Integer.toString(user.getId()));
		FileItem item = (FileItem)JForumExecutionContext.getRequest().getObjectParameter("avatar");
		UploadUtils uploadUtils = new UploadUtils(item);

		// Gets file extension
		String extension = uploadUtils.getExtension().toLowerCase();
		int type = ImageUtils.IMAGE_UNKNOWN;

		if ("jpg".equals(extension) || "jpeg".equals(extension)) {
			type = ImageUtils.IMAGE_JPEG;
		} 
		else if ("gif".equals(extension)) {  
			type = ImageUtils.IMAGE_GIF;  
		} 
		else if ("png".equals(extension)) {  
			type = ImageUtils.IMAGE_PNG;  
		}

		if (type != ImageUtils.IMAGE_UNKNOWN) {
			String avatarTmpFileName = IMAGE_AVATAR + fileName + "_tmp." + extension;

			String avatarFinalFileName = IMAGE_AVATAR + fileName + "." + extension;

			uploadUtils.saveUploadedFile(avatarTmpFileName);

			// OK, time to check and process the avatar size
			int maxWidth = SystemGlobals.getIntValue(ConfigKeys.AVATAR_MAX_WIDTH);
			int maxHeight = SystemGlobals.getIntValue(ConfigKeys.AVATAR_MAX_HEIGHT);

			File avatar = new File(avatarTmpFileName); 
			BufferedImage imageOriginal = null;
			try {
				imageOriginal = ImageIO.read(avatar);
			} 
			catch (IOException e) {
				LOGGER.error(e.toString(), e);
			}
			int width = imageOriginal.getWidth(null);
			int height = imageOriginal.getHeight(null);

			if (width > maxWidth || height > maxHeight) {
				if (type == ImageUtils.IMAGE_GIF) {
					type = ImageUtils.IMAGE_PNG;
					extension = "png";
				}
				BufferedImage image = ImageUtils.resizeImage(avatarTmpFileName, type, maxWidth, maxHeight);
				ImageUtils.saveImage(image, avatarFinalFileName, type);
				// Delete the temporary file
				result = avatar.delete();
				if (!result) {
					LOGGER.error("Delete file failed: " + avatar.getName());
				}
			} 
			else {
				result = avatar.renameTo(new File(avatarFinalFileName));
				if (!result) {
					LOGGER.error("Rename file failed: " + avatar.getName());
				}
			}
			user.setAvatar(fileName + "." + extension);
		}
	}

	private UserCommon() {}

}

../jforum2-code/src/main/java/net/jforum/view/forum/common/UploadUtils.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Jan 18, 2005 4:06:08 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.view.forum.common;

import java.io.BufferedInputStream;
import java.io.FileOutputStream;
import java.io.IOException;

import org.apache.commons.fileupload.FileItem;

import net.jforum.exceptions.ForumException;

/**
 * @author Rafael Steil
 */
public class UploadUtils
{
	private FileItem item;
	private String extension = "";

	public UploadUtils(FileItem item)
	{
		this.item = item;
	}

	public String getExtension()
	{
		if (this.extension == null || this.extension.equals("")) {
			this.extension = this.item.getName().substring(this.item.getName().lastIndexOf('.') + 1);
		}

		return this.extension;
	}

	public String getOriginalName() {
		return item.getName();
	}

	public byte[] getBytes() {
		return item.get();
	}

	public void saveUploadedFile(String filename) 
	{
		BufferedInputStream inputStream = null;
		FileOutputStream outputStream = null;

		try {
			inputStream = new BufferedInputStream(this.item.getInputStream());
			outputStream = new FileOutputStream(filename);

			int c;
			byte[] b = new byte[4096];
			while ((c = inputStream.read(b)) != -1) {
				outputStream.write(b, 0, c);
			}
		}
		catch (IOException e) {
			throw new ForumException(e);
		}
		finally {
			if (outputStream != null) {
				try {
					outputStream.flush();
					outputStream.close();
				}
				catch (IOException e) { }
			}

			if (inputStream != null) {
				try {
					inputStream.close();
				}
				catch (IOException e) { }
			}
		}
	}
}

../jforum2-code/src/main/java/net/jforum/view/forum/common/BannerCommon.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms,
 * with or without modification, are permitted provided
 * that the following conditions are met:
 *
 * 1) Redistributions of source code must retain the above
 * copyright notice, this list of conditions and the
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the
 * above copyright notice, this list of conditions and
 * the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor
 * the names of its contributors may be used to endorse
 * or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
 * IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 *
 * Created on Apr 2, 2005 / 9:15:13 AM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.view.forum.common;

import java.security.SecureRandom;
import java.util.List;

import net.jforum.dao.BannerDAO;
import net.jforum.dao.DataAccessDriver;
import net.jforum.entities.Banner;
import net.jforum.util.stats.StatsEvent;

/**
 * @author Samuel Yung
 */
public class BannerCommon
{
	private transient final BannerDAO dao;
	private transient List<Banner> banners;

	public BannerCommon()
	{
		this.dao = DataAccessDriver.getInstance().newBannerDAO();
	}

	/**
	 * Test whether any active banner exist at the placement indicated.
	 * @param placement int
	 * @return boolean
	 */
	public boolean activeBannerExists (final int placement) 
	{
		banners = dao.selectActiveBannerByPlacement(placement);
		if (banners == null || banners.isEmpty())
		{
			return false;
		}
		
		return true;
	}

	/**
	 * Retrieves the correct banner based on weight. Before calling this function the
	 * activeBannerExists(int placement) must be called. The total weight for all the same
	 * position banners should be equal to 99. If the total weight is smaller than 99
	 * and the random number is larger than the total weight of all the same position
	 * banners, the highest weight's banner will be chosen. After a correct banner
	 * is found, its views variable will be incremented by 1.
	 *
	 * @return Banner
	 */
	public Banner getBanner()
	{
		Banner result = null;

		if (banners == null || banners.isEmpty())
		{
			return null;
		}

		// get correct banner based on weight
		final int random = new SecureRandom().nextInt(99);
		int weightFrom = 0;
		int weightTo = 0;
		for(int i = 0; i < banners.size(); i++)
		{
			result = banners.get(i);
			weightTo += result.getWeight();
			if (random >= weightFrom && random < weightTo)
			{
				break;
			}
			weightFrom = weightTo;
		}

        // increment views by 1
		result.setViews(result.getViews() + 1);
		dao.update(result);
        new StatsEvent("Banner fetch", result.getComment()).record();

		return result;
	}
}

../jforum2-code/src/main/java/net/jforum/view/forum/common/TopicsCommon.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 17/10/2004 23:54:47
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.view.forum.common;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import freemarker.template.SimpleHash;
import net.jforum.JForumExecutionContext;
import net.jforum.SessionFacade;
import net.jforum.dao.DataAccessDriver;
import net.jforum.dao.ForumDAO;
import net.jforum.dao.TopicDAO;
import net.jforum.entities.Forum;
import net.jforum.entities.Post;
import net.jforum.entities.Topic;
import net.jforum.entities.User;
import net.jforum.entities.UserSession;
import net.jforum.repository.ForumRepository;
import net.jforum.repository.PostRepository;
import net.jforum.repository.SecurityRepository;
import net.jforum.repository.TopicRepository;
import net.jforum.security.PermissionControl;
import net.jforum.security.SecurityConstants;
import net.jforum.util.I18n;
import net.jforum.util.TopicTypeComparator;
import net.jforum.util.concurrent.Executor;
import net.jforum.util.mail.EmailSenderTask;
import net.jforum.util.mail.TopicReplySpammer;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;
import net.jforum.view.forum.ModerationHelper;

/**
 * General utilities methods for topic manipulation.
 * 
 * @author Rafael Steil
 */
public class TopicsCommon 
{
	private static final Object MUTEXT = new Object();

	/**
	 * List all first 'n' topics of a given forum.
	 * This method returns no more than <code>ConfigKeys.TOPICS_PER_PAGE</code> topics for the forum. 
	 * 
	 * @param forumId The forum id to which the topics belongs to
	 * @param start The start fetching index
	 * @return <code>java.util.List</code> containing the topics found.
	 */
	public static List<Topic> topicsByForum(int forumId, int start)
	{
		TopicDAO tm = DataAccessDriver.getInstance().newTopicDAO();
		int topicsPerPage = SystemGlobals.getIntValue(ConfigKeys.TOPICS_PER_PAGE);
		List<Topic> topics;

		// Try to get the first's page of topics from the cache
		if (SystemGlobals.getBoolValue(ConfigKeys.TOPIC_CACHE_ENABLED)) {
			int topicCacheSize = SystemGlobals.getIntValue(ConfigKeys.TOPIC_CACHE_SIZE);
			topics = TopicRepository.getTopics(forumId);

			if (topics.isEmpty() || !TopicRepository.isLoaded(forumId) || start+topicsPerPage >= topicCacheSize) {
				synchronized (MUTEXT) {
					if (topics.isEmpty() || !TopicRepository.isLoaded(forumId) || start+topicsPerPage >= topicCacheSize) {
						topics = tm.selectAllByForum(forumId);
						TopicRepository.addAll(forumId, topics);
					}
				}
			}
		}
		else {
			topics = tm.selectAllByForumByLimit(forumId, start, topicsPerPage);
		}

		topics.sort(new TopicTypeComparator());

		int size = topics.size();
		while (size <= start) {
			start -= topicsPerPage;
		}
		if (start < 0) {
			start = 0;
		}

		return topics.subList(start, (size < start + topicsPerPage) ? size : start + topicsPerPage);
	}

	/**
	 * Prepare the topics for listing.
	 * This method does some preparation for a set ot <code>net.jforum.entities.Topic</code>
	 * instances for the current user, like verification if the user already
	 * read the topic, if pagination is a need and so on.
	 * 
	 * @param topics The topics to process
	 * @return The post-processed topics.
	 */
	public static List<Topic> prepareTopics(List<Topic> topics)
	{
		UserSession userSession = SessionFacade.getUserSession();

		long lastVisit = userSession.getLastVisit().getTime();
		int postsPerPage = SystemGlobals.getIntValue(ConfigKeys.POSTS_PER_PAGE);

		List<Topic> newTopics = new ArrayList<>(topics.size());
		Map<Integer, Long> topicsReadTime = SessionFacade.getTopicsReadTime();
		Map<Integer, Long> topicReadTimeByForum = SessionFacade.getTopicsReadTimeByForum();

		boolean checkUnread = (userSession.getUserId() 
			!= SystemGlobals.getIntValue(ConfigKeys.ANONYMOUS_USER_ID));

		for (Iterator<Topic> iter = topics.iterator(); iter.hasNext(); ) {
			Topic topic = iter.next();

			boolean read = false;
			boolean isReadByForum = false;
			long lastPostTime = topic.getLastPostDate().getTime();

			if (topicReadTimeByForum != null) {
				Long currentForumTime = topicReadTimeByForum.get(Integer.valueOf(topic.getForumId()));
				isReadByForum = currentForumTime != null && lastPostTime < currentForumTime.longValue();
			}

			boolean isTopicTimeOlder = !isReadByForum && lastPostTime <= lastVisit;

			if (!checkUnread || isReadByForum || isTopicTimeOlder) {
				read = true;
			}
			else {
				Integer topicId = Integer.valueOf(topic.getId());
				Long currentTopicTime = topicsReadTime.get(topicId);

				if (currentTopicTime != null) {
					read = currentTopicTime.longValue() > lastPostTime;
				}
			}

			if (topic.getTotalReplies() + 1 > postsPerPage) {
				topic.setPaginate(true);
				topic.setTotalPages(Double.valueOf(Math.floor(topic.getTotalReplies() / (double)postsPerPage)));
			}
			else {
				topic.setPaginate(false);
				topic.setTotalPages(Double.valueOf(0));
			}

			topic.setRead(read);
			newTopics.add(topic);
		}

		return newTopics;
	}

	/**
	 * Common properties to be used when showing topic data
	 */
	public static void topicListingBase()
	{
		SimpleHash context = JForumExecutionContext.getTemplateContext();

		// Topic Types
		context.put("TOPIC_ANNOUNCE", Integer.valueOf(Topic.TYPE_ANNOUNCE));
		context.put("TOPIC_STICKY", Integer.valueOf(Topic.TYPE_STICKY));
		context.put("TOPIC_NORMAL", Integer.valueOf(Topic.TYPE_NORMAL));
		context.put("TOPIC_WIKI", Integer.valueOf(Topic.TYPE_WIKI));

		// Topic Status
		context.put("STATUS_LOCKED", Integer.valueOf(Topic.STATUS_LOCKED));
		context.put("STATUS_UNLOCKED", Integer.valueOf(Topic.STATUS_UNLOCKED));

		// Moderation
		PermissionControl pc = SecurityRepository.get(SessionFacade.getUserSession().getUserId());

		context.put("moderator", pc.canAccess(SecurityConstants.PERM_MODERATION));
		context.put("can_remove_posts", pc.canAccess(SecurityConstants.PERM_MODERATION_POST_REMOVE));
		context.put("can_move_topics", pc.canAccess(SecurityConstants.PERM_MODERATION_TOPIC_MOVE));
		context.put("can_lockUnlock_topics", pc.canAccess(SecurityConstants.PERM_MODERATION_TOPIC_LOCK_UNLOCK));

		// Miscellaneous
		context.put("trashForumId", SystemGlobals.getIntValue(ConfigKeys.FORUM_TRASHCAN));
	}

	/**
	 * Checks if the user is allowed to view the topic.
	 * If the currently logged user does not have access
	 * to the forum, the template context will be set to show
	 * an error message to the user, by calling
	 * <blockquote>new ModerationHelper().denied(I18n.getMessage("PostShow.denied"))</blockquote>
	 * @param forumId The forum id to which the topics belongs to
	 * @return <code>true</code> if the topic is accessible, <code>false</code> otherwise
	 */
	public static boolean isTopicAccessible(int forumId)
	{
		return isTopicAccessible(forumId, true);
	}

	/**
	 * Checks if the user is allowed to view the topic.
	 * If the currently logged user does not have access
	 * to the forum, the template context will be set to show
	 * an error message to the user, by calling
	 * <blockquote>new ModerationHelper().denied(I18n.getMessage("PostShow.denied"))</blockquote>
	 * @param forumId The forum id to which the topics belongs to
	 * @param showError should show an error message or not, <code>true</code> will show, <code>false</code> otherwise
	 * @return <code>true</code> if the topic is accessible, <code>false</code> otherwise
	 */
	public static boolean isTopicAccessible(int forumId, boolean showError)
	{
		Forum forum = ForumRepository.getForum(forumId);

		if (forum == null || !ForumRepository.isCategoryAccessible(forum.getCategoryId())) {
			if (showError) {
				new ModerationHelper().denied(I18n.getMessage("PostShow.denied"));
			}
			return false;
		}

		return true;
	}

	/**
	 * Sends a "new post" notification message to all users watching the topic.
	 * 
	 * @param topic The changed topic
	 * @param post The new message
	 */
	public static void notifyUsers(Topic topic, Post post)
	{
		if (SystemGlobals.getBoolValue(ConfigKeys.MAIL_NOTIFY_ANSWERS)) {
			TopicDAO dao = DataAccessDriver.getInstance().newTopicDAO();
			List<User> usersToNotify = dao.notifyUsers(topic);

			// We only have to send an email if there are users subscribed to the topic
			if (usersToNotify != null && !usersToNotify.isEmpty()) {
				Executor.execute(new EmailSenderTask(new TopicReplySpammer(topic, post, usersToNotify)));
			}
		}
	}

	/**
	 * Updates the board status after a new post is inserted.
	 * This method is used in conjunct with moderation manipulation. 
	 * It will increase by 1 the number of replies of the topic, set the
	 * last post id for the topic and the forum and refresh the cache. 
	 * 
	 * @param topic Topic The topic to update
	 * @param lastPostId int The id of the last post
	 * @param topicDao TopicDAO A TopicModel instance
	 * @param forumDao ForumDAO A ForumModel instance
     * @param firstPost boolean
	 */
	public static synchronized void updateBoardStatus(Topic topic, int lastPostId, boolean firstPost, 
		TopicDAO topicDao, ForumDAO forumDao)
	{
		topic.setLastPostId(lastPostId);
		topicDao.update(topic);

		forumDao.setLastPost(topic.getForumId(), lastPostId);

		if (firstPost) {
			forumDao.incrementTotalTopics(topic.getForumId(), 1);
		}
		else {
			topicDao.incrementTotalReplies(topic.getId());
		}

		TopicRepository.addTopic(topic);
		TopicRepository.pushTopic(topic);

		ForumRepository.incrementTotalMessages();
	}

	/**
	 * Deletes a topic.
	 * This method will remove the topic from the database,
	 * clear the entry from the cache and update the last post info for the associated forum.
	 * @param topicId The topic id to remove
	 * @param fromModeration boolean 
     * @param forumId int
	 */
	public static synchronized void deleteTopic(int topicId, int forumId, boolean fromModeration)
	{
		TopicDAO topicDao = DataAccessDriver.getInstance().newTopicDAO();

		Topic topic = new Topic();
		topic.setId(topicId);
		topic.setForumId(forumId);

		topicDao.delete(topic, fromModeration);

		if (!fromModeration) {
			// Updates the Recent Topics if it contains this topic
			TopicRepository.loadMostRecentTopics();

            // Updates the Hottest Topics if it contains this topic
			TopicRepository.loadHottestTopics();
			TopicRepository.clearCache(forumId);
			PostRepository.clearCache(topicId);
			topicDao.removeSubscriptionByTopic(topicId);
		}
	}
}

../jforum2-code/src/main/java/net/jforum/view/forum/common/ForumCommon.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 12/11/2004 18:04:12
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.view.forum.common;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;

import net.jforum.SessionFacade;
import net.jforum.dao.DataAccessDriver;
import net.jforum.dao.ForumDAO;
import net.jforum.entities.Category;
import net.jforum.entities.Forum;
import net.jforum.entities.LastPostInfo;
import net.jforum.entities.Post;
import net.jforum.entities.Topic;
import net.jforum.entities.User;
import net.jforum.entities.UserSession;
import net.jforum.repository.ForumRepository;
import net.jforum.util.concurrent.Executor;
import net.jforum.util.mail.EmailSenderTask;
import net.jforum.util.mail.ForumNewTopicSpammer;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;

/**
 * @author Rafael Steil
 */
public final class ForumCommon 
{
	private static final Logger LOGGER = Logger.getLogger(ForumCommon.class);
	/**
	 * Check if some forum has unread messages.
	 * @param forum The forum to search for unread messages 
	 * @param tracking Tracking of the topics read by the user
	 * @param lastVisit The last visit time of the current user
	 */
	public static void checkUnreadPosts(final Forum forum, final Map<Integer, Long> tracking, final long lastVisit) 
	{
		final LastPostInfo lpi = forum.getLastPostInfo();
		
		if (lpi == null) {
			return;
		}

		final Integer topicId = Integer.valueOf(lpi.getTopicId());
		
		if (tracking != null && tracking.containsKey(topicId)) {
			final long readTime = tracking.get(topicId).longValue();
		
			forum.setUnread(readTime > 0 && lpi.getPostTimeMillis() > readTime);
		}
		else {
			forum.setUnread(lpi.getPostTimeMillis() > lastVisit);
		}
	}
	
	/**
	 * Gets all forums available to the user.
	 * 
	 * @param userSession A <code>UserSession</code> instance with user information
	 * @param anonymousUserId The id which represents the anonymous user
	 * @param tracking <code>Map</code> instance with information 
	 * about the topics read by the user
	 * @param origCheckUnreadPosts <code>true</code> if is to search for unread topics inside the forums, 
	 * or <code>false</code> if this action is not needed. 
	 * @return A <code>List</code> instance where each record is an instance of a <code>Category</code> object
	 */
	public static List<Category> getAllCategoriesAndForums(final UserSession userSession, final int anonymousUserId, 
			final Map<Integer, Long> tracking, boolean origCheckUnreadPosts)
	{
		boolean checkUnreadPosts = origCheckUnreadPosts;
		long lastVisit = 0;
		int userId = anonymousUserId;
		
		if (userSession != null) {
			lastVisit = userSession.getLastVisit().getTime();
			userId = userSession.getUserId();
		}

        // Do not check for unread posts if the user is not logged in
		checkUnreadPosts = checkUnreadPosts && (userId != anonymousUserId);

		final List<Category> categories = ForumRepository.getAllCategories(userId);
		
		if (!checkUnreadPosts) {
			return categories;
		}

		final List<Category> returnCategories = new ArrayList<>();
		for (Iterator<Category> iter = categories.iterator(); iter.hasNext(); ) {
			Category category = new Category(iter.next());
			
			for (Iterator<Forum> tmpIterator = category.getForums().iterator(); tmpIterator.hasNext(); ) {
				Forum forum = tmpIterator.next();
				ForumCommon.checkUnreadPosts(forum, tracking, lastVisit);
			}
			
			returnCategories.add(category);
		}
		
		return returnCategories;
	}
	
	/**
	 * @see #getAllCategoriesAndForums(UserSession, int, Map, boolean)
     * @return List
     * @param checkUnreadPosts boolean
	 */
	public static List<Category> getAllCategoriesAndForums(boolean checkUnreadPosts)
	{
		return getAllCategoriesAndForums(SessionFacade.getUserSession(), 
				SystemGlobals.getIntValue(ConfigKeys.ANONYMOUS_USER_ID), 
				SessionFacade.getTopicsReadTime(), 
				checkUnreadPosts);
	}
	
	/**
	 * @see #getAllCategoriesAndForums(boolean)
     * @return List
	 */
	public static List<Category> getAllCategoriesAndForums()
	{
		UserSession userSession = SessionFacade.getUserSession();
		boolean checkUnread = (userSession != null && userSession.getUserId() 
			!= SystemGlobals.getIntValue(ConfigKeys.ANONYMOUS_USER_ID));
		return getAllCategoriesAndForums(checkUnread);
	}
	
	/**
	 * Sends a "new topic" notification message to all users watching the forum.
	 * 
	 * @param forum The Forum changed
	 * @param topic The new topic
	 * @param post the newly created message
	 */
	public static void notifyUsers(Forum forum, Topic topic, Post post)
	{
		if (SystemGlobals.getBoolValue(ConfigKeys.MAIL_NOTIFY_ANSWERS)) {
			try {
				ForumDAO dao = DataAccessDriver.getInstance().newForumDAO();
				List<User> usersToNotify = dao.notifyUsers(forum);

				// we only have to send an email if there are users
				// subscribed to the topic
				if (usersToNotify != null && !usersToNotify.isEmpty()) {
					Executor.execute(
						new EmailSenderTask(
							new ForumNewTopicSpammer(forum, topic, post, usersToNotify)));
				}
			}
			catch (Exception e) {
				LOGGER.warn("Error while sending notification emails: " + e);
			}
		}
	}
	
	private ForumCommon() {}
}

../jforum2-code/src/main/java/net/jforum/view/forum/common/PostCommon.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 21/05/2004 - 15:33:36
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.view.forum.common;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.log4j.Logger;

import net.jforum.JForumExecutionContext;
import net.jforum.SessionFacade;
import net.jforum.context.RequestContext;
import net.jforum.dao.DataAccessDriver;
import net.jforum.dao.PostDAO;
import net.jforum.dao.TopicDAO;
import net.jforum.entities.Post;
import net.jforum.entities.Smilie;
import net.jforum.entities.Topic;
import net.jforum.repository.BBCodeRepository;
import net.jforum.repository.PostRepository;
import net.jforum.repository.SecurityRepository;
import net.jforum.repository.SmiliesRepository;
import net.jforum.security.SecurityConstants;
import net.jforum.util.SafeHtml;
import net.jforum.util.bbcode.BBCode;
import net.jforum.util.bbcode.BBCodeHandler;
import net.jforum.util.bbcode.Substitution;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;

/**
 * @author Rafael Steil
 */
public class PostCommon
{
    private static final Logger LOGGER = Logger.getLogger(PostCommon.class);

	public static Post preparePostForDisplay (Post post)
	{
		if (post.getText() == null) {
			return post;
		}

		String text = post.getText();
		String subject = post.getSubject();

		if (!post.isHtmlEnabled()) {
			text = text.replaceAll("<", "&lt;");
			text = text.replaceAll(">", "&gt;");
			subject = subject.replaceAll("<", "&lt;");
			subject = subject.replaceAll(">", "&gt;");
		}

		// Do not remove the trailing blank space, as it would
		// cause some regular expressions to fail
		text = text.replaceAll("\n", "<br>");

		post.setText(SafeHtml.makeSafe(text));
		post.setSubject(SafeHtml.makeSafe(subject));
		processText(post);
		post.setText(SafeHtml.ensureAllAttributesAreSafe(post.getText()));
		return post;
	}

	private static void processText (Post post)
	{
		int codeIndex = post.getText().indexOf("[code");
		int codeEndIndex = codeIndex > -1 ? post.getText().indexOf("[/code]") : -1;

		boolean hasCodeBlock = false;

		if (codeIndex == -1 || codeEndIndex == -1 || codeEndIndex < codeIndex) {
			post.setText(prepareTextForDisplayExceptCodeTag(post.getText(),
				post.isBbCodeEnabled(), post.isSmiliesEnabled()));
		}
		else if (post.isBbCodeEnabled() || post.isSmiliesEnabled()) {
			if (post.isBbCodeEnabled()) {
				hasCodeBlock = true;
			}

			int nextStartPos = 0;
			StringBuilder result = new StringBuilder(post.getText().length());

			while (codeIndex > -1 && codeEndIndex > -1 && codeEndIndex > codeIndex) {
				codeEndIndex += "[/code]".length();

				String nonCodeResult = prepareTextForDisplayExceptCodeTag(post.getText().substring(nextStartPos, codeIndex), 
					post.isBbCodeEnabled(), post.isSmiliesEnabled());

				if (hasCodeBlock) {
					String codeResult = parseCode(post.getText().substring(codeIndex, codeEndIndex));
					result.append(nonCodeResult).append(codeResult);
				} else {
					result.append(nonCodeResult).append(post.getText().substring(codeIndex, codeEndIndex));
				}

				nextStartPos = codeEndIndex;
				codeIndex = post.getText().indexOf("[code", codeEndIndex);
				codeEndIndex = codeIndex > -1 ? post.getText().indexOf("[/code]", codeIndex) : -1;
			}

			if (nextStartPos > -1) {
				String nonCodeResult = prepareTextForDisplayExceptCodeTag(post.getText().substring(nextStartPos), 
					post.isBbCodeEnabled(), post.isSmiliesEnabled());

				result.append(nonCodeResult);
			}

			post.setText(result.toString());
		}

		JForumExecutionContext.getTemplateContext().put("hasCodeBlock", hasCodeBlock);
	}

	private static String parseCode (String origText)
	{
		StringBuilder processed = new StringBuilder(origText.length());
		Matcher contentMatcher = Pattern.compile("(\\[code.*?\\])(.*)(\\[/code\\])", Pattern.DOTALL).matcher(origText);
		if (contentMatcher.matches()) {
			StringBuilder contents = new StringBuilder(contentMatcher.group(2));
			ViewCommon.replaceAll(contents, "<br>", "\n");
			// XML-like tags
			ViewCommon.replaceAll(contents, "<", "&lt;");
			ViewCommon.replaceAll(contents, ">", "&gt;");
			processed.append(contentMatcher.group(1));
			processed.append(contents);
			processed.append(contentMatcher.group(3));
		} else {
			// probably want to do some logging here...
			return origText; 
		}
		// now apply the regular expressions from the xml-config
		String text = processed.toString();
		for (Iterator<BBCode> iter = BBCodeRepository.getBBCollection().getBbList().iterator(); iter.hasNext();) {
			BBCode bb = iter.next();

			if (bb.getTagName().startsWith("code")) {
				text = text.replaceAll(bb.getRegex(), bb.getReplace());
			}
		}

		// Escape & to &amp;
		text = text.replaceAll("&", "&amp;");
		text = text.replaceAll("&amp;lt;", "&lt;");
		text = text.replaceAll("&amp;gt;", "&gt;");
		text = text.replaceAll("&amp;quot;", "&quot;");
		text = text.replaceAll("&amp;amp;", "&amp;");

		return text;
	}

    public static String prepareTextForDisplayExceptCodeTag (String text, boolean isBBCodeEnabled, boolean isSmiliesEnabled)
	{
        if (text == null) {
            return text;
        }
        if (isSmiliesEnabled) {
            text = processSmilies(new StringBuilder(text));
        }
        if (isBBCodeEnabled && text.indexOf('[') > -1 && text.indexOf(']') > -1) {
            for (BBCode bb : BBCodeRepository.getBBCollection().getBbList()) {
                if (!bb.getTagName().startsWith("code")) {
                    if (bb.isRegexpReplace()) {
                        // regular expression text replacement
                        text = text.replaceAll(bb.getRegex(), bb.getReplace());
                    } else {
                        // Java code-based text replacement
                        try {
                            Substitution subst = (Substitution) Class.forName(bb.getClassName()).getDeclaredConstructor().newInstance();
                            Pattern pat = Pattern.compile(bb.getRegex());
                            Matcher match = pat.matcher(text);
                            // the counter is just in case something goes wrong and the code enters a loop
                            int count = 0;
                            while (match.find() && count < 100) {
                                text = text.substring(0, match.start(0)) + subst.substitute(match.group(1))
                                        + text.substring(match.end(0));
                                match.reset(text);
                                count++;
                            }
                        } catch (Exception ex) {
                            LOGGER.error("error handling '" + bb.getTagName() + "' BB code: " + ex.getMessage());
                        }
                    }
                }
            }
        }
        text = parseDefaultRequiredBBCode(text);
        return text;
    }

	public static String parseDefaultRequiredBBCode (String origText)
	{
		String text = origText;
		Collection<BBCode> list = BBCodeRepository.getBBCollection().getAlwaysProcessList();

		for (Iterator<BBCode> iter = list.iterator(); iter.hasNext(); ) {
			BBCode bb = iter.next();
			text = text.replaceAll(bb.getRegex(), bb.getReplace());
		}

		return text;
	}

	/**
	 * Replace the smilies code by the respective URL.
	 * @param origText The text to process
	 * @return the parsed text. Note that the StringBuilder you pass as parameter
	 * will already have the right contents, as the replaces are done on the instance
	 */
    private static String processSmilies (StringBuilder text)
	{
        List<Smilie> smilies = SmiliesRepository.getSmilies();
        BBCodeHandler bbch = BBCodeRepository.getBBCollection();
        for (Iterator<Smilie> iter = smilies.iterator(); iter.hasNext();) {
            Smilie s = iter.next();
            int pos = 0;
            // The counter is used as prevention, in case
            // the while loop turns into an always true expression, for any reason
            int counter = 0;
            while (pos > -1 && counter++ < 100) {
                pos = text.indexOf(s.getCode(), pos);
                if (pos < 0) {
                    break;
                }
                // check whether this smilie is inside a UBB tag that is locked for smilies;
                // if so, skip until the closing tag
                int idxAfter = text.indexOf("[/", pos);
                if (idxAfter > -1) {
                    int idxBefore = text.substring(0, idxAfter).lastIndexOf("[");
                    if (idxBefore > -1 && idxBefore < pos) {
                        // yes, the smilie is inside of a UBB tag block
                        int idx2 = text.indexOf("]", idxAfter);
                        if (idx2 > -1) {
                            String tag = text.substring(idxAfter + 2, idx2).trim();
                            boolean doContinue = false;
                            // figure out whether this tag is locked for smilies
                            for (BBCode bbc : bbch.getBbList()) {
                                if (tag.equals(bbc.getLockedForSmilies())) {
                                    // log.debug("skipping smilie '" +
                                    // s.getCode() + "' inside of tag:'" + tag + "'");
                                    pos = idx2;
                                    doContinue = true;
                                    break;
                                }
                            }
                            if (doContinue) {
                                continue;
                            }
                        }
                    }
                }
				text.replace(pos, pos + s.getCode().length(), s.getUrl());
            }
        }
        return text.toString();
    }

	public static Post fillPostFromRequest()
	{
		Post post = new Post();
		post.setTime(new Date());

		return fillPostFromRequest(post, false);
	}

	public static Post fillPostFromRequest (Post post, boolean isEdit) 
	{
		RequestContext request = JForumExecutionContext.getRequest();

		post.setSubject(request.getParameter("subject"));
		post.setBbCodeEnabled(request.getParameter("disable_bbcode") == null);
		post.setSmiliesEnabled(request.getParameter("disable_smilies") == null);
		post.setSignatureEnabled(request.getParameter("attach_sig") != null);

		if (!isEdit) {
			post.setUserIp(request.getRemoteAddr());
			post.setUserId(SessionFacade.getUserSession().getUserId());
		}

		boolean htmlEnabled = SecurityRepository.canAccess(SecurityConstants.PERM_HTML_DISABLED, 
			request.getParameter("forum_id"));
		post.setHtmlEnabled(htmlEnabled && request.getParameter("disable_html") == null);

		if (post.isHtmlEnabled()) {
			post.setText(SafeHtml.makeSafe(request.getParameter("message")));
		}
		else {
			post.setText(request.getParameter("message"));
		}

		return post;
	}

	public static boolean canEditPost (Post post)
	{
		TopicDAO dao = DataAccessDriver.getInstance().newTopicDAO();
		Topic topic = dao.selectById(post.getTopicId());

		return SessionFacade.isLogged()
			&& (post.getUserId() == SessionFacade.getUserSession().getUserId()
				|| SessionFacade.getUserSession().isModerator(post.getForumId())
				|| topic.getType() == Topic.TYPE_WIKI
				|| SecurityRepository.canAccess(SecurityConstants.PERM_MODERATION_POST_EDIT)
				);
	}

	public static List<Post> topicPosts (PostDAO dao, boolean canEdit, int userId, int topicId, int start, int count)
	{
		boolean needPrepare = true;
		List<Post> posts;

 		if (SystemGlobals.getBoolValue(ConfigKeys.POSTS_CACHE_ENABLED)) {
 			posts = PostRepository.selectAllByTopicByLimit(topicId, start, count);
 			needPrepare = false;
 		}
 		else {
 			posts = dao.selectAllByTopicByLimit(topicId, start, count);
 		}
 
		List<Post> helperList = new ArrayList<>();

		boolean hasCodeBlock = false;
		for (Post post : posts) {
			post.setCanEdit(PostCommon.canEditPost(post));

			helperList.add(needPrepare ? PostCommon.preparePostForDisplay(post) : post);

			if (!hasCodeBlock && post.getText().indexOf("code class=\"language-") != -1) {
				hasCodeBlock = true;
			}
		}

		JForumExecutionContext.getTemplateContext().put("hasCodeBlock", hasCodeBlock);

		return helperList;
	}
}

../jforum2-code/src/main/java/net/jforum/view/forum/common/AttachmentCommon.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Jan 18, 2005 3:08:48 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.view.forum.common;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import javax.imageio.ImageIO;

import org.apache.commons.fileupload.FileItem;
import org.apache.commons.lang3.ArrayUtils;
import org.apache.log4j.Logger;

import net.jforum.SessionFacade;
import net.jforum.context.RequestContext;
import net.jforum.dao.AttachmentDAO;
import net.jforum.dao.DataAccessDriver;
import net.jforum.entities.Attachment;
import net.jforum.entities.AttachmentExtension;
import net.jforum.entities.AttachmentInfo;
import net.jforum.entities.Group;
import net.jforum.entities.Post;
import net.jforum.entities.QuotaLimit;
import net.jforum.entities.User;
import net.jforum.exceptions.AttachmentException;
import net.jforum.exceptions.AttachmentSizeTooBigException;
import net.jforum.exceptions.BadExtensionException;
import net.jforum.repository.SecurityRepository;
import net.jforum.security.SecurityConstants;
import net.jforum.util.Hash;
import net.jforum.util.I18n;
import net.jforum.util.image.ImageUtils;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;
import net.jforum.util.stats.StatsEvent;

/**
 * @author Rafael Steil
 */
public class AttachmentCommon
{
	private static final Logger LOGGER = Logger.getLogger(AttachmentCommon.class);
	private static final String DENY_ALL = "*";
	
	private final RequestContext request;
	private AttachmentDAO attachmentDao;
	private final boolean canProceed;
	private final Map<UploadUtils, Attachment> filesToSave = new ConcurrentHashMap<>();
	
	public AttachmentCommon(final RequestContext request, final int forumId)
	{
		this.request = request;
		this.attachmentDao = DataAccessDriver.getInstance().newAttachmentDAO();
		
		this.canProceed = SecurityRepository.canAccess(SecurityConstants.PERM_ATTACHMENTS_ENABLED, 
			Integer.toString(forumId));
	}
	
	public void preProcess()
	{
		if (!this.canProceed) {
			return;
		}
		
		final String totalFiles = this.request.getParameter("total_files");
		
		if (totalFiles == null || "".equals(totalFiles)) {
			return;
		}
		
		int total = Integer.parseInt(totalFiles);
		
		if (total < 1) {
			return;
		}
		
		if (total > SystemGlobals.getIntValue(ConfigKeys.ATTACHMENTS_MAX_POST)) {
			total = SystemGlobals.getIntValue(ConfigKeys.ATTACHMENTS_MAX_POST);
		}

		long totalSize = 0;
		final int userId = SessionFacade.getUserSession().getUserId();
		final Map<String, Boolean> extensions = this.attachmentDao.extensionsForSecurity();
		
		for (int i = 0; i < total; i++) {
			final FileItem item = (FileItem)this.request.getObjectParameter("file_" + i);
			
			if (item == null) {
				continue;
			}

			if (item.getName().indexOf('\000') > -1) {
				LOGGER.warn("Possible bad attachment (null char): " + item.getName()
					+ " - user_id: " + SessionFacade.getUserSession().getUserId());
				continue;
			}
			
			final UploadUtils uploadUtils = new UploadUtils(item);

			// Check if the extension is allowed
			boolean containsExtension = extensions.containsKey(uploadUtils.getExtension());
			boolean denyAll = extensions.containsKey(DENY_ALL);

			boolean isAllowed = (!denyAll && !containsExtension)
				|| (containsExtension && extensions.get(uploadUtils.getExtension()).equals(Boolean.TRUE));

			if (!isAllowed) { 
				throw new BadExtensionException(I18n.getMessage("Attachments.badExtension", 
					new String[] { uploadUtils.getExtension() }));
			}

			// Check comment length:
			String comment = this.request.getParameter("comment_" + i);
			if (comment.length() > 254) {
				throw new AttachmentException("Comment too long.");
			}
			
			Attachment attachment = new Attachment();
			attachment.setUserId(userId);
			
			AttachmentInfo info = new AttachmentInfo();
			info.setFilesize(item.getSize());
			info.setComment(comment);
			info.setMimetype(item.getContentType());
			
			// Get only the filename, without the path (IE does that)
			String realName = this.stripPath(item.getName());
			
			info.setRealFilename(realName);
			info.setUploadTimeInMillis(System.currentTimeMillis());
			
			AttachmentExtension ext = this.attachmentDao.selectExtension(uploadUtils.getExtension().toLowerCase());
			if (ext.isUnknown()) {
				ext.setExtension(uploadUtils.getExtension());
			}
			
			info.setExtension(ext);
			String savePath = this.makeStoreFilename(info);
			info.setPhysicalFilename(savePath);
			
			attachment.setInfo(info);
			filesToSave.put(uploadUtils, attachment);
			
			totalSize += item.getSize();
		}
		
		// Check upload limits
		QuotaLimit quotaLimit = this.getQuotaLimit(userId);
		if ((quotaLimit != null) && quotaLimit.exceedsQuota(totalSize)) {
			throw new AttachmentSizeTooBigException(I18n.getMessage("Attachments.tooBig", 
					new Integer[] { Integer.valueOf(quotaLimit.getSizeInBytes() / 1024), 
					Integer.valueOf((int)totalSize / 1024) }));			
		}
	}

	/**
	 * @param origRealName String
	 * @return String
	 */
	public String stripPath(String origRealName)
	{
		String realName = origRealName;
		String separator = "/";
		int index = realName.lastIndexOf(separator);
		
		if (index == -1) {
			separator = "\\";
			index = realName.lastIndexOf(separator);
		}
		
		if (index > -1) {
			realName = realName.substring(index + 1);
		}
		
		return realName;
	}
	
	public void insertAttachments(final Post post)
	{
		if (!this.canProceed) {
			return;
		}
		
		//post.hasAttachments(this.filesToSave.size() > 0);
		
		for (Iterator<Map.Entry<UploadUtils, Attachment>>  iter = this.filesToSave.entrySet().iterator(); iter.hasNext(); ) {
			Map.Entry<UploadUtils, Attachment> entry = iter.next();
			Attachment attachment = entry.getValue();
			attachment.setPostId(post.getId());
			
			String path = SystemGlobals.getValue(ConfigKeys.ATTACHMENTS_STORE_DIR) 
				+ "/" 
				+ attachment.getInfo().getPhysicalFilename();
			
			this.attachmentDao.addAttachment(attachment);
			entry.getKey().saveUploadedFile(path);
			
			if (this.shouldCreateThumb(attachment)) {
				this.createSaveThumb(path);
			}

			new StatsEvent("File upload", entry.getKey().getOriginalName()).record();
		}
	}
	
	private boolean shouldCreateThumb(final Attachment attachment) {
		String extension = attachment.getInfo().getExtension().getExtension().toLowerCase();
		if (SystemGlobals.getBoolValue(ConfigKeys.ATTACHMENTS_IMAGES_CREATE_THUMB)
            && Attachment.isPicture(extension)) {
            String path = SystemGlobals.getValue(ConfigKeys.ATTACHMENTS_STORE_DIR)
			     + "/" 
			     + attachment.getInfo().getPhysicalFilename();
		    File imageFile = new File(path);
		    BufferedImage image = null;
		    try {
			    image = ImageIO.read(imageFile);
		    } catch (IOException e) {
		    	LOGGER.error(e.toString(), e);
		    }
		    int width = image.getWidth(null);
		    int height = image.getHeight(null);
		    return (width > SystemGlobals.getIntValue(ConfigKeys.ATTACHMENTS_IMAGES_MAX_THUMB_W) 
		        || height > SystemGlobals.getIntValue(ConfigKeys.ATTACHMENTS_IMAGES_MAX_THUMB_H));
        }
        return false;
	}
	
	private void createSaveThumb(final String path) {
		try {
			BufferedImage image = ImageUtils.resizeImage(path, ImageUtils.IMAGE_JPEG, 
				SystemGlobals.getIntValue(ConfigKeys.ATTACHMENTS_IMAGES_MAX_THUMB_W),
				SystemGlobals.getIntValue(ConfigKeys.ATTACHMENTS_IMAGES_MAX_THUMB_H));
			ImageUtils.saveImage(image, path + "_thumb", ImageUtils.IMAGE_JPEG);
		}
		catch (Exception e) {
			LOGGER.error(e.toString(), e);
		}
	}
	
	public QuotaLimit getQuotaLimit(final int userId)
	{
		QuotaLimit ql = new QuotaLimit();
		User user = DataAccessDriver.getInstance().newUserDAO().selectById(userId);
		
		for (Iterator<Group> iter = user.getGroupsList().iterator(); iter.hasNext();) {
			QuotaLimit l = this.attachmentDao.selectQuotaLimitByGroup(iter.next().getId());
			if (l == null) {
				continue;
			}
			
			if (l.getSizeInBytes() > ql.getSizeInBytes()) {
				ql = l;
			}
		}
		
		if (ql.getSize() == 0) {
			return null;
		}
		
		return ql;
	}
	
	public void editAttachments(final int postId, final int forumId)
	{
		// Allow removing the attachments at least
		AttachmentDAO am = DataAccessDriver.getInstance().newAttachmentDAO();
		
		// Check for attachments to remove
		List<String> deleteList = new ArrayList<>();
		String[] delete = null;
		String s = this.request.getParameter("delete_attach");
		
		if (s != null) {
			delete = s.split(",");
		}
		
		if (delete != null) {
			for (int i = 0; i < delete.length; i++) {
				if (delete[i] != null && !delete[i].equals("")) {
					int id = Integer.parseInt(delete[i]);
					Attachment a = am.selectAttachmentById(id);
					
					am.removeAttachment(id, postId);
					
					String filename = SystemGlobals.getValue(ConfigKeys.ATTACHMENTS_STORE_DIR)
						+ "/" + a.getInfo().getPhysicalFilename();
					
					File f = new File(filename);
					
					if (f.exists()) {
						boolean result = f.delete();
						if (result != true) {
							LOGGER.error("Delete file failed: " + f.getName());
						}
					}
					
					// Check if we have a thumb to delete
					f = new File(filename + "_thumb");
					
					if (f.exists()) {
						boolean result = f.delete();
						if (result != true) {
							LOGGER.error("Delete thumb file failed: " + f.getName());
						}
					}
					
					// Remove the empty parent directory
					File parent = f.getParentFile();
					if (parent != null && ArrayUtils.nullToEmpty(parent.list()).length == 0) {
						boolean result = parent.delete();
						if (result != true) {
							LOGGER.error("Delete parent directory failed: " + parent.getName());
						}
						// Remove the empty grand parent directory
						File grandparent = parent.getParentFile();
						if (grandparent != null && ArrayUtils.nullToEmpty(grandparent.list()).length == 0) {
							result = grandparent.delete();
							if (result != true) {
								LOGGER.error("Delete grand parent directory failed: " + grandparent.getName());
							}
						}
					}
				}
			}
			
			deleteList = Arrays.asList(delete);
		}
		
		if (!SecurityRepository.canAccess(SecurityConstants.PERM_ATTACHMENTS_ENABLED, 
				Integer.toString(forumId))
				&& !SecurityRepository.canAccess(SecurityConstants.PERM_ATTACHMENTS_DOWNLOAD)) {
			return;
		}
		
		// Update
		String[] attachIds = null;
		s = this.request.getParameter("edit_attach_ids");
		if (s != null) {
			attachIds = s.split(",");
		}
		
		if (attachIds != null) {
			for (int i = 0; i < attachIds.length; i++) {
				if (deleteList.contains(attachIds[i]) 
						|| attachIds[i] == null || attachIds[i].equals("")) {
					continue;
				}
				
				int id = Integer.parseInt(attachIds[i]);
				Attachment a = am.selectAttachmentById(id);
				a.getInfo().setComment(this.request.getParameter("edit_comment_" + id));

				am.updateAttachment(a);
			}
		}
	}
	
	private String makeStoreFilename(AttachmentInfo attInfo)
	{
		Calendar cal = new GregorianCalendar();
		cal.setTimeInMillis(System.currentTimeMillis());
		cal.get(Calendar.YEAR);
		
		int year = Calendar.getInstance().get(Calendar.YEAR);
		int month = Calendar.getInstance().get(Calendar.MONTH) + 1;
		int day = Calendar.getInstance().get(Calendar.DAY_OF_MONTH);
		
		StringBuilder dir = new StringBuilder(256);
		dir.append(year).append('/').append(month).append('/').append(day).append('/');
		
		File path = new File(SystemGlobals.getValue(ConfigKeys.ATTACHMENTS_STORE_DIR) + "/" + dir); 
		// check if we have the directory already
		if (!path.exists()) {
			boolean result = path.mkdirs();
			if (!result) {
				LOGGER.error("Create directory failed: " + SystemGlobals.getValue(ConfigKeys.ATTACHMENTS_STORE_DIR) + "/" + dir);
			}
		}		
		
		return dir
			.append(Hash.md5(attInfo.getRealFilename() + System.currentTimeMillis() + SystemGlobals.getValue(ConfigKeys.USER_HASH_SEQUENCE) + new SecureRandom().nextInt(999999)))
			.append('_')
			.append(SessionFacade.getUserSession().getUserId())
			.append('.')
			.append(attInfo.getExtension().getExtension())
			.append('_')
			.toString();
	}
	
	public List<Attachment> getAttachments(final int postId, final int forumId)
	{
		if (!SecurityRepository.canAccess(SecurityConstants.PERM_ATTACHMENTS_DOWNLOAD)
				&& !SecurityRepository.canAccess(SecurityConstants.PERM_ATTACHMENTS_ENABLED, 
						Integer.toString(forumId))) {
			return new ArrayList<>();
		}
		
		return this.attachmentDao.selectAttachments(postId);
	}
	
	public boolean isPhysicalDownloadMode(final int extensionGroupId) 
	{
		return this.attachmentDao.isPhysicalDownloadMode(extensionGroupId);
	}

	public void deleteAttachments(final int postId, final int forumId) 
	{
		// Attachments
		List<Attachment> attachments = DataAccessDriver.getInstance().newAttachmentDAO().selectAttachments(postId);
		StringBuilder attachIds = new StringBuilder();
		
		for (Iterator<Attachment> iter = attachments.iterator(); iter.hasNext(); ) {
			Attachment a = iter.next();
			attachIds.append(a.getId()).append(',');
		}
		
		this.request.addOrReplaceParameter("delete_attach", attachIds.toString());
		this.editAttachments(postId, forumId);
	}
}

../jforum2-code/src/main/java/net/jforum/view/forum/common/PollCommon.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 21/05/2004 - 15:33:36
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.view.forum.common;

import java.util.Date;

import net.jforum.JForumExecutionContext;
import net.jforum.context.RequestContext;
import net.jforum.entities.Poll;
import net.jforum.entities.PollOption;

/**
 * @author David Almilli
 * @version $Id$
 */
public final class PollCommon
{
	private PollCommon() {}

	public static Poll fillPollFromRequest() 
	{
		final RequestContext request = JForumExecutionContext.getRequest();
		final String label = request.getParameter("poll_label");

		if (label == null || label.length() == 0) {
			return null;
		}

		final Poll poll = new Poll();
		poll.setStartTime(new Date());
		poll.setLabel(label);
		
		final int count = request.getIntParameter("poll_option_count");

		for (int i = 0; i <= count; i++) {
			String option = request.getParameter("poll_option_" + i);
			
			if (option == null) {
				continue;
			}
			
			option = option.trim();
			
			if (option.length() > 0) {
				final PollOption pollOption = new PollOption();
				pollOption.setId(i);
				pollOption.setText(option);
				poll.addOption(pollOption);
			}
		}
		
		final String pollLength = request.getParameter("poll_length");
		
		if (pollLength != null && pollLength.length() > 0) {
			poll.setLength(Integer.parseInt(pollLength));
		}
		
		return poll;
	}
}

../jforum2-code/src/main/java/net/jforum/view/admin/PermissionProcessHelper.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 17/03/2004 - 21:19:29
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.view.admin;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Enumeration;
import java.util.List;

import net.jforum.JForumExecutionContext;
import net.jforum.context.RequestContext;
import net.jforum.security.PermissionControl;
import net.jforum.security.Role;
import net.jforum.security.RoleValue;
import net.jforum.security.RoleValueCollection;

/**
 * @author Rafael Steil
 */
class PermissionProcessHelper 
{
	private PermissionControl pc;
	private int groupId;

	public PermissionProcessHelper(PermissionControl pc, int id)
	{
		this.groupId = id;
		this.pc = pc;

		this.init();
	}

	public void processData()
	{
		RequestContext request = JForumExecutionContext.getRequest();
		Enumeration<String> e = request.getParameterNames();

		while (e.hasMoreElements()) {
			String paramName = e.nextElement();

			if (paramName.startsWith("perm_")) {
				if (paramName.endsWith("$single")) {
					String paramValue = request.getParameter(paramName);

					if ("deny".equals(paramValue)) {
						continue;
					}

					paramName = paramName.substring(0, paramName.indexOf('$'));

					Role role = new Role();
					role.setName(paramName);

					this.pc.addRole(this.groupId, role);
				}
				else {
					String[] paramValues = request.getParameterValues(paramName);
					RoleValueCollection roleValues = new RoleValueCollection();

					if ("all".equals(paramValues[0])) {
						this.addRoleValues(roleValues, this.getSplitedValues("all" + paramName));
					}
					else {
						List<String> allowList = new ArrayList<>(Arrays.asList(this.getSplitedValues("all" + paramName))); 
						allowList.removeAll(Arrays.asList(paramValues));

						this.addRoleValues(roleValues, allowList.toArray());
					}

					Role role = new Role();
					role.setName(paramName);

					this.pc.addRole(this.groupId, role, roleValues);
				}
			}
		}
	}

	private String[] getSplitedValues(String paramName)
	{
		String[] allValues = JForumExecutionContext.getRequest().getParameter(paramName).split(";");
		String[] returnValues = new String[allValues.length];

		for (int i = 0, counter = 0; i < allValues.length; i++) {
			if (allValues[i].trim().equals("")) {
				continue;
			}

			returnValues[counter++] = allValues[i];
		}

		return returnValues;
	}

	private void addRoleValues(RoleValueCollection roleValues, Object[] allValues)
	{
		for (int i = 0; i < allValues.length; i++) {
			String value = (String)allValues[i];

			if (value == null || value.equals("")) {
				continue;
			}

			roleValues.add(new RoleValue((String)allValues[i]));
		}
	}

	private void init()
	{
		this.pc.deleteAllRoles(this.groupId);
	}
}

../jforum2-code/src/main/java/net/jforum/view/admin/AttachmentsAction.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Jan 17, 2005 2:46:30 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.view.admin;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import net.jforum.dao.AttachmentDAO;
import net.jforum.dao.DataAccessDriver;
import net.jforum.entities.AttachmentExtension;
import net.jforum.entities.AttachmentExtensionGroup;
import net.jforum.entities.QuotaLimit;
import net.jforum.util.TreeGroup;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;
import net.jforum.util.preferences.TemplateKeys;

/**
 * @author Rafael Steil
 */
public class AttachmentsAction extends AdminCommand
{
	public void configurations()
	{
		this.context.put("icon", SystemGlobals.getValue(ConfigKeys.ATTACHMENTS_ICON));
		this.context.put("createThumb", SystemGlobals.getBoolValue(ConfigKeys.ATTACHMENTS_IMAGES_CREATE_THUMB));
		this.context.put("thumbH", SystemGlobals.getValue(ConfigKeys.ATTACHMENTS_IMAGES_MAX_THUMB_H));
		this.context.put("thumbW", SystemGlobals.getValue(ConfigKeys.ATTACHMENTS_IMAGES_MAX_THUMB_W));
		this.context.put("maxPost", SystemGlobals.getValue(ConfigKeys.ATTACHMENTS_MAX_POST));
		this.context.put("thumbBorder", SystemGlobals.getBoolValue(ConfigKeys.ATTACHMENTS_IMAGES_THUMB_BOX_SHOW));

		this.setTemplateName(TemplateKeys.ATTACHMENTS_CONFIG);
	}
	
	public void configurationsSave()
	{
		ConfigAction ca = new ConfigAction(this.request, this.response, this.context);
		ca.updateData(ca.getConfig());
		
		this.configurations();
	}
	
	public void quotaLimit()
	{
		AttachmentDAO am = DataAccessDriver.getInstance().newAttachmentDAO();
		
		this.context.put("quotas", am.selectQuotaLimit());
		this.setTemplateName(TemplateKeys.ATTACHMENTS_QUOTA_LIMIT);
		this.context.put("groups", new TreeGroup().getNodes());
		this.context.put("selectedList", new ArrayList<>());
		this.context.put("groupQuotas", am.selectGroupsQuotaLimits());
	}
	
	public void quotaLimitSave()
	{
		QuotaLimit ql = new QuotaLimit();
		ql.setDescription(this.request.getParameter("quota_description"));
		ql.setSize(this.request.getIntParameter("max_filesize"));
		ql.setType(this.request.getIntParameter("type"));
		
		DataAccessDriver.getInstance().newAttachmentDAO().addQuotaLimit(ql);
		this.quotaLimit();
	}
	
	public void quotaLimitUpdate()
	{
		AttachmentDAO am = DataAccessDriver.getInstance().newAttachmentDAO();
		
		// First check if we should delete some entry
		String[] delete = this.request.getParameterValues("delete");
		List<String> deleteList = new ArrayList<>();
		if (delete != null) {
			deleteList = Arrays.asList(delete);
			am.removeQuotaLimit(delete);
		}
		
		// Now update the remaining
		int total = this.request.getIntParameter("total_records");
		for (int i = 0; i < total; i++) {
			if (deleteList.contains(this.request.getParameter("id_" + i))) {
				continue;
			}
			
			QuotaLimit ql = new QuotaLimit();
			ql.setId(this.request.getIntParameter("id_" + i));
			ql.setDescription(this.request.getParameter("quota_desc_" + i));
			ql.setSize(this.request.getIntParameter("max_filesize_" + i));
			ql.setType(this.request.getIntParameter("type_" + i));
			
			am.updateQuotaLimit(ql);
		}
		
		this.quotaLimit();
	}
	
	public void extensionGroups()
	{
		this.setTemplateName(TemplateKeys.ATTACHMENTS_EXTENSION_GROUPS);
		this.context.put("groups", DataAccessDriver.getInstance().newAttachmentDAO().selectExtensionGroups());
	}
	
	public void extensionGroupsSave()
	{
		AttachmentExtensionGroup g = new AttachmentExtensionGroup();		
		g.setAllow(this.request.getParameter("allow") != null);
		g.setDownloadMode(this.request.getIntParameter("download_mode"));
		g.setName(this.request.getParameter("name"));
		g.setUploadIcon(this.request.getParameter("upload_icon"));
		
		DataAccessDriver.getInstance().newAttachmentDAO().addExtensionGroup(g);
		this.extensionGroups();
	}
	
	public void extensionGroupsUpdate()
	{
		AttachmentDAO am = DataAccessDriver.getInstance().newAttachmentDAO();
		
		// Check if there are records to remove
		String[] delete = this.request.getParameterValues("delete");
		List<String> deleteList = new ArrayList<>();
		if (delete != null) {
			deleteList = Arrays.asList(delete);
			am.removeExtensionGroups(delete);
		}
		
		// Update
		int total = this.request.getIntParameter("total_records");
		for (int i = 0; i < total; i++) {
			if (deleteList.contains(this.request.getParameter("id_" + i))) {
				continue;
			}
			
			AttachmentExtensionGroup g = new AttachmentExtensionGroup();
			g.setId(this.request.getIntParameter("id_" + i));
			g.setAllow(this.request.getParameter("allow_" + i) != null);
			g.setDownloadMode(this.request.getIntParameter("download_mode_" + i));
			g.setName(this.request.getParameter("name_" + i));
			g.setUploadIcon(this.request.getParameter("upload_icon_" + i));
			
			am.updateExtensionGroup(g);
		}
		
		this.extensionGroups();
	}
	
	public void extensions()
	{
		AttachmentDAO am = DataAccessDriver.getInstance().newAttachmentDAO();
		
		this.setTemplateName(TemplateKeys.ATTACHMENTS_EXTENSIONS);
		this.context.put("extensions", am.selectExtensions());
		this.context.put("groups", am.selectExtensionGroups());
	}
	
	public void extensionsSave() 
	{
		AttachmentExtension e = new AttachmentExtension();
		e.setAllow(this.request.getParameter("allow") != null);
		e.setComment(this.request.getParameter("comment"));
		e.setExtension(this.request.getParameter("extension"));
		e.setUploadIcon(this.request.getParameter("upload_icon"));
		e.setExtensionGroupId(this.request.getIntParameter("extension_group"));
		
		if (e.getExtension().startsWith(".")) {
			e.setExtension(e.getExtension().substring(1));
		}
		
		DataAccessDriver.getInstance().newAttachmentDAO().addExtension(e);
		this.extensions();
	}
	
	public void extensionsUpdate()
	{
		AttachmentDAO am = DataAccessDriver.getInstance().newAttachmentDAO();
		
		// Check for records to delete
		String[] delete = this.request.getParameterValues("delete");
		List<String> deleteList = new ArrayList<>();

		if (delete != null) {
			deleteList = Arrays.asList(delete);
			am.removeExtensions(delete);
		}
		
		int total = this.request.getIntParameter("total_records");

		for (int i = 0; i < total; i++) {
			if (deleteList.contains(this.request.getParameter("id_" + i))) {
				continue;
			}
			
			AttachmentExtension e = new AttachmentExtension();
			e.setAllow(this.request.getParameter("allow_" + i) != null);
			e.setComment(this.request.getParameter("comment_" + i));
			e.setExtension(this.request.getParameter("extension_" + i));
			e.setExtensionGroupId(this.request.getIntParameter("extension_group_" + i));
			e.setId(this.request.getIntParameter("id_" + i));
			e.setUploadIcon(this.request.getParameter("upload_icon_" + i));
			
			am.updateExtension(e);
		}
		
		this.extensions();
	}
	
	public void quotaGroupsSave() 
	{
		int total = this.request.getIntParameter("total_groups");
		AttachmentDAO am = DataAccessDriver.getInstance().newAttachmentDAO();
		am.cleanGroupQuota();
		
		for (int i = 0; i < total; i++) {
			String l = this.request.getParameter("limit_" + i);
			
			if (l == null || l.equals("")) {
				continue;
			}
			
			int limitId = Integer.parseInt(l);
			int groupId = this.request.getIntParameter("group_" + i);
			
			if (groupId > 0) {
				am.setGroupQuota(groupId, limitId);
			}
		}
		
		this.quotaLimit();
	}
	
	/**
	 * @see net.jforum.Command#list()
	 */
	@Override public void list()
	{
		this.configurations();
	}
}

../jforum2-code/src/main/java/net/jforum/view/admin/GroupAction.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Mar 3, 2003 / 11:07:02 AM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.view.admin;

import java.util.ArrayList;
import java.util.List;

import net.jforum.dao.DataAccessDriver;
import net.jforum.dao.GroupDAO;
import net.jforum.dao.GroupSecurityDAO;
import net.jforum.entities.Group;
import net.jforum.repository.ForumRepository;
import net.jforum.repository.RolesRepository;
import net.jforum.repository.SecurityRepository;
import net.jforum.security.PermissionControl;
import net.jforum.security.PermissionSection;
import net.jforum.security.XMLPermissionControl;
import net.jforum.util.I18n;
import net.jforum.util.TreeGroup;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;
import net.jforum.util.preferences.TemplateKeys;

/**
 * ViewHelper class for group administration.
 * 
 * @author Rafael Steil
 */
public class GroupAction extends AdminCommand 
{
	private static final String GROUP_ID = "group_id";
	
	/**
	 * Listing
	 */
	@Override public void list()
	{
		this.context.put("groups", new TreeGroup().getNodes());
		this.setTemplateName(TemplateKeys.GROUP_LIST);
	}
	
	/**
	 * Insert
	 */
	public void insert()
	{
		this.context.put("groups", new TreeGroup().getNodes());
		this.context.put("action", "insertSave");
		this.context.put("selectedList", new ArrayList<>());
		this.setTemplateName(TemplateKeys.GROUP_INSERT);
	}
	
	/**
	 * Save information for an existing group
	 */
	public void editSave()
	{
		final int groupId = this.request.getIntParameter(GROUP_ID);
			
		final Group group = new Group();
		group.setDescription(this.request.getParameter("group_description"));
		group.setId(groupId);
		
		int parentId = this.request.getIntParameter("parent_id");
		
		if (parentId == group.getId()) {
			parentId = 0;
		}
		
		group.setParentId(parentId);
		group.setName(this.request.getParameter("group_name"));

		DataAccessDriver.getInstance().newGroupDAO().update(group);
			
		this.list();
	}
	
	/**
	 * Edit a group
	 */
	public void edit()
	{
		final int groupId = this.request.getIntParameter(GROUP_ID);
		final GroupDAO groupDao = DataAccessDriver.getInstance().newGroupDAO();
		
		this.setTemplateName(TemplateKeys.GROUP_EDIT);
					
		this.context.put("group", groupDao.selectById(groupId));
		this.context.put("groups", new TreeGroup().getNodes());
		this.context.put("selectedList", new ArrayList<>());
		this.context.put("action", "editSave");	
	}
	
	/**
	 * Deletes a group
	 */
	public void delete() 
	{		
		final String groupId[] = this.request.getParameterValues(GROUP_ID);
		
		if (groupId == null) {
			this.list();
			
			return;
		}
		
		final List<String> errors = new ArrayList<>();
		final GroupDAO groupDao = DataAccessDriver.getInstance().newGroupDAO();
			
		for (int i = 0; i < groupId.length; i++) {
			final int id = Integer.parseInt(groupId[i]);
			
			if (groupDao.canDelete(id)) {
				groupDao.delete(id);
			}
			else {
				errors.add(I18n.getMessage(I18n.CANNOT_DELETE_GROUP, new Object[] { Integer.valueOf(id) }));
			}
		}
		
		if (!errors.isEmpty()) {
			this.context.put("errorMessage", errors);
		}
			
		this.list();
	}
	
	/**
	 * Saves a new group
	 */
	public void insertSave()
	{
		final GroupDAO groupDao = DataAccessDriver.getInstance().newGroupDAO();
		
		final Group group = new Group();
		group.setDescription(this.request.getParameter("group_description"));
		group.setParentId(this.request.getIntParameter("parent_id"));
		group.setName(this.request.getParameter("group_name"));
			
		groupDao.addNew(group);			
			
		this.list();
	}
	
	/**
	 * Permissions
	 */
	public void permissions()
	{
		final int id = this.request.getIntParameter(GROUP_ID);
		
		final PermissionControl permissionControl = new PermissionControl();
		permissionControl.setRoles(DataAccessDriver.getInstance().newGroupSecurityDAO().loadRoles(id));
		
		final String xmlconfig = SystemGlobals.getValue(ConfigKeys.CONFIG_DIR) + "/permissions.xml"; 
		final List<PermissionSection> sections = new XMLPermissionControl(permissionControl).loadConfigurations(xmlconfig); 
		
		final GroupDAO groupDao = DataAccessDriver.getInstance().newGroupDAO();

		this.context.put("sections", sections);
		this.context.put("group", groupDao.selectById(id));
		this.setTemplateName(TemplateKeys.GROUP_PERMISSIONS);
	}
	
	public void permissionsSave()
	{
		final int id = this.request.getIntParameter("id");
		
		final GroupSecurityDAO gmodel = DataAccessDriver.getInstance().newGroupSecurityDAO();
		
		final PermissionControl pc = new PermissionControl();
		pc.setSecurityModel(gmodel);
		
		new PermissionProcessHelper(pc, id).processData();

		SecurityRepository.clean();
		RolesRepository.clear();
		ForumRepository.clearModeratorList();
		
		this.list();
	}
}

../jforum2-code/src/main/java/net/jforum/view/admin/ConfigAction.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 15/08/2003 / 20:56:33
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.view.admin;

import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Properties;

import net.jforum.JForumExecutionContext;
import net.jforum.context.RequestContext;
import net.jforum.context.ResponseContext;
import net.jforum.dao.DataAccessDriver;
import net.jforum.dao.GroupDAO;
import net.jforum.entities.Category;
import net.jforum.entities.Forum;
import net.jforum.exceptions.ForumException;
import net.jforum.repository.ForumRepository;
import net.jforum.repository.TopicRepository;
import net.jforum.search.SearchFacade;
import net.jforum.view.forum.common.ForumCommon;
import net.jforum.util.I18n;
import net.jforum.util.SafeHtml;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;
import net.jforum.util.preferences.TemplateKeys;

import freemarker.template.Configuration;
import freemarker.template.SimpleHash;

/**
 * @author Rafael Steil
 */
public class ConfigAction extends AdminCommand 
{
	public ConfigAction() {}

	public ConfigAction (RequestContext request, ResponseContext response, SimpleHash context)
	{
		this.request = request;
		this.response = response;
		this.context = context;
	}

	@Override public void list() {
		Properties p = new Properties();
		Iterator<Object> iter = SystemGlobals.fetchConfigKeyIterator();

		while (iter.hasNext()) {
			String key = (String) iter.next();
			String value = SystemGlobals.getValue(key);
			p.put(key, value);
		}

		Properties locales = new Properties();

		try (FileInputStream fis = new FileInputStream(SystemGlobals.getValue(ConfigKeys.CONFIG_DIR) + "/languages/locales.properties"))
		{
			locales.load(fis);
		}
		catch (IOException e) {
			throw new ForumException(e);
		}

		List<Object> localesList = new ArrayList<>();

		for (Enumeration<Object> e = locales.keys(); e.hasMoreElements();) {
			localesList.add(e.nextElement());
		}

		this.context.put("config", p);
		this.context.put("locales", localesList);
		GroupDAO groupDao = DataAccessDriver.getInstance().newGroupDAO();
        this.context.put("groups", groupDao.selectAll());
		this.context.put("forumTrashcan", Integer.valueOf(SystemGlobals.getIntValue(ConfigKeys.FORUM_TRASHCAN)));
		this.context.put("defaultUserGroup", Integer.valueOf(SystemGlobals.getIntValue(ConfigKeys.DEFAULT_USER_GROUP)));
		this.context.put("allCategories", ForumCommon.getAllCategoriesAndForums(true));
		this.setTemplateName(TemplateKeys.CONFIG_LIST);
	}

	public void editSave()
	{
		this.updateData(this.getConfig());
		this.list();
	}

	protected Properties getConfig()
	{
		Properties p = new Properties();

		Enumeration<String> e = this.request.getParameterNames();
		while (e.hasMoreElements()) {
			String name = e.nextElement();

			if (name.startsWith("p_")) {
				p.setProperty(name.substring(name.indexOf('_') + 1), this.request.getParameter(name));
			}
		}

		return p;
	}

	protected void updateData(Properties p)
	{
		for (Iterator<Map.Entry<Object, Object>>  iter = p.entrySet().iterator(); iter.hasNext(); ) {
			Map.Entry<Object, Object> entry = iter.next();

			SystemGlobals.setValue((String)entry.getKey(), (String)entry.getValue());
		}

		SystemGlobals.saveInstallation(true);
		I18n.changeBoardDefault(SystemGlobals.getValue(ConfigKeys.I18N_DEFAULT));

		// list of welcome HTML tags and attributes
		SafeHtml.updateConfiguration();

		// languages for stop words might have changed
		SearchFacade.manager().init();

		// If topicsPerPage has changed, force a reload in all forums
		int oldTopicsPerPage = SystemGlobals.getIntValue(ConfigKeys.TOPICS_PER_PAGE);
		if (oldTopicsPerPage != SystemGlobals.getIntValue(ConfigKeys.TOPICS_PER_PAGE)) {
			List<Category> categories = ForumRepository.getAllCategories();

			for (Iterator<Category> iter = categories.iterator(); iter.hasNext(); ) {
				Category category = iter.next();

				for (Iterator<Forum> iter2 = category.getForums().iterator(); iter2.hasNext(); ) {
					Forum forum = iter2.next();
					TopicRepository.clearCache(forum.getId());
				}
			}
		}

		// needs to be done especially, as it's only loaded at servlet initialization
		Configuration templateCfg = JForumExecutionContext.getTemplateConfig();
		if (SystemGlobals.getBoolValue(ConfigKeys.DEVELOPMENT)) {
			templateCfg.setTemplateUpdateDelayMilliseconds(2000);
		} else {
			templateCfg.setTemplateUpdateDelayMilliseconds(3600000);
		}
	}
}

../jforum2-code/src/main/java/net/jforum/view/admin/AdminAction.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 17/01/2004 / 19:34:01
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.view.admin;

import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URL;
import java.net.URLConnection;

import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;

import freemarker.template.SimpleHash;
import freemarker.template.Template;
import net.jforum.Command;
import net.jforum.JForumExecutionContext;
import net.jforum.SessionFacade;
import net.jforum.api.integration.mail.pop.POPListener;
import net.jforum.context.RequestContext;
import net.jforum.context.ResponseContext;
import net.jforum.dao.DataAccessDriver;
import net.jforum.dao.ForumDAO;
import net.jforum.entities.UserSession;
import net.jforum.repository.ModulesRepository;
import net.jforum.repository.SecurityRepository;
import net.jforum.security.PermissionControl;
import net.jforum.security.SecurityConstants;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;
import net.jforum.util.preferences.TemplateKeys;

/**
 * @author Rafael Steil
 */
public class AdminAction extends Command {

	private static final Logger LOGGER = Logger.getLogger(AdminAction.class);
	
	/** 
	 * @see net.jforum.Command#list()
	 */
	@Override public void list()  
	{
		this.login();
	}
	
	public void login()
	{
		UserSession us = SessionFacade.getUserSession();
		PermissionControl pc = SecurityRepository.get(us.getUserId());
		
		if (!SessionFacade.isLogged() 
				|| pc == null 
				|| !pc.canAccess(SecurityConstants.PERM_ADMINISTRATION)) {
			String returnPath = this.request.getContextPath() + "/admBase/login" 
				+ SystemGlobals.getValue(ConfigKeys.SERVLET_EXTENSION);

			JForumExecutionContext.setRedirect(this.request.getContextPath() 
				+ "/user/login" 
				+ SystemGlobals.getValue(ConfigKeys.SERVLET_EXTENSION) 
				+ "?returnPath=" + returnPath);
		}
		else {
			this.setTemplateName(TemplateKeys.ADMIN_INDEX);
		}
	}
	
	public void menu()
	{
		if (this.checkAdmin()) {
			this.setTemplateName(TemplateKeys.ADMIN_MENU);
		}
	}
	
	public void main() throws Exception
	{
		if (this.checkAdmin()) {
			this.setTemplateName(TemplateKeys.ADMIN_MAIN);
			
			// Checks if the install module is still active
			this.context.put("installModuleExists", ModulesRepository.getModuleClass("install") != null);
			this.context.put("sessions", SessionFacade.getAllSessions());
			
			ForumDAO dao = DataAccessDriver.getInstance().newForumDAO();
			this.context.put("stats", dao.getBoardStatus());
			
			boolean versionCheckEnabled = SystemGlobals.getBoolValue(ConfigKeys.VERSION_CHECK_ENABLED);
			if (versionCheckEnabled) {
				this.checkBoardVersion();
			} else {
				this.context.put("developmentVersion", false);
			}
		}
	}
	
	public void fetchMail() throws Exception
	{
		new Thread(() -> {
			try {
				new POPListener().execute(null);
			}
			catch (Exception e) {
				LOGGER.error(e.getMessage(), e);
			}
		}).start();

		this.main();
	}
	
	private void checkBoardVersion()
	{
		String data = this.readVersionFromSocket();
		
		if (StringUtils.isBlank(data)) {
			this.context.put("developmentVersion", false);
			return;
		}
		
		int index = data.indexOf('\n');
		
		String version = data.substring(0, index).trim();
		String notes = data.substring(index + 1, data.length());
		
		this.matchVersion(version);
		this.context.put("notes", notes);
	}
	
	private void matchVersion(String latest)
	{
		String current = SystemGlobals.getValue(ConfigKeys.VERSION);
		
		String[] currentParts = current.split("\\.");
		String[] latestParts = latest.split("\\.");
		
		if (currentParts[2].indexOf('-') > -1) {
			currentParts[2] = currentParts[2].substring(0, currentParts[2].indexOf('-'));
		}
		
		int latestVersion = Integer.parseInt(latestParts[0]) * 1000 + Integer.parseInt(latestParts[1]) * 100 + Integer.parseInt(latestParts[2]);
		int currentVersion = Integer.parseInt(currentParts[0]) * 1000 +	Integer.parseInt(currentParts[1]) * 100 + Integer.parseInt(currentParts[2]);
		if (latestVersion <= currentVersion) { 
			this.context.put("upToDate", true);
		}
		else {
			this.context.put("upToDate", false);
		}
		
		this.context.put("latestVersion", latest);
		this.context.put("currentVersion", current);
		this.context.put("developmentVersion", current.indexOf("-dev") > -1);
	}
	
	private String readVersionFromSocket()
	{
		InputStream is = null;
		OutputStream os = null;
		
		String data = null;
		
		try {
			URL url = new URL(SystemGlobals.getValue(ConfigKeys.JFORUM_VERSION_URL));
			URLConnection conn = url.openConnection();
			
			is = conn.getInputStream();
			os = new ByteArrayOutputStream();
			
			int available = is.available();
			
			while (available > 0) {
				byte[] b = new byte[available];
				is.read(b);
				os.write(b);
				
				available = is.available();
			}
			
			data = os.toString();
		}
		catch (Exception e) {
			LOGGER.error(e.getMessage(), e);
		}
		finally {
			if (is != null) {
				try {
					is.close();
				} catch (Exception e) {
					LOGGER.error(e.getMessage(), e);
				}
			}

			if (os != null) {
				try {
					os.close();
				} catch (Exception e) {
					LOGGER.error(e.getMessage(), e);
				}
			}
		}
		
		return data;
	}
	
	public boolean checkAdmin()
	{
		int userId = SessionFacade.getUserSession().getUserId();
		
		if (SecurityRepository.get(userId).canAccess(SecurityConstants.PERM_ADMINISTRATION)) {
			return true;
		}
		
		JForumExecutionContext.setRedirect(JForumExecutionContext.getRequest().getContextPath() 
			+ "/admBase/login"
			+ SystemGlobals.getValue(ConfigKeys.SERVLET_EXTENSION));
		
		super.enableIgnoreAction();

		return false;
	}

	@Override public Template process(RequestContext request, ResponseContext response, 
			SimpleHash context)
	{
		return super.process(request, response, context);
	}
}

../jforum2-code/src/main/java/net/jforum/view/admin/ForumAction.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Mar 28, 2003 / 8:21:56 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.view.admin;

import java.util.ArrayList;
import java.util.List;

import net.jforum.dao.CategoryDAO;
import net.jforum.dao.DataAccessDriver;
import net.jforum.dao.ForumDAO;
import net.jforum.dao.GroupSecurityDAO;
import net.jforum.dao.MailIntegrationDAO;
import net.jforum.dao.TopicDAO;
import net.jforum.entities.Category;
import net.jforum.entities.Forum;
import net.jforum.entities.MailIntegration;
import net.jforum.repository.ForumRepository;
import net.jforum.repository.RolesRepository;
import net.jforum.repository.SecurityRepository;
import net.jforum.security.PermissionControl;
import net.jforum.security.Role;
import net.jforum.security.RoleValue;
import net.jforum.security.RoleValueCollection;
import net.jforum.security.SecurityConstants;
import net.jforum.util.TreeGroup;
import net.jforum.util.preferences.TemplateKeys;
import net.jforum.view.admin.common.ModerationCommon;

/**
 * @author Rafael Steil
 */
public class ForumAction extends AdminCommand 
{
	private static final String FORUM_ID = "forum_id";
	/**
	 * Listing
	 */
	@Override public void list()
	{
		this.context.put("categories", DataAccessDriver.getInstance().newCategoryDAO().selectAll());
		this.context.put("repository", new ForumRepository());
		this.setTemplateName(TemplateKeys.FORUM_ADMIN_LIST);
	}
	
	/**
	 * One more, one more
	 */
	public void insert()
	{
		final CategoryDAO categoryDao = DataAccessDriver.getInstance().newCategoryDAO();
		
		this.context.put("groups", new TreeGroup().getNodes());
		this.context.put("selectedList", new ArrayList<>());
		this.setTemplateName(TemplateKeys.FORUM_ADMIN_INSERT);
		this.context.put("categories",categoryDao.selectAll());
		this.context.put("action", "insertSave");		
	}
	
	/**
	 * Edit
	 */
	public void edit()
	{
		final int forumId = this.request.getIntParameter(FORUM_ID);
		final ForumDAO forumDao = DataAccessDriver.getInstance().newForumDAO();
		
		final CategoryDAO categoryDao = DataAccessDriver.getInstance().newCategoryDAO();
		
		this.setTemplateName(TemplateKeys.FORUM_ADMIN_EDIT);
		this.context.put("categories", categoryDao.selectAll());
		this.context.put("action", "editSave");
		this.context.put("forum", forumDao.selectById(forumId));
		
		// Mail Integration
		final MailIntegrationDAO integrationDao = DataAccessDriver.getInstance().newMailIntegrationDAO();
		this.context.put("mailIntegration", integrationDao.find(forumId));
	}
	
	public void editSave()
	{
		ForumDAO forumDao = DataAccessDriver.getInstance().newForumDAO();
		Forum forum = forumDao.selectById(this.request.getIntParameter(FORUM_ID));
		
		boolean moderated = forum.isModerated();
		int categoryId = forum.getCategoryId();
		
		forum.setDescription(this.request.getParameter("description"));
		forum.setIdCategories(this.request.getIntParameter("categories_id"));
		forum.setName(this.request.getParameter("forum_name"));
		forum.setModerated("1".equals(this.request.getParameter("moderate")));

		forumDao.update(forum);

		if (moderated != forum.isModerated()) {
			new ModerationCommon().setTopicModerationStatus(forum.getId(), forum.isModerated());
		}
		
		if (categoryId != forum.getCategoryId()) {
			forum.setIdCategories(categoryId);
			ForumRepository.removeForum(forum);
			
			forum.setIdCategories(this.request.getIntParameter("categories_id"));
			ForumRepository.addForum(forum);
		}
		else {
			ForumRepository.reloadForum(forum.getId());
		}
		
		this.handleMailIntegration();
		
		this.list();
	}
	
	private void handleMailIntegration()
	{
		int forumId = this.request.getIntParameter(FORUM_ID);
		MailIntegrationDAO dao = DataAccessDriver.getInstance().newMailIntegrationDAO();
		
		if (!"1".equals(this.request.getParameter("mail_integration"))) {
			dao.delete(forumId);
		}
		else {
			boolean exists = dao.find(forumId) != null;
			
			MailIntegration mailIntegration = this.fillMailIntegrationFromRequest();
			
			if (exists) {
				dao.update(mailIntegration);
			}
			else {
				dao.add(mailIntegration);
			}
		}
	}
	
	private MailIntegration fillMailIntegrationFromRequest()
	{
		MailIntegration mailIntegration = new MailIntegration();
		
		mailIntegration.setForumId(this.request.getIntParameter(FORUM_ID));
		mailIntegration.setForumEmail(this.request.getParameter("forum_email"));
		mailIntegration.setPopHost(this.request.getParameter("pop_host"));
		mailIntegration.setPopUsername(this.request.getParameter("pop_username"));
		mailIntegration.setPopPassword(this.request.getParameter("pop_password"));
		mailIntegration.setPopPort(this.request.getIntParameter("pop_port"));
		mailIntegration.setSsl("1".equals(this.request.getParameter("requires_ssl")));
		
		return mailIntegration;
	}
	
	public void up()
	{
		this.processOrdering(true);
	}
	
	public void down()
	{
		this.processOrdering(false);
	}
	
	private void processOrdering(final boolean isUp)
	{
		Forum toChange = new Forum(ForumRepository.getForum(Integer.parseInt(
				this.request.getParameter(FORUM_ID))));
		
		Category category = ForumRepository.getCategory(toChange.getCategoryId());
		List<Forum> forums = new ArrayList<>(category.getForums());
		int index = forums.indexOf(toChange);
		
		if (index == -1 || (isUp && index == 0) || (!isUp && index + 1 == forums.size())) {
			this.list();
			return;
		}
		
		ForumDAO fm = DataAccessDriver.getInstance().newForumDAO();
		
		if (isUp) {
			// Get the forum which comes *before* the forum we're changing
			Forum otherForum = new Forum(forums.get(index - 1));
			fm.setOrderUp(toChange, otherForum);
		}
		else {
			// Get the forum which comes *after* the forum we're changing
			Forum otherForum = new Forum(forums.get(index + 1));
			fm.setOrderDown(toChange, otherForum);
		}
		
		category.changeForumOrder(toChange);
		ForumRepository.refreshCategory(category);
		
		this.list();
	}
	
	/**
	 * Delete
	 */
	public void delete()
	{
		String ids[] = this.request.getParameterValues(FORUM_ID);
		
		ForumDAO forumDao = DataAccessDriver.getInstance().newForumDAO();
		TopicDAO topicDao = DataAccessDriver.getInstance().newTopicDAO();
		
		if (ids != null) {
			for (int i = 0; i < ids.length; i++) {
				int forumId = Integer.parseInt(ids[i]);

				topicDao.deleteByForum(forumId);
				forumDao.delete(forumId);
				
				ForumRepository.removeForum(ForumRepository.getForum(forumId));
			}
			
			SecurityRepository.clean();
			RolesRepository.clear();
		}
		
		this.list();
	}
	
	/**
	 * A new one
	 */
	public void insertSave()
	{
		Forum forum = new Forum();
		forum.setDescription(this.request.getParameter("description"));
		forum.setIdCategories(this.request.getIntParameter("categories_id"));
		forum.setName(this.request.getParameter("forum_name"));	
		forum.setModerated("1".equals(this.request.getParameter("moderate")));
			
		int forumId = DataAccessDriver.getInstance().newForumDAO().addNew(forum);
		forum.setId(forumId);
		
		ForumRepository.addForum(forum);
		
		GroupSecurityDAO gmodel = DataAccessDriver.getInstance().newGroupSecurityDAO();
		PermissionControl pc = new PermissionControl();
		pc.setSecurityModel(gmodel);
		
		String[] allGroups = this.request.getParameterValues("groups");
		
		// Access
		String[] groups = this.request.getParameterValues("groupsAccess");
		if (groups != null) {
			this.addRole(pc, SecurityConstants.PERM_FORUM, forum.getId(), groups);
		}
		else {
			this.addRole(pc, SecurityConstants.PERM_FORUM, forum.getId(), allGroups);
		}
		
		// Anonymous posts
		groups = this.request.getParameterValues("groupsAnonymous");
		if (groups != null) {
			this.addRole(pc, SecurityConstants.PERM_ANONYMOUS_POST, forum.getId(), groups);
		}
		/*else {
			//this.addRole(pc, SecurityConstants.PERM_ANONYMOUS_POST, f.getId(), allGroups);
		}*/
		
		// Read-only
		groups = this.request.getParameterValues("groupsReadOnly");
		if (groups != null) {
			this.addRole(pc, SecurityConstants.PERM_READ_ONLY_FORUMS, forum.getId(), groups);
		}
		else {
			this.addRole(pc, SecurityConstants.PERM_READ_ONLY_FORUMS, forum.getId(), allGroups);
		}
		
		// Reply-only
		this.addRole(pc, SecurityConstants.PERM_REPLY_ONLY, forum.getId(), allGroups);
		
		// HTML
		groups = this.request.getParameterValues("groupsHtml");
		if (groups != null) {
			this.addRole(pc, SecurityConstants.PERM_HTML_DISABLED, forum.getId(), groups);
		}
		else {
			this.addRole(pc, SecurityConstants.PERM_HTML_DISABLED, forum.getId(), allGroups);
		}
		
		SecurityRepository.clean();
		RolesRepository.clear();
		
		this.request.addParameter(FORUM_ID, String.valueOf(forumId));
		this.handleMailIntegration();

		this.list();
	}
	
	private void addRole(final PermissionControl permissionControl, final String roleName, final int forumId, final String[] groups) 
	{
		Role role = new Role();
		role.setName(roleName);		
		
		for (int i = 0; i < groups.length; i++) {
			int groupId = Integer.parseInt(groups[i]);
			RoleValueCollection roleValues = new RoleValueCollection();
			
			RoleValue roleValue = new RoleValue();
			roleValue.setValue(Integer.toString(forumId));
			roleValues.add(roleValue);
			
			permissionControl.addRoleValue(groupId, role, roleValues);
		}
	}
}

../jforum2-code/src/main/java/net/jforum/view/admin/AdminCommand.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Mar 14, 2005 7:33:43 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.view.admin;

import freemarker.template.SimpleHash;
import freemarker.template.Template;
import net.jforum.Command;
import net.jforum.context.RequestContext;
import net.jforum.context.ResponseContext;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public abstract class AdminCommand extends Command
{
	@Override public Template process(final RequestContext request, final ResponseContext response,
			final SimpleHash context)
	{
		if (!new AdminAction().checkAdmin()) {
			this.enableIgnoreAction();
		}

		return super.process(request, response, context);
	}
}

../jforum2-code/src/main/java/net/jforum/view/admin/RegEmailAction.java
package net.jforum.view.admin;

import java.util.SortedMap;

import org.apache.log4j.Logger;

import net.jforum.dao.DataAccessDriver;
import net.jforum.dao.GroupDAO;
import net.jforum.dao.RegEmailDAO;
import net.jforum.entities.Group;
import net.jforum.repository.RegEmailRepository;
import net.jforum.util.I18n;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;
import net.jforum.util.preferences.TemplateKeys;

public class RegEmailAction extends AdminCommand {

    private static final Logger LOG = Logger.getLogger(RegEmailAction.class);

	private GroupDAO groupDao = DataAccessDriver.getInstance().newGroupDAO();
	private RegEmailDAO regEmailDao = DataAccessDriver.getInstance().newRegEmailDAO();

    @Override
    public void list() {
        final SortedMap<String, Group> regEmails = regEmailDao.selectAll();
        context.put("regEmails", regEmails);
        context.put("groups", groupDao.selectAll());
        context.put("defaultUserGroup", SystemGlobals.getIntValue(ConfigKeys.DEFAULT_USER_GROUP));
        context.put("registrationEnabled", SystemGlobals.getBoolValue(ConfigKeys.REGISTRATION_ENABLED));
        context.put("registrationEmailNotMatchingEnabled", SystemGlobals.getBoolValue(ConfigKeys.REGISTRATION_EMAIL_NOT_MATCHING_ENABLED));
        setTemplateName(TemplateKeys.REG_EMAIL_LIST);
    }

    public void insertEmailOrDomain() {
        final String email = request.getParameter("email").trim();
        final int groupId = request.getIntParameter("group");

		Group group = groupDao.selectById(groupId);
		if (group.getId() == groupId) {
			LOG.info("Creating registration email/domain" + email + " in " + group);
			regEmailDao.addRegEmail(email, group);

			RegEmailRepository.load();
		} else {
			context.put("errorMessage", I18n.getMessage("RegEmail.noSuchGroup"));
			LOG.info("Group id="+groupId+" does not exist");
		}

        this.list();
    }

    public void delete() {
        final String email = request.getParameter("email");
        LOG.info("Deleting " + email);
        regEmailDao.deleteRegEmail(email);

		RegEmailRepository.load();
        this.list();
    }
}

../jforum2-code/src/main/java/net/jforum/view/admin/CategoryAction.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Mar 10, 2003 / 8:49:51 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.view.admin;

import java.util.ArrayList;
import java.util.List;

import net.jforum.dao.CategoryDAO;
import net.jforum.dao.DataAccessDriver;
import net.jforum.dao.GroupSecurityDAO;
import net.jforum.entities.Category;
import net.jforum.repository.ForumRepository;
import net.jforum.repository.RolesRepository;
import net.jforum.repository.SecurityRepository;
import net.jforum.security.PermissionControl;
import net.jforum.security.Role;
import net.jforum.security.RoleValue;
import net.jforum.security.RoleValueCollection;
import net.jforum.security.SecurityConstants;
import net.jforum.util.I18n;
import net.jforum.util.TreeGroup;
import net.jforum.util.preferences.TemplateKeys;
import net.jforum.view.admin.common.ModerationCommon;

/**
 * ViewHelper for category administration.
 * 
 * @author Rafael Steil
 */
public class CategoryAction extends AdminCommand 
{
	private CategoryDAO cm = DataAccessDriver.getInstance().newCategoryDAO();
	
	/**
	 * Listing
	 */
	@Override public void list()
	{
		this.context.put("categories", DataAccessDriver.getInstance().newCategoryDAO().selectAll());
		this.context.put("repository", new ForumRepository());
		this.setTemplateName(TemplateKeys.CATEGORY_LIST);
	}
	
	/**
	 * One more, one more
	 */
	public void insert()
	{
		this.context.put("groups", new TreeGroup().getNodes());
		this.context.put("selectedList", new ArrayList<>());
		this.setTemplateName(TemplateKeys.CATEGORY_INSERT);
		this.context.put("action", "insertSave");
	}
	
	/**
	 * Edit
	 */
	public void edit()
	{
		this.context.put("category", this.cm.selectById(this.request.getIntParameter("category_id")));
		this.setTemplateName(TemplateKeys.CATEGORY_EDIT);
		this.context.put("action", "editSave");
	}
	
	/**
	 * Save information
	 */
	public void editSave()
	{
		Category category = new Category(ForumRepository.getCategory(
				this.request.getIntParameter("categories_id")));
		category.setName(this.request.getParameter("category_name"));
		category.setModerated("1".equals(this.request.getParameter("moderate")));
			
		this.cm.update(category);
		ForumRepository.reloadCategory(category);
		
		new ModerationCommon().setForumsModerationStatus(category, category.isModerated());
		
		this.list();
	}
	
	/**
	 * Delete
	 */
	public void delete()
	{
		String ids[] = this.request.getParameterValues("categories_id");
		List<String> errors = new ArrayList<>();
		
		if (ids != null) {						
			for (int i = 0; i < ids.length; i++){
				if (this.cm.canDelete(Integer.parseInt(ids[i]))) {
					int id = Integer.parseInt(ids[i]);
					Category category = this.cm.selectById(id);
					this.cm.delete(id);
					
					ForumRepository.removeCategory(category);
				}
				else {
					errors.add(I18n.getMessage(I18n.CANNOT_DELETE_CATEGORY, new Object[] { Integer.valueOf(ids[i]) }));
				}
			}
		}

		if (!errors.isEmpty()) {
			this.context.put("errorMessage", errors);
		}
		
		this.list();
	}
	
	/**
	 * A new one
	 */
	public void insertSave()
	{
		Category category = new Category();
		category.setName(this.request.getParameter("category_name"));
		category.setModerated("1".equals(this.request.getParameter("moderated")));
			
		int categoryId = this.cm.addNew(category);
		category.setId(categoryId);

		ForumRepository.addCategory(category);
		
		String[] groups = this.request.getParameterValues("groups");
		if (groups != null) {
			GroupSecurityDAO gmodel = DataAccessDriver.getInstance().newGroupSecurityDAO();
			PermissionControl pc = new PermissionControl();
			pc.setSecurityModel(gmodel);

			Role role = new Role();
			role.setName(SecurityConstants.PERM_CATEGORY);

			for (int i = 0; i < groups.length; i++) {
				int groupId = Integer.parseInt(groups[i]);
				RoleValueCollection roleValues = new RoleValueCollection();
				
				RoleValue rv = new RoleValue();
				rv.setValue(Integer.toString(categoryId));
				
				roleValues.add(rv);
				
				pc.addRoleValue(groupId, role, roleValues);
			}
			
			SecurityRepository.clean();
			RolesRepository.clear();
		}
			
		this.list();
	}
	
	public void up()
	{
		this.processOrdering(true);
	}
	
	public void down()
	{
		this.processOrdering(false);
	}
	
	private void processOrdering(boolean up) 
	{
		Category toChange = new Category(ForumRepository.getCategory(Integer.parseInt(
				this.request.getParameter("category_id"))));
		
		List<Category> categories = ForumRepository.getAllCategories();
		
		int index = categories.indexOf(toChange);
		if (index == -1 || (up && index == 0) || (!up && index + 1 == categories.size())) {
			this.list();
			return;
		}
		
		if (up) {
			// Get the category which comes *before* the category we want to change
			Category otherCategory = new Category(categories.get(index - 1));
			this.cm.setOrderUp(toChange, otherCategory);
		}
		else {
			// Get the category which comes *after* the category we want to change
			Category otherCategory = new Category(categories.get(index + 1));
			this.cm.setOrderDown(toChange, otherCategory);
		}
		
		ForumRepository.reloadCategory(toChange);
		this.list();
	}
}

../jforum2-code/src/main/java/net/jforum/view/admin/BannerAction.java
/*
 * Copyright (c) 2003, 2004 Rafael Steil
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms,
 * with or without modification, are permitted provided
 * that the following conditions are met:
 *
 * 1) Redistributions of source code must retain the above
 * copyright notice, this list of conditions and the
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the
 * above copyright notice, this list of conditions and
 * the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor
 * the names of its contributors may be used to endorse
 * or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
 * IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 *
 * Created on Mar 31, 2005 / 11:21:41 AM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.view.admin;

import net.jforum.dao.BannerDAO;
import net.jforum.dao.DataAccessDriver;
import net.jforum.entities.Banner;
import net.jforum.util.I18n;
import net.jforum.util.preferences.TemplateKeys;

/**
 * ViewHelper class for banner administration.
 *
 * @author Samuel Yung
 */
public class BannerAction extends AdminCommand
{
	/**
	 * Listing
	 */
	@Override public void list()
	{
		this.context.put("banners", DataAccessDriver.getInstance().newBannerDAO().selectAll());
		this.setTemplateName(TemplateKeys.BANNER_LIST);
	}

	/**
	 * Insert
	 */
	public void insert()
	{
		this.context.put("action", "insertSave");
		this.setTemplateName(TemplateKeys.BANNER_INSERT);
	}

	/**
	 * Saves a new banner
	 */
	public void insertSave()
	{
		final BannerDAO dao = DataAccessDriver.getInstance().newBannerDAO();

		dao.addNew(getBanner());

		this.list();
	}

	/**
	 * Edit a banner
	 */
	public void edit()
	{
		final int bannerId = this.request.getIntParameter("banner_id");
		final BannerDAO dao = DataAccessDriver.getInstance().newBannerDAO();

		this.context.put("banner", dao.selectById(bannerId));
		this.setTemplateName(TemplateKeys.BANNER_EDIT);
		this.context.put("action", "editSave");
	}

	/**
	 * Save information for an existing banner
	 */
	public void editSave() 
	{
		final int bannerId = this.request.getIntParameter("banner_id");

		final Banner banner = getBanner();
		banner.setId(bannerId);

		DataAccessDriver.getInstance().newBannerDAO().update(banner);

		this.list();
	}

	/**
	 * Delete a banner
	 */
	public void delete() 
	{
		final String bannerId = this.request.getParameter("banner_id");
		if (bannerId == null)
		{
			this.list();
			return;
		}

		final BannerDAO dao = DataAccessDriver.getInstance().newBannerDAO();

		final int id = Integer.parseInt(bannerId);
		if (dao.canDelete(id))
		{
			dao.delete(id);
		}
		else
		{
			this.context.put("errorMessage",
				I18n.getMessage(I18n.CANNOT_DELETE_BANNER));
		}

		this.list();
	}

	protected Banner getBanner()
	{
		final Banner banner = new Banner();
		banner.setComment(request.getParameter("comment"));
		banner.setActive(request.getIntParameter("active") == 1);
		banner.setType(Integer.parseInt(request.getParameter("type")));
		banner.setName(request.getParameter("name"));
		banner.setDescription(request.getParameter("description"));
		banner.setWidth(Integer.parseInt(request.getParameter("width")));
		banner.setHeight(Integer.parseInt(request.getParameter("height")));
		banner.setUrl(request.getParameter("url"));
		banner.setPlacement(Integer.parseInt(request.getParameter("placement")));
		banner.setWeight(Integer.parseInt(request.getParameter("weight")));
		banner.setViews(Integer.parseInt(request.getParameter("views")));
		banner.setClicks(Integer.parseInt(request.getParameter("clicks")));

		return banner;
	}
}

../jforum2-code/src/main/java/net/jforum/view/admin/SmiliesAction.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 13/01/2004 / 18:45:31
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.view.admin;

import java.io.ByteArrayInputStream;
import java.io.File;

import javax.imageio.ImageIO;

import org.apache.commons.fileupload.FileItem;
import org.apache.log4j.Logger;

import net.jforum.dao.DataAccessDriver;
import net.jforum.dao.SmilieDAO;
import net.jforum.entities.Smilie;
import net.jforum.repository.SmiliesRepository;
import net.jforum.util.Hash;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;
import net.jforum.util.preferences.TemplateKeys;
import net.jforum.view.forum.common.UploadUtils;

/**
 * @author Rafael Steil
 */
public class SmiliesAction extends AdminCommand 
{
	private static final Logger LOGGER = Logger.getLogger(SmiliesAction.class);

	private String processUpload()
	{
		String imgName = "";

		if (this.request.getObjectParameter("smilie_img") != null) {
			FileItem item = (FileItem)this.request.getObjectParameter("smilie_img");
			UploadUtils uploadUtils = new UploadUtils(item);
			String ext = uploadUtils.getExtension().toLowerCase();
			String contentType = item.getContentType();
			LOGGER.info("Uploaded smilie contentType: " + contentType);
			try {
				if ((contentType != null && contentType.contains("image")) || ext.equals("png") || ext.equals("gif") || ext.equals("jpg") || ext.equals("jpeg")) {
					// try to load it as an image; will also accept other formats if passed along
					// with those file extensions (like TIFF and BMP), but that's fine
					ImageIO.read(new ByteArrayInputStream(item.get()));
					imgName = new StringBuilder(Hash.md5(item.getName())).append('.').append(uploadUtils.getExtension()).toString();
					uploadUtils.saveUploadedFile(SystemGlobals.getApplicationPath() 
							+ "/"
							+ SystemGlobals.getValue(ConfigKeys.SMILIE_IMAGE_DIR) 
							+ "/"
							+ imgName);
				} else {
					throw new Exception("Suspect file extension in smilie upload: " + ext);
				}
			} catch (Exception ex) {
				LOGGER.error("Uploaded smilie does not seem to be an image: " + ex.getMessage());
			}
		}

		return imgName;
	}

	public void insert()
	{
		this.setTemplateName(TemplateKeys.SMILIES_INSERT);
		this.context.put("action", "insertSave");
	}

	public void insertSave()
	{
		Smilie s = new Smilie();
		String code = this.request.getParameter("code");
		if (code!=null && !code.trim().equals("")) {
			s.setCode(code);
			String imgName = this.processUpload();
			if (! imgName.trim().equals("")) {
				s.setUrl(SystemGlobals.getValue(ConfigKeys.SMILIE_IMAGE_PATTERN).replaceAll("#IMAGE#", imgName));
				s.setDiskName(imgName);
				DataAccessDriver.getInstance().newSmilieDAO().addNew(s);
				SmiliesRepository.loadSmilies();
			}
		}
		this.list();
	}

	public void edit()
	{
		int id = 1;

		if (this.request.getParameter("id") != null) {
			id = this.request.getIntParameter("id");
		}

		this.setTemplateName(TemplateKeys.SMILIES_EDIT);
		this.context.put("smilie", DataAccessDriver.getInstance().newSmilieDAO().selectById(id));
		this.context.put("action", "editSave");
	}

	public void editSave()
	{
		Smilie s = DataAccessDriver.getInstance().newSmilieDAO().selectById(this.request.getIntParameter("id"));
		s.setCode(this.request.getParameter("code"));
		if (this.request.getObjectParameter("smilie_img") != null) {
			String imgName = this.processUpload();
			if (! imgName.trim().equals("")) {
				s.setUrl(SystemGlobals.getValue(ConfigKeys.SMILIE_IMAGE_PATTERN).replaceAll("#IMAGE#", imgName));
				s.setDiskName(imgName);
			}
		}
		DataAccessDriver.getInstance().newSmilieDAO().update(s);

		SmiliesRepository.loadSmilies();
		this.list();
	}

	public void delete()
	{
		String[] ids = this.request.getParameterValues("id");

		if (ids != null) {
			SmilieDAO dao = DataAccessDriver.getInstance().newSmilieDAO();

			for (int i = 0; i < ids.length; i++) {
				int id = Integer.parseInt(ids[i]);

				Smilie s = dao.selectById(id);
				dao.delete(id);

				File f = new File(SystemGlobals.getApplicationPath() 
						+ "/"
						+ SystemGlobals.getValue(ConfigKeys.SMILIE_IMAGE_DIR) 
						+ "/"
						+ s.getDiskName());

				if (f.exists()) {
					boolean result = f.delete();
					if (result != true) {
						LOGGER.error("Delete file failed: " + f.getName());
					}
				}
			}
		}

		SmiliesRepository.loadSmilies();
		this.list();
	}

	/** 
	 * @see net.jforum.Command#list()
	 */
	@Override public void list()  
	{
		this.context.put("smilies", SmiliesRepository.getSmilies());
		this.setTemplateName(TemplateKeys.SMILIES_LIST);
	}
}

../jforum2-code/src/main/java/net/jforum/view/admin/ModerationAction.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Jan 30, 2005 2:49:29 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.view.admin;

import freemarker.template.SimpleHash;

import net.jforum.SessionFacade;
import net.jforum.context.RequestContext;
import net.jforum.dao.DataAccessDriver;
import net.jforum.dao.ForumDAO;
import net.jforum.dao.ModerationDAO;
import net.jforum.dao.ModerationLogDAO;
import net.jforum.dao.PostDAO;
import net.jforum.dao.TopicDAO;
import net.jforum.dao.UserDAO;
import net.jforum.entities.ModerationLog;
import net.jforum.entities.Post;
import net.jforum.entities.Topic;
import net.jforum.entities.User;
import net.jforum.repository.ForumRepository;
import net.jforum.repository.PostRepository;
import net.jforum.repository.TopicRepository;
import net.jforum.util.I18n;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;
import net.jforum.util.preferences.TemplateKeys;
import net.jforum.view.forum.common.AttachmentCommon;
import net.jforum.view.forum.common.PostCommon;
import net.jforum.view.forum.common.TopicsCommon;

/**
 * @author Rafael Steil
 */
public class ModerationAction extends AdminCommand
{
	/**
	 * Empty Constructor
	 */
	public ModerationAction() {}

	public ModerationAction(final SimpleHash context, final RequestContext request)
	{
		this.context = context;
		this.request = request;
	}

	/**
	 * @see net.jforum.Command#list()
	 */
	@Override public void list()
	{
		this.setTemplateName(TemplateKeys.MODERATION_ADMIN_LIST);
		this.context.put("infoList", DataAccessDriver.getInstance().newModerationDAO().categoryPendingModeration());
	}

	public void view()
	{
		final int forumId = this.request.getIntParameter("forum_id");

		this.setTemplateName(TemplateKeys.MODERATION_ADMIN_VIEW);
		this.context.put("forum", ForumRepository.getForum(forumId));
		this.context.put("topics", DataAccessDriver.getInstance().newModerationDAO().topicsByForum(forumId));
	}

	public void doSave()
	{
		final String[] posts = this.request.getParameterValues("post_id");

		if (posts != null) {
			final TopicDAO topicDao = DataAccessDriver.getInstance().newTopicDAO();
			final PostDAO postDao = DataAccessDriver.getInstance().newPostDAO();
			final UserDAO userDao = DataAccessDriver.getInstance().newUserDAO();
			final ModerationDAO moderationDao = DataAccessDriver.getInstance().newModerationDAO();
			final ModerationLogDAO dao = DataAccessDriver.getInstance().newModerationLogDAO();
			final ForumDAO forumDao = DataAccessDriver.getInstance().newForumDAO();

			for (int i = 0; i < posts.length; i++) {
				final int postId = Integer.parseInt(posts[i]);

				final String status = this.request.getParameter("status_" + postId);

				if ("defer".startsWith(status)) {
					continue;
				}

				if ("approve".startsWith(status)) {
					Post post = postDao.selectById(postId);

					// Check is the post is in fact waiting for moderation
					if (!post.isModerationNeeded()) {
						continue;
					}

					User user = userDao.selectById(post.getUserId());

					boolean first = false;
					Topic topic = TopicRepository.getTopic(new Topic(post.getTopicId()));

					if (topic == null) {
						topic = topicDao.selectById(post.getTopicId());

						if (topic.getId() == 0) {
							first = true;
							topic = topicDao.selectRaw(post.getTopicId());
						}
					}

					moderationDao.approvePost(postId);

					boolean firstPost = (topic.getFirstPostId() == postId);

					if (!firstPost) {
						topic.setTotalReplies(topic.getTotalReplies() + 1);
					}

					topic.setLastPostId(postId);
					topic.setLastPostBy(user);
					topic.setLastPostDate(post.getTime());
					topic.setLastPostTime(post.getTime());

					topicDao.update(topic);

					if (first) {
						topic = topicDao.selectById(topic.getId());
					}

					TopicsCommon.updateBoardStatus(topic, postId, firstPost, topicDao, forumDao);

					ForumRepository.updateForumStats(topic, user, post);
					TopicsCommon.notifyUsers(topic, post);

					userDao.incrementPosts(post.getUserId());

					if (SystemGlobals.getBoolValue(ConfigKeys.POSTS_CACHE_ENABLED)) {
						PostRepository.append(post.getTopicId(), PostCommon.preparePostForDisplay(post));
					}

					post.setModerate(false);
					postDao.index(post);
				} // must be "reject"
				else {
					Post post = postDao.selectById(postId);

					if (post == null || !post.isModerationNeeded()) {
						continue;
					}

					postDao.delete(post);

					new AttachmentCommon(this.request, post.getForumId()).deleteAttachments(postId, post.getForumId());

					int totalPosts = topicDao.getTotalPosts(post.getTopicId());
					if (totalPosts == 0) {
						TopicsCommon.deleteTopic(post.getTopicId(), post.getForumId(), true);
					}

					// moderation log entry that a post was rejected
					ModerationLog log = new ModerationLog();
					User user = new User();
					user.setId(SessionFacade.getUserSession().getUserId());
					log.setUser(user);
					User posterUser = new User();
					posterUser.setId(post.getUserId());
					log.setPosterUser(posterUser);
					log.setType(5); // post rejected
					if (totalPosts > 0) {
						log.setTopicId(post.getTopicId());
					}
					log.setDescription(I18n.getMessage("ForumIndex.topics")
									+" \""+post.getSubject()+"\": "
									+this.request.getParameter("comment_" + postId));
					log.setOriginalMessage(post.getText());

					dao.add(log);

				}
			}
		}
	}

	public void save()
	{
		this.doSave();
		this.view();
	}
}

../jforum2-code/src/main/java/net/jforum/view/admin/BoardStatsAction.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following  disclaimer.
 * 2)  Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 23/07/2007 15:14:27
 * 
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.view.admin;

import java.io.UnsupportedEncodingException;
import java.lang.management.ManagementFactory;
import java.net.URLDecoder;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;

import javax.management.MBeanServer;
import javax.management.ObjectName;

import org.apache.log4j.Logger;

import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;
import net.jforum.util.preferences.TemplateKeys;
import net.jforum.util.stats.Stats;

public class BoardStatsAction extends AdminCommand {

	private static final Logger LOGGER = Logger.getLogger(BoardStatsAction.class);
	
	/**
     * @see net.jforum.Command#list()
     */
    @Override public void list() {
        this.setTemplateName(TemplateKeys.BOARD_STATS_LIST);
        this.context.put("records", Stats.getRecords());

        SimpleDateFormat sdf = new SimpleDateFormat(SystemGlobals.getValue(ConfigKeys.DATE_TIME_FORMAT), Locale.getDefault());
		NumberFormat nf = NumberFormat.getInstance();
		nf.setMinimumFractionDigits(1);
		nf.setMaximumFractionDigits(2);
		List<Item> sysInfo = new ArrayList<>();
        sysInfo.add(new Item("Java version", System.getProperty("java.version")));
        sysInfo.add(new Item("Max memory", ""+Runtime.getRuntime().maxMemory()));
        sysInfo.add(new Item("Total memory", ""+Runtime.getRuntime().totalMemory()));
        sysInfo.add(new Item("Free memory", ""+Runtime.getRuntime().freeMemory()));
        sysInfo.add(new Item("Server info", SystemGlobals.getValue("server.info")));
        sysInfo.add(new Item("Servlet API version", SystemGlobals.getValue("servlet.version")));
        sysInfo.add(new Item("Last board restart", sdf.format(Stats.getRestartTime())));
        sysInfo.add(new Item("Database", SystemGlobals.getValue(ConfigKeys.DATABASE_CONNECTION_DBNAME)
										+" @ "+SystemGlobals.getValue(ConfigKeys.DATABASE_DRIVER_NAME)));
		try {
			MBeanServer server = ManagementFactory.getPlatformMBeanServer();
			Double result = (Double) server.getAttribute(new ObjectName("java.lang:type=OperatingSystem"), "SystemLoadAverage");
			sysInfo.add(new Item("System load average", nf.format(result.doubleValue())));
        } catch (Exception ex) {
            LOGGER.error(ex.getMessage());
        }
        sysInfo.sort(null);
        this.context.put("sysInfo", sysInfo);
    }

    public void showLast() {
        this.setTemplateName(TemplateKeys.BOARD_STATS_SHOW_LAST);
        String tag = this.request.getParameter("tag");
        try {
            tag = URLDecoder.decode(tag, "UTF-8");
            Map<Date, Object> values = new HashMap<>();
            if (tag != null && !Stats.ForbidDetailDisplay.isForbidden(tag)) {
                tag = URLDecoder.decode(tag, "UTF-8");
                Stats.Data data = Stats.getStatsFor(tag);
                values = data.getValues();
            }
			List<Date> times = new ArrayList<>(values.keySet());
			// sort list of descending time
			Collections.sort(times,
				(obj1, obj2) -> {
					if (obj1.getTime() < obj2.getTime())	return 1;
					if (obj1.getTime() > obj2.getTime())	return -1;
					else 									return 0;
				});
            this.context.put("tag", tag);
            this.context.put("times", times);     
            this.context.put("data", values);     
        } catch (UnsupportedEncodingException e) {
            // Whatever
        }
    }

    public static class Item implements Comparable<Object> {
        private String name, value;

		Item (String name, String value) {
			this.name = name;
			this.value = value;
		}

        public String getName() {
            return name;
        }

        public String getValue() {
            return value;
        }

		@Override public int compareTo (Object rec) {
			return name.compareTo(((Item) rec).name);
		}

		@Override public boolean equals (Object rec) {
			if ((rec == null) || ! (rec instanceof Item))
				return false;

			if (rec == this) return true;

			return 0 == ((Item) rec).compareTo(this);
		}

		@Override public int hashCode() {
			return Objects.hash(name, value);
		}

    }
}

../jforum2-code/src/main/java/net/jforum/view/admin/UserAction.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Apr 19, 2003 / 9:13:16 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.view.admin;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import net.jforum.SessionFacade;
import net.jforum.dao.DataAccessDriver;
import net.jforum.dao.GroupDAO;
import net.jforum.dao.ModerationLogDAO;
import net.jforum.dao.UserDAO;
import net.jforum.entities.Group;
import net.jforum.entities.ModerationLog;
import net.jforum.entities.User;
import net.jforum.repository.SecurityRepository;
import net.jforum.util.I18n;
import net.jforum.util.SafeHtml;
import net.jforum.util.TreeGroup;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;
import net.jforum.util.preferences.TemplateKeys;
import net.jforum.view.forum.common.UserCommon;
import net.jforum.view.forum.common.ViewCommon;

/**
 * @author Rafael Steil
 */
public class UserAction extends AdminCommand 
{
	private static final String USERS = "users";
	private static final String USER_ID = "user_id";	
	
	private final UserDAO userDao = DataAccessDriver.getInstance().newUserDAO();
	private final GroupDAO groupDao = DataAccessDriver.getInstance().newGroupDAO();
	private final ModerationLogDAO modLogDao = DataAccessDriver.getInstance().newModerationLogDAO();
	
	@Override public void list()
	{
		final int start = this.preparePagination(userDao.getTotalUsers());
		final int usersPerPage = SystemGlobals.getIntValue(ConfigKeys.USERS_PER_PAGE);
		
		this.context.put(USERS, userDao.selectAll(start ,usersPerPage));
		this.commonData();
	}
	
	public void pendingActivations()
	{
		final List<User> users = userDao.pendingActivations();
		
		this.setTemplateName(TemplateKeys.USER_ADMIN_PENDING_ACTIVATIONS);
		this.context.put(USERS, users);
	}
	
	public void activateAccount()
	{
		final String[] ids = this.request.getParameterValues(USER_ID);
		
		if (ids != null) {			
			for (int i = 0; i < ids.length; i++) {
				final int userId = Integer.parseInt(ids[i]);
				userDao.writeUserActive(userId);
			}
		}
		
		this.pendingActivations();
	}
	
	private int preparePagination(final int totalUsers)
	{
		final int start = ViewCommon.getStartPage();
		final int usersPerPage = SystemGlobals.getIntValue(ConfigKeys.USERS_PER_PAGE);
		
		ViewCommon.contextToPagination(start, totalUsers, usersPerPage);
		
		return start;
	}
	
	private void commonData()
	{
		this.context.put("selectedList", new ArrayList<User>());
		this.context.put("groups", new TreeGroup().getNodes());
		this.setTemplateName(TemplateKeys.USER_ADMIN_COMMON);
		this.context.put("searchAction", "list");
		this.context.put("searchId", Integer.valueOf(-1));
		this.context.put("action", "list");
	}
	
	public void groupSearch()
	{
		final int groupId = this.request.getIntParameter("group_id");
		if (groupId == 0) {
			this.list();
			return;
		}
	
		final int start = this.preparePagination(userDao.getTotalUsersByGroup(groupId));
		final int usersPerPage = SystemGlobals.getIntValue(ConfigKeys.USERS_PER_PAGE);
		
		this.commonData();
		
		final List<Integer> list = new ArrayList<>();
		list.add(Integer.valueOf(groupId));
		
		this.context.put("selectedList", list);
		this.context.put("searchAction", "groupSearch");
		this.context.put(USERS, userDao.selectAllByGroup(groupId, start, usersPerPage));
		this.context.put("searchId", Integer.valueOf(groupId));
		this.context.put("action", "groupSearch");
	}
	
	public void search()
	{
		final String group = this.request.getParameter("group_id");
		final String username = getTrimmedNonNullParameter("username");
        final String email = getTrimmedNonNullParameter("email");
        final String userId = getTrimmedNonNullParameter("userId");
        final String ip = getTrimmedNonNullParameter("ip");

	    if (!"".equals(ip)) {
            ipSearch();
        } else if (!"".equals(userId)) {
            List<User> users = new ArrayList<>();
            try {
                User user = userDao.selectById(Integer.parseInt(userId));
                if (user != null) {
                    users.add(user);
                }
            } catch (NumberFormatException ignored) {
            }

            this.commonData();

            this.context.put(USERS, users);
            this.context.put("userId", userId);
            this.context.put("start", 1);
        } else if (!"".equals(email)) {
            emailSearch();
        } else if (!"".equals(username)) {
            List<User> users = userDao.findByName(username, false);

            this.commonData();

            this.context.put(USERS, users);
            this.context.put("search", username);
            this.context.put("start", 1);
        } else if (!"0".equals(group)) {
            this.groupSearch();
        } else {
            this.list();
        }
	}

    /**
    * Returns a trimmed value for the provided parameter name. If the parameter
    * does not exist, then an empty string is returned.
    *
    * @param parameterName the name of the parameter that we want the value of
    * @return the trimmed value or an empty string
    */
    private String getTrimmedNonNullParameter(String parameterName) {
        String value = this.request.getParameter(parameterName);
        return (value == null) ? "" : value.trim();
    }

    /**
     * Performs the search by IP address. Separated out so that pagination
     * can be easily handled. Still called by the generic search method so
     * that we have a single form on the search page.
     */
    public void ipSearch() {
        String ip = this.request.getParameter("ip");
        ip = (ip == null) ? "" : ip.trim().replaceAll("\\*", "%");

        int total = userDao.getTotalUsersByIp(ip);
        int start = this.preparePagination(total);
        int usersPerPage = SystemGlobals.getIntValue(ConfigKeys.USERS_PER_PAGE);

        List<User> users = userDao.findAllUsersByIp(ip, start, usersPerPage);

        this.commonData();

        this.context.put(USERS, users);
        this.context.put("ip", this.request.getParameter("ip"));
        this.context.put("start", 1);
        this.context.put("searchAction", "ipSearch");
        this.context.put("searchId", this.request.getParameter("ip"));
    }

    /**
    * Performs the search by email address. Separated out so that pagination
    * can be easily handled. Still called by the generic search method so
    * that we have a single form on the search page.
    */
    public void emailSearch() {
        String email = this.request.getParameter("email");
        email = (email == null) ? "" : email.trim();

        int total = userDao.getTotalUsersWithEmail(email);
        int start = this.preparePagination(total);
        int usersPerPage = SystemGlobals.getIntValue(ConfigKeys.USERS_PER_PAGE);

        List<User> users = userDao.findAllUsersByEmail(email, start, usersPerPage);

        this.commonData();
        this.context.put(USERS, users);
        this.context.put("email", email);
        this.context.put("searchAction", "emailSearch");
        this.context.put("searchId", email);
    }

	public void edit()
	{
		final int userId = this.request.getIntParameter("id");	
		final User user = userDao.selectById(userId);
		
		this.setTemplateName(TemplateKeys.USER_ADMIN_EDIT);
		this.context.put("u", user);
		this.context.put("action", "editSave");		
		this.context.put("specialRanks", DataAccessDriver.getInstance().newRankingDAO().selectSpecials());
		this.context.put("avatarAllowExternalUrl", SystemGlobals.getBoolValue(ConfigKeys.AVATAR_ALLOW_EXTERNAL_URL));
		this.context.put("avatarPath", SystemGlobals.getValue(ConfigKeys.AVATAR_IMAGE_DIR));
		this.context.put("admin", true);
	}

	public void editSave() 
	{
		int userId = this.request.getIntParameter(USER_ID);
		UserCommon.saveUser(userId);

		this.list();
	}

	// Delete
	public void delete()
	{
		String ids[] = this.request.getParameterValues(USER_ID);
		String comment = this.request.getParameter("comment");

		if (ids != null) {
			for (int i = 0; i < ids.length; i++) {

				int userId = Integer.parseInt(ids[i]);

				ModerationLog log = new ModerationLog();
				User user = new User();
				user.setId(SessionFacade.getUserSession().getUserId());
				log.setUser(user);
				User posterUser = new User();
				posterUser.setId(userId);
				log.setPosterUser(posterUser);
				log.setType(6); // user lock/unlock
				log.setOriginalMessage(SafeHtml.makeSafe(comment));

				if (userDao.isDeleted(userId)) {
					userDao.undelete(userId);
					log.setDescription(I18n.getMessage("Unlock")+" "+I18n.getMessage("User.user"));
				} else {
					SessionFacade.removeUserSessions(userId);
					userDao.delete(userId);
					log.setDescription(I18n.getMessage("Lock")+" "+I18n.getMessage("User.user"));
				}

				modLogDao.add(log);
			}
		}

		this.list();
	}
	
	// Groups
	public void groups()
	{
		int userId = this.request.getIntParameter("id");
		
		User user = userDao.selectById(userId);
		
		List<Integer> selectedList = new ArrayList<>();
		for (Iterator<Group> iter = user.getGroupsList().iterator(); iter.hasNext(); ) {
			selectedList.add(Integer.valueOf(iter.next().getId()));
		}
		
		this.context.put("selectedList", selectedList);
		this.context.put("groups", new TreeGroup().getNodes());
		this.context.put("user", user);
		this.context.put("userId", Integer.valueOf(userId));
		this.setTemplateName(TemplateKeys.USER_ADMIN_GROUPS);
		this.context.put("groupFor", I18n.getMessage("User.GroupsFor", new String[] { user.getUsername() }));
	}
	
	// Groups Save
	public void groupsSave()
	{
		int userId = this.request.getIntParameter(USER_ID);
		
		// Remove the old groups
		List<Group> allGroupsList = groupDao.selectAll();
		int[] allGroups = new int[allGroupsList.size()];
		
		int counter = 0;
		for (Iterator<Group> iter = allGroupsList.iterator(); iter.hasNext(); counter++) {
			Group group = iter.next();
			
			allGroups[counter] = group.getId();
		}
		
		userDao.removeFromGroup(userId, allGroups);
		
		// Associate the user to the selected groups
		String[] selectedGroups = this.request.getParameterValues("groups");
		
		if(selectedGroups == null) {
			selectedGroups = new String[0]; 
		}
		
		int[] newGroups = new int[selectedGroups.length];
		
		for (int i = 0; i < selectedGroups.length; i++) {
			newGroups[i] = Integer.parseInt(selectedGroups[i]);
		}
		
		userDao.addToGroup(userId, newGroups);
		SecurityRepository.remove(userId);
		
		this.list();
	}
}

../jforum2-code/src/main/java/net/jforum/view/admin/BanlistAction.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 *
 * Created on 07/12/2006 21:24:12
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.view.admin;

import java.util.List;

import org.apache.commons.lang3.StringUtils;

import net.jforum.dao.BanlistDAO;
import net.jforum.dao.DataAccessDriver;
import net.jforum.entities.Banlist;
import net.jforum.exceptions.ForumException;
import net.jforum.repository.BanlistRepository;
import net.jforum.util.preferences.TemplateKeys;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public class BanlistAction extends AdminCommand
{
	public void insert()
	{
		this.setTemplateName(TemplateKeys.BANLIST_INSERT);
	}
	
	public void insertSave()
	{
		final String type = this.request.getParameter("type");
		final String value = this.request.getParameter("value");
		
		if (StringUtils.isNotEmpty(type) && StringUtils.isNotEmpty(value)) {
			final Banlist banlist = new Banlist();
			
			if ("email".equals(type)) {
				banlist.setEmail(value);
			}
			else if ("user".equals(type)) {
				banlist.setUserId(Integer.parseInt(value));
			}
			else if ("ip".equals(type)) {
				banlist.setIp(value);
			}
			else {
				throw new ForumException("Unknown banlist type");
			}
			
			final BanlistDAO dao = DataAccessDriver.getInstance().newBanlistDAO();
			dao.insert(banlist);
			
			BanlistRepository.add(banlist);
		}
		
		this.list();
	}
	
	public void delete() 
	{
		final String[] banlist = this.request.getParameterValues("banlist_id");
		
		if (banlist != null && banlist.length > 0) {
			final BanlistDAO dao = DataAccessDriver.getInstance().newBanlistDAO();
			
			for (int i = 0; i < banlist.length; i++) {
				final int current = Integer.parseInt(banlist[i]);
				dao.delete(current);
				
				BanlistRepository.remove(current);
			}
		}
		
		this.list();
	}
	
	/**
	 * @see net.jforum.Command#list()
	 */
	@Override public void list()
	{
		this.setTemplateName(TemplateKeys.BANLIST_LIST);
		
		final List<Banlist> list = DataAccessDriver.getInstance().newBanlistDAO().selectAll();
		this.context.put("banlist", list);
	}
}

../jforum2-code/src/main/java/net/jforum/view/admin/RankingAction.java
/*
 * Copyright (c) Rafael Steil
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Mar 28, 2003 / 8:09:08 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.view.admin;


import net.jforum.dao.DataAccessDriver;
import net.jforum.dao.RankingDAO;
import net.jforum.entities.Ranking;
import net.jforum.repository.RankingRepository;
import net.jforum.util.preferences.TemplateKeys;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public class RankingAction extends AdminCommand 
{
	/**
	 * List
	 */
	@Override public void list()
	{
		this.context.put("ranks", DataAccessDriver.getInstance().newRankingDAO().selectAll());
		this.setTemplateName(TemplateKeys.RANKING_LIST);
	}
	
	/**
	 * One more, one more
	 */
	public void insert()
	{
		this.setTemplateName(TemplateKeys.RANKING_INSERT);
		this.context.put("action", "insertSave");
	}
	
	/**
	 * Edit
	 */
	public void edit()
	{
		this.setTemplateName(TemplateKeys.RANKING_EDIT);
		this.context.put("action", "editSave");
		this.context.put("rank", DataAccessDriver.getInstance().newRankingDAO().selectById(
			this.request.getIntParameter("ranking_id")));
	}

	/**
	 * Save information
	 */
	public void editSave()
	{
		final Ranking ranking = new Ranking();
		String rankTitle = this.request.getParameter("rank_title");
		if (rankTitle != null) {
			rankTitle = rankTitle.trim();
		}
		ranking.setTitle(rankTitle);
		ranking.setId(this.request.getIntParameter("rank_id"));
		
		final boolean special = "1".equals(this.request.getParameter("rank_special"));
		ranking.setSpecial(special);
		
		if (!special) {
			ranking.setMin(this.request.getIntParameter("rank_min"));
		}
		
		DataAccessDriver.getInstance().newRankingDAO().update(ranking);
		RankingRepository.loadRanks();	
		this.list();
	}
	
	/**
	 * Delete
	 */
	public void delete()
	{
		final String ids[] = this.request.getParameterValues("rank_id");
		
		final RankingDAO rankingDao = DataAccessDriver.getInstance().newRankingDAO();
		
		if (ids != null) {
			for (int i = 0; i < ids.length; i++) {
				rankingDao.delete(Integer.parseInt(ids[i]));
			}
		}
		RankingRepository.loadRanks();	
		this.list();
	}
	
	/**
	 * A new one
	 */
	public void insertSave() 
	{
		final Ranking ranking = new Ranking();
		String rankTitle = this.request.getParameter("rank_title");
		if (rankTitle != null) {
			rankTitle = rankTitle.trim();
		}
		ranking.setTitle(rankTitle);
		
		final boolean special = "1".equals(this.request.getParameter("rank_special"));
		ranking.setSpecial(special);
		
		if (!special) {
			ranking.setMin(this.request.getIntParameter("rank_min"));			
		}
		
		DataAccessDriver.getInstance().newRankingDAO().addNew(ranking);
		
		RankingRepository.loadRanks();
		
		this.list();
	}
}

../jforum2-code/src/main/java/net/jforum/view/admin/CacheAction.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Feb 20, 2005 12:00:02 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.view.admin;

import java.util.Collection;

import net.jforum.SessionFacade;
import net.jforum.dao.DataAccessDriver;
import net.jforum.repository.BBCodeRepository;
import net.jforum.repository.ForumRepository;
import net.jforum.repository.ModulesRepository;
import net.jforum.repository.PostRepository;
import net.jforum.repository.RankingRepository;
import net.jforum.repository.SecurityRepository;
import net.jforum.repository.SmiliesRepository;
import net.jforum.repository.TopicRepository;
import net.jforum.util.bbcode.BBCodeHandler;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;
import net.jforum.util.preferences.TemplateKeys;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public class CacheAction extends AdminCommand
{
	/**
	 * @see net.jforum.Command#list()
	 */
	@Override public void list()
	{
		this.setTemplateName(TemplateKeys.CACHE_LIST);
		
		this.context.put("bb", new BBCodeRepository());
		this.context.put("modules", new ModulesRepository());
		this.context.put("ranking", new RankingRepository());
		this.context.put("smilies", new SmiliesRepository());
		this.context.put("security", new SecurityRepository());
		this.context.put("forum", new ForumRepository());
		this.context.put("topic", new TopicRepository());
		this.context.put("session", new SessionFacade());
		this.context.put("posts", new PostRepository());
	}
	
	public void bbReload()
	{
		BBCodeRepository.setBBCollection(new BBCodeHandler().parse());
		this.list();
	}
	
	public void sessionClear()
	{
		SessionFacade.clear();
		this.list();
	}
	
	public void modulesReload()
	{
		ModulesRepository.init(SystemGlobals.getValue(ConfigKeys.CONFIG_DIR));
		this.list();
	}
	
	public void smiliesReload()
	{
		SmiliesRepository.loadSmilies();
		this.list();
	}
	
	public void rankingReload()
	{
		RankingRepository.loadRanks();
		this.list();
	}
	
	public void topicsMoreInfo()
	{
		if (!SystemGlobals.getBoolValue(ConfigKeys.TOPIC_CACHE_ENABLED)) {
			this.list();
			return;
		}
		
		this.setTemplateName(TemplateKeys.CACHE_TOPICS_MOREINFO);
		
		this.context.put("categories", ForumRepository.getAllCategories());
	}
	
	public void topicsClear()
	{
		final int forumId = this.request.getIntParameter("forum_id");
		TopicRepository.clearCache(forumId);
		this.topicsMoreInfo();
	}
	
	public void postsMoreInfo()
	{
		if (!SystemGlobals.getBoolValue(ConfigKeys.POSTS_CACHE_ENABLED)) {
			this.list();
			return;
		}
		
		final Collection<String> topics = PostRepository.cachedTopics();
		
		this.context.put("topics", DataAccessDriver.getInstance().newTopicDAO().selectTopicTitlesByIds(topics));
		this.context.put("repository", new PostRepository());
		this.setTemplateName(TemplateKeys.CACHE_POST_MOREINFO);
	}
	
	public void postsClear() 
	{
		final int topicId = this.request.getIntParameter("topic_id");
		PostRepository.clearCache(topicId);
		this.postsMoreInfo();
	}
}

../jforum2-code/src/main/java/net/jforum/view/admin/LuceneStatsAction.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 23/07/2007 15:14:27
 * 
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.view.admin;

import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Date;
import java.util.GregorianCalendar;

import org.apache.commons.lang3.StringUtils;
import org.apache.lucene.index.DirectoryReader;
import org.apache.lucene.index.IndexWriter;
import org.apache.lucene.store.Directory;
import org.apache.lucene.store.FSDirectory;
import org.apache.lucene.store.LockObtainFailedException;

import freemarker.template.SimpleHash;
import freemarker.template.Template;
import net.jforum.context.RequestContext;
import net.jforum.context.ResponseContext;
import net.jforum.exceptions.ForumException;
import net.jforum.repository.ForumRepository;
import net.jforum.search.LuceneReindexArgs;
import net.jforum.search.LuceneReindexer;
import net.jforum.search.LuceneSettings;
import net.jforum.search.SearchFields;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;
import net.jforum.util.preferences.TemplateKeys;

/**
 * @author Rafael Steil
 */
public class LuceneStatsAction extends AdminCommand
{
	static {
		SystemGlobals.setValue(ConfigKeys.LUCENE_CURRENTLY_INDEXING, "0");
	}

	/**
	 * @see net.jforum.Command#list()
	 */
	@Override public void list()
	{
		DirectoryReader reader = null;

		try {
			Path indexDir = Paths.get(SystemGlobals.getValue(ConfigKeys.LUCENE_INDEX_WRITE_PATH));
			Directory fsDir = FSDirectory.open(indexDir);

			this.setTemplateName(TemplateKeys.SEARCH_STATS_LIST);
			boolean isInformationAvailable = true;

			try {
				reader = DirectoryReader.open(fsDir);
			} catch (IOException e) {
				isInformationAvailable = false;
			}

			this.context.put("isInformationAvailable", isInformationAvailable);
			this.context.put("indexExists", DirectoryReader.indexExists(fsDir));
			this.context.put("currentlyIndexing", "1".equals(SystemGlobals.getValue(ConfigKeys.LUCENE_CURRENTLY_INDEXING)));

			if (isInformationAvailable) {
				this.context.put("isLocked", isWriterLocked(fsDir));
				this.context.put("isUpToDate", reader.isCurrent());
				this.context.put("indexLocation", indexDir.toAbsolutePath().toString());
				this.context.put("totalMessages", Integer.valueOf(ForumRepository.getTotalMessages()));
				this.context.put("indexVersion", Long.valueOf(reader.getVersion()));
				this.context.put("numberOfDocs", Integer.valueOf(reader.numDocs()));
				this.context.put("numberDeletedDocs", Integer.valueOf(reader.numDeletedDocs()));
				this.context.put("refCount", Integer.valueOf(reader.getRefCount()));
				long totalTermCount = reader.getSumTotalTermFreq(SearchFields.Indexed.SUBJECT)
									+ reader.getSumTotalTermFreq(SearchFields.Indexed.CONTENTS);
				this.context.put("totalTermCount", totalTermCount);
			}
		}
		catch (IOException e) {
			throw new ForumException(e);
		}
		finally {
			if (reader != null) {
				try { reader.close(); } catch (Exception e) { }
			}
		}
	}

	private static boolean isWriterLocked (Directory directory) throws IOException {
		try {
			directory.obtainLock(IndexWriter.WRITE_LOCK_NAME).close();
			return false;
		} catch (LockObtainFailedException failed) {
			return true;
		}
	}

	public void createIndexDirectory() throws Exception
	{
		this.settings().createIndexDirectory(SystemGlobals.getValue(ConfigKeys.LUCENE_INDEX_WRITE_PATH));
		this.list();
	}
    
	public void reconstructIndexFromScratch()
	{
		LuceneReindexArgs args = this.buildReindexArgs();
		LuceneReindexer reindexer = new LuceneReindexer(this.settings(), args);
		reindexer.startBackgroundProcess();

		this.list();
	}

	public void cancelIndexing()
	{
		SystemGlobals.setValue(ConfigKeys.LUCENE_CURRENTLY_INDEXING, "0");
		this.list();
	}

	@Override public Template process(RequestContext request, ResponseContext response, SimpleHash context)
	{
		return super.process(request, response, context);
	}

	private LuceneSettings settings()
	{
		return (LuceneSettings)SystemGlobals.getObjectValue(ConfigKeys.LUCENE_SETTINGS);
	}

	private LuceneReindexArgs buildReindexArgs()
	{
		Date fromDate = this.buildDateFromRequest("from");
		Date toDate = this.buildDateFromRequest("to");

		int firstPostId = 0;
		int lastPostId = 0;

		if (StringUtils.isNotEmpty(this.request.getParameter("firstPostId"))) {
			firstPostId = this.request.getIntParameter("firstPostId");
		}

		if (StringUtils.isNotEmpty(this.request.getParameter("lastPostId"))) {
			lastPostId = this.request.getIntParameter("lastPostId");
		}

		boolean avoidDuplicatedRecords = "yes".equals(this.request.getParameter("avoidDuplicatedRecords"));

		boolean recreate = "operationTypeRecreate".equals(this.request.getParameter("indexOperationType"));

		return new LuceneReindexArgs(fromDate, toDate, firstPostId, lastPostId,
				avoidDuplicatedRecords, this.request.getIntParameter("type"), recreate);
	}
    
	private Date buildDateFromRequest(String prefix)
	{
		String day = this.request.getParameter(prefix + "Day");
		String month = this.request.getParameter(prefix + "Month");
		String year = this.request.getParameter(prefix + "Year");
	    
		String hour = this.request.getParameter(prefix + "Hour");
		String minutes = this.request.getParameter(prefix + "Minutes");
	    
		Date date = null;
	    
		if (StringUtils.isNotEmpty(day) 
			&& StringUtils.isNotEmpty(month) 
			&& StringUtils.isNotEmpty(year) 
			&& StringUtils.isNotEmpty(hour) 
			&& StringUtils.isNotEmpty(minutes))
		{
			date = new GregorianCalendar(Integer.parseInt(year), 
				Integer.parseInt(month) - 1, 
				Integer.parseInt(year), 
				Integer.parseInt(hour), 
				Integer.parseInt(minutes), 0).getTime();
		}
	    
		return date;
	}
}

../jforum2-code/src/main/java/net/jforum/view/admin/SpamBlockAction.java
package net.jforum.view.admin;

import java.util.List;

import org.apache.log4j.Logger;

import net.jforum.dao.DataAccessDriver;
import net.jforum.dao.SpamDAO;
import net.jforum.util.preferences.TemplateKeys;

public class SpamBlockAction extends AdminCommand {

    private static final Logger LOG = Logger.getLogger(SpamBlockAction.class);

    @Override
    public void list() {
        final List<String> words = getSpamDao().selectAll();
        context.put("spamPatterns", words);
        setTemplateName(TemplateKeys.SPAM_BLOCK_LIST);
    }

    public void insert() {
        final String pattern = request.getParameter("pattern");
        LOG.info("Creating " + pattern);
        getSpamDao().addSpam(pattern);
        this.list();
    }

    public void delete() {
        final String pattern = request.getParameter("pattern");
        LOG.info("Deleting " + pattern);
        getSpamDao().deleteSpam(pattern);
        this.list();
    }

    private SpamDAO getSpamDao() {
        return DataAccessDriver.getInstance().newSpamDAO();
    }
}

../jforum2-code/src/main/java/net/jforum/view/admin/common/ModerationCommon.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Jan 30, 2005 12:44:54 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.view.admin.common;

import java.util.Iterator;

import net.jforum.dao.DataAccessDriver;
import net.jforum.entities.Category;
import net.jforum.entities.Forum;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public class ModerationCommon
{
	public void setForumsModerationStatus(final Category category, final boolean status)
	{
		for (final Iterator<Forum> iter = category.getForums().iterator(); iter.hasNext(); ) {
			final Forum forum = iter.next();
			if (forum.isModerated() != category.isModerated()) {
				forum.setModerated(category.isModerated());
				this.setTopicModerationStatus(forum.getId(), category.isModerated());
			}
		}
		
		DataAccessDriver.getInstance().newForumDAO().setModerated(category.getId(), status);
	}
	
	public void setTopicModerationStatus(final int forumId, final boolean status) 
	{
		DataAccessDriver.getInstance().newTopicDAO().setModerationStatus(forumId, status);
	}
}

../jforum2-code/src/main/java/net/jforum/view/install/ParseDBStructFile.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 16/11/2005 18:42:42
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.view.install;

import java.io.BufferedReader;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;

import net.jforum.exceptions.ForumException;

/**
 * @author Rafael Steil
 */
public final class ParseDBStructFile
{
	private static final Logger LOGGER = Logger.getLogger(ParseDBStructFile.class);
	
	public static List<String> parse(final String filename)
	{
		final List<String> statements = new ArrayList<>();
		
		BufferedReader reader = null;
		
		try {
			reader = new BufferedReader(new FileReader(filename));
			final StringBuilder sb = new StringBuilder(512);

			boolean processing = false;
			final char delimiter = ';';
			final String[] creators = { "CREATE INDEX", "CREATE TABLE", "CREATE SEQUENCE", "DROP TABLE", "IF EXISTS",
					"DROP SEQUENCE", "DROP INDEX" };
			
            String line ;
			while ((line = reader.readLine()) != null) {
				if (line.length() == 0) {
					continue;
				}
				
				final char charAt = line.charAt(0);
				
				// Ignore comments
				if (charAt == '-' || charAt == '#') {
					continue;
				}
				
				if (processing) {
					sb.append(line);
					
					if (line.indexOf(delimiter) > -1) {
						sb.delete(sb.length() - 1, sb.length());
						statements.add(sb.toString());
						processing = false;
					}
				}
				else {
					for (int i = 0; i < creators.length; i++) {
						if (line.indexOf(creators[i]) > -1) {
							sb.delete(0, sb.length());
							
							if (line.indexOf(delimiter) > -1) {
								if (line.indexOf(';') > -1) {
									line = line.replace(';', ' ');
								}
								
								statements.add(line);
							}
							else {
								sb.append(line);
								processing = true;
							}
							
							break;
						}
					}
				}
			}
		}
        catch (Exception e)
        {
            throw new ForumException(e);
        }
        finally {
			if (reader != null) {
				try { reader.close(); }
                catch (Exception e) {
                    // catch close BufferedReader
                	LOGGER.error(e); 
                }
			}
		}
		
		return statements;
	}
	
	private ParseDBStructFile() {}
}

../jforum2-code/src/main/java/net/jforum/view/install/ParseDBDumpFile.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 16/11/2005 18:50:18
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.view.install;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;

/**
 * @author Rafael Steil
 */
public final class ParseDBDumpFile
{
	private static final Logger LOGGER = Logger.getLogger(ParseDBDumpFile.class);
	
	public static List<String> parse(final String filename) throws IOException
	{
		final List<String> statements = new ArrayList<>();
		
		BufferedReader reader = null;
		
		try {
			reader = new BufferedReader(new FileReader(filename));
			String line = null;
			
			while ((line = reader.readLine()) != null) {
				line = line.trim();
			
				if (line.length() == 0) {
					continue;
				}
				
				final char firstChar = line.charAt(0);
				
				if (firstChar == '-' || firstChar == '#') {
					continue;
				}
				
				if (line.charAt(line.length() - 1) == ';') {
					line = line.substring(0, line.length() - 1);
				}
				
				statements.add(line);
			}
		}
		finally {
			if (reader != null) {
				try { 
					reader.close(); 
				} catch (IOException e) { 
					LOGGER.error(e); 
				}
			}
		}
		
		return statements;
	}
	
	private ParseDBDumpFile() {}
}

../jforum2-code/src/main/java/net/jforum/view/install/InstallAction.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 27/08/2004 - 18:15:54
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.view.install;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Date;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Properties;

import org.apache.commons.io.FileUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;

import freemarker.template.SimpleHash;
import freemarker.template.Template;
import net.jforum.Command;
import net.jforum.ConfigLoader;
import net.jforum.DBConnection;
import net.jforum.DataSourceConnection;
import net.jforum.JForumExecutionContext;
import net.jforum.SessionFacade;
import net.jforum.SimpleConnection;
import net.jforum.context.RequestContext;
import net.jforum.context.ResponseContext;
import net.jforum.dao.DataAccessDriver;
import net.jforum.dao.ForumDAO;
import net.jforum.dao.PostDAO;
import net.jforum.dao.TopicDAO;
import net.jforum.entities.Post;
import net.jforum.entities.Topic;
import net.jforum.entities.User;
import net.jforum.entities.UserSession;
import net.jforum.exceptions.DatabaseException;
import net.jforum.exceptions.ForumException;
import net.jforum.util.DbUtils;
import net.jforum.util.Hash;
import net.jforum.util.I18n;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;
import net.jforum.util.preferences.TemplateKeys;

/**
 * JForum Web Installer.
 * 
 * @author Rafael Steil
 * @version $Id$
 */
public class InstallAction extends Command
{
    private static final Logger LOGGER = Logger.getLogger(InstallAction.class);

    private static final String POOLED_CONNECTION = net.jforum.HikariPooledConnection.class.getName();
    private static final String SIMPLE_CONNECTION = net.jforum.SimpleConnection.class.getName();
    private static final String DATASOURCE_CONNECTION = net.jforum.DataSourceConnection.class.getName();

    public void welcome()
    {
        this.checkLanguage();

        this.context.put("language", this.getFromSession("language"));
        this.context.put("database", this.getFromSession("database"));
        this.context.put("dbhost", this.getFromSession("dbHost"));
        this.context.put("dbuser", this.getFromSession("dbUser"));
        this.context.put("dbname", this.getFromSession("dbName"));
        this.context.put("dbport", this.getFromSession("dbPort"));
        this.context.put("dbpasswd", this.getFromSession("dbPassword"));
        this.context.put("dbencoding", this.getFromSession("dbEncoding"));
        this.context.put("use_pool", this.getFromSession("usePool"));
        this.context.put("forumLink", this.getFromSession("forumLink"));
        this.context.put("siteLink", this.getFromSession("siteLink"));
        this.context.put("dbdatasource", this.getFromSession("dbdatasource"));

        this.setTemplateName(TemplateKeys.INSTALL_WELCOME);
    }

    private void checkLanguage()
    {
        String lang = this.request.getParameter("l");

        if (lang == null) {
            for (Enumeration<Locale> locales = this.request.getLocales();
                locales.hasMoreElements();) {
                lang = locales.nextElement().toString();			      
                if (I18n.languageExists(lang)) { 
                   break;
                }
            }
        }
        if (LOGGER.isEnabledFor(Level.INFO)) {
        	LOGGER.info("lang="+lang);
        }
        if (lang != null) {
	        I18n.load(lang);

	        final UserSession userSession = new UserSession();
	        userSession.setLang(lang);
	        userSession.setStartTime(new Date(System.currentTimeMillis()));

	        SessionFacade.add(userSession);
	        this.addToSessionAndContext("language", lang);
        }
    }

    private String getFromSession(final String key)
    {
        return (String)this.request.getSessionContext().getAttribute(key);
    }

    private void error()
    {
        this.setTemplateName(TemplateKeys.INSTALL_ERROR);
    }

    public void doInstall()
    {
        if (!this.checkForWritableDir()) {
            return;
        }

        this.removeUserConfig();

        Connection conn = null;

        if (!"passed".equals(this.getFromSession("configureDatabase"))) {
            LOGGER.info("Going to configure the database...");
            conn = this.configureDatabase();
        }
        if (conn == null) {
            this.context.put("message", I18n.getMessage("Install.databaseError"));
            this.error();
            return;
        }

        // Database Configuration is OK
        this.addToSessionAndContext("configureDatabase", "passed");
        LOGGER.info("Database configuration is OK");

        boolean dbError = false;

        try {
            //this.setupAutoCommit(conn);

            if (!"passed".equals(this.getFromSession("createTables")) && !this.createTables(conn)) {
                this.context.put("message", I18n.getMessage("Install.createTablesError"));
                dbError = true;
                this.error();
                return;
            }

            // Create tables is OK
            this.addToSessionAndContext("createTables", "passed");
            LOGGER.info("Table creation is OK");

            LOGGER.info("Going to populate the database tables ...");
            this.setupAutoCommit(conn); 
            if (!"passed".equals(this.getFromSession("importTablesData")) && !this.importTablesData(conn)) {
                this.context.put("message", I18n.getMessage("Install.importTablesDataError"));
                dbError = true;
                this.error();
                return;
            }

            // Dump is OK
            this.addToSessionAndContext("importTablesData", "passed");
            LOGGER.info("Table data population is OK");

            // Set user.hash.sequence before calling updateAdminPassword()
            SystemGlobals.setValue(ConfigKeys.USER_HASH_SEQUENCE, Hash.md5(this.getFromSession("dbPassword")
                    + System.currentTimeMillis()));
            if (LOGGER.isEnabledFor(Level.INFO)) {
            	LOGGER.info("Generated user.hash.sequence = " + SystemGlobals.getValue(ConfigKeys.USER_HASH_SEQUENCE));
            }
            
            if (!this.updateAdminPassword(conn)) {
			this.context.put("message", I18n.getMessage("Install.updateAdminError"));
                dbError = true;
                this.error();
                return;
            }
        }
        finally {
			try {
				if (dbError) {
					conn.rollback();
				}
				else {
					conn.commit();
				}
				conn.close();
			}
			catch (SQLException e) { LOGGER.error(e); }
        }

        JForumExecutionContext.setRedirect(this.request.getContextPath() + "/install/install"
            + SystemGlobals.getValue(ConfigKeys.SERVLET_EXTENSION)
            + "?module=install&action=finished");
    }

    private void setupAutoCommit(final Connection conn)
    {
        try {
            conn.setAutoCommit(false);
        }
        catch (SQLException e) {
            throw new DatabaseException(e);
        }
    }

    private void removeUserConfig()
    {
        final File file = new File(SystemGlobals.getValue(ConfigKeys.INSTALLATION_CONFIG));

        if (file.exists() && file.canWrite()) {
            try {
                file.delete();
            }
            catch (Exception e) {
                LOGGER.info(e.toString());
            }
        }
    }

    public void finished() 
    {
        this.setTemplateName(TemplateKeys.INSTALL_FINISHED);

        this.context.put("clickHere", I18n.getMessage("Install.clickHere"));
        this.context.put("forumLink", this.getFromSession("forumLink"));

        String lang = this.getFromSession("language");

        if (lang == null) {
            lang = "en_US";
        }

        this.context.put("lang", lang);

        this.fixModulesMapping();
        this.configureSystemGlobals();

        SessionFacade.remove(this.request.getSessionContext().getId());
    }

    private void fixModulesMapping()
    {
        FileInputStream fis = null;
        FileOutputStream fos = null;

        try {
            // Modules Mapping
            final String modulesMapping = SystemGlobals.getValue(ConfigKeys.CONFIG_DIR) + "/modulesMapping.properties";

            if (new File(modulesMapping).canWrite()) {
                final Properties properties = new Properties();
                fis = new FileInputStream(modulesMapping);
                properties.load(fis);

                if (properties.containsKey("install")) {
                    properties.remove("install");

                    fos = new FileOutputStream(modulesMapping);

                    properties.store(fos, "Modified by JForum Installer");
                    ConfigLoader.loadModulesMapping(SystemGlobals.getValue(ConfigKeys.CONFIG_DIR));
                }

                this.addToSessionAndContext("mappingFixed", "true");
            }
        }
        catch (Exception e) {
        	 if (LOGGER.isEnabledFor(Level.WARN)) {
        		 LOGGER.warn("Error while working on modulesMapping.properties: " + e);
        	 }
        }
        finally {
            if (fis != null) {
                try { fis.close(); } catch (Exception e) { LOGGER.error(e.getMessage(), e); }
            }

            if (fos != null) {
                try { fos.close(); } catch (Exception e) { LOGGER.error(e.getMessage(), e); }
            }
        }
    }

    private void configureSystemGlobals()
    {
        SystemGlobals.setValue(ConfigKeys.FORUM_LINK, this.getFromSession("forumLink"));
        SystemGlobals.setValue(ConfigKeys.HOMEPAGE_LINK, this.getFromSession("siteLink"));
        SystemGlobals.setValue(ConfigKeys.I18N_DEFAULT, this.getFromSession("language"));
        SystemGlobals.setValue(ConfigKeys.INSTALLED, "true");

        SystemGlobals.saveInstallation(false);
    }

    private boolean importTablesData(final Connection conn)
    {
        try
        {
            boolean status = true;
            final boolean autoCommit = conn.getAutoCommit();
            conn.setAutoCommit(false);

            final String dbType = this.getFromSession("database");

            final List<String> statements = ParseDBDumpFile.parse(SystemGlobals.getValue(ConfigKeys.CONFIG_DIR)
                                                                  + "/database/"
                                                                  + dbType
                                                                  + "/" + dbType + "_data_dump.sql");

            for (final Iterator<String> iter = statements.iterator(); iter.hasNext();) {
                String query = iter.next();

                if (query == null || "".equals(query.trim())) {
                    continue;
                }

                query = query.trim();
                if (query.indexOf("\\n") != -1) {
                    query = query.replace("\\n", "\n");
                }

                final Statement stmt = conn.createStatement();

                try {
                    if (query.startsWith("UPDATE") || query.startsWith("INSERT") || query.startsWith("SET")) {
						// the admin user name can be changed during installation
						query = query.replaceAll("#ADMIN#", this.getFromSession("adminUser"));
						// need to get the proper link to the forum, including the context
						String link = this.getFromSession("forumLink");
						if (link.endsWith("/")) {
							// the SQL has a slash in it, so remove an existing one
							link = link.substring(0, link.length()-1);
						}
						query = query.replaceAll("#FORUM_LINK#", link);
                        stmt.executeUpdate(query);
                    }
                    else if (query.startsWith("SELECT")) {
                        ResultSet rs = stmt.executeQuery(query);
                        rs.close();
                    }
                    else {
                        throw new SQLException("Invalid query: " + query);
                    }
                }
                catch (SQLException ex) {
                    status = false;
                    conn.rollback();
                    if (LOGGER.isEnabledFor(Level.ERROR)) {
                    	LOGGER.error("Error importing data for " + query + ": " + ex, ex);
                    }
                    this.context.put("exceptionMessage", ex.getMessage() + "\n" + query);
                    break;
                }
                finally {
                    stmt.close();
                }
            }
            // handle blob post
            if ("oracle".equals(dbType)) {
                storeWelcomeMessage(conn);
            }

            conn.setAutoCommit(autoCommit);
            return status;
        }
        catch (SQLException e)
        {
            throw new ForumException(e);
        }
        catch (IOException e)
        {
            throw new ForumException(e);
        }
    }

    private boolean createTables(final Connection conn)
    {

        LOGGER.info("Going to create tables...");
        final String dbType = this.getFromSession("database");

        if ("postgresql".equals(dbType) || "oracle".equals(dbType)) {
            // This should be in a separate transaction block; otherwise, an empty database will fail.
            this.dropOracleOrPostgreSQLTables(dbType, conn);
        }
        try { 
            boolean status = true;
            final boolean autoCommit = conn.getAutoCommit();
            conn.setAutoCommit(false);

            final List<String> statements = ParseDBStructFile.parse(SystemGlobals.getValue(ConfigKeys.CONFIG_DIR)
                                                                    + "/database/"
                                                                    + dbType
                                                                    + "/" + dbType + "_db_struct.sql");


            for (final Iterator<String> iter = statements.iterator(); iter.hasNext(); ) {
                final String query = iter.next();

                if (query == null || "".equals(query.trim())) {
                    continue;
                }

                Statement stmt = null;

                try {
                    stmt = conn.createStatement();
                    stmt.executeUpdate(query);
                }
                catch (SQLException ex) {
                    status = false;

                    if (LOGGER.isEnabledFor(Level.ERROR)) {
                    	LOGGER.error("Error executing query: " + query + ": " + ex, ex);
                    }
                    this.context.put("exceptionMessage", ex.getMessage() + "\n" + query);

                    break;
                }
                finally {
                    DbUtils.close(stmt);
                }
            }
            conn.setAutoCommit(autoCommit);
            return status;
        }
        catch (Exception e)
        {
            throw new ForumException(e);
        }
    }

    private void dropOracleOrPostgreSQLTables(final String dbName, final Connection conn)
    {
        Statement stmt = null;

        try {
            final boolean autoCommit = conn.getAutoCommit();
            conn.setAutoCommit(false);

            final List<String> statements = ParseDBStructFile.parse(SystemGlobals.getValue(ConfigKeys.CONFIG_DIR)
                                                                    + "/database/" + dbName + "/" + dbName + "_drop_tables.sql");

            this.setupAutoCommit(conn);
            for (final Iterator<String> iter = statements.iterator(); iter.hasNext(); ) {
                try {
                    final String query = iter.next();

                    if (query == null || "".equals(query.trim())) {
                        continue;
                    }

                    stmt = conn.createStatement();
                    stmt.executeUpdate(query);
                    stmt.close();
                }
                catch (SQLException e) {
                	if (LOGGER.isEnabledFor(Level.WARN)) {
                		LOGGER.warn("IGNORE: " + e.toString());
                	}
                }
            }
            conn.setAutoCommit(autoCommit);
        }
        catch (SQLException e) {
            LOGGER.error(e.toString(), e);
        }
        finally {
            DbUtils.close(stmt);
        }
    }

    private boolean checkForWritableDir()
    {
        final boolean canWriteToWebInf = this.canWriteToWebInf();
        final boolean canWriteToLuceneIndex = this.canWriteToLuceneIndex();

        if (!canWriteToWebInf || !canWriteToLuceneIndex) {
            if (!canWriteToWebInf) {
                this.context.put("message", I18n.getMessage("Install.noWritePermission"));
            }
            else if (!canWriteToLuceneIndex) {
                this.context.put("message", I18n.getMessage("Install.noWritePermissionLucene", 
                                                            new Object[] { SystemGlobals.getValue(ConfigKeys.LUCENE_INDEX_WRITE_PATH) } ));
            }

            this.context.put("tryAgain", true);
            this.error();
            return false;
        }

        return true;
    }

    private boolean canWriteToWebInf()
    {
        return new File(SystemGlobals.getValue(ConfigKeys.CONFIG_DIR) + "/modulesMapping.properties").canWrite();
    }

    private boolean canWriteToLuceneIndex()
    {
        final File file = new File(SystemGlobals.getValue(ConfigKeys.LUCENE_INDEX_WRITE_PATH));

        if (!file.exists()) {
            return file.mkdir();
        }

        return file.canWrite();
    }

    private void handleDatabasePort(final Properties properties, final String port)
    {
        final String portKey = ":${database.connection.port}";
        String connectionString = properties.getProperty(ConfigKeys.DATABASE_CONNECTION_STRING);

        if (StringUtils.isBlank(port)) {
            final int index = connectionString.indexOf(portKey);

            if (index > -1) {
                if (connectionString.charAt(index - 1) == '\\') {
                    connectionString = StringUtils.remove(connectionString, "\\" + portKey);
                }
                else {
                    connectionString = StringUtils.remove(connectionString, portKey);
                }
            }
        }
        else if (connectionString.indexOf(portKey) == -1) {
            final String hostKey = "${database.connection.host}";
            connectionString = StringUtils.replace(connectionString, hostKey, hostKey + portKey);
        }

        properties.setProperty(ConfigKeys.DATABASE_CONNECTION_STRING, connectionString);
    }

    private void configureJDBCConnection()
    {
        final String username = this.getFromSession("dbUser");
        final String password = this.getFromSession("dbPassword");
        final String dbName = this.getFromSession("dbName");
        final String host = this.getFromSession("dbHost");
        final String type = this.getFromSession("database");
        final String encoding = this.getFromSession("dbEncoding");
        final String port = this.getFromSession("dbPort");

        final String dbConfigFilePath = SystemGlobals.getValue(ConfigKeys.CONFIG_DIR) 
            + "/database/" + type + "/" + type + ".properties";

        final Properties properties = new Properties();
        FileInputStream fis = null;

        try {
            fis = new FileInputStream(dbConfigFilePath);
            properties.load(fis);
        }
        catch (IOException e) {
            throw new ForumException(e);
        }
        finally {
            if (fis != null) {
                try { fis.close(); } catch (Exception e) { LOGGER.error(e.getMessage(), e); }
            }
        }

        this.handleDatabasePort(properties, port);

        // Write database information to the respective file
        properties.setProperty(ConfigKeys.DATABASE_CONNECTION_HOST, host);
        properties.setProperty(ConfigKeys.DATABASE_CONNECTION_USERNAME, username);
        properties.setProperty(ConfigKeys.DATABASE_CONNECTION_PASSWORD, password);
        properties.setProperty(ConfigKeys.DATABASE_CONNECTION_DBNAME, dbName);
        properties.setProperty(ConfigKeys.DATABASE_CONNECTION_ENCODING, encoding);
        properties.setProperty(ConfigKeys.DATABASE_CONNECTION_PORT, port);
        properties.setProperty(ConfigKeys.DATABASE_DRIVER_NAME, type);

        FileOutputStream fos = null;

        try {
            fos = new FileOutputStream(dbConfigFilePath);
            properties.store(fos, null);
        }
        catch (Exception e) {
        	if (LOGGER.isEnabledFor(Level.WARN)) {
        		LOGGER.warn("Error while trying to write to " + type + ".properties: " + e);
        	}
        }
        finally {
            if (fos != null) {
                try {
                    fos.close();
                }
                catch (IOException e) { LOGGER.error(e); }
            }
        }

        updateSystemGlobals(properties);
    }

	private void updateSystemGlobals(final Properties properties)
	{
		// Proceed to SystemGlobals / jforum-custom.conf configuration
        for (final Enumeration<Object> e = properties.keys(); e.hasMoreElements(); ) {
            final String key = (String)e.nextElement();
            final String value = properties.getProperty(key);

            SystemGlobals.setValue(key, value);

            if (LOGGER.isEnabledFor(Level.INFO)) {
            	LOGGER.info("Updating key " + key + " with value " + value);
            }
        }
	}

    private void configureDataSourceConnection()
    {
        final String type = this.getFromSession("database");

        final String dbConfigFilePath = SystemGlobals.getValue(ConfigKeys.CONFIG_DIR) 
            + "/database/" + type + "/" + type + ".properties";

        final Properties properties = new Properties();
        FileInputStream fis = null;

        try {
            fis = new FileInputStream(dbConfigFilePath);
            properties.load(fis);
        }
        catch (IOException e) {
            throw new ForumException(e);
        }
        finally {
            if (fis != null) {
                try { fis.close(); } catch (Exception e) { LOGGER.error(e.getMessage(), e); }
            }
        }

        updateSystemGlobals(properties);
    }

    private Connection configureDatabase()
    {
        final String database = this.getFromSession("database");
        final String connectionType = this.getFromSession("db_connection_type");
        String implementation;

        boolean isDatasource = false;

        if ("JDBC".equals(connectionType)) {
            implementation = "yes".equals(this.getFromSession("usePool")) && !"hsqldb".equals(database) 
                ? POOLED_CONNECTION
                    : SIMPLE_CONNECTION;
            this.configureJDBCConnection();
        }
        else {
            isDatasource = true;
            implementation = DATASOURCE_CONNECTION;
            SystemGlobals.setValue(ConfigKeys.DATABASE_DATASOURCE_NAME, this.getFromSession("dbdatasource"));
            this.configureDataSourceConnection();
        }

        SystemGlobals.setValue(ConfigKeys.DATABASE_CONNECTION_IMPLEMENTATION, implementation);

        Connection conn = null;
        try {
            DBConnection source;

            if (isDatasource) { 
                source = new DataSourceConnection();
            }
            else {
                source = new SimpleConnection(); 
            }

            source.init();

            conn = source.getConnection();
        }
        catch (Exception e) {
        	if (LOGGER.isEnabledFor(Level.WARN)) {
        		LOGGER.warn("Error while trying to get a connection: " + e);
        	}
            this.context.put("exceptionMessage", e.getMessage());
        }

        return conn;
    }

    private boolean updateAdminPassword(final Connection conn)
    {
        LOGGER.info("Going to update the administrator's username and password");

        boolean status = false;

        PreparedStatement pstmt = null;

        try {
            pstmt = conn.prepareStatement("UPDATE jforum_users SET username= ?, user_password = ? WHERE username = 'Admin'");
            pstmt.setString(1, this.getFromSession("adminUser"));
            pstmt.setString(2, Hash.sha512(this.getFromSession("adminPassword")+SystemGlobals.getValue(ConfigKeys.USER_HASH_SEQUENCE)));
            pstmt.executeUpdate();
            status = true;
        }
        catch (Exception e) {
        	if (LOGGER.isEnabledFor(Level.WARN)) {
        		LOGGER.warn("Error while trying to update the administrator's password: " + e);
        	}
            this.context.put("exceptionMessage", e.getMessage());
        }
        finally {
            DbUtils.close(pstmt);
        }

        return status;
    }

    public void checkInformation() 
    {
        this.setTemplateName(TemplateKeys.INSTALL_CHECK_INFO);

        final String language = this.request.getParameter("language");
        final String database = this.request.getParameter("database");
        String dbHost = this.request.getParameter("dbhost");
        final String dbPort = this.request.getParameter("dbport");
        String dbUser = this.request.getParameter("dbuser");
        String dbName = this.request.getParameter("dbname");
        final String dbPassword = this.request.getParameter("dbpasswd");
        String dbEncoding = this.request.getParameter("dbencoding");
        String dbEncodingOther = this.request.getParameter("dbencoding_other");
        final String usePool = this.request.getParameter("use_pool");
        String forumLink = this.request.getParameter("forum_link");
        final String adminUser = this.request.getParameter("admin_user");
        final String adminPassword = this.request.getParameter("admin_pass1");

        dbHost = this.notNullDefault(dbHost, "localhost");
        dbEncodingOther = this.notNullDefault(dbEncodingOther, "utf-8");
        dbEncoding = this.notNullDefault(dbEncoding, dbEncodingOther);
        forumLink = this.notNullDefault(forumLink, "http://localhost");
        dbName = this.notNullDefault(dbName, "jforum");

        if ("hsqldb".equals(database)) {
            dbUser = this.notNullDefault(dbUser, "sa");
        }

        this.addToSessionAndContext("language", language);
        this.addToSessionAndContext("database", database);
        this.addToSessionAndContext("dbHost", dbHost);
        this.addToSessionAndContext("dbPort", dbPort);
        this.addToSessionAndContext("dbUser", dbUser);
        this.addToSessionAndContext("dbName", dbName);
        this.addToSessionAndContext("dbPassword", dbPassword);
        this.addToSessionAndContext("dbEncoding", dbEncoding);
        this.addToSessionAndContext("usePool", usePool);
        this.addToSessionAndContext("forumLink", forumLink);
        this.addToSessionAndContext("siteLink", this.request.getParameter("site_link"));
        this.addToSessionAndContext("adminUser", adminUser);
        this.addToSessionAndContext("adminPassword", adminPassword);
        this.addToSessionAndContext("dbdatasource", this.request.getParameter("dbdatasource"));
        this.addToSessionAndContext("db_connection_type", this.request.getParameter("db_connection_type"));

        this.addToSessionAndContext("configureDatabase", null);
        this.addToSessionAndContext("createTables", null);
        this.addToSessionAndContext("importTablesData", null);

        this.context.put("canWriteToWebInf", this.canWriteToWebInf());
        this.context.put("moduleAction", "install_check_info.htm");
    }

    private void addToSessionAndContext(final String key, final String value)
    {
        this.request.getSessionContext().setAttribute(key, value);
        this.context.put(key, value);
    }

    private String notNullDefault(final String value, final String useDefault)
    {
        if (value == null || value.trim().equals("")) {
            return useDefault;
        }

        return value;
    }

    private void storeWelcomeMessage(final Connection conn) 
    {
        final String dbType = this.getFromSession("database");
        final String filePath = SystemGlobals.getValue(ConfigKeys.CONFIG_DIR)
            + "/database/"
            + dbType
            + "/" + dbType + "_data_jforum_posts_text_post_text_blob.txt";
        final File file = new File(filePath);
        String message = null;
        try {
            message = FileUtils.readFileToString(file, "UTF-8");
            message = message.trim();
            if (message.indexOf("\\n") != -1) {
                message = message.replace("\\n", "\n");
            }
        } catch (IOException e) {
            LOGGER.error("Loading congratulation message failed", e);
        }
        if (message != null) {
            saveMessage(conn, "Welcome to JForum", message, Topic.TYPE_NORMAL);
        }
    }

    private void saveMessage(final Connection conn, final String subject, final String message, final int topicType) 
    {
        try {
            ConfigLoader.createLoginAuthenticator();
            ConfigLoader.loadDaoImplementation();

            SystemGlobals.loadQueries(SystemGlobals.getValue(ConfigKeys.SQL_QUERIES_GENERIC),
                                      SystemGlobals.getValue(ConfigKeys.SQL_QUERIES_DRIVER));

            SystemGlobals.setValue(ConfigKeys.SEARCH_INDEXING_ENABLED, "false");

            final JForumExecutionContext executionContext = JForumExecutionContext.get();
            executionContext.setConnection(conn);
            JForumExecutionContext.set(executionContext);

            final User user = new User(2);
            final int forumId = 1;

            // Create topic
            final Topic topic = new Topic();
            topic.setPostedBy(user);
            topic.setTitle(subject);
            topic.setTime(new Date());
            topic.setType(topicType);
            topic.setForumId(forumId);

            final TopicDAO topicDao = DataAccessDriver.getInstance().newTopicDAO();
            topicDao.addNew(topic);

            // Create post
            final Post post = new Post();
            post.setSubject(topic.getTitle());
            post.setTime(topic.getTime());
            post.setUserId(user.getId());
            post.setText(message);
            post.setForumId(topic.getForumId());
            post.setSmiliesEnabled(true);
            post.setHtmlEnabled(true);
            post.setBbCodeEnabled(true);
            post.setUserIp("127.0.0.1");
            post.setTopicId(topic.getId());

            final PostDAO postDao = DataAccessDriver.getInstance().newPostDAO();
            postDao.addNew(post);

            // Update topic
            topic.setFirstPostId(post.getId());
            topic.setLastPostId(post.getId());

            topicDao.update(topic);
            DataAccessDriver.getInstance().newUserDAO().incrementPosts(post.getUserId());

            // Update forum stats
            final ForumDAO forumDao = DataAccessDriver.getInstance().newForumDAO();
            forumDao.incrementTotalTopics(forumId, 1);
            forumDao.setLastPost(forumId, post.getId());
        }
        finally {
            SystemGlobals.setValue(ConfigKeys.SEARCH_INDEXING_ENABLED, "true");

            final JForumExecutionContext executionContext = JForumExecutionContext.get();
            executionContext.setConnection(null);
            JForumExecutionContext.set(executionContext);
        }
    }

    /** 
     * @see net.jforum.Command#list()
     */
    @Override
    public void list()
    {
        this.welcome();
    }

    /** 
     * @see net.jforum.Command#process(net.jforum.context.RequestContext, net.jforum.context.ResponseContext, freemarker.template.SimpleHash) 
     * @param request RequestContext     
     * @param response ResponseContext
     * @param context SimpleHash
     */
    @Override
    public Template process(final RequestContext request,
                            final ResponseContext response,
                            final SimpleHash context)  
    {
        this.setTemplateName(TemplateKeys.EMPTY);
        return super.process(request, response, context);
    }
}

../jforum2-code/src/main/java/net/jforum/search/ContentSearchOperation.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 25/07/2007 19:36:18
 * 
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.search;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import net.jforum.entities.Post;
import net.jforum.util.preferences.TemplateKeys;
import net.jforum.view.forum.common.PostCommon;

/**
 * @author Rafael Steil
 */
public class ContentSearchOperation extends SearchOperation
{
    private transient List<Post> results = new ArrayList<>();
	
	@Override public SearchResult<Post> performSearch(final SearchArgs args)
	{
        final SearchResult<Post> searchResult =
				(args.getKeywords().length > 0 || args.getUserIds().length > 0)
				? SearchFacade.search(args)
				: new SearchResult<Post>(new ArrayList<>(), 0);

		this.results = searchResult.getRecords();

		return searchResult;
	}
	
	@Override public void prepareForDisplay()
	{
		for (final Iterator<Post> iter = this.results.iterator(); iter.hasNext(); ) {
			Post post = iter.next();
			PostCommon.preparePostForDisplay(post);
			// enable highlighting in CODE blocks
			// must match what is used in LuceneContentCollector.retrieveRealPosts
			// Transforms
			//     &lt;span class='sr'&gt;foo&lt;/span&gt;
			// back to
			//     <span class='sr'>foo</span>
			post.setSubject(post.getSubject().replaceAll("&lt;span class='sr'&gt;(.*?)&lt;/span&gt;", "<span class='sr'>$1</span>"));
			post.setText(post.getText().replaceAll("&lt;span class='sr'&gt;(.*?)&lt;/span&gt;", "<span class='sr'>$1</span>"));
		}
	}

	@Override public List<Post> getResults()
	{
		return this.results;
	}

	@Override public int totalRecords()
	{
		return this.results.size();
	}

	@Override public String viewTemplate()
	{
		return TemplateKeys.SEARCH_SEARCH;
	}
	
	@Override public int extractForumId(final Object value)
	{
		return ((Post)value).getForumId();
	}
}

../jforum2-code/src/main/java/net/jforum/search/SearchFacade.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Mar 11, 2005 12:01:47 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.search;

import java.util.ArrayList;

import org.apache.log4j.Logger;

import net.jforum.entities.Post;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;

/**
 * @author Rafael Steil
 */
public final class SearchFacade
{
	private static final Logger LOGGER = Logger.getLogger(SearchFacade.class);
	private static LuceneManager searchManager;

	public static void init()
	{
		if (!isSearchEnabled()) {
			LOGGER.info("Search indexing is disabled. Will try to create a LuceneSearch instance for runtime configuration changes");
		}

		searchManager = new LuceneManager();
		searchManager.init();
	}

	public static void create(final Post post)
	{
		if (isSearchEnabled()) {
			searchManager.create(post);
		}
	}

	public static void update(final Post post) 
	{
		if (isSearchEnabled()) {
			searchManager.update(post);
		}
	}

	public static SearchResult<Post> search(final SearchArgs args)
	{
		return isSearchEnabled()
			? searchManager.search(args)
			: new SearchResult<>(new ArrayList<>(), 0);
	}

	private static boolean isSearchEnabled()
	{
		return SystemGlobals.getBoolValue(ConfigKeys.SEARCH_INDEXING_ENABLED);
	}

	public static void delete(final Post post)
	{
		if (isSearchEnabled()) {
			searchManager.delete(post);
		}
	}

	public static LuceneManager manager()
	{
		return searchManager;
	}

	private SearchFacade() {}
}

../jforum2-code/src/main/java/net/jforum/search/SearchResult.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 29/07/2007 23:57:58
 * 
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.search;

import java.util.List;

/**
 * @author Rafael Steil
 */
public class SearchResult<T>
{
	private transient final List<T> records;

	private transient int totalHits;

	public SearchResult (final List<T> records, int totalHits)
	{
		this.records = records;
		this.totalHits = totalHits;
	}

	public List<T> getRecords()
	{
		return this.records;
	}

	public int getNumberOfHits()
	{
		return records.size();
	}

	public int getTotalHits()
	{
		return totalHits;
	}

}

../jforum2-code/src/main/java/net/jforum/search/SearchPost.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 28/07/2007 10:50:37
 * 
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.search;

import net.jforum.entities.Forum;
import net.jforum.entities.Post;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public class SearchPost extends Post
{
	private static final long serialVersionUID = -8707019572752485188L;
	private Forum forum;
	
	public void setForum(final Forum forum)
	{
		this.forum = forum;
	}
	
	public Forum getForum()
	{
		return this.forum;
	}
	
    @Override public boolean equals(final Object obj) 
    {
        return obj instanceof SearchPost && super.equals(obj) && 
               ((SearchPost)obj).getForum().equals(this.forum);
    }
    
    @Override public int hashCode() 
    {
        return super.hashCode();
    }	
}

../jforum2-code/src/main/java/net/jforum/search/LuceneReindexer.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 06/08/2007 15:20:23
 * 
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.search;

import java.io.IOException;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import org.apache.log4j.Logger;

import net.jforum.JForumExecutionContext;
import net.jforum.dao.DataAccessDriver;
import net.jforum.dao.LuceneDAO;
import net.jforum.entities.Post;
import net.jforum.exceptions.ForumException;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;

/**
 * @author Rafael Steil
 */
public class LuceneReindexer
{
	private static final Logger LOGGER = Logger.getLogger(LuceneReindexer.class);
    
	private LuceneSettings settings;
	private LuceneReindexArgs args;
    
	public LuceneReindexer(LuceneSettings settings, LuceneReindexArgs args)
	{
		this.settings = settings;
		this.args = args;
	}
    
	public void startProcess()
	{
		reindex();
	}
    
	public void startBackgroundProcess()
	{
		SystemGlobals.setValue(ConfigKeys.LUCENE_CURRENTLY_INDEXING, "1");

		new Thread(() -> reindex()).start();
	}

	private void reindex()
	{
		try {
			if (args.recreate()) {
				settings.createIndexDirectory(SystemGlobals.getValue(ConfigKeys.LUCENE_INDEX_WRITE_PATH));
			}
		}
		catch (IOException e) {
			throw new ForumException(e);
		}

		LuceneDAO dao = DataAccessDriver.getInstance().newLuceneDAO();

		LuceneSearch luceneSearch = SearchFacade.manager().luceneSearch();
		LuceneIndexer luceneIndexer = SearchFacade.manager().luceneIndexer();

		int fetchCount = SystemGlobals.getIntValue(ConfigKeys.LUCENE_INDEXER_DB_FETCH_COUNT);

		try {
			long processStart = System.currentTimeMillis();

			int firstPostId = args.filterByMessage() ? args.getFirstPostId() : dao.firstPostIdByDate(args.getFromDate());
			int lastPostId = args.filterByMessage()	? args.getLastPostId() : dao.lastPostIdByDate(args.getToDate());

			int dbFirstPostId = dao.firstPostIdByDate(new Date(0L));
			int dbLastPostId = dao.lastPostIdByDate(new Date());
			if (args.filterByMessage()) {
				if (firstPostId < dbFirstPostId) {
					firstPostId = dbFirstPostId;
				}
				if (lastPostId > dbLastPostId) {
					lastPostId = dbLastPostId;
				}
			}
			LOGGER.info("LuceneReindexer: indexing posts "+firstPostId+ " through "+lastPostId);

			int counter = 0;
			int indexTotal = 0;
			long indexRangeStart = System.currentTimeMillis();
			boolean hasMorePosts = true;
			while (hasMorePosts) {
				boolean contextFinished = false;

				int toPostId = firstPostId + fetchCount < lastPostId
					? (firstPostId + fetchCount - 1)
					: lastPostId;

				try {
					JForumExecutionContext ex = JForumExecutionContext.get();
					JForumExecutionContext.set(ex);

					List<Post> l = dao.getPostsToIndex(firstPostId, toPostId);

					if (counter >= 1000) {
						long end = System.currentTimeMillis();
						LOGGER.info("LuceneReindexer: indexed ~1000 documents in " 					    
							+ (end - indexRangeStart) + " ms (" + indexTotal + " so far)");
						indexRangeStart = end;
						counter = 0;
					}

					JForumExecutionContext.finish();
					contextFinished = true;

					for (Iterator<Post> iter = l.iterator(); iter.hasNext(); ) {
						if ("0".equals(SystemGlobals.getValue(ConfigKeys.LUCENE_CURRENTLY_INDEXING))) {
							hasMorePosts = false;						    
							break;
						}

						Post post = iter.next();

						if (!args.recreate() && args.avoidDuplicatedRecords()) {
							if (luceneSearch.findDocumentByPostId(post.getId()) != null) {
								continue;
							}
						}

						luceneIndexer.batchCreate(post);

						counter++;
						indexTotal++;
					}

					firstPostId += fetchCount;
					hasMorePosts = hasMorePosts && toPostId < lastPostId;
				}
				finally {
					if (!contextFinished) {
						JForumExecutionContext.finish();
					}
				}
			}

			long end = System.currentTimeMillis();

			LOGGER.info("LuceneReindexer: Total time " + (end - processStart) + " ms");
		}
		catch (Exception e) {
			e.printStackTrace();
			throw new ForumException(e);
		}
		finally {
			SystemGlobals.setValue(ConfigKeys.LUCENE_CURRENTLY_INDEXING, "0");

			luceneIndexer.flushRAMDirectory();
		}
	}
}

../jforum2-code/src/main/java/net/jforum/search/NewMessagesSearchOperation.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 25/07/2007 19:32:52
 * 
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.search;

import java.util.ArrayList;
import java.util.List;

import net.jforum.dao.DataAccessDriver;
import net.jforum.dao.TopicDAO;
import net.jforum.entities.Topic;
import net.jforum.util.preferences.TemplateKeys;
import net.jforum.view.forum.common.TopicsCommon;

/**
 * @author Rafael Steil
 */
public class NewMessagesSearchOperation extends SearchOperation
{
	private transient List<Topic> results = new ArrayList<>();
	
	@Override public SearchResult<Topic> performSearch(final SearchArgs args)
	{
		final TopicDAO dao = DataAccessDriver.getInstance().newTopicDAO();
		final SearchResult<Topic> searchResult = dao.findTopicsByDateRange(args);

		this.results = searchResult.getRecords();

		return searchResult;
	}

	@Override public void prepareForDisplay()
	{
		this.results = TopicsCommon.prepareTopics(this.results);
	}

	@Override public List<Topic> getResults()
	{
		return this.results;
	}

	@Override public int totalRecords()
	{
		return this.results.size();
	}
	
	@Override public String viewTemplate()
	{
		return TemplateKeys.SEARCH_NEW_MESSAGES;
	}
	
	@Override public int extractForumId(final Object value)
	{
		return ((Topic)value).getForumId();
	}
}

../jforum2-code/src/main/java/net/jforum/search/SearchArgs.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.

 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:

 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 25/02/2004 - 19:16:25
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.search;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import net.jforum.dao.DataAccessDriver;
import net.jforum.entities.User;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;

/**
 * @author Rafael Steil
 */
public class SearchArgs 
{
	private String keywords;
	private int userId = -1;
	private String username;
	private String orderDir = "DESC";
	private String orderBy = "relevance";
	private int forumId;
	private int initialRecord;
	private String searchDate;
	private Date fromDate;
	private Date toDate;
	private MatchType matchType = MatchType.ALL_KEYWORDS;
	private String searchIn = "ALL";

	private boolean groupByForum = false;

	public static enum MatchType {
		ALL_KEYWORDS,
		ANY_KEYWORDS,
		EXACT_PHRASE,
		RAW_KEYWORDS
	}

	/**
	 * set the matching type - default to all words if unknown string is passed
	 * @param matchType
	 */
	public void setMatchType(String matchType)
	{
		if (matchType == null) {
			this.matchType = MatchType.ALL_KEYWORDS;
		} else if ("any".equals(matchType.toLowerCase())) {
			this.matchType = MatchType.ANY_KEYWORDS;
		} else if ("raw".equals(matchType.toLowerCase())) {
			this.matchType = MatchType.RAW_KEYWORDS;
		} else if ("phrase".equals(matchType.toLowerCase())) {
			this.matchType = MatchType.EXACT_PHRASE;
		} else {
			/* not set or null like for new messagesSearch */
			this.matchType = MatchType.ALL_KEYWORDS;
		}
	}

	public boolean isMatchAll() {
		return matchType.equals(MatchType.ALL_KEYWORDS);
	}

	public boolean isMatchAny() {
		return matchType.equals(MatchType.ANY_KEYWORDS);
	}

	public boolean isMatchExact() {
		return matchType.equals(MatchType.EXACT_PHRASE);
	}

	public boolean isMatchRaw() {
		return matchType.equals(MatchType.RAW_KEYWORDS);
	}

	public void setDateRange(Date fromDate, Date toDate)
	{
		this.fromDate = fromDate;
		this.toDate = toDate;
	}

	public Date getFromDate()
	{
		return this.fromDate;
	}

	public Date getToDate()
	{
		return this.toDate;
	}

	public String getSearchDate() {
		return formatNullOrTrim(searchDate);
	}

	public void setSearchDate(String searchDate) {
		this.searchDate = searchDate;
	}

	public int fetchCount()
	{
		return SystemGlobals.getIntValue(ConfigKeys.TOPICS_PER_PAGE);
	}

	public void startFetchingAtRecord(int initialRecord)
	{
		this.initialRecord = initialRecord;
	}

	public int startFrom()
	{
		return this.initialRecord;
	}

	public void setKeywords(String keywords)
	{
		this.keywords = keywords;
	}

	public void setUsername (String username)
	{
		this.username = username;
	}

	// -----------------------------------------------------------------

	/**
	 * Return member ids to query.<br />
	 * 1) If user searching by keyword and not member, return empty array.
	 * <br />
	 * 2) If user searching by user id, return array with single element <br />
	 * 3) If user searching by display name, return array with all non-negative
	 * elements. (Lucene doesn't allow searches for negative numbers without
	 * custom code. Since negative numbers are only test ids (and
	 * anonymous/admin), the search is not present for negative ids.
	 */
	public int[] getUserIds() {
		int[] userIds;
		if (userId > 0) {
			userIds = new int[] { userId };
		} else if (username != null && username.trim().length() > 0) {
			userIds = getUserIdsForName();
		} else {
			userIds = new int[0];
		}
		return userIds;
	}

	private int[] getUserIdsForName() {
		List<User> users = DataAccessDriver.getInstance().newUserDAO().findByName(getUsername(), false);
		users = removeNegativeIds(users);
		int length = users.size();
		int[] userIds = new int[length];
		for (int i = 0; i < length; i++) {
			userIds[i] = users.get(i).getId();
		}
		return userIds;
	}

	/*
	 * Lucene doesn't handle negative numbers. Since the only negative ids are
	 * test ids (or anonymous or admin), real users won't be searching for them.
	 */
	private List<User> removeNegativeIds(List<User> list) {
		List<User> result = new ArrayList<>(list.size());
		for (User user : list) {
			if (user.getId() >= 0) {
				result.add(user);
			}
		}
		return result;
	}

	public void setUserId(String userId) {
		int id = -1;
		if (userId != null && userId.trim().length() > 0) {
			try {
				id = Integer.parseInt(userId.trim());
			} catch (NumberFormatException nfex) {
				// id is already -1, no need to do anything about this
			}
		}

		this.userId = id;
	}

	public int getUserId() {
		return userId;
	}

	public void setUserId(int userId) {
		this.userId = userId;
	}

	public void setForumId(int forumId)
	{
		this.forumId = forumId;
	}

	public void setOrderBy(String orderBy)
	{
		this.orderBy = orderBy;
	}

	public void setOrderDir(String orderDir)
	{
		if (orderDir != null && (orderDir.equals("ASC") || orderDir.equals("DESC")))
			this.orderDir = orderDir;
	}

	public boolean isGroupByForum() {
		return groupByForum;
	}

	public void setGroupByForum(boolean groupByForum) {
		this.groupByForum = groupByForum;
	}

	public String[] getKeywords()
	{
		if (this.keywords == null || this.keywords.trim().length() == 0) {
			return new String[] {};
		}

		return this.keywords.trim().split(" ");
	}

	public String rawKeywords()
	{
		return formatNullOrTrim(this.keywords);
	}

	public String getUsername()
	{
		return this.username;
	}

	public int getForumId()
	{
		return this.forumId;
	}

	public boolean isOrderDirectionDescending() {
		return "DESC".equals(orderDir);
	}

	public String getOrderBy()
	{
		return this.orderBy;
	}

	// -----------------------------------------------------------------

	public String getSearchIn() {
		return formatNullOrTrim(searchIn);
	}

	public void setSearchIn(String searchIn) {
		this.searchIn = searchIn;
	}

	public boolean shouldLimitSearchToSubject() {
		return "SUBJECT".equals(searchIn);
	}

	// -----------------------------------------------------------------

	private String formatNullOrTrim(String value) {
		if (value == null) {
			return "";
		}
		return value.trim();
	}
}

../jforum2-code/src/main/java/net/jforum/search/PorterStandardAnalyzer.java
package net.jforum.search;

import org.apache.log4j.Logger;
import org.apache.lucene.analysis.CharArraySet;
import org.apache.lucene.analysis.LowerCaseFilter;
import org.apache.lucene.analysis.StopFilter;
import org.apache.lucene.analysis.StopwordAnalyzerBase;
import org.apache.lucene.analysis.TokenStream;
import org.apache.lucene.analysis.en.PorterStemFilter;
import org.apache.lucene.analysis.standard.StandardTokenizer;

import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;

/**
 * Filters {@link StandardTokenizer} with {@link LowerCaseFilter},
 * {@link PorterStemFilter} and {@link StopFilter}, using a list of stop words.
 * Basically a StandardAnalyzer that also does Porter stemming.
 */

public final class PorterStandardAnalyzer extends StopwordAnalyzerBase {

	private static final Logger LOGGER = Logger.getLogger(PorterStandardAnalyzer.class);

	/** An set containing some common words that are usually not useful for searching.
	The lucene.analyzer.stopwords property determines the languages for which stop words are added. */
	private final static CharArraySet cas = new CharArraySet(CharArraySet.EMPTY_SET, true);

	/** Builds an analyzer with the stop words given in "cas" */
	public PorterStandardAnalyzer() {
		super(cas);
	}

	@Override
	protected TokenStreamComponents createComponents (final String fieldName) {
		// Filters StandardTokenizer with LowerCaseFilter, PorterStemFilter
		// and StopFilter, using a list of given stop words 
		// Basically a StandardAnalyzer that also does Porter stemming 
		final StandardTokenizer src = new StandardTokenizer();
		TokenStream tok = new LowerCaseFilter(src);
		tok = new StopFilter(tok, cas);
		tok = new PorterStemFilter(tok);
		return new TokenStreamComponents(src, tok);
	}

	static {
		String stopWordLanguages = SystemGlobals.getValue(ConfigKeys.LUCENE_STOPWORDs);
		for (String lang : stopWordLanguages.split(", ")) {
			LOGGER.debug("adding stop words for: "+lang);
			switch (lang) {
				case "ar":
					cas.addAll(org.apache.lucene.analysis.ar.ArabicAnalyzer.getDefaultStopSet());
					break;
				case "br":
					cas.addAll(org.apache.lucene.analysis.br.BrazilianAnalyzer.getDefaultStopSet());
					break;
				case "cz":
					cas.addAll(org.apache.lucene.analysis.cz.CzechAnalyzer.getDefaultStopSet());
					break;
				case "de":
					cas.addAll(org.apache.lucene.analysis.de.GermanAnalyzer.getDefaultStopSet());
					break;
				case "en":
					cas.addAll(org.apache.lucene.analysis.en.EnglishAnalyzer.getDefaultStopSet());
					break;
				case "fr":
					cas.addAll(org.apache.lucene.analysis.fr.FrenchAnalyzer.getDefaultStopSet());
					break;
				case "bg":
					cas.addAll(org.apache.lucene.analysis.bg.BulgarianAnalyzer.getDefaultStopSet());
					break;
				case "bn":
					cas.addAll(org.apache.lucene.analysis.bn.BengaliAnalyzer.getDefaultStopSet());
					break;
				case "ca":
					cas.addAll(org.apache.lucene.analysis.ca.CatalanAnalyzer.getDefaultStopSet());
					break;
				case "cjk":
					cas.addAll(org.apache.lucene.analysis.cjk.CJKAnalyzer.getDefaultStopSet());
					break;
				case "ckb":
					cas.addAll(org.apache.lucene.analysis.ckb.SoraniAnalyzer.getDefaultStopSet());
					break;
				case "da":
					cas.addAll(org.apache.lucene.analysis.da.DanishAnalyzer.getDefaultStopSet());
					break;
				case "el":
					cas.addAll(org.apache.lucene.analysis.el.GreekAnalyzer.getDefaultStopSet());
					break;
				case "es":
					cas.addAll(org.apache.lucene.analysis.es.SpanishAnalyzer.getDefaultStopSet());
					break;
				case "eu":
					cas.addAll(org.apache.lucene.analysis.eu.BasqueAnalyzer.getDefaultStopSet());
					break;
				case "fa":
					cas.addAll(org.apache.lucene.analysis.fa.PersianAnalyzer.getDefaultStopSet());
					break;
				case "fi":
					cas.addAll(org.apache.lucene.analysis.fi.FinnishAnalyzer.getDefaultStopSet());
					break;
				case "ga":
					cas.addAll(org.apache.lucene.analysis.ga.IrishAnalyzer.getDefaultStopSet());
					break;
				case "gl":
					cas.addAll(org.apache.lucene.analysis.gl.GalicianAnalyzer.getDefaultStopSet());
					break;
				case "hi":
					cas.addAll(org.apache.lucene.analysis.hi.HindiAnalyzer.getDefaultStopSet());
					break;
				case "hu":
					cas.addAll(org.apache.lucene.analysis.hu.HungarianAnalyzer.getDefaultStopSet());
					break;
				case "hy":
					cas.addAll(org.apache.lucene.analysis.hy.ArmenianAnalyzer.getDefaultStopSet());
					break;
				case "id":
					cas.addAll(org.apache.lucene.analysis.id.IndonesianAnalyzer.getDefaultStopSet());
					break;
				case "it":
					cas.addAll(org.apache.lucene.analysis.it.ItalianAnalyzer.getDefaultStopSet());
					break;
				case "lt":
					cas.addAll(org.apache.lucene.analysis.lt.LithuanianAnalyzer.getDefaultStopSet());
					break;
				case "lv":
					cas.addAll(org.apache.lucene.analysis.lv.LatvianAnalyzer.getDefaultStopSet());
					break;
				case "nl":
					cas.addAll(org.apache.lucene.analysis.nl.DutchAnalyzer.getDefaultStopSet());
					break;
				case "no":
					cas.addAll(org.apache.lucene.analysis.no.NorwegianAnalyzer.getDefaultStopSet());
					break;
				case "pt":
					cas.addAll(org.apache.lucene.analysis.pt.PortugueseAnalyzer.getDefaultStopSet());
					break;
				case "ro":
					cas.addAll(org.apache.lucene.analysis.ro.RomanianAnalyzer.getDefaultStopSet());
					break;
				case "ru":
					cas.addAll(org.apache.lucene.analysis.ru.RussianAnalyzer.getDefaultStopSet());
					break;
				case "sv":
					cas.addAll(org.apache.lucene.analysis.sv.SwedishAnalyzer.getDefaultStopSet());
					break;
				case "th":
					cas.addAll(org.apache.lucene.analysis.th.ThaiAnalyzer.getDefaultStopSet());
					break;
				case "tr":
					cas.addAll(org.apache.lucene.analysis.tr.TurkishAnalyzer.getDefaultStopSet());
					break;
				default:
					LOGGER.info("Language '"+lang+"' - don't know about stop words");
			}
		}
	}
}


../jforum2-code/src/main/java/net/jforum/search/LuceneManager.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 24/07/2007 12:23:05
 * 
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.search;

import java.io.File;
import java.io.IOException;
import java.util.Date;
import java.util.GregorianCalendar;

import org.apache.commons.io.FileUtils;
import org.apache.log4j.Logger;
import org.apache.lucene.index.DirectoryReader;

import net.jforum.entities.Post;
import net.jforum.exceptions.ForumException;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;

/**
 * @author Rafael Steil
 */

public class LuceneManager 
{
	private static final Logger LOGGER = Logger.getLogger(LuceneManager.class);

	private LuceneSearch search;
	private LuceneSettings settings;
	private LuceneIndexer indexer;

	public void init()
	{
		String dirPath = SystemGlobals.getValue(ConfigKeys.LUCENE_INDEX_WRITE_PATH);

		try {
			Class<?> clazz = Class.forName(SystemGlobals.getValue(ConfigKeys.LUCENE_ANALYZER));

			settings = new LuceneSettings(clazz);
			settings.useFSDirectory(dirPath);

			boolean reindex = false;
			try {
				DirectoryReader.open(settings.directory());
			} catch (IOException | RuntimeException ex) {
				LOGGER.warn("Index can't be opened, possibly because of an old index format: " + ex.getMessage());
				LOGGER.warn("Reindexing all posts, which can take a while");

				FileUtils.cleanDirectory(new File(dirPath));
				settings.useFSDirectory(dirPath);

				// create an empty directoy
				settings.createIndexDirectory(dirPath);

				reindex = true;
			}

			indexer = new LuceneIndexer(settings);

			search = new LuceneSearch(settings, new LuceneContentCollector(settings));

			indexer.watchNewDocuDocumentAdded(search);

			SystemGlobals.setObjectValue(ConfigKeys.LUCENE_SETTINGS, settings);

			// reindex everything - from Jan 1 1970 to now
			if (reindex) {
				LuceneReindexArgs args = new LuceneReindexArgs(new GregorianCalendar(1970, 0, 1).getTime(), new Date(),
											0, 0, false, LuceneReindexArgs.TYPE_DATE, true);
				LuceneReindexer reindexer = new LuceneReindexer(settings, args);
				reindexer.startBackgroundProcess();
			}
		} catch (Exception ex) {
			throw new ForumException(ex);
		}
	}

	public LuceneSearch luceneSearch()
	{
		return search;
	}

	public LuceneIndexer luceneIndexer()
	{
		return indexer;
	}

	public void create(final Post post)
	{
		indexer.create(post);
	}

	public void update(final Post post)
	{
		indexer.update(post);
	}

	public SearchResult<Post> search(final SearchArgs args)
	{
		return search.search(args);
	}

	public void delete(final Post post)
	{
		indexer.delete(post);
	}
}

../jforum2-code/src/main/java/net/jforum/search/SearchOperation.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 25/07/2007 19:27:48
 * 
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.search;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import net.jforum.entities.Forum;
import net.jforum.repository.ForumRepository;

/**
 * @author Rafael Steil
 */
public abstract class SearchOperation
{
	public abstract SearchResult<?> performSearch(SearchArgs args);
	public abstract int totalRecords();
	public abstract void prepareForDisplay();
	public abstract List<?> getResults();
	public abstract String viewTemplate();
	protected abstract <T> int extractForumId(T value);
	
	public final <T> List<T> filterResults(final List<T> input)
	{
		final List<T> output = new ArrayList<T>();

		final Map<Integer, ForumFilterResult> forums = new ConcurrentHashMap<>();

		for (final Iterator<T> iter = input.iterator(); iter.hasNext(); ) {
			final T currentObject = iter.next();

			final Integer forumId = Integer.valueOf(this.extractForumId(currentObject));

			forums.putIfAbsent(forumId, new ForumFilterResult(ForumRepository.getForum(forumId)));
			ForumFilterResult result = forums.get(forumId);
			if (result.isValid()) {
				// TODO: decouple
				if (currentObject instanceof SearchPost) {
					((SearchPost)currentObject).setForum(result.getForum());
				}

				output.add(currentObject);
			}
		}

		return output;
	}
	
	private static class ForumFilterResult
	{
		private transient final Forum forum;
		
		public ForumFilterResult(final Forum forum)
		{
			this.forum = forum;
		}
		
		public Forum getForum() 
		{
			return this.forum;
		}
		
		public boolean isValid()
		{
			return this.forum != null;
		}
	}
}

../jforum2-code/src/main/java/net/jforum/search/SearchFields.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 18/07/2007 20:58:43
 * 
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.search;

/**
 * @author Rafael Steil
 */
public final class SearchFields
{
	public static final class Keyword
	{
		public static final String POST_ID = "post.id";
		public static final String TOPIC_ID = "topic.id";
		public static final String FORUM_ID = "forum.id";
		public static final String USER_ID = "user.id";
		public static final String CATEGORY_ID = "category.id";
		public static final String DATE = "date";
		public static final String TOPIC_TYPE = "topic.type";
	}

	public static final class Indexed
	{
		public static final String SUBJECT = "subject";
		public static final String CONTENTS = "contents";
	}
}

../jforum2-code/src/main/java/net/jforum/search/LuceneReindexArgs.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 05/08/2007 12:14:52
 * 
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.search;

import java.util.Date;

/**
 * @author Rafael Steil
 */
public class LuceneReindexArgs
{
	public static final int TYPE_UNKNOWN = 0;
	public static final int TYPE_DATE = 1;
	public static final int TYPE_MESSAGE = 2;
    
	private Date fromDate;
	private Date toDate;
	private int firstPostId;
	private int lastPostId;
	private int type;
	private boolean avoidDuplicated;
	private boolean recreate;

	public LuceneReindexArgs(Date fromDate, Date toDate, int firstPostId, 
		int lastPostId, boolean avoidDuplicated, int type, boolean recreate)
	{
		this.fromDate = fromDate;
		this.toDate = toDate;
		this.firstPostId = firstPostId;
		this.lastPostId = lastPostId;
		this.avoidDuplicated = avoidDuplicated;
		this.type = type;
		this.recreate = recreate;
	}

	public Date getFromDate()
	{
		return this.fromDate;
	}

	public Date getToDate()
	{
		return this.toDate;
	}

	public int getFirstPostId()
	{
		return this.firstPostId;
	}

	public boolean avoidDuplicatedRecords()
	{
		return this.avoidDuplicated;
	}
    
	public boolean recreate()
	{
		return this.recreate;
	}
    
	public int getLastPostId()
	{
		return this.lastPostId;
	}
    
	public boolean filterByDate()
	{
		return this.type == TYPE_DATE && this.getFromDate() != null && this.getToDate() != null;
	}
    
	public boolean filterByMessage()
	{
		return this.type == TYPE_MESSAGE && this.getLastPostId() >= this.getFirstPostId();
	}
}

../jforum2-code/src/main/java/net/jforum/search/LuceneIndexer.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 18/07/2007 17:18:41
 * 
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.search;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.stream.Collectors;

import org.apache.log4j.Logger;
import org.apache.lucene.document.Document;
import org.apache.lucene.document.Field;
import org.apache.lucene.document.NumericDocValuesField;
import org.apache.lucene.document.StoredField;
import org.apache.lucene.document.StringField;
import org.apache.lucene.document.TextField;
import org.apache.lucene.index.IndexWriter;
import org.apache.lucene.index.IndexWriterConfig;
import org.apache.lucene.index.Term;
import org.apache.lucene.store.Directory;
import org.apache.lucene.store.RAMDirectory;
import org.apache.pdfbox.Loader;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.text.PDFTextStripper;

import net.jforum.dao.AttachmentDAO;
import net.jforum.dao.DataAccessDriver;
import net.jforum.entities.Attachment;
import net.jforum.entities.AttachmentInfo;
import net.jforum.entities.Post;
import net.jforum.exceptions.SearchException;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;

/**
 * @author Rafael Steil
 */
public class LuceneIndexer
{
	private static final Logger LOGGER = Logger.getLogger(LuceneIndexer.class);

	private LuceneSettings settings;
	private Directory ramDirectory;
	private IndexWriter ramWriter;
	private int ramNumDocs;
	private List<NewDocumentAdded> newDocumentAddedList = new ArrayList<>();

	private AttachmentDAO attachDAO;
	private String attachDir = SystemGlobals.getValue(ConfigKeys.ATTACHMENTS_STORE_DIR);

	public LuceneIndexer(final LuceneSettings settings)
	{
		this.settings = settings;
		this.createRAMWriter();
		this.attachDAO = DataAccessDriver.getInstance().newAttachmentDAO();
	}

	public void watchNewDocuDocumentAdded(NewDocumentAdded newDoc)
	{
		this.newDocumentAddedList.add(newDoc);
	}

	public void batchCreate(final Post post)
	{
		synchronized (LOGGER) {
			try {
				final Document document = this.createDocument(post);
				if (document != null) {
					this.ramWriter.addDocument(document);
					this.flushRAMDirectoryIfNecessary();
				}
			}
			catch (IOException e) {
				throw new SearchException(e);
			}
		}
	}

	private void createRAMWriter()
	{
		try {
			if (this.ramWriter != null) {
				this.ramWriter.close();
			}

			this.ramDirectory = new RAMDirectory();
			final IndexWriterConfig conf = new IndexWriterConfig(this.settings.analyzer()).setOpenMode(IndexWriterConfig.OpenMode.CREATE_OR_APPEND);
			this.ramWriter = new IndexWriter(this.ramDirectory, conf);
			this.ramNumDocs = SystemGlobals.getIntValue(ConfigKeys.LUCENE_INDEXER_RAM_NUMDOCS);
		}
		catch (IOException e) {
			throw new SearchException(e);
		}
	}

	private void flushRAMDirectoryIfNecessary()
	{
		if (this.ramWriter.getDocStats().maxDoc >= this.ramNumDocs) {
			this.flushRAMDirectory();
		}
	}

	public void flushRAMDirectory()
	{
		synchronized (LOGGER) {
			IndexWriter writer = null;

			try {
				final IndexWriterConfig conf = new IndexWriterConfig(this.settings.analyzer()).setOpenMode(IndexWriterConfig.OpenMode.CREATE_OR_APPEND);
				writer = new IndexWriter(this.settings.directory(), conf);
				this.ramWriter.commit();
				this.ramWriter.close();
				writer.addIndexes(new Directory[] { this.ramDirectory });
				writer.forceMergeDeletes();

				this.createRAMWriter();
			}
			catch (IOException e) {
				throw new SearchException(e);
			}
			finally {
				if (writer != null) {
					try { 
						writer.commit(); 
						writer.close();

						this.notifyNewDocumentAdded();
					}
					catch (Exception e) {
						LOGGER.error(e.toString(), e);
					}
				}
			}
		}
	}

	public void create(final Post post)
	{
		synchronized (LOGGER) {
			IndexWriter writer = null;

			try {
				final IndexWriterConfig conf = new IndexWriterConfig(this.settings.analyzer()).setOpenMode(IndexWriterConfig.OpenMode.CREATE_OR_APPEND);
				writer = new IndexWriter(this.settings.directory(), conf);

				final Document document = this.createDocument(post);
				if (document != null) {
					writer.addDocument(document);

					if (LOGGER.isDebugEnabled()) {
						LOGGER.debug("Indexed " + document);
					}
				}
			}
			catch (Exception e) {
				LOGGER.error(e.toString(), e);
			}
			finally {
				if (writer != null) {
					try {
						writer.commit();
						writer.close();

						this.notifyNewDocumentAdded();
					}
					catch (Exception e) {
						LOGGER.error(e.toString(), e);
					}
				}
			}
		}
	}

	public void update(final Post post)
	{
		if (this.performDelete(post)) {
			this.create(post);
		}
	}

	private Document createDocument(final Post post)
	{
		if (post.isModerate())
			return null;

		Document doc = new Document();

		doc.add(new TextField(SearchFields.Indexed.SUBJECT, post.getSubject(), Field.Store.NO));
		doc.add(new StringField(SearchFields.Keyword.POST_ID, String.valueOf(post.getId()), Field.Store.YES));
		doc.add(new StringField(SearchFields.Keyword.FORUM_ID, String.valueOf(post.getForumId()), Field.Store.YES));
		doc.add(new NumericDocValuesField(SearchFields.Keyword.FORUM_ID, post.getForumId()));
		doc.add(new StringField(SearchFields.Keyword.TOPIC_ID, String.valueOf(post.getTopicId()), Field.Store.YES));
		doc.add(new StringField(SearchFields.Keyword.USER_ID, String.valueOf(post.getUserId()), Field.Store.YES));
		doc.add(new NumericDocValuesField(SearchFields.Keyword.DATE, post.getTime().getTime()));
		doc.add(new StoredField(SearchFields.Keyword.DATE, post.getTime().getTime()));
		doc.add(new StringField(SearchFields.Keyword.TOPIC_TYPE, String.valueOf(post.getTopicType()), Field.Store.YES));

		// remove UBB tags so that searches for "quote" doesn't find posts that include a quote tag
		String text = post.getText();
		// remove [quote] and similar
		text = text.replaceAll("\\[[^\\]=/]+?\\]", "");
		// remove [/quote] and similar
		text = text.replaceAll("\\[/[^\\]]+?\\]", "");
		// replace [quote=foo bar] by "foo bar "
		text = text.replaceAll("\\[[^\\]=]+?=([^\\]]+?)\\]", "$1 ");
		// TODO: we should remove more (or all) BB tags
		doc.add(new TextField(SearchFields.Indexed.CONTENTS, text, Field.Store.NO));

		if (post.hasAttachments()) {
			for (Attachment att : attachDAO.selectAttachments(post.getId())) {
				AttachmentInfo info = att.getInfo();
				doc.add(new TextField(SearchFields.Indexed.CONTENTS, info.getComment(), Field.Store.NO));
				LOGGER.debug("indexing filename="+info.getPhysicalFilename()+", mimetype="+info.getMimetype());

				File f = new File(attachDir + File.separatorChar + info.getPhysicalFilename());
				try (InputStream is = new FileInputStream(f)) {
					if (info.getMimetype().startsWith("text")) {
						String contents = new BufferedReader(new InputStreamReader(is))
											.lines().collect(Collectors.joining("\n"));
						doc.add(new TextField(SearchFields.Indexed.CONTENTS, contents, Field.Store.NO));
					} else if (info.getMimetype().equals("application/pdf")) {
						PDDocument pdfDocument = Loader.loadPDF(f);
						StringWriter writer = new StringWriter();
						PDFTextStripper stripper = new PDFTextStripper();
						stripper.writeText(pdfDocument, writer);
						String contents = writer.getBuffer().toString();
						doc.add(new TextField(SearchFields.Indexed.CONTENTS, contents, Field.Store.NO));
						pdfDocument.close();
					}
				} catch (Exception ex) {
					LOGGER.error("indexing "+f.getName()+": " + ex.getMessage());
				}
			}
		}

		return doc;
	}

	private void notifyNewDocumentAdded()
	{
		for (Iterator<NewDocumentAdded> iter = this.newDocumentAddedList.iterator(); iter.hasNext(); ) {
			iter.next().newDocumentAdded();
		}
	}

	public void delete(final Post post)
	{
		this.performDelete(post);
	}

	private boolean performDelete(final Post post)
	{
		synchronized (LOGGER) {
			IndexWriter writer = null;
			boolean status = false;

			try {
				final IndexWriterConfig conf = new IndexWriterConfig(this.settings.analyzer()).setOpenMode(IndexWriterConfig.OpenMode.CREATE_OR_APPEND);
				writer = new IndexWriter(this.settings.directory(), conf);
				writer.deleteDocuments(new Term(SearchFields.Keyword.POST_ID, String.valueOf(post.getId())));
				status = true;
			}
			catch (IOException e) {
				LOGGER.error(e.toString(), e);
			}
			finally {
				if (writer != null) {
					try {
						writer.commit();
						writer.close();
						this.flushRAMDirectory();
					}
					catch (IOException e) {
						LOGGER.error(e.toString(), e);
					}
				}
			}

			return status;
		}
	}
}

../jforum2-code/src/main/java/net/jforum/search/LuceneSearch.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 18/07/2007 22:05:37
 * 
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.search;

import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantReadWriteLock;

import org.apache.log4j.Logger;
import org.apache.lucene.analysis.TokenStream;
import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
import org.apache.lucene.document.Document;
import org.apache.lucene.index.DirectoryReader;
import org.apache.lucene.index.Term;
import org.apache.lucene.queryparser.classic.QueryParser;
import org.apache.lucene.search.IndexSearcher;
import org.apache.lucene.search.Query;
import org.apache.lucene.search.ScoreDoc;
import org.apache.lucene.search.Sort;
import org.apache.lucene.search.SortField;
import org.apache.lucene.search.TermQuery;
import org.apache.lucene.search.TopDocs;
import org.apache.lucene.search.TopFieldDocs;
import org.apache.lucene.search.TotalHits;

import net.jforum.entities.Post;
import net.jforum.exceptions.SearchException;
import net.jforum.repository.ForumRepository;
import net.jforum.util.I18n;

/**
 * @author Rafael Steil
 */
public class LuceneSearch implements NewDocumentAdded
{
	private static final Logger LOGGER = Logger.getLogger(LuceneSearch.class);

	private final ReentrantReadWriteLock rwl = new ReentrantReadWriteLock();
	private final Lock read = rwl.readLock();
	private final Lock write = rwl.writeLock();

	private IndexSearcher searcher;
	private LuceneSettings settings;
	private LuceneContentCollector collector;

	public LuceneSearch (LuceneSettings settings, LuceneContentCollector collector)
	{
		this.settings = settings;
		this.collector = collector;

		this.openSearch();
	}

	@Override public void newDocumentAdded() {		
		try {
			write.lock();
            // open a new searcher
			openSearch();
		} catch (Exception e) {
			throw new RuntimeException(e);
		} finally {
			write.unlock();
		}
	}

	/**
	 * @return the search result
	 */
	public SearchResult<Post> search (SearchArgs args)
	{
		return this.performSearch(args, this.collector);
	}

	public Document findDocumentByPostId (int postId) {
		Document doc = null;

		try {
			read.lock();
			TopDocs results = searcher.search(new TermQuery(new Term(SearchFields.Keyword.POST_ID, String.valueOf(postId))), 1);
			ScoreDoc[] hits = results.scoreDocs;
			for (ScoreDoc hit : hits) {
				doc = searcher.doc(hit.doc);
			}
		} catch (IOException e) {
			throw new RuntimeException(e);
		} finally {
			read.unlock();
		}

		return doc;
	}

	private SearchResult<Post> performSearch (SearchArgs args, LuceneContentCollector resultCollector)
	{
		SearchResult<Post> result;

		try {
			read.lock();
			StringBuilder criteria = new StringBuilder(256);

			this.filterByForum(args, criteria);
			this.filterByUser(args, criteria);
			this.filterByKeywords(args, criteria);
			this.filterByDateRange(args, criteria);

			if (criteria.length() == 0) {
				result =  new SearchResult<>(new ArrayList<>(), 0);
			} else {
				Query query = new QueryParser(SearchFields.Indexed.CONTENTS, this.settings.analyzer()).parse(criteria.toString());
				LOGGER.debug("query=["+query.toString()+"], criteria=["+criteria.toString()+"]");

				final int totalPosts = ForumRepository.getTotalMessages();
				TopFieldDocs tfd = searcher.search(query, totalPosts, getSorter(args));
				ScoreDoc[] docs = tfd.scoreDocs;
				TotalHits th = tfd.totalHits;
				if (th.value > 0) {
					result = new SearchResult<>(resultCollector.collect(args, docs, query), (int) th.value);
				} else {
					result = new SearchResult<>(new ArrayList<>(), 0);
				}

				LOGGER.debug((th.relation == TotalHits.Relation.EQUAL_TO ? "" : "minimum ") + "number of hits="+th.value);
			}
		} catch (Exception e) {
			throw new SearchException(e);
		} finally {
			read.unlock();
		}

		return result;
	}

	// only options are relevance and date
	private Sort getSorter (SearchArgs args) {
		Sort sort;

		SortField forumGroupingSortField = new SortField(SearchFields.Keyword.FORUM_ID, SortField.Type.INT, false);
		SortField dateSortField = new SortField(SearchFields.Keyword.DATE, SortField.Type.LONG, args.isOrderDirectionDescending());
		// TODO: for wiki topics, we should use the edit date, not the post date

		if ("time".equals(args.getOrderBy())) {
			// sort by date
			if (args.isGroupByForum()) {
				sort = new Sort(new SortField[] { forumGroupingSortField, dateSortField });
			} else {
				sort = new Sort(new SortField[] { dateSortField });
			}
		} else {
			// sort by relevance
			if (args.isGroupByForum()) {
				sort = new Sort(new SortField[] { forumGroupingSortField, SortField.FIELD_SCORE });
			} else {
				sort = new Sort(new SortField[] { SortField.FIELD_SCORE });
			}
		}

		return sort;
	}

	private void filterByDateRange (SearchArgs args, StringBuilder criteria)
	{
		if (args.getFromDate() != null) {
			if (criteria.length() > 0) {
				criteria.append(" AND ");
			}
			criteria.append('(')
				.append(SearchFields.Keyword.DATE)
				.append(": [")
				.append(this.settings.formatDateTime(args.getFromDate()))
				.append(" TO ")
				.append(this.settings.formatDateTime(args.getToDate()))
				.append("])");
		}
	}

	private void filterByUser (SearchArgs args, StringBuilder criteria) {
		int[] userIds = args.getUserIds();

		// if searching by user id (as opposed to solely by keyword)
		if (userIds.length > 0) {

			// By default, Lucene can't handle boolean queries with more than 1024 clauses.
			// Instead of raising the limit, we ask the user to give more information.
			if (userIds.length > 1000) {
				throw new RuntimeException(I18n.getMessage("Search.tooManyUsers"));
			}

			StringBuilder query = new StringBuilder();
			for (int i = 0; i < userIds.length; i++) {
				if (i > 0) {
					query.append(" OR ");
				}
				query.append(SearchFields.Keyword.USER_ID).append(':').append(userIds[i]);
			}
			criteria.append("+(").append(query.toString()).append(')');
		}
	}

	private void filterByKeywords (SearchArgs args, StringBuilder criteria)
	{
		LOGGER.debug("searching for: " + args.rawKeywords());
		if (args.rawKeywords().length() > 0) {
			if (args.isMatchRaw()) {
				criteria.append("+(");

				// append search term as it was entered
				criteria.append(args.rawKeywords());

				criteria.append(')');
			} else if (args.isMatchExact()) {
				String escapedKeywords = "\"" + QueryParser.escape(args.rawKeywords()) + "\"";

				criteria.append("+(");

				if (args.shouldLimitSearchToSubject()) {
					// subject only
					criteria.append(SearchFields.Indexed.SUBJECT).append(':').append(escapedKeywords);
				} else {
					// contents and subject 
					criteria.append(SearchFields.Indexed.CONTENTS).append(':').append(escapedKeywords);
					criteria.append(" OR ").append(SearchFields.Indexed.SUBJECT).append(':').append(escapedKeywords);
				}

				criteria.append(')');
			} else {
				String[] keywords = this.analyzeKeywords(args.rawKeywords());

				if (keywords.length != 0) {
					if (criteria.length() > 0) {
						criteria.append(" AND ");
					}
					criteria.append("+(");

					// for Porter stemming it's problematic to analyze (and potentially alter) the keywords twice
					if (settings.analyzer() instanceof PorterStandardAnalyzer)
						keywords = args.rawKeywords().split("\\s");

					for (int i = 0; i < keywords.length; i++) {
						if (keywords[i].trim().length() == 0)
							continue;

						if (args.isMatchAll()) {
							criteria.append("+");
						}

						String escapedKeywords = QueryParser.escape(keywords[i]);

						criteria.append('(');
						if (args.shouldLimitSearchToSubject()) {
							// subject only
							criteria.append(SearchFields.Indexed.SUBJECT).append(':').append(escapedKeywords);
						} else {
							// contents and subject 
							criteria.append(SearchFields.Indexed.CONTENTS).append(':').append(escapedKeywords);
							criteria.append(" OR ").append(SearchFields.Indexed.SUBJECT).append(':').append(escapedKeywords);
						}
						criteria.append(')');
					}

					criteria.append(')');
				}
			}
		}
	}

	private void filterByForum (SearchArgs args, StringBuilder criteria)
	{
		if (args.getForumId() > 0) {
			criteria.append("+(")
				.append(SearchFields.Keyword.FORUM_ID)
				.append(':')
				.append(args.getForumId())
				.append(')');
		}
	}

	private String[] analyzeKeywords (String contents)
	{
		try {
			TokenStream stream = this.settings.analyzer().tokenStream(SearchFields.Indexed.CONTENTS, new StringReader(contents));
			stream.addAttribute(CharTermAttribute.class);
			List<String> tokens = new ArrayList<>();

			stream.reset();
			while (stream.incrementToken()) {
				CharTermAttribute token = stream.getAttribute(CharTermAttribute.class);
				if (token == null) {
					break;
				}
				tokens.add(token.toString());
			}

			return tokens.toArray(new String[tokens.size()]);
		}
		catch (IOException e) {
			throw new SearchException(e);
		}
	}

	private void openSearch()
	{
		try {
			this.searcher = new IndexSearcher(DirectoryReader.open(this.settings.directory()));
		}
		catch (IOException e) {
			throw new SearchException(e.toString(), e);
		}
	}
}

../jforum2-code/src/main/java/net/jforum/search/LuceneContentCollector.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 27/07/2007 15:10:51
 * 
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.search;

import net.jforum.dao.DataAccessDriver;
import net.jforum.entities.Post;
import net.jforum.exceptions.ForumException;

import java.io.IOException;
import java.io.StringReader;
import java.util.Iterator;
import java.util.List;

import org.apache.lucene.analysis.TokenStream;
import org.apache.lucene.document.Document;
import org.apache.lucene.index.DirectoryReader;
import org.apache.lucene.search.IndexSearcher;
import org.apache.lucene.search.Query;
import org.apache.lucene.search.ScoreDoc;
import org.apache.lucene.search.highlight.Formatter;
import org.apache.lucene.search.highlight.Highlighter;
import org.apache.lucene.search.highlight.InvalidTokenOffsetsException;
import org.apache.lucene.search.highlight.QueryScorer;
import org.apache.lucene.search.highlight.SimpleHTMLFormatter;

import org.apache.log4j.Logger;

/**
 * @author Rafael Steil
 */
public class LuceneContentCollector 
{
	private static final Logger LOGGER = Logger.getLogger(LuceneContentCollector.class);

	private LuceneSettings settings;

	public LuceneContentCollector (LuceneSettings settings)
	{
		this.settings = settings;
	}

	public List<Post> collect (SearchArgs args, ScoreDoc[] results, Query query) {
		try {
			int finalResultSize = Math.min(args.fetchCount(), results.length - args.startFrom());
			int[] postIds = new int[finalResultSize];
			//LOGGER.debug(String.format("collect: results=%d, args.fetchCount=%d, args.startFrom=%d",
			//				results.length, args.fetchCount(), args.startFrom()));

			IndexSearcher searcher = new IndexSearcher(DirectoryReader.open(this.settings.directory()));
			for (int docIndex = args.startFrom(), i = 0; 
					i < finalResultSize;
					docIndex++, i++) {
				ScoreDoc hit = results[docIndex];
		        Document doc = searcher.doc(hit.doc);
				postIds[i] = Integer.parseInt(doc.get(SearchFields.Keyword.POST_ID));
			}
			return this.retrieveRealPosts(postIds, query);
		} catch (Exception e) {
			throw new ForumException(e.toString(), e);
		}		
	}

	private List<Post> retrieveRealPosts (int[] postIds, Query query) throws IOException, InvalidTokenOffsetsException
	{
		List<Post> posts = DataAccessDriver.getInstance().newLuceneDAO().getPostsData(postIds);

		for (Iterator<Post> iter = posts.iterator(); iter.hasNext(); ) {
			Post post = iter.next();

			QueryScorer scorer = new QueryScorer(query);

			// see also ContentSearchOperation.prepareForDisplay
			Formatter formatter = new SimpleHTMLFormatter("<span class='sr'>", "</span>");
			//Formatter formatter = new SimpleHTMLFormatter("<u><b><font color=\"red\">", "</font></b></u>");
			Highlighter highlighter = new Highlighter(formatter, scorer);

			// Highlight keyword in post text
			TokenStream tokenStream = this.settings.analyzer().tokenStream(
				SearchFields.Indexed.CONTENTS, new StringReader(post.getText()));

			String fragment = highlighter.getBestFragment(tokenStream, post.getText());
			post.setText(fragment != null ? fragment : post.getText());

			// Highlight keyword in post subject
			tokenStream = this.settings.analyzer().tokenStream(
					SearchFields.Indexed.SUBJECT, new StringReader(post.getSubject()));

			fragment = highlighter.getBestFragment(tokenStream, post.getSubject());
			post.setSubject(fragment != null ? fragment : post.getSubject());
		}
		//LOGGER.debug("retrieveRealPosts: postIds.length="+postIds.length+", posts.length="+posts.size());

		return posts;
	}
}

../jforum2-code/src/main/java/net/jforum/search/LuceneSettings.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 23/07/2007 15:58:30
 * 
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.search;

import java.io.IOException;
import java.nio.file.Paths;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;

import org.apache.log4j.Logger;
import org.apache.lucene.analysis.Analyzer;
import org.apache.lucene.index.DirectoryReader;
import org.apache.lucene.index.IndexWriter;
import org.apache.lucene.index.IndexWriterConfig;
import org.apache.lucene.store.Directory;
import org.apache.lucene.store.FSDirectory;
import org.apache.lucene.store.RAMDirectory;

/**
 * @author Rafael Steil
 */
public class LuceneSettings
{
	private static final Logger LOGGER = Logger.getLogger(LuceneSettings.class);

	private Class<?> clazz;
	private Directory directory;

	public LuceneSettings (final Class<?> clazz)
	{
		this.clazz = clazz;
	}

	public void useRAMDirectory() throws IOException
	{
		this.directory = new RAMDirectory();
		final IndexWriterConfig conf = new IndexWriterConfig(analyzer()).setOpenMode(IndexWriterConfig.OpenMode.CREATE_OR_APPEND);
		final IndexWriter writer = new IndexWriter(this.directory, conf);
		writer.close();
	}

	public void useFSDirectory (final String indexDirectory) throws IOException
	{
		if (!DirectoryReader.indexExists(FSDirectory.open(Paths.get(indexDirectory)))) {
			this.createIndexDirectory(indexDirectory);
		}

		this.directory = FSDirectory.open(Paths.get(indexDirectory));
	}

	public void createIndexDirectory (final String directoryPath) throws IOException 
	{
		final FSDirectory fsDir = FSDirectory.open(Paths.get(directoryPath));	    
		final IndexWriterConfig conf = new IndexWriterConfig(analyzer()).setOpenMode(IndexWriterConfig.OpenMode.CREATE);
		final IndexWriter writer = new IndexWriter(fsDir, conf);
		writer.close();
	}

	public Directory directory()
	{
		return this.directory;
	}

	public Analyzer analyzer()
	{
		try {
			return (Analyzer) clazz.getDeclaredConstructor().newInstance();
		} catch (Exception ex) {
			LOGGER.error(ex.getMessage());
			return null;
		}
	}

	public String formatDateTime (final Date date)
	{
		return new SimpleDateFormat("yyyyMMddHHmmss", Locale.getDefault()).format(date);
	}
}

../jforum2-code/src/main/java/net/jforum/search/NewDocumentAdded.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 18/07/2007 17:56:40
 * 
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.search;

/**
 * @author Rafael Steil
 */
public interface NewDocumentAdded
{
	void newDocumentAdded();
}

../jforum2-code/src/main/java/net/jforum/util/TopicTypeComparator.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 29/04/2006 10:41:02
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.util;

import net.jforum.entities.Topic;

import java.io.Serializable;
import java.util.Comparator;
import java.util.Date;

/**
 * @author Rafael Steil
 */
public class TopicTypeComparator implements Comparator<Topic>, Serializable
{
	private static final long serialVersionUID = 4774281835148485281L;

	private boolean ignoreStickyAnnounce = false;

	public TopicTypeComparator() {
		this(false);
	}

	// sticky and announce types are ignored for recent topics listings
	public TopicTypeComparator (boolean ignoreStickyAnnounce) {
		this.ignoreStickyAnnounce = ignoreStickyAnnounce;
	}

	@Override public int compare(final Topic topic1, final Topic topic2)
	{
		int result;
		int type1 = topic1.getType(), type2 = topic2.getType();
		// Wiki pages are not sorted especially
		if (type1 == Topic.TYPE_WIKI) {
			type1 = Topic.TYPE_NORMAL;
		}
		if (type2 == Topic.TYPE_WIKI) {
			type2 = Topic.TYPE_NORMAL;
		}
		if (ignoreStickyAnnounce) {
			type1 = Topic.TYPE_NORMAL;
			type2 = Topic.TYPE_NORMAL;
		}

		if (type1 < type2) {
			result = 1;
		}
		else if (type1 == type2) {
			Date dt1 = topic1.getLastPostDate();
			if (topic1.getLastEditTime() != null) {
				dt1 = topic1.getLastEditTime();
			}
			Date dt2 = topic2.getLastPostDate();
			if (topic2.getLastEditTime() != null) {
				dt2 = topic2.getLastEditTime();
			}

			result = dt2.compareTo(dt1);
		} 
		else {
			result = -1;
		}
		
		return result;
	}

}

../jforum2-code/src/main/java/net/jforum/util/MobileStatus.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.util;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

/**
 * If this object is in the session, it represents the state of whether to user has made any mobile requests.
 */
public enum MobileStatus {
    /**
     * Once the user goes to a mobile page, we keep sending him/her to mobile pages where available.
     */
    MOBILE_PAGES_WHERE_AVAILABLE,
    /**
     * If a user clicks the link to go to the non-mobile page, we send him/her to non-mobile pages
     */
    REGULAR_PAGES_ALWAYS,
    /**
     * If the user has not been to a mobile page yet, we don't know what the preference is.
     */
    HAVE_NOT_REQUESTED_MOBILE_PAGE_YET_IN_SESSION;
    // -----------------------------------------------------------

	public static final String MOBILE_SESSION_ATTRIBUTE = "mobile";

    public static MobileStatus getMobileRequest (HttpServletRequest request, String requestUri) {
        HttpSession session = request.getSession();
        String nonMobile = request.getParameter("nonMobile");
        MobileStatus mobileStatus;
        // if ask for mobile page, go back to mobile page view
        if ("true".equals(nonMobile)) {
            mobileStatus = REGULAR_PAGES_ALWAYS;
        } else if ("false".equals(nonMobile)) {
            mobileStatus = MOBILE_PAGES_WHERE_AVAILABLE;
        } else {
            // use existing value if present, otherwise initialize
            mobileStatus = (MobileStatus) session.getAttribute(MOBILE_SESSION_ATTRIBUTE);
            if (mobileStatus == null) {
                mobileStatus = isOnMobileDevice(request) 
                ? MOBILE_PAGES_WHERE_AVAILABLE: HAVE_NOT_REQUESTED_MOBILE_PAGE_YET_IN_SESSION;
            }
        }
        session.setAttribute(MOBILE_SESSION_ATTRIBUTE, mobileStatus);
        return mobileStatus;
    }

    private static boolean isOnMobileDevice (HttpServletRequest request) {
        String userAgent = request.getHeader("User-Agent");
		return userAgent != null && userAgent.contains("Mobile");
    }
}

../jforum2-code/src/main/java/net/jforum/util/FileMonitor.java
/*
 * Copyright (c) 2003, 2004 Rafael Steil
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 02/06/2004 23:29:51
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.util;

import java.io.File;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import org.apache.commons.io.monitor.FileAlterationListenerAdaptor;
import org.apache.commons.io.monitor.FileAlterationMonitor;
import org.apache.commons.io.monitor.FileAlterationObserver;
import org.apache.log4j.Logger;

/**
 * Monitor class for file changes.
 * 
 * @author Rafael Steil
 */

public class FileMonitor
{
    private static final Logger LOGGER = Logger.getLogger(FileMonitor.class);
    private static final FileMonitor INSTANCE = new FileMonitor();
    private Map<String, FileAlterationMonitor> timerEntries;

    private FileMonitor() {
        this.timerEntries = new ConcurrentHashMap<>();
    }

    public static FileMonitor getInstance() {
        return INSTANCE;
    }

	private static class MyFileAlterationListenerAdaptor extends FileAlterationListenerAdaptor {
		private String absoluteFilename;
		private FileChangeListener listener;

		MyFileAlterationListenerAdaptor (String absoluteFilename, FileChangeListener listener) {
			this.absoluteFilename = absoluteFilename;
			this.listener = listener;
		}

		@Override
		public void onFileChange (File file) {
			String absPath = file.getAbsolutePath();
			if (absPath.equals(absoluteFilename)) {
				//System.out.println("File changed: " + absoluteFilename);
				listener.fileChanged(absPath);
			}
		}
	}

    /**
     * Add a file to the monitor
     * 
     * @param listener The file listener
     * @param filename The filename to watch
     * @param period The watch interval (in milli seconds)
     */
    public void addFileChangeListener (final FileChangeListener listener, final String filename, final long period) {
		final String absoluteFilename = new File(filename).getAbsolutePath();
        this.removeFileChangeListener(absoluteFilename);
       	LOGGER.info("Watching " + absoluteFilename);

		FileAlterationObserver observer = new FileAlterationObserver(new File(filename).getParent());
		observer.addListener(new MyFileAlterationListenerAdaptor(absoluteFilename, listener));

		FileAlterationMonitor monitor = new FileAlterationMonitor(period, observer);
		try {
			monitor.start();
			this.timerEntries.put(filename, monitor);
		} catch (Exception ex) {
        	LOGGER.error("Error watching " + filename + ": " + ex.getMessage());
		}
    }

    /**
     * Stop watching a file
     * 
     * @param filename The filename to keep watch
     */
    public void removeFileChangeListener (final String filename) {
		final String absoluteFilename = new File(filename).getAbsolutePath();
        FileAlterationMonitor monitor = this.timerEntries.remove(absoluteFilename);
        if (monitor != null) {
			try {
				monitor.stop();
			} catch (Exception ex) {
				LOGGER.error("Error unwatching " + absoluteFilename + ": " + ex.getMessage());
			}
        }
    }
}

../jforum2-code/src/main/java/net/jforum/util/BoundedLinkedHashMap.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms,
 * with or without modification, are permitted provided
 * that the following conditions are met:
 *
 * 1) Redistributions of source code must retain the above
 * copyright notice, this list of conditions and the
 * following  disclaimer.
 * 2)  Redistributions in binary form must reproduce the
 * above copyright notice, this list of conditions and
 * the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor
 * the names of its contributors may be used to endorse
 * or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
 * IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 *
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.util;

import java.util.LinkedHashMap;

public class BoundedLinkedHashMap<K, V> extends LinkedHashMap<K, V>
{
	private static final long serialVersionUID = 7060825863249235327L;
	private transient final int size;
	public BoundedLinkedHashMap(final int size)
	{
	    super();
	    this.size = size;
	}

	@Override protected boolean removeEldestEntry(final java.util.Map.Entry<K, V> eldest)
	{
		return this.size() > size;
	}
}
../jforum2-code/src/main/java/net/jforum/util/DbUtils.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms,
 * with or without modification, are permitted provided
 * that the following conditions are met:
 *
 * 1) Redistributions of source code must retain the above
 * copyright notice, this list of conditions and the
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the
 * above copyright notice, this list of conditions and
 * the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor
 * the names of its contributors may be used to endorse
 * or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
 * IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 *
 * The JForum Project
 * http://www.jforum.net
 * 19.08.2006 21:50:05
 */
package net.jforum.util;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import org.apache.log4j.Logger;

/**
 * General utility methods to close Statements and ResultSets
 * 
 * @author Serge Maslyukov
 * @version $Id$
 */
public final class DbUtils
{
	private static final Logger LOGGER = Logger.getLogger(DbUtils.class);
	
	public static void close(final ResultSet resultSet, final Statement stmt)
	{
		close(resultSet);
		close(stmt);
	}

	public static void close(final ResultSet resultSet)
	{
		if (resultSet != null) {
			try {
				resultSet.close();
			}
			catch (SQLException e) {				
				LOGGER.error(e.getMessage(), e);
			}
		}
	}

	public static void close(final Statement stmt)
	{
		if (stmt != null) {
			try {
				stmt.close();
			}
			catch (SQLException e) { 
				LOGGER.error(e.getMessage(), e); 
			}
		}
	}
	
	private DbUtils() {}
}

../jforum2-code/src/main/java/net/jforum/util/SafeHtml.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 27/09/2004 23:59:10
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.util;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.safety.Safelist;
import org.jsoup.select.Elements;

import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;

/**
 * Process text with html and remove possible malicious tags and attributes.
 * Work based on tips from Amit Klein and the following documents:
 * <br>
 * <li>http://ha.ckers.org/xss.html
 * <li>http://quickwired.com/kallahar/smallprojects/php_xss_filter_function.php
 * <br>
 * @author Rafael Steil
 */
public class SafeHtml 
{
	private static Set<String> welcomeTags;
	private static Set<String> welcomeAttributes;
	private static Set<String> allowedProtocols;
	private static String forumLink;
	private static Safelist safe;

	static {
		welcomeTags = new HashSet<>();
		welcomeAttributes = new HashSet<>();
		allowedProtocols = new HashSet<>();

		updateConfiguration();
	}

	public static void updateConfiguration() {
		welcomeTags.clear();
		welcomeAttributes.clear();
		allowedProtocols.clear();
		splitAndTrim(ConfigKeys.HTML_TAGS_WELCOME, welcomeTags);
		splitAndTrim(ConfigKeys.HTML_ATTRIBUTES_WELCOME, welcomeAttributes);
		splitAndTrim(ConfigKeys.HTML_LINKS_ALLOW_PROTOCOLS, allowedProtocols);

		forumLink = SystemGlobals.getValue(ConfigKeys.FORUM_LINK);

		safe = Safelist.none();
		safe.preserveRelativeLinks(SystemGlobals.getBoolValue(ConfigKeys.HTML_LINKS_ALLOW_RELATIVE));

		for (String tag : welcomeTags) {
			safe.addTags(tag);
		}

		for (String attr : welcomeAttributes) {
			safe.addAttributes(":all", attr);
		}
		safe.addAttributes(":all", "class", "id");
		safe.addAttributes("a", "rel", "target", "href");
		safe.addAttributes("img", "src", "border", "alt", "width", "height");

		for (String protocol : allowedProtocols) {
			if (protocol.contains(":")) {
				// previously, protocols included colon and slashes
				protocol = protocol.substring(0, protocol.indexOf(":"));
			}
			safe.addProtocols("a", "href", protocol.toLowerCase());
			safe.addProtocols("img", "src", protocol.toLowerCase());
		}
	}

	private static void splitAndTrim (String s, Set<String> data)
	{
		String value = SystemGlobals.getValue(s);

		if (value == null) {
			return;
		}

		String[] tags = value.split(",");

		for (int i = 0; i < tags.length; i++) {
			data.add(tags[i].trim());
		}
	}

	/**
	 * Make sure that attribute values are safe, based on name and value
	 */
	public static String ensureAllAttributesAreSafe (String contents) 
	{
		Document doc = Jsoup.parseBodyFragment(contents);
		Elements el = doc.getAllElements();
		for (Element e : el) {
			List<String>  attToRemove = new ArrayList<>();
			Attributes at = e.attributes();
			for (Attribute a : at) {
				String name = a.getKey().toLowerCase();
				String value = a.getValue().toLowerCase();
				if (name.length() >= 2 && name.charAt(0) == 'o' && name.charAt(1) == 'n') {
					// disallow JavaScript onXYZ handlers
					attToRemove.add(name);
				}
				else if ("style".equals(name)) {
					// It is much more a try to not allow constructions
					// like style="background-color: url(javascript:xxxx)" than anything else
					if (value.indexOf('(') > -1) {
						attToRemove.add(name);
					}
				}
				else if ("href".equals(name) || "src".equals(name)) {
					if (! isHrefValid(value)) {
						attToRemove.add(name);
					}
				}
				else {
					// remove quotes, so it can't escape its value
					a.setValue(value.replaceAll("\n\r'\"", ""));
				}
			}

			for (String att : attToRemove) {
				e.removeAttr(att);
			}
		}

		return doc.body().html();
	}

	/**
	 * Checks if a given address is valid
	 * @param href The address to check
	 * @return true if it is valid
	 */
	private static boolean isHrefValid (String href) 
	{
		if (SystemGlobals.getBoolValue(ConfigKeys.HTML_LINKS_ALLOW_RELATIVE)
			&& href.length() > 0 
			&& href.charAt(0) == '/') {
			return true;
		}
		
		for (String protocol : allowedProtocols) {
			if (href.startsWith(protocol)) {
				return true;
			}
		}

		return false;
	}

	/**
	 * Given an input, makes it safe for HTML displaying. 
	 * Removes any forbidden HTML tags or attributes, as well as unwanted JavaScript statements inside the tags. 
	 * @param contents the input to analyze
	 * @return the modified and safe string
	 */
	public static String makeSafe (String contents)
	{
		if (contents == null || contents.length() == 0) {
			return contents;
		}

		return Jsoup.clean(contents, forumLink, safe, new Document.OutputSettings().prettyPrint(false));
	}

	public static String replaceAll (StringBuilder sb, String what, String with)
	{
		int pos = sb.indexOf(what);

		while (pos > -1) {
			sb.replace(pos, pos + what.length(), with);
			pos = sb.indexOf(what);
		}

		return sb.toString();
	}
}

../jforum2-code/src/main/java/net/jforum/util/GroupNode.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.

 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:

 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Mar 3, 2003 / 11:29:45 AM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.util;

import java.util.ArrayList;
import java.util.List;

/** 
 * Represents a node in the group hierarchy.
 * Every single group has a name and an ID, and each group may have 
 * unlimited subgroups. which may have sub-subgroups and so on.
 * This class represents a specific group, supplying methods to add new
 * groups and get information about them, as well all related subgroups.
 * <p>
 * This class is also used together with <code>TreeGroup</code>.
 * 
 * @author Rafael Steil
 */
public class GroupNode 
{
	private String name;
	private int id;
	
	/**
	 * Subgroups of the instantiated group
	 */
	private final List<GroupNode> extraNodes;

	/**
	 * Default Constructor
	 */
	public GroupNode()
	{
		this.extraNodes = new ArrayList<>();
	}

	/**
	 * Gets a node.
	 * 
	 * @param pos Node position to retrieve
	 * @return <code>GroupNode</code>
	 * */
	public GroupNode getNode(final int pos)
	{
		return this.extraNodes.get(pos);
	}

	/**
	 * Adds a new node.
	 * 
	 * @param groupNode Node to add
	 * */
	public void addNode(final GroupNode groupNode)
	{
		this.extraNodes.add(groupNode);
	}

	/**
	 * Gets the total number of nodes 
	 * 
	 * @return number of nodes. 
	 * */
	public int size()
	{
		return this.extraNodes.size();
	}

	/**
	 * Sets the node's name
	 * 
	 * @param name Node name
	 * */
	public void setName(final String name)
	{
		this.name = name;
	}

	/**
	 * Sets the node's ID
	 * 
	 * @param id Node ID
	 * */
	public void setId(final int id)
	{
		this.id = id;
	}

	/**
	 * Gets the name of the node
	 * 
	 * @return String with the name
	 * */	
	public String getName()
	{
		return this.name;
	}
	
	/**
	 * Gets the ID
	 * 
	 * @return Node ID
	 * */
	public int getId()
	{
		return this.id;
	}
}

../jforum2-code/src/main/java/net/jforum/util/CategoryOrderComparator.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 05/12/2004 16:28:43
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.util;

import java.io.Serializable;
import java.util.Comparator;

import net.jforum.entities.Category;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public class CategoryOrderComparator implements Comparator<Category>, Serializable
{
	private static final long serialVersionUID = 181430205232016103L;

	/** 
	 * @see java.util.Comparator#compare(java.lang.Object, java.lang.Object)
	 */
	@Override public int compare(final Category category1, final Category category2) 
	{		
		int result;
		if (category1.getOrder() > category2.getOrder()) {
			result = 1;
		}
		else if (category1.getOrder() < category2.getOrder() ) {
			result = -1;
		}
		else {
			result = category1.getName().compareTo(category2.getName());
		}
		return result;
	}

}

../jforum2-code/src/main/java/net/jforum/util/URLNormalizer.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 11/07/2005 00:32:01
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.util;

/**
 * Normalizes a URL. 
 * Normalization means replacing blank spaces by underlines, 
 * changing special chars by its regular form and etc.
 * @author Rafael Steil
 * @version $Id$
 */
public class URLNormalizer
{
	public static final int LIMIT = 30;
	
	/**
	 * Normalizes a URL.
	 * The url will be truncated at {@link #LIMIT} chars
	 * @param url the url to normalize
	 * @return the normalized url
	 * @see #normalize(String, int, boolean)
	 */
	public static String normalize(final String url)
	{
		return normalize(url, LIMIT, true);
	}
	
	/**
	 * 
	 * @param url the url to normalize
	 * @param limit do not process more than <code>limit + 1</code> chars
	 * @param friendlyTruncate If <code>true</code>, will try to not cut a word if
	 * more than <code>limit</code> chars were processed. It will stop in the next
	 * special char
	 * @return the normalized url
	 */
	public static String normalize(final String url, final int limit, final boolean friendlyTruncate)
	{
		final char[] chars = url.toCharArray();
		
		final StringBuilder sb = new StringBuilder(url.length());
		
		for (int i = 0; i < chars.length; i++) {
			if (i <= limit || (friendlyTruncate && i > limit && sb.charAt(sb.length() - 1) != '_')) {
				
				if (Character.isSpaceChar(chars[i]) || chars[i] == '-') {
					if (friendlyTruncate && i > limit) {
						break;
					}
					
					if (i > 0 && sb.charAt(sb.length() - 1) != '_') {
						sb.append('_');
					}
				}
				
				if (Character.isLetterOrDigit(chars[i])) {
					sb.append(chars[i]);
				}
				else if (friendlyTruncate && i > limit) {
					break;
				}
			}
		}
		
		return sb.toString().toLowerCase();
	}
}

../jforum2-code/src/main/java/net/jforum/util/Captcha.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Nov 13, 2004 / 17:17:09
 * The JForum Project
 * http://www.jforum.net
 */

package net.jforum.util;

import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.List;

import javax.imageio.ImageIO;

import org.apache.log4j.Logger;

import com.octo.captcha.component.image.backgroundgenerator.BackgroundGenerator;
import com.octo.captcha.component.image.backgroundgenerator.FunkyBackgroundGenerator;
import com.octo.captcha.component.image.backgroundgenerator.GradientBackgroundGenerator;
import com.octo.captcha.component.image.color.RandomListColorGenerator;
import com.octo.captcha.component.image.fontgenerator.FontGenerator;
import com.octo.captcha.component.image.fontgenerator.TwistedAndShearedRandomFontGenerator;
import com.octo.captcha.component.image.textpaster.RandomTextPaster;
import com.octo.captcha.component.image.textpaster.TextPaster;
import com.octo.captcha.component.image.wordtoimage.ComposedWordToImage;
import com.octo.captcha.component.image.wordtoimage.WordToImage;
import com.octo.captcha.component.word.wordgenerator.RandomWordGenerator;
import com.octo.captcha.component.word.wordgenerator.WordGenerator;
import com.octo.captcha.engine.image.ListImageCaptchaEngine;
import com.octo.captcha.image.ImageCaptchaFactory;
import com.octo.captcha.image.gimpy.GimpyFactory;

import net.jforum.JForumExecutionContext;
import net.jforum.SessionFacade;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;

/**
 * @author James Yong
 */
public class Captcha extends ListImageCaptchaEngine
{
	private static final Logger LOGGER = Logger.getLogger(Captcha.class);
	
	private static Captcha classInstance = new Captcha();

	private static String charsInUse;
	
	private void initializeChars()
	{
		if (SystemGlobals.getBoolValue(ConfigKeys.CAPTCHA_IGNORE_CASE)) {
			charsInUse = "123456789abcdefghijklmnopqrstuvwxyz@#%^";
		}
		else {
			charsInUse = "123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz@#%^";
		}
	}
	
	/**
	 * Gets the singleton
	 * 
	 * @return Instance of Captcha class
	 */
	public static Captcha getInstance()
	{
		return classInstance;
	}

	@Override protected void buildInitialFactories()
	{
		this.initializeChars();
		
		final Integer width = SystemGlobals.getIntValue(ConfigKeys.CAPTCHA_WIDTH);
		final Integer height = SystemGlobals.getIntValue(ConfigKeys.CAPTCHA_HEIGHT);
		final Integer minWords = SystemGlobals.getIntValue(ConfigKeys.CAPTCHA_MIN_WORDS);
		final Integer maxWords = SystemGlobals.getIntValue(ConfigKeys.CAPTCHA_MAX_WORDS);
		final Integer minFontSize = SystemGlobals.getIntValue(ConfigKeys.CAPTCHA_MIN_FONT_SIZE);
		final Integer maxFontSize = SystemGlobals.getIntValue(ConfigKeys.CAPTCHA_MAX_FONT_SIZE);

		final Color[] colors = new Color[] { Color.PINK, Color.RED, Color.GREEN, Color.ORANGE, Color.MAGENTA };
		final RandomListColorGenerator colorGenerator = new RandomListColorGenerator(colors);	

		final List<BackgroundGenerator> backgroundGeneratorList = new ArrayList<>();
		Color previousColor = colorGenerator.getNextColor();
		for (int i = 0; i < colors.length - 1; i++) {
			final Color nextColor = colorGenerator.getNextColor();
			backgroundGeneratorList.add(new GradientBackgroundGenerator(width, 
					height, previousColor, nextColor));
			previousColor = nextColor;
		}
		backgroundGeneratorList.add(new FunkyBackgroundGenerator(width, height));		
		
		final List<TextPaster> textPasterList = new ArrayList<>();
		textPasterList.add(new RandomTextPaster(minWords, maxWords, Color.DARK_GRAY));
		textPasterList.add(new RandomTextPaster(minWords, maxWords, Color.BLUE));
		textPasterList.add(new RandomTextPaster(minWords, maxWords, Color.BLACK));

		final List<FontGenerator> fontGeneratorList = new ArrayList<>();
		fontGeneratorList.add(new TwistedAndShearedRandomFontGenerator(minFontSize, maxFontSize));

		// Create a random word generator
		final WordGenerator words = new RandomWordGenerator(charsInUse);

		for (final FontGenerator fontGeny : fontGeneratorList) {
			if (LOGGER.isDebugEnabled()) {
				LOGGER.debug("use font: " + fontGeny.getFont().getFontName());
			}
			for (final BackgroundGenerator bkgdGeny : backgroundGeneratorList) {
				for (final TextPaster textPaster : textPasterList) {
					final WordToImage word2image = new ComposedWordToImage(fontGeny, bkgdGeny, textPaster);
					
					// Create an ImageCaptcha Factory
					final ImageCaptchaFactory factory = new GimpyFactory(words, word2image);
					
					// Add a factory to the gimpy list (A Gimpy is an ImageCaptcha)
					addFactory(factory);
				}
			}
		}
	}

	public void writeCaptchaImage()
	{
		final BufferedImage image = SessionFacade.getUserSession().getCaptchaImage();
		
		if (image == null) {
			return;
		}

		OutputStream outputStream = null;
		
		try {
			outputStream = JForumExecutionContext.getResponse().getOutputStream();
			ImageIO.write(image, "jpg", outputStream);			
		}
		catch (IOException ex) {
			LOGGER.error(ex);
		}
		finally {
			if (outputStream != null) {
				try {
					outputStream.close();
				}
				catch (IOException ex) {
					LOGGER.error(ex);
				}
			}
			image.flush();			
		}
	}
}

../jforum2-code/src/main/java/net/jforum/util/TreeGroup.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.

 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:

 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Mar 3, 2003 / 11:28:25 AM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.util;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import net.jforum.dao.DataAccessDriver;
import net.jforum.dao.TreeGroupDAO;

/** 
 * Implements a tree hierarchy of groups.
 * This class process all group hierarchy, and each group may have unlimited sub groups.
 * Each group is called <code>node</code> ( <code>net.jforum.model.GroupNode</code> object ), and
 * each node may have sub-nodes. For example, given a table like the following:  
 * 
 * <pre>
 * <code>
* +----+----------------+--------+
 * | id | name          | parent |
 * +----+---------------+--------+
 * |  6 | Parent 1      |      0 |
 * |  7 | Sub 1.1       |      6 |
 * |  8 | Sub 1.2       |      6 |
 * |  9 | SubSub 1.2.1  |      8 |
 * | 10 | SubSub 1.2.2  |      8 |
 * | 11 | Parent 2      |      0 |
 * | 12 | Parent 3      |      0 |
 * | 13 | Sub 3.1       |     12 |
 * | 14 | SubSub 3.1.1  |     13 |
 * | 15 | Sub 3.2       |     12 |
 * | 16 | Parent 4      |      0 |
 * +----+---------------+--------+
 * </code>
 * </pre>
 * 
 * results on the following hierarchy 
 * <pre>
 * <code>
 * Parent 1
 * ------
 * 	|
 *     Sub 1.1
 * 	----------
 * 	|
 * 	Sub 1.2
 * 	----------
 * 		|
 * 		SubSub 1.2.1
 * 		------------
 * 		|
 * 		SubSub 1.2.2
 * Parent 2
 * -----
 * Parent 3
 * -----
 * 	|
 * 	Sub 3.1
 * 	---------
 * 		|
 * 		SubSub 3.1.1
 * 		------------
 * 	|
 * 	Sub 3.2
 * 	---------
 * Parent 4
 * ------
 * </code>
 * </pre>
 *  
 * As is possible to see, we have 4 parent groups, called <code>Parent 1</code>, <code>Parent 2</code>, 
 * <code>Parent 3</code> and <code>Parent 4</code>. <code>Parent 1</code> has 2 sub groups: <code>Sub 1.1</code>
 * and <code>Sub 1.2</code>. <code>Sub 1.2</code> contains 2 subgroups, <code>SubSub 1.2.1</code> and 
 * <code>SubSub 1.2.2</code>. As every group is a node, ( <code>GroupNode</code> object ), and as each node
 * may have sub-nodes, the processing would be as:
 * <p>
 * <li> When the method <code>size()</code> of the <code>Parent 1</code> object is called,  the number 2 will
 * be returned, because <code>Parent 1</code> has 2 sub groups;
 * <li> when the <code>size()</code> method is called on the object of <code>Sub 1.1</code>, will be returned 0, because
 * <code>Sub 1.1</code> does not have any sub groups;
 * <li> On the other hand, then we call the <code>size()</code> method of the object represented by <code>Sub 1.2</code> object,
 * we will have a return value of 2, because <code>Sub 1.2</code> has 2 sub groups.
 * <br>
 * The same operation is done to all other groups and its sub groups. 
 * 
 * @author Rafael Steil
 */
public class TreeGroup 
{
	/**
	 * Process the group hierarchy.
	 * 
	 * @return <code>List</code> containing the complete group hierarchy. Each element
	 * from the list represents a single <code>GroupNode<code> object.	 
	 * */
	public List<GroupNode> getNodes()
	{
		final List<GroupNode> nodes = new ArrayList<>();
		
		final TreeGroupDAO tgm = DataAccessDriver.getInstance().newTreeGroupDAO();

		final List<GroupNode> rootGroups = tgm.selectGroups(0);	
				
		for (final Iterator<GroupNode> iter = rootGroups.iterator(); iter.hasNext();) {
			final GroupNode groupNode = iter.next();
						
			this.checkExtraNodes(groupNode);
			
			nodes.add(groupNode);
		}
		
		return nodes;
	}
	
	/**
	 * Searches for subgroups of a determined group
	 *
     * @param groupNode  GroupNode
     */
	private void checkExtraNodes(final GroupNode groupNode)
	{
		final TreeGroupDAO tgm = DataAccessDriver.getInstance().newTreeGroupDAO();

		final List<GroupNode> childGroups = tgm.selectGroups(groupNode.getId());	
				
		for (final Iterator<GroupNode> iter = childGroups.iterator(); iter.hasNext();) {
			final GroupNode foundNode = iter.next();
			
			this.checkExtraNodes(foundNode);
			
			groupNode.addNode(foundNode);
		}
	}
}

../jforum2-code/src/main/java/net/jforum/util/Hash.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Mar 29, 2003 / 1:15:50 AM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.util;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

import net.jforum.exceptions.ForumException;

/**
 * Hashes a string using MD5 or SHA-512
 * 
 * @author Rafael Steil
 */

public final class Hash 
{
	/**
	 * Hashes a string using MD5
	 * 
	 * @param str String to hash
	 * @return Hashed String
	 * @throws NoSuchAlgorithmException
	 */
	public static String md5(final String str)
	{
		return crypt(str, "MD5");
	}

	/**
	 * Hashes a string using SHA-512
	 * 
	 * @param str String to hash
	 * @return Hashed String
	 * @throws NoSuchAlgorithmException
	 */
	public static String sha512(final String str)
	{
		return crypt(str, "SHA-512");
	}

	private static String crypt(final String str, final String algo)
	{
		if (str == null || str.length() == 0) {
			throw new IllegalArgumentException("String to encrypt cannot be null or zero length");
		}

		final StringBuilder hexString = new StringBuilder();

		try {
			final MessageDigest msgDigest = MessageDigest.getInstance(algo);
			msgDigest.update(str.getBytes());
			final byte[] hash = msgDigest.digest();
			for (byte b : hash) {
				hexString.append(String.format("%02X", b));
			}
		}
		catch (NoSuchAlgorithmException e) {
			throw new ForumException(e);
		}

		return hexString.toString().toLowerCase();
	}

	private Hash() {}
}

../jforum2-code/src/main/java/net/jforum/util/FormSelectedData.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.

 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:

 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 10/10/2003 / 22:16:27
 * The JForum project
 * http://www.jforum.net
 */
package net.jforum.util;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public class FormSelectedData 
{
	/**
	 * Nome do campo ( descricao textual )
	 * */
	private final String name;
	
	/**
	 * ID relacionada com o campo
	 * */
	private final String id;
	
	/**
	 * Para verificar se o campo deve ser marcado como selecionado
	 * */
	private final boolean selected;
	
	/**
	 * @param name Nome do campo
	 * @param id ID relacionado com o campo
	 * @param selected <code>true</code> ou <code>false</code>, com base no status desejado
	 * */
	public FormSelectedData(final String name, final String id, final boolean selected)
	{
		this.name = name;
		this.id = id;
		this.selected = selected;
	}
	
	/**
	 * Pega o nome do campo.
	 * 
	 * @return String contendo o nome do campo
	 * */
	public String getName()
	{
		return this.name;
	}
	
	/**
	 * Pega o ID do campo.
	 * 
	 * @return String contendo o ID do campo
	 * */
	public String getId()
	{
		return this.id;
	}
	
	/**
	 * Pega o status do campo.
	 * 
	 * @return selected <code>true</code> ou <code>false</code>, com base no status
	 * */
	public boolean isSelected()
	{
		return this.selected;
	}
}

../jforum2-code/src/main/java/net/jforum/util/I18n.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Mar 10, 2003 / 9:28:40 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.util;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.ConcurrentHashMap;

import org.apache.log4j.Logger;

import net.jforum.JForumExecutionContext;
import net.jforum.SessionFacade;
import net.jforum.entities.UserSession;
import net.jforum.exceptions.ForumException;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;

/**
 * I18n (Internationalization) class implementation. Does nothing of special, just loads the
 * messages into memory and provides a static method to acess them.
 * 
 * @author Rafael Steil
 * @author James Yong
 */
public final class I18n
{
    private static final Logger LOGGER = Logger.getLogger(I18n.class);

    private static final I18n INSTANCE = new I18n();
    private static final Map<String, Properties> MESSAGES_MAP = new ConcurrentHashMap<>();
    private static final Properties LOCAL_NAMES = new Properties();
    private static String defaultName;
    private static String baseDir;
    private static final List<String> WATCHING = new ArrayList<>();
    public static final String CANNOT_DELETE_GROUP = "CannotDeleteGroup";
    public static final String CANNOT_DELETE_CATEGORY = "CannotDeleteCategory";
    public static final String CANNOT_DELETE_BANNER = "CannotDeleteBanner";

    private I18n() { }

    /**
     * Gets the singleton
     * 
     * @return Instance of I18n class
     */
    public static I18n getInstance()
    {
        return INSTANCE;
    }

    /**
     * Load the default I18n file
     */
    public static synchronized void load()
    {
        baseDir = SystemGlobals.getValue(ConfigKeys.LOCALES_DIR);

        loadLocales();

        defaultName = SystemGlobals.getValue(ConfigKeys.I18N_DEFAULT_ADMIN);
        load(defaultName, null);

        String custom = SystemGlobals.getValue(ConfigKeys.I18N_DEFAULT);
        if (!custom.equals(defaultName)) {
            changeBoardDefault(custom);
        }
    }

    public static void changeBoardDefault(String newDefaultLanguage)
    {
        load(newDefaultLanguage, SystemGlobals.getValue(ConfigKeys.I18N_DEFAULT_ADMIN));
        defaultName = newDefaultLanguage;
    }

    private static void loadLocales()
    {
        FileInputStream fis = null;

        try {
            fis = new FileInputStream(baseDir + SystemGlobals.getValue(ConfigKeys.LOCALES_NAMES));
            LOCAL_NAMES.load(fis);
        }
        catch (IOException e) {
            throw new ForumException(e);
        }
        finally {
            if (fis != null) {
                try { fis.close(); } catch (Exception e) { LOGGER.error(e.getMessage(), e); }
            }
        }
    }

    static void load(String localeName, String mergeWith)
    {
        load(localeName, mergeWith, false);
    }

    /**
     * Loads the given locale into internal MESSAGES_MAP if the locale is not yet loaded.
     * <p>
     * If force is <code>true</code> the locale is loaded in any case. In this case 
     * localeName must not be <code>null</code> (NPE in LOCAL_NAMES.getProperty. TODO: avoid this danger by assigning it 
     * an empty string if null before using)
     * <p>
     * After having loaded the 
     * 
     * @param localeName the locale to be loaded. If this value does not exists in the LOCAL_NAMES and
     *        its value there is not an existing language resource file the ${ConfigKeys.I18N_DEFAULT_ADMIN}
     *        is loaded and then registered into the MESSAGES_MAP under the given localeName.
     *        TODO: In the latter case, it does not make sense to register the new localeName for FileMonitor. 
     *        In contrary there is following problem: Any later runtime change to the I18N_DEFAULT_ADMIN file (whose 
     *        values served as blueprint for the not existing localeName) which is detected by the FileMonitor of I18N_DEFAULT_ADMIN, only 
     *        triggers the reload of the I18N_DEFAULT_ADMIN itself and not the actual localeName which is derived 
     *        by the I18N_DEFAULT_ADMIN. The same applies to any given mergeWith-locale which can also be changed
     * @param mergeWith if not null and not empty this locale is first loaded as Properties and used
     *        as default when later loading the given locale
     * @param force forces a reloading of the locale
     */
    private static void load(String localeName, String mergeWith, boolean force)
    {
        if (!force && (localeName == null || localeName.trim().equals("") || I18n.contains(localeName))) {
            return;
        }

        if (LOCAL_NAMES.size() == 0) {
            loadLocales();
        }

        Properties p = new Properties();

        if (mergeWith != null) {
            if (!I18n.contains(mergeWith)) {
                load(mergeWith, null);
            }

			if (! SystemGlobals.getBoolValue(ConfigKeys.DEVELOPMENT)) {
				// in development mode, don't default to another language, so we can flag missing properties
				p.putAll(MESSAGES_MAP.get(mergeWith));
			}
        }

        FileInputStream fis = null;

        try {
            String filename = baseDir + LOCAL_NAMES.getProperty(localeName);

            // If the requested locale does not exist, use the default
            if (!new File(filename).exists()) {
                filename = baseDir + LOCAL_NAMES.getProperty(SystemGlobals.getValue(ConfigKeys.I18N_DEFAULT_ADMIN));
            }

            fis = new FileInputStream(filename);
            p.load(fis);
        }
        catch (IOException e) {
            throw new ForumException(e);
        }
        finally {
            if (fis != null) {
                try { fis.close(); } catch (Exception e) { LOGGER.error(e.getMessage(), e); }
            }
        }

        MESSAGES_MAP.put(localeName, p);

        watchForChanges(localeName);
    }

    /**
     * Loads a new locale. If <code>localeName</code> is either null or empty, or if the locale is
     * already loaded, the method will return without executing any code.
     * 
     * @param localeName The locale name to load
     */
    public static void load(String localeName)
    {
        load(localeName, SystemGlobals.getValue(ConfigKeys.I18N_DEFAULT));
    }

    private static void watchForChanges(final String localeName)
    {
        if (!WATCHING.contains(localeName)) {
            WATCHING.add(localeName);

            int fileChangesDelay = SystemGlobals.getIntValue(ConfigKeys.FILECHANGES_DELAY);

            if (fileChangesDelay > 0) {
                FileMonitor.getInstance().addFileChangeListener(new FileChangeListener() {
                    /**
                     * @see net.jforum.util.FileChangeListener#fileChanged(java.lang.String)
                     */
                    @Override public void fileChanged(String filename)
                    {
                   		LOGGER.info("Reloading i18n for " + localeName);

                        I18n.load(localeName, SystemGlobals.getValue(ConfigKeys.I18N_DEFAULT), true);
                    }
                }, baseDir + LOCAL_NAMES.getProperty(localeName), fileChangesDelay);
            }
        }
    }

    /**
     * Gets a I18N (internationalized) message.
     * 
     * @param localeName The locale name to retrieve the messages from
     * @param m The message name to retrieve. Must be a valid entry into the file specified by
     *            <code>i18n.file</code> property.
     * @param params Parameters needed by some messages. The messages with extra parameters are
     *            formatted according to {@link java.text.MessageFormat}specification
     * @return String With the message
     */
    public static String getMessage(String localeName, String m, Object params[])
    {
        String msg = MESSAGES_MAP.get(localeName).getProperty(m);
		if (msg != null) {
			return MessageFormat.format(msg, params);
		} else {
			return m.toUpperCase();
		}
    }

    /**
     * @see #getMessage(String, String, Object[])
     * @param m String
     * @param params Object
     * @return String
     */
    public static String getMessage(String m, Object params[])
    {
        String lang = "";
        UserSession us = SessionFacade.getUserSession();

        if (us != null && us.getLang() != null) {
            lang = us.getLang();
        }

        if ("".equals(lang)) {
            return getMessage(getUserLanguage(), m, params);
        }

        return getMessage(lang, m, params);
    }

    /**
     * Gets an I18N (internationalization) message.
     * 
     * @param m The message name to retrieve. Must be a valid entry into the file specified by
     *            <code>i18n.file</code> property.
     * @return String With the message
     * @param localeName String
     */
    public static String getMessage(String localeName, String m)
    {
        if (!MESSAGES_MAP.containsKey(localeName)) {
            load(localeName);
        }

        String msg = MESSAGES_MAP.get(localeName).getProperty(m);
		if (msg != null) {
			return msg;
		} else {
			return m.toUpperCase();
		}
    }

    public static String getMessage(String m)
    {
        return getMessage(getUserLanguage(), m);
    }

    // TODO: this is only called by I18nTest, us is never null and contains always a valid lang.
    // -> the if is never executed. Let the test case call directly getMessage(String localeName, String m)
    //    and eliminate this method
    public static String getMessage(String m, UserSession us)
    {
        if (us == null || us.getLang() == null || us.getLang().equals("")) {
            return getMessage(getUserLanguage(), m);
        }

        return getMessage(us.getLang(), m);
    }

    /**
     * Gets the language name for the current request. The method will first look at {@link UserSession#getLang()}
	 * and use it if any value is found. Otherwise, the default board language will be used
     * 
     * @return String
     */
    public static String getUserLanguage()
    {
        UserSession us = SessionFacade.getUserSession();

        if (us == null || us.getLang() == null || us.getLang().trim().equals("")) {
            //try get locale from request
            for (Enumeration<Locale> locales = JForumExecutionContext.getRequest().getLocales();
                locales.hasMoreElements();) {
                String lang = locales.nextElement().toString();			    
                //check jforum support this locale  
                if (languageExists(lang)) {			    	
                    return lang;  
                }
            }
            return defaultName;
        }
        return us.getLang();
    }

    /**
     * Check whether the language is loaded in i18n.
     * 
     * @param language String
     * @return boolean
     */
    public static boolean contains(String language)
    {
        return MESSAGES_MAP.containsKey(language);
    }

    /**
     * Check if the given language exist.
     * 
     * @param language The language to check
     * @return <code>true</code> if the language is a valid and registered translation.
     */
    public static boolean languageExists(String language)
    {
        return (LOCAL_NAMES.getProperty(language) != null);
    }

    /**
     * Get the localeNames
     * @return the localeNames
     */
    public static Properties getLocaleNames() {
        return LOCAL_NAMES;
    }

    /**
     * Get the baseDir
     * @return the baseDir
     */
    public static String getBaseDir() {
        return baseDir;
    }

    public static void reset()
    {
        //messagesMap = new ConcurrentHashMap<>();
        MESSAGES_MAP.clear();
        //localeNames = new Properties();
        LOCAL_NAMES.clear();
        defaultName = null;
    }
}

../jforum2-code/src/main/java/net/jforum/util/ForumOrderComparator.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Sep 2, 2004
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.util;

import java.io.Serializable;
import java.util.Comparator;

import net.jforum.entities.Forum;
/**
 * @author James Yong Boon Leong
 * @author Rafael Steil
 * @version $Id$
 */
public class ForumOrderComparator implements Comparator<Forum>, Serializable 
{
	private static final long serialVersionUID = 2955347143299797587L;

	@Override public final int compare(final Forum forum1, final Forum forum2)
	{		
		int result;
		if (forum1.getOrder() > forum2.getOrder()) {
			result = 1;
		}
		else if (forum1.getOrder() < forum2.getOrder() ) {
			result = -1;
		}
		else {
			result = forum1.getName().compareTo(forum2.getName());
		}
		return result;
	}
}


../jforum2-code/src/main/java/net/jforum/util/FileChangeListener.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.

 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:

 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Creation date: Jun 2, 2004 / 23:32:45
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.util;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public interface FileChangeListener
{
	/**
	 * Invoked when a file changes
	 * 
	 * @param filename Name of the changed file
	 */
	void fileChanged(String filename);
}

../jforum2-code/src/main/java/net/jforum/util/bbcode/BBCodeHandler.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms,
 * with or without modification, are permitted provided
 * that the following conditions are met:
 *
 * 1) Redistributions of source code must retain the above
 * copyright notice, this list of conditions and the
 * following  disclaimer.
 * 2)  Redistributions in binary form must reproduce the
 * above copyright notice, this list of conditions and
 * the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor
 * the names of its contributors may be used to endorse
 * or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
 * IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 *
 * This file creation date: 03/08/2003 / 05:28:03
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.util.bbcode;

import java.io.File;
import java.io.Serializable;
import java.util.Collection;
import java.util.LinkedHashMap;
import java.util.Map;

import javax.xml.XMLConstants;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;

import org.xml.sax.Attributes;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;
import org.xml.sax.helpers.DefaultHandler;

import net.jforum.exceptions.ForumException;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;

/**
 * @author Rafael Steil
 */
public class BBCodeHandler extends DefaultHandler implements Serializable
{
	private static final long serialVersionUID = 8729382987305842571L;
	private Map<String, BBCode> bbMap = new LinkedHashMap<>();
	private Map<String, BBCode> alwaysProcessMap = new LinkedHashMap<>();
	private String tagName = "";
	private StringBuilder sb;
	private BBCode bb;

	public BBCodeHandler() { }

	public BBCodeHandler parse()
	{
		try {
			final SAXParserFactory factory = SAXParserFactory.newInstance();
			factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
            final SAXParser parser = factory.newSAXParser();
			BBCodeHandler bbParser = new BBCodeHandler();

			String path = SystemGlobals.getValue(ConfigKeys.CONFIG_DIR) + "/bb_config.xml";

			File fileInput = new File(path);

			if (fileInput.exists()) {
				parser.parse(fileInput, bbParser);
			} else {
				InputSource input = new InputSource(path);
				parser.parse(input, bbParser);
			}

			return bbParser;
		} catch (Exception e) {
			throw new ForumException(e);
		}
	}

	public void addBb (BBCode bb)
	{
		if (bb.alwaysProcess()) {
			this.alwaysProcessMap.put(bb.getTagName(), bb);
		} else {
			this.bbMap.put(bb.getTagName(), bb);
		}
	}

	public Collection<BBCode> getBbList()
	{
		return this.bbMap.values();
	}

	public Collection<BBCode> getAlwaysProcessList()
	{
		return this.alwaysProcessMap.values();
	}

	public BBCode findByName(String tagName)
	{
		return this.bbMap.get(tagName);
	}

	@Override public void startElement (String uri, String localName, String tag, Attributes attrs)
	{
		if ("match".equals(tag)) {
			this.sb = new StringBuilder();
			this.bb = new BBCode();

			String tagName = attrs.getValue("name");
			if (tagName != null) {
				this.bb.setTagName(tagName);
			}

			// Shall we remove the infamous quotes?
			String removeQuotes = attrs.getValue("removeQuotes");
			if (removeQuotes != null && "true".equals(removeQuotes)) {
				this.bb.enableRemoveQuotes();
			}

			String alwaysProcess = attrs.getValue("alwaysProcess");
			if (alwaysProcess != null && "true".equals(alwaysProcess)) {
				this.bb.enableAlwaysProcess();
			}

			String lockedTag = attrs.getValue("lockedForSmilies");
			if (lockedTag != null) {
				this.bb.setLockedForSmilies(lockedTag);
			}
		}

		this.tagName = tag;
	}

	@Override public void endElement (String uri, String localName, String tag)
	{
		if (tag.equals("match")) {
			this.addBb(this.bb);
		}
		else if (this.tagName.equals("replace")) {
			this.bb.setReplace(this.sb.toString().trim());
			this.sb.delete(0, this.sb.length());
		}
		else if (this.tagName.equals("rssReplace")) {
			this.bb.setRssReplace(this.sb.toString().trim());
			this.sb.delete(0, this.sb.length());
		}
		else if (this.tagName.equals("regex")) {
			this.bb.setRegex(this.sb.toString().trim());
			this.sb.delete(0, this.sb.length());
		}
		else if (this.tagName.equals("class-name")) {
			this.bb.setClassName(this.sb.toString().trim());
			this.sb.delete(0, this.sb.length());
		}

		this.tagName = "";
	}

	@Override public void characters (char ch[], int start, int length)
	{
		if (this.tagName.equals("replace")
				|| this.tagName.equals("rssReplace")
				|| this.tagName.equals("regex")
				|| this.tagName.equals("class-name")) {
			this.sb.append(ch, start, length);
        }
	}

	@Override public void error (SAXParseException saxpe) throws SAXException
	{
		throw saxpe;
	}
}

../jforum2-code/src/main/java/net/jforum/util/bbcode/JavaDocLink.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms,
 * with or without modification, are permitted provided
 * that the following conditions are met:
 *
 * 1) Redistributions of source code must retain the above
 * copyright notice, this list of conditions and the
 * following  disclaimer.
 * 2)  Redistributions in binary form must reproduce the
 * above copyright notice, this list of conditions and
 * the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor
 * the names of its contributors may be used to endorse
 * or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
 * IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 *
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.util.bbcode;

/**
 * Transform a UBB tag like [javadoc]javax.servlet.http.HttpServletRequest[/javadoc]
 * into a link to the corresponding javadoc page.
 * If no package name is given, then java.lang is assumed.
 */

public class JavaDocLink implements Substitution {

    // Sun / Oracle
    private static final String JAVASE_URL = "https://docs.oracle.com/javase/9/docs/api/";
    private static final String JAVAEE_URL = "https://javaee.github.io/javaee-spec/javadocs/";
    private static final String JAKARTAEE_URL = "https://jakarta.ee/specifications/platform/9/apidocs/";
	// JavaFX is now at https://openjfx.io/javadoc/13/, but the URL structure has changed in a non-trivial way
	private static final String JAVAFX_URL = "https://docs.oracle.com/javafx/2/api/";
    private static final String JOGL_URL = "https://www.jogamp.org/deployment/v2.5.0/javadoc/jogl/javadoc/";
    private static final String JAVA3D_URL = "https://www.jogamp.org/deployment/java3d/1.7.0-final/javadoc/";
    private static final String JMF_URL = "https://docs.oracle.com/cd/E17802_01/j2se/javase/technologies/desktop/media/jmf/2.1.1/apidocs/";
    private static final String JAI_URL = "https://docs.oracle.com/cd/E17802_01/products/products/java-media/jai/forDevelopers/jai-apidocs/";
    private static final String JERSEY2_URL = "https://eclipse-ee4j.github.io/jersey.github.io/apidocs/latest/jersey/index.html";
    private static final String COM_SUN_MAIL_URL = "https://javaee.github.io/javamail/docs/api/";

    // Apache
    private static final String TOMCAT_URL = "https://tomcat.apache.org/tomcat-10.1-doc/api/";
    private static final String LOG4J_URL = "https://logging.apache.org/log4j/docs/api/";
    private static final String LOG4J2_URL = "https://logging.apache.org/log4j/2.x/log4j-api/apidocs/";
	private static final String LUCENE_URL = "https://lucene.apache.org/core/9_8_0/core/";
    private static final String POI_URL = "https://poi.apache.org/apidocs/";
    private static final String AXIS2_URL = "https://axis.apache.org/axis2/java/core/api/";
    private static final String XML_CRYPTO_URL = "https://santuario.apache.org/Java/api/";
    private static final String STRUTS2_URL = "https://struts.apache.org/maven/struts2-core/apidocs/";
    private static final String WICKET_URL = "https://nightlies.apache.org/wicket/apidocs/10.x/";
    private static final String XMLBEANS_URL = "https://xmlbeans.apache.org/docs/5.0.0/";
    private static final String TAPESTRY_URL = "https://tapestry.apache.org/current/apidocs/";
    private static final String WSS4J_URL = "https://ws.apache.org/wss4j/apidocs/";
    private static final String SHIRO_URL = "https://shiro.apache.org/static/current/apidocs/";
    private static final String VELOCITY_URL = "https://velocity.apache.org/engine/2.2/apidocs/";
    private static final String VELOCITY_TOOLS_URL = "https://velocity.apache.org/tools/3.0/apidocs/";

    // Apache Commons
    private static final String ACP = "https://commons.apache.org/proper/commons";
    private static final String COLLECTIONS_URL = ACP + "-collections/javadocs/api-release/";
    private static final String CLI_URL = ACP + "-cli/javadocs/api-release/";
    private static final String VALIDATOR_URL = ACP + "-validator/apidocs/";
    private static final String MATH_URL = ACP + "-math/javadocs/api-3.6.1/";
    private static final String JEXL_URL = ACP + "-jexl/apidocs/";
    private static final String JXPATH_URL = ACP + "-jxpath/apidocs/";
	private static final String IO_URL = ACP + "-io/javadocs/api-release/";
    private static final String FILEUPLOAD_URL = ACP + "-fileupload/apidocs/";
    private static final String DIGESTER_URL = ACP + "-digester/apidocs/";
	private static final String DBCP_URL = ACP + "-dbcp/apidocs/";
    private static final String CONFIGURATION_URL = ACP + "-configuration/apidocs/";
    private static final String CODEC_URL = ACP + "-codec/apidocs/";
    private static final String BEANUTILS_URL = ACP + "-beanutils/javadocs/v1.9.4/apidocs/";
    private static final String HTTPCLIENT_URL = "https://hc.apache.org/httpclient-3.x/apidocs/";
    private static final String HC_CLIENT_URL = "https://hc.apache.org/httpcomponents-client-5.2.x/current/httpclient5/apidocs/";
    private static final String HC_CORE_URL = "https://hc.apache.org/httpcomponents-core-5.2.x/current/httpcore5/apidocs/";
    private static final String HC_CORE_HTTP2_URL = "https://hc.apache.org/httpcomponents-core-5.2.x/current/httpcore5-h2/apidocs/";
    private static final String NET_URL = ACP + "-net/apidocs/";
    private static final String LANG_URL = ACP + "-lang/javadocs/api-release/";
    private static final String LOGGING_URL = ACP + "-logging/javadocs/api-release/";
    private static final String COMPRESS_URL = ACP + "-compress/javadocs/api-release/";
    private static final String POOL_URL = ACP + "-pool/apidocs/";

    // Other 3rd party
    private static final String JUNIT_URL = "https://junit.org/junit5/docs/current/api/";
    private static final String JUNIT_OLD_URL = "http://junit.sourceforge.net/junit3.8.1/javadoc/";
    private static final String ITEXT2_URL = "https://librepdf.github.io/OpenPDF/docs-1-3-17/";
    private static final String ITEXT_URL = "https://api.itextpdf.com/";
	private static final String PDFBOX_URL = "https://javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.0/";
    private static final String JFREECHART_URL = "https://www.jfree.org/jfreechart/api/gjdoc/";
    private static final String IMAGEJ_URL = "https://rsb.info.nih.gov/ij/developer/api/";
    private static final String XOM_URL = "http://www.xom.nu/apidocs/";
    private static final String JCIFS_URL = "https://jcifs.samba.org/src/docs/api/";
    private static final String ANDROID_URL = "https://developer.android.com/reference/";
    private static final String MPXJ_URL = "https://www.mpxj.org/apidocs/";
    private static final String HTMLUNIT_URL = "https://htmlunit.sourceforge.io/apidocs/";
    private static final String DOM4J_URL = "https://dom4j.github.io/javadoc/2.1.4/";
    private static final String JDOM2_URL = "http://www.jdom.org/docs/apidocs/";
    private static final String SPRING_URL = "https://docs.spring.io/spring/docs/current/javadoc-api/";
    private static final String HIBERNATE_URL = "https://docs.jboss.org/hibernate/stable/entitymanager/api/";
    private static final String HIBERNATE_SEARCH_URL = "https://docs.jboss.org/hibernate/stable/search/api/";
    private static final String HIBERNATE_VALIDATOR_URL = "https://docs.jboss.org/hibernate/stable/validator/api/";
    private static final String QUARTZ_URL = "https://www.quartz-scheduler.org/api/2.3.0/";
    private static final String OSGI_URL_CORE = "https://www.osgi.org/javadoc/r6/core/";
    private static final String OSGI_URL_ENTERPRISE = "https://www.osgi.org/javadoc/r6/enterprise/";
	private static final String GOOGLE_GUAVA_URL = "https://guava.dev/releases/32.1.2-jre/api/docs/";
	private static final String JAXEN_URL = "http://www.cafeconleche.org/jaxen/apidocs/";
	private static final String FREEMARKER_URL = "https://freemarker.org/docs/api/";
	private static final String BOUNCYCASTLE_URL = "https://bouncycastle.org/docs/docs1.5on/";
	private static final String EVENTBUS_URL = "https://greenrobot.org/files/eventbus/javadoc/current/";
    private static final String MARKENWERK_URL = "https://markenwerk.github.io/java-utils-mail-dkim/";
    private static final String JSON_SIMPLE_URL = "https://cliftonlabs.github.io/json-simple/target/apidocs/";

    private static final String[][] URL_MAP = new String[][] {
        {"javax.activation", JAVAEE_URL},
        {"javax.annotation.security", JAVAEE_URL}, // 6
        {"javax.annotation.sql", JAVAEE_URL}, // 6
        {"javax.batch", JAVAEE_URL}, // 7
        {"javax.context", JAVAEE_URL}, // 6
        {"javax.decorator", JAVAEE_URL}, // 6
        {"javax.ejb", JAVAEE_URL},
        {"javax.el", JAVAEE_URL},
        {"javax.enterprise", JAVAEE_URL},
        {"javax.event", JAVAEE_URL}, // 6
        {"javax.faces", JAVAEE_URL},
        {"javax.inject", JAVAEE_URL}, // 6
        {"javax.jms", JAVAEE_URL},
        {"javax.json", JAVAEE_URL}, // 7
        {"javax.mail", JAVAEE_URL},
        {"com.sun.mail", COM_SUN_MAIL_URL},
        {"javax.management.j2ee", JAVAEE_URL}, // 7
        {"javax.persistence", JAVAEE_URL},
        {"javax.resource", JAVAEE_URL},
        {"javax.security.auth.message", JAVAEE_URL}, // 6
        {"javax.security.jacc", JAVAEE_URL},
        {"javax.servlet", JAVAEE_URL},
        {"javax.transaction", JAVAEE_URL},
        {"javax.validation", JAVAEE_URL}, // 6
        {"javax.webbeans", JAVAEE_URL}, // 6
        {"javax.websocket", JAVAEE_URL}, // 7
        {"javax.ws.rs", JAVAEE_URL}, // 6
        {"javax.xml.registry", JAVAEE_URL},
        {"javax.xml.rpc", JAVAEE_URL},

        {"jakarta.activation", JAKARTAEE_URL},
        {"jakarta.annotation", JAKARTAEE_URL},
        {"jakarta.batch", JAKARTAEE_URL},
        {"jakarta.decorator", JAKARTAEE_URL},
        {"jakarta.ejb", JAKARTAEE_URL},
        {"jakarta.el", JAKARTAEE_URL},
        {"jakarta.enterprise", JAKARTAEE_URL},
        {"jakarta.faces", JAKARTAEE_URL},
        {"jakarta.inject", JAKARTAEE_URL},
        {"jakarta.interceptor", JAKARTAEE_URL},
        {"jakarta.jms", JAKARTAEE_URL},
        {"jakarta.json", JAKARTAEE_URL},
        {"jakarta.jws", JAKARTAEE_URL},
        {"jakarta.mail", JAKARTAEE_URL},
        {"jakarta.persistence", JAKARTAEE_URL},
        {"jakarta.resource", JAKARTAEE_URL},
        {"jakarta.security", JAKARTAEE_URL},
        {"jakarta.servlet", JAKARTAEE_URL},
        {"jakarta.transaction", JAKARTAEE_URL},
        {"jakarta.validation", JAKARTAEE_URL},
        {"jakarta.websocket", JAKARTAEE_URL},
        {"jakarta.ws", JAKARTAEE_URL},
        {"jakarta.xml", JAKARTAEE_URL},

        {"java.applet", JAVASE_URL},
        {"java.awt", JAVASE_URL},
        {"java.beans", JAVASE_URL},
        {"java.io", JAVASE_URL},
        {"java.lang", JAVASE_URL},
        {"java.math", JAVASE_URL},
        {"java.net", JAVASE_URL},
        {"java.nio", JAVASE_URL},
        {"java.rmi", JAVASE_URL},
        {"java.security", JAVASE_URL},
        {"java.sql", JAVASE_URL},
        {"java.text", JAVASE_URL},
        {"java.time", JAVASE_URL}, // 8
        {"java.util", JAVASE_URL},
        {"javax.accessibility", JAVASE_URL},
        {"javax.activity", JAVASE_URL}, // 1.5
        {"javax.annotation", JAVASE_URL}, // 6
        {"javax.crypto", JAVASE_URL},
        {"javax.imageio", JAVASE_URL},
        {"javax.jnlp", JAVASE_URL},
        {"javax.jws", JAVASE_URL},
        {"javax.lang", JAVASE_URL}, // 6
        {"javax.management", JAVASE_URL}, // 7
        {"javax.naming", JAVASE_URL},
        {"javax.net", JAVASE_URL},
        {"javax.print", JAVASE_URL},
        {"javax.rmi", JAVASE_URL},
        {"javax.script", JAVASE_URL}, // 6
        {"javax.security", JAVASE_URL},
        {"javax.sound", JAVASE_URL},
        {"javax.sql", JAVASE_URL},
        {"javax.swing", JAVASE_URL},
        {"javax.tools", JAVASE_URL}, // 6
        {"javax.xml", JAVASE_URL}, // after all the other javax.xml subpackages in JEE
        {"org.ietf.jgss", JAVASE_URL},
        {"org.omg", JAVASE_URL},
        {"org.w3c.dom", JAVASE_URL}, // after all the other W3C DOM subpackages in Common DOM
        {"org.xml.sax", JAVASE_URL},

		{"javafx", JAVAFX_URL},
        {"javax.media.jai", JAI_URL},
        {"com.sun.j3d", JAVA3D_URL},
        {"javax.media.j3d", JAVA3D_URL},
        {"javax.vecmath", JAVA3D_URL},
        {"com.jogamp", JOGL_URL},
        {"javax.media.nativewindow", JOGL_URL},
        {"javax.media.opengl", JOGL_URL},
        {"javax.media", JMF_URL}, // after all the other javax.media subpackages in JAI, Java3D and JOGL
        {"org.glassfish.jersey", JERSEY2_URL},
        {"com.sun.research.ws.wadl", JERSEY2_URL},

        {"org.apache.lucene", LUCENE_URL},
        {"org.apache.poi", POI_URL},
        {"org.apache.log4j", LOG4J_URL},
        {"org.apache.logging.log4j", LOG4J2_URL},
        {"org.apache.axis2", AXIS2_URL},
        {"org.apache.struts2", STRUTS2_URL},
        {"com.opensymphony.xwork2", STRUTS2_URL},
        {"org.apache.wicket", WICKET_URL},
        {"org.apache.xmlbeans", XMLBEANS_URL},
        {"org.apache.shiro", SHIRO_URL},
        {"org.apache.tapestry5", TAPESTRY_URL},
        {"org.apache.ws.axis.security", WSS4J_URL},
        {"org.apache.ws.security", WSS4J_URL},
        {"org.apache.xml.security", XML_CRYPTO_URL},
        {"org.apache.velocity.tools", VELOCITY_TOOLS_URL},
        {"org.apache.velocity", VELOCITY_URL}, // after Velocity proper

        {"org.apache.commons.collections", COLLECTIONS_URL},
        {"org.apache.commons.cli", CLI_URL},
        {"org.apache.commons.validator", VALIDATOR_URL},
        {"org.apache.commons.math", MATH_URL},
        {"org.apache.commons.jexl", JEXL_URL},
        {"org.apache.commons.jxpath", JXPATH_URL},
        {"org.apache.commons.io", IO_URL},
        {"org.apache.commons.fileupload", FILEUPLOAD_URL},
        {"org.apache.commons.digester", DIGESTER_URL},
        {"org.apache.commons.dbcp", DBCP_URL},
        {"org.apache.commons.configuration", CONFIGURATION_URL},
        {"org.apache.commons.codec", CODEC_URL},
        {"org.apache.commons.beanutils", BEANUTILS_URL},
        {"org.apache.commons.httpclient", HTTPCLIENT_URL},
        {"org.apache.commons.net", NET_URL},
        {"org.apache.commons.lang", LANG_URL},
        {"org.apache.commons.logging", LOGGING_URL},
        {"org.apache.commons.compress", COMPRESS_URL},
        {"org.apache.commons.pool2", POOL_URL},
        {"org.apache.http", HC_CLIENT_URL},
        {"org.apache.hc.core5.http2", HC_CORE_HTTP2_URL},
        {"org.apache.hc.core5", HC_CORE_URL}, // after HC_CORE_HTTP2_URL

        {"org.apache.catalina", TOMCAT_URL},
        {"org.apache.coyote", TOMCAT_URL},
        {"org.apache.el", TOMCAT_URL},
        {"org.apache.jasper", TOMCAT_URL},
        {"org.apache.juli", TOMCAT_URL},
        {"org.apache.naming", TOMCAT_URL},
        {"org.apache.tomcat", TOMCAT_URL},

        {"ij", IMAGEJ_URL},
        {"junit", JUNIT_OLD_URL},
        {"org.junit", JUNIT_URL},
        {"org.hamcrest", JUNIT_URL},
        {"com.lowagie", ITEXT2_URL},
        {"com.itextpdf", ITEXT_URL},
        {"org.apache.pdfbox", PDFBOX_URL},
        {"org.jfree.chart", JFREECHART_URL},
        {"org.jfree.data", JFREECHART_URL},
        {"nu.xom", XOM_URL},
        {"jcifs", JCIFS_URL},
        {"android", ANDROID_URL},
        {"androidx", ANDROID_URL},
        {"dalvik", ANDROID_URL},
        {"com.android", ANDROID_URL},
        {"com.google.android", ANDROID_URL},
        {"org.xmlpull", ANDROID_URL},
        {"org.json", ANDROID_URL},
        {"com.github.cliftonlabs.json_simple", JSON_SIMPLE_URL},
        {"com.gargoylesoftware.htmlunit", HTMLUNIT_URL},
        {"org.jdom2", JDOM2_URL},
        {"org.dom4j", DOM4J_URL},
        {"net.sf.mpxj", MPXJ_URL},
        {"org.springframework", SPRING_URL},
        {"org.hibernate.search", HIBERNATE_SEARCH_URL},
        {"org.hibernate.validator", HIBERNATE_VALIDATOR_URL},
        {"org.hibernate", HIBERNATE_URL}, // after the other org.hibernate subpackages
		{"org.quartz", QUARTZ_URL},
		{"org.osgi.framework", OSGI_URL_CORE},
		{"org.osgi.resource", OSGI_URL_CORE},
		{"org.osgi.service.condpermadmin", OSGI_URL_CORE},
		{"org.osgi.service.packageadmin", OSGI_URL_CORE},
		{"org.osgi.service.permissionadmin", OSGI_URL_CORE},
		{"org.osgi.service.startlevel", OSGI_URL_CORE},
		{"org.osgi.service.url", OSGI_URL_CORE},
		{"org.osgi.util.tracker", OSGI_URL_CORE},
		{"org.osgi", OSGI_URL_ENTERPRISE}, // after the other org.osgi packages that are part of the Core
		{"com.google.common", GOOGLE_GUAVA_URL },
		{"org.jaxen", JAXEN_URL },
		{"freemarker", FREEMARKER_URL },
		{"org.bouncycastle", BOUNCYCASTLE_URL },
		{"org.greenrobot.eventbus", EVENTBUS_URL },
		{"net.markenwerk", MARKENWERK_URL }
    };

	private String lookup (String packageName) {
        for (int i=0; i<URL_MAP.length; i++) {
            if (packageName.startsWith(URL_MAP[i][0])) {
				return URL_MAP[i][1];
            }
        }

		return null;
	}

	// @Override
    @Override public String substitute (String clazzName)
    {
		// remove any leading or trailing whitespace
		clazzName = clazzName.trim();

		// different API versions used to be supported by suffixing them after a colon,
		// but no longer - just remove and ignore it
		int colonIndex = clazzName.indexOf(':');
		if (colonIndex != -1) {
			clazzName = clazzName.substring(0, colonIndex);
		}

        int lastDotIndex = clazzName.lastIndexOf('.');
		int hashIndex = clazzName.indexOf('#');
		// Handle page-internal hashes like java.lang.Object#equals(java.lang.Object)
		// Assume java.lang package if no package name is given
		if (hashIndex == -1) {
			if (lastDotIndex == -1) {
				clazzName = "java.lang." + clazzName;
				lastDotIndex = clazzName.lastIndexOf('.');
			}
		} else {
			lastDotIndex = clazzName.lastIndexOf('.', hashIndex);
			if (lastDotIndex == -1) {
				clazzName = "java.lang." + clazzName;
				hashIndex = clazzName.indexOf('#');
				lastDotIndex = clazzName.lastIndexOf('.', hashIndex);
			}
		}

        String packageName = clazzName.substring(0, lastDotIndex).toLowerCase();

		String url = lookup(packageName);
		if (url != null) {
				// http://java.sun.com/javase/6/docs/api/java/util/Map.Entry.html
			if (hashIndex != -1) {
				String part1 = replaceDots(clazzName.substring(0, hashIndex));
				String part2 = clazzName.substring(hashIndex);
				// parentheses can be left out if there are no parameters
				if (part2.indexOf('(') < 0) {
					clazzName += "()";
					part2 += "()";
				}
				// Java SE 8 introduces a new URL style
				part2 = part2.replaceAll("[)(]", "-");

				return "<a class=\"snap_shots\" href=\"" + url + part1 + ".html" + part2 
					+ "\" target=\"_blank\" rel=\"nofollow\">" + clazzName + "</a>";
			} else {
				return "<a class=\"snap_shots\" href=\"" + url + replaceDots(clazzName)
					+ ".html\" target=\"_blank\" rel=\"nofollow\">" + clazzName + "</a>";
			}
		}

		// if nothing is matched, then the original classname is returned
        return clazzName;
    }

	/** 
	 * Dots are replaced by backslashes, except if the next character is uppercase
	 * or inside of parentheses. The method relies on package names being lowercase.
	 * That allows linking to inner classes like java.util.Map.Entry.
	 * and to method hashes like java.util.Map.Entry#equals(java.lang.Object)
	 */
	private String replaceDots (String clazzName) {
		StringBuilder sb = new StringBuilder(clazzName);
		boolean classNameHasStarted = false;
		for (int i=0; i<sb.length(); i++) {
			if (sb.charAt(i) == '.') {
				if (!classNameHasStarted)
					sb.setCharAt(i, '/');

				if (Character.isUpperCase(sb.charAt(i+1)))
					classNameHasStarted = true;
			}
		}
		return sb.toString();
	}
}


../jforum2-code/src/main/java/net/jforum/util/bbcode/BBCode.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following  disclaimer.
 * 2)  Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * This file creation date: 02/08/2003 / 02:23:50
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.util.bbcode;

import java.io.Serializable;

/**
 * Represents a UBB code. Each code is matched through a regular expression,
 * and can either be replace by a regexp replacement, or by specifying a Java class.
 * If the latter, then the handler class must implement the net.jforum.util.bbcode.Substitution interface.
 */

public class BBCode implements Serializable
{
	private static final long serialVersionUID = -8744755081519897386L;
	private String tagName = "";
	private String regex;
	private String replace;
	private String rssReplace = null;
	private String className;
	private boolean removeQuotes;
	private boolean alwaysProcess;
	private boolean isRegexpReplace = true;
	private String lockForSmilies = null;

	public BBCode() {}

	/**
	 * Gets the regex
	 */
	public String getRegex() 
	{
		return this.regex;
	}

	/**
	 * Gets the tag name
	 */
	public String getTagName() 
	{
		return this.tagName;
	}

	public boolean removeQuotes()
	{
		return this.removeQuotes;
	}

	/**
	 * Sets the regular expression associated to the tag
	 */
	public void setRegex(String regex) 
	{
		this.regex = regex;
	}

	/**
	 * Sets the tag name
	 */
	public void setTagName(String tagName) 
	{
		this.tagName = tagName;
	}

	/**
	 * Gets the replacement string
	 */
	public String getReplace() 
	{
		return this.replace;
	}

	/**
	 * Sets the replacement string, to be applied when matching the code
	 */
	public void setReplace(String replace) 
	{
		this.replace = replace;
		isRegexpReplace = true;
	}

	/**
	 * Gets the replacement string for RSS feeds
	 */
	public String getRssReplace() 
	{
		return this.rssReplace;
	}

	/**
	 * Sets the replacement string for RSS feeds, to be applied when matching the code
	 */
	public void setRssReplace(String rssReplace) 
	{
		this.rssReplace = rssReplace;
	}

	/**
	 * Gets the class name of the handler class.
	 */
	public String getClassName() 
	{
		return this.className;
	}

	/**
	 * Sets the class name of the handler class, to be applied when matching the code
	 */
	public void setClassName(String className) 
	{
		this.className = className;
		isRegexpReplace = false;
	}

	public void enableAlwaysProcess()
	{
		this.alwaysProcess = true;
	}

	public boolean alwaysProcess()
	{
		return this.alwaysProcess;
	}

	public void enableRemoveQuotes()
	{
		this.removeQuotes = true;
	}

	public boolean isRegexpReplace()
	{
		return isRegexpReplace;
	}

	public String getLockedForSmilies()
	{
		return this.lockForSmilies;
	}

	/**
	 * Sets the UBB code tag name inside of which this smilie should be ignored.
	 * That's either [url] or [img].
	 */
	public void setLockedForSmilies (String tag)
	{
		this.lockForSmilies = tag;
	}
}

../jforum2-code/src/main/java/net/jforum/util/bbcode/Substitution.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms,
 * with or without modification, are permitted provided
 * that the following conditions are met:
 *
 * 1) Redistributions of source code must retain the above
 * copyright notice, this list of conditions and the
 * following  disclaimer.
 * 2)  Redistributions in binary form must reproduce the
 * above copyright notice, this list of conditions and
 * the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor
 * the names of its contributors may be used to endorse
 * or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
 * IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 *
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.util.bbcode;

public interface Substitution
{
    String substitute (String source);
}

../jforum2-code/src/main/java/net/jforum/util/bbcode/PlainURLLink.java

package net.jforum.util.bbcode;

/**
 * Transform a UBB tag like {@code [url]http://www.google.com/[/url]} into a link.
 * Replacement for the corresponding entry in bb_config.xml which was vulnerable to XSS attacks:<br>
 * <blockquote>
 *      {@code <regex>(?i)\[url\](.*?)\[/url\]</regex>}<br>
 *		{@code <replace><a class="snap_shots" href="$1" target="_new" rel="nofollow">$1</a></replace>}
 * </blockquote>
 */

public class PlainURLLink implements Substitution {

    @Override
    public String substitute (String url)
    {
		boolean suspicious = false;

		String changedUrl = url.trim();

		String lc = changedUrl.toLowerCase();
		suspicious |= (lc.indexOf("javascript:") != -1);
		suspicious |= (lc.indexOf("<script") != -1);

		if (suspicious)
        {
			return changedUrl;
        }

		return "<a class='snap_shots' href='" + changedUrl + "' target='_new' rel='nofollow'>" + changedUrl + "</a>";
    }
}


../jforum2-code/src/main/java/net/jforum/util/preferences/ConfigKeys.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on May 29, 2004 by pieter
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.util.preferences;

/**
* Encapsulate all configuration keys in constants. This is more typesafe and provides
* a nice overview of all configuration keys. Last but not least this lets us autocomplete
* configuration keys under eclipse ;-)
* 
* @author Pieter Olivier
*/

public final class ConfigKeys 
{
	public static final String LOGGED = "logged";
	public static final String DEVELOPMENT = "development";
	public static final String APPLICATION_PATH = "application.path";
	public static final String INSTALLATION = "installation";
	public static final String INSTALLED = "installed";
	public static final String INSTALLATION_CONFIG = "installation.config";
	public static final String CACHEABLE_OBJECTS = "cacheable.objects";
	public static final String FILECHANGES_DELAY = "file.changes.delay";

	public static final String DAO_DRIVER = "dao.driver";
	public static final String DATABASE_PING_DELAY = "database.ping.delay";
	public static final String DATABASE_CONNECTION_IMPLEMENTATION = "database.connection.implementation";
	public static final String DATABASE_DRIVER_NAME = "database.driver.name";
	public static final String DATABASE_DRIVER_CONFIG = "database.driver.config";
	public static final String DATABASE_DRIVER_PROPERTIES = "database.driver.properties";
	public static final String DATABASE_CONNECTION_HOST = "database.connection.host";
	public static final String DATABASE_CONNECTION_USERNAME = "database.connection.username";
	public static final String DATABASE_CONNECTION_PASSWORD = "database.connection.password";
	public static final String DATABASE_CONNECTION_DBNAME = "database.connection.dbname";
	public static final String DATABASE_CONNECTION_ENCODING = "dbencoding";
	public static final String DATABASE_CONNECTION_DRIVER = "database.connection.driver";
	public static final String DATABASE_CONNECTION_STRING = "database.connection.string";
	public static final String DATABASE_CONNECTION_PORT = "database.connection.port";
	public static final String DATABASE_POOL_MIN = "database.connection.pool.min";
	public static final String DATABASE_POOL_MAX = "database.connection.pool.max";
	public static final String DATABASE_USE_TRANSACTIONS = "database.use.transactions";
	public static final String DATABASE_DATASOURCE_NAME = "database.datasource.name";
	public static final String DATABASE_PROPERTIES = "database.properties";
	public static final String DATABASE_ERROR_PAGE = "database.error.page";
	public static final String DATABASE_MYSQL_UNICODE = "mysql.unicode";
	public static final String DATABASE_MYSQL_ENCODING = "mysql.encoding";
	public static final String DATABASE_AUTO_KEYS = "database.support.autokeys";
	public static final String DATABASE_SUPPORT_SUBQUERIES = "database.support.subqueries";
	public static final String C3P0_EXTRA_PARAMS = "c3p0.extra.params";

	public static final String SQL_QUERIES_GENERIC = "sql.queries.generic";
	public static final String SQL_QUERIES_DRIVER = "sql.queries.driver";

	public static final String AUTHENTICATION_TYPE = "authentication.type";
	public static final String SSO_IMPLEMENTATION = "sso.implementation";
	public static final String LOGIN_AUTHENTICATOR = "login.authenticator";
	public static final String LOGIN_AUTHENTICATOR_INSTANCE = "login.authenticator.instance";
	public static final String TYPE_DEFAULT = "default";
	public static final String TYPE_SSO = "sso";
	public static final String AUTO_LOGIN_ENABLED = "auto.login.enabled";

	public static final String SSO_PASSWORD_ATTRIBUTE = "sso.password.attribute";
	public static final String SSO_EMAIL_ATTRIBUTE = "sso.email.attribute";
	public static final String SSO_DEFAULT_PASSWORD = "sso.default.password";
	public static final String SSO_DEFAULT_EMAIL = "sso.default.email";
	public static final String SSO_REDIRECT = "sso.redirect";

	public static final String RESOURCE_DIR = "resource.dir";
	public static final String CONFIG_DIR = "config.dir";

	public static final String GA_ID = "google.analytics.tracker";
	public static final String JQUERY_URL = "jquery.url";

	public static final String TEMPLATES_MAPPING = "templates.mapping";
	public static final String TEMPLATE_DIR = "template.dir";
	public static final String ENCODING = "encoding";
	public static final String DEFAULT_CONTAINER_ENCODING = "default.container.encoding";
	public static final String SERVLET_NAME = "servlet.name";
	public static final String DEFAULT_CONFIG = "default.config";
	public static final String CONTEXT_NAME = "context.name";
	public static final String SERVLET_EXTENSION = "servlet.extension";
	public static final String COOKIE_NAME_DATA = "cookie.name.data";
	public static final String COOKIE_NAME_USER = "cookie.name.user";
	public static final String COOKIE_AUTO_LOGIN = "cookie.name.autologin";
	public static final String COOKIE_USER_HASH = "cookie.name.userHash";

	public static final String STATS_RING_SIZE = "statistics.ringSize";
	public static final String STATS_ACTIVE = "statistics.active";

	public static final String ANONYMOUS_USER_ID = "anonymous.userId";
	public static final String DEFAULT_USER_GROUP = "defaultUserGroup";
	public static final String USER_HASH_SEQUENCE = "user.hash.sequence";
	public static final String TOPICS_READ_TIME = "topics.tracking";
	public static final String TOPICS_READ_TIME_BY_FORUM = "topics.tracking.byforum";

	public static final String TOPIC_CACHE_ENABLED = "topic.cache.enabled";
	public static final String TOPIC_CACHE_SIZE = "topic.cache.size";

	public static final String VERSION = "version";
	public static final String VERSION_CHECK_ENABLED = "version.check.enabled";

	public static final String FORUM_LINK = "forum.link";
	public static final String HOMEPAGE_LINK = "homepage.link";
	public static final String FORUM_NAME = "forum.name";
	public static final String FORUM_PAGE_TITLE = "forum.page.title";
	public static final String FORUM_PAGE_METATAG_KEYWORDS = "forum.page.metatag.keywords";
	public static final String FORUM_PAGE_METATAG_DESCRIPTION = "forum.page.metatag.description";

	public static final String TMP_DIR = "tmp.dir";
	public static final String CACHE_DIR = "cache.dir";

	public static final String DATE_TIME_FORMAT = "dateTime.format";
	public static final String DATE_TIME_PRETTY = "dateTime.pretty";
	public static final String TIMEZONE = "dateTime.timezone";
	public static final String ALLOW_PM = "allow.pm";
	public static final String RSS_DATE_TIME_FORMAT = "rss.datetime.format";
	public static final String RSS_ENABLED = "rss.enabled";
	public static final String SOCIAL_SHARING_ENABLED = "social.enabled";
	public static final String SOCIAL_SHARING_SITES = "social.sites.list";
	public static final String USER_LIST_PUBLIC = "user.list.public";
	public static final String MODERATION_LOG_PUBLIC = "moderation.log.public";

	public static final String TOPICS_PER_PAGE = "topicsPerPage";
	public static final String POSTS_PER_PAGE = "postsPerPage";
	public static final String USERS_PER_PAGE = "usersPerPage";
	public static final String HOTTEST_TOPICS = "topic.hottest";
	public static final String HOTTEST_TOPICS_SORT = "topic.hottest.sort";
	public static final String POSTS_CACHE_SIZE = "posts.cache.size";
	public static final String POSTS_CACHE_ENABLED = "posts.cache.enabled";
	public static final String TOP_DOWNLOADS = "top.downloads";

	public static final String CAPTCHA_IGNORE_CASE = "captcha.ignore.case";
	public static final String CAPTCHA_REGISTRATION = "captcha.registration";
	public static final String CAPTCHA_ADMIN_MODERATORS = "captcha.admins.moderators";
	public static final String CAPTCHA_POSTS = "captcha.posts";
	public static final String CAPTCHA_WIDTH = "captcha.width";
	public static final String CAPTCHA_HEIGHT = "captcha.height";
	public static final String CAPTCHA_MIN_FONT_SIZE = "captcha.min.font.size";
	public static final String CAPTCHA_MAX_FONT_SIZE = "captcha.max.font.size";
	public static final String CAPTCHA_MIN_WORDS = "captcha.min.words";
	public static final String CAPTCHA_MAX_WORDS = "captcha.max.words";

	public static final String I18N_DEFAULT = "i18n.board.default";
	public static final String I18N_DEFAULT_ADMIN = "i18n.internal";
	public static final String LOCALES_DIR = "locales.dir";
	public static final String LOCALES_NAMES = "locales.names";

	public static final String MAIL_LOST_PASSWORD_MESSAGE_FILE = "mail.lostPassword.messageFile";
	public static final String MAIL_LOST_PASSWORD_SUBJECT = "mail.lostPassword.subject";
	public static final String MAIL_NOTIFY_ANSWERS = "mail.notify.answers";
	public static final String MAIL_SENDER = "mail.sender";
	public static final String MAIL_CHARSET = "mail.charset";
	public static final String MAIL_TEMPLATE_ENCODING = "mail.template.encoding";
	public static final String MAIL_NEW_ANSWER_MESSAGE_FILE = "mail.newAnswer.messageFile";
	public static final String MAIL_NEW_ANSWER_SUBJECT = "mail.newAnswer.subject";
	public static final String MAIL_NEW_PM_SUBJECT = "mail.newPm.subject";
	public static final String MAIL_NEW_PM_MESSAGE_FILE = "mail.newPm.messageFile";
	public static final String MAIL_MESSAGE_FORMAT = "mail.messageFormat";

	public static final String MAIL_POP3_DEBUG_KEEP_MESSAGES = "mail.pop3.debug.keep.messages";
	public static final String MAIL_POP3_INTEGRATION_ENABLED = "mail.pop3.integration.enabled";
	public static final String MAIL_POP3_DISABLETOP = "mail.pop3.disabletop";

	public static final String MAIL_SMTP_AUTH = "mail.smtp.auth";
	public static final String MAIL_SMTP_HOST = "mail.smtp.host";
	public static final String MAIL_SMTP_PORT = "mail.smtp.port";

	public static final String MAIL_SMTP_SSL_AUTH = "mail.smtps.auth";
	public static final String MAIL_SMTP_SSL_HOST = "mail.smtps.host";
	public static final String MAIL_SMTP_SSL_PORT = "mail.smtps.port";
	public static final String MAIL_SMTP_SSL_LOCALHOST = "mail.smtps.localhost";

	public static final String MAIL_SMTP_SSL = "mail.smtp.ssl";

	public static final String MAIL_SMTP_LOCALHOST = "mail.smtp.localhost";
	public static final String MAIL_SMTP_USERNAME = "mail.smtp.username";
	public static final String MAIL_SMTP_PASSWORD = "mail.smtp.password";
	public static final String MAIL_SMTP_DELAY = "mail.smtp.delay";
	public static final String MAIL_SMTP_ADDITIONAL_PROPERTIES = "mail.smtp.additional.properties";

	public static final String MAIL_USER_EMAIL_AUTH = "mail.user.email.auth";
	public static final String MAIL_ACTIVATION_KEY_MESSAGE_FILE = "mail.activationKey.messageFile";
	public static final String MAIL_ACTIVATION_KEY_SUBJECT = "mail.activationKey.subject";

	public static final String MAIL_NEW_TOPIC_MESSAGE_FILE = "mail.newTopic.messageFile";
	public static final String MAIL_NEW_TOPIC_SUBJECT = "mail.newTopic.subject";

	public static final String MAIL_DKIM_SIGNING_DOMAIN = "mail.dkim.signingDomain";
	public static final String MAIL_DKIM_SELECTOR = "mail.dkim.selector";
	public static final String MAIL_DKIM_DER_FILE = "mail.dkim.derFile";
	public static final String MAIL_DKIM_IDENTITY = "mail.dkim.identity";

	public static final String HTML_TAGS_WELCOME = "html.tags.welcome";
	public static final String HTML_ATTRIBUTES_WELCOME = "html.attributes.welcome";
	public static final String HTML_LINKS_ALLOW_RELATIVE = "html.links.allow.relative";
	public static final String HTML_LINKS_ALLOW_PROTOCOLS = "html.links.allow.protocols";

	public static final String SMILIE_IMAGE_DIR = "smilie.image.dir";
	public static final String SMILIE_IMAGE_PATTERN = "smilie.image.pattern";

	public static final String AVATAR_IMAGE_DIR = "avatar.image.dir";
	public static final String AVATAR_STORE_DIR = "avatar.store.dir";
	public static final String AVATAR_MAX_WIDTH = "avatar.maxWidth";
	public static final String AVATAR_MAX_HEIGHT = "avatar.maxHeight";
	public static final String AVATAR_ALLOW_EXTERNAL_URL = "avatar.allow.external.url";

	public static final String MOST_USERS_EVER_ONLINE = "most.users.ever.online";
	public static final String MOST_USER_EVER_ONLINE_DATE = "most.users.ever.online.date";

	public static final String JBOSS_CACHE_PROPERTIES = "jboss.cache.properties";
	public static final String EHCACHE_CACHE_PROPERTIES = "ehcache.cache.properties";
	public static final String CACHE_IMPLEMENTATION = "cache.engine.implementation";

	public static final String ATTACHMENTS_MAX_POST = "attachments.max.post";
	public static final String ATTACHMENTS_IMAGES_CREATE_THUMB = "attachments.images.createthumb";
	public static final String ATTACHMENTS_IMAGES_MAX_THUMB_W = "attachments.images.thumb.maxsize.w";
	public static final String ATTACHMENTS_IMAGES_MAX_THUMB_H = "attachments.images.thumb.maxsize.h";
	public static final String ATTACHMENTS_IMAGES_THUMB_BOX_SHOW = "attachments.images.thumb.box.show";
	public static final String ATTACHMENTS_IMAGES_THUMB_HOVER_SHOW = "attachments.images.thumb.hover.show";
	public static final String ATTACHMENTS_ICON = "attachments.icon";
	public static final String ATTACHMENTS_STORE_DIR = "attachments.store.dir";
	public static final String ATTACHMENTS_UPLOAD_DIR = "attachments.upload.dir";
	public static final String ATTACHMENTS_ANONYMOUS = "attachments.anonymous";

	public static final String ANNOUNCEMENT = "announcement";

	public static final String AGREEMENT_SHOW = "agreement.show";
	public static final String AGREEMENT_ACCEPTED = "agreement.accepted";
	public static final String AGREEMENT_DEFAULT_FILE = "agreement.default.file";
	public static final String AGREEMENT_FILES_PATH = "agreement.files.path";
	public static final String REGISTRATION_ENABLED = "registration.enabled";
	public static final String REGISTRATION_EMAIL_NOT_MATCHING_ENABLED = "registration.emailNotMatching.enabled";
	public static final String USERNAME_MAX_LENGTH = "username.max.length";
	public static final String PASSWORD_MIN_LENGTH = "password.min.length";

	public static final String QUARTZ_CONFIG = "quartz.config";
	public static final String QUARTZ_CONTEXT = "org.quartz.context.";

	public static final String SEARCH_INDEXING_ENABLED = "search.indexing.enabled";
	public static final String EXTENSION_FIELD = "extension.field";

	public static final String LDAP_SECURITY_PROTOCOL = "ldap.security.protocol";
	public static final String LDAP_AUTHENTICATION = "ldap.authentication";
	public static final String LDAP_FACTORY = "ldap.factory";
	public static final String LDAP_LOGIN_PREFIX = "ldap.login.prefix";
	public static final String LDAP_LOGIN_SUFFIX = "ldap.login.suffix";
	public static final String LDAP_SERVER_URL = "ldap.server.url";
	public static final String LDAP_FIELD_EMAIL = "ldap.field.email";
	public static final String LDAP_LOOKUP_PREFIX = "ldap.lookup.prefix";
	public static final String LDAP_LOOKUP_SUFFIX = "ldap.lookup.suffix";

	public static final String CLICKSTREAM_CONFIG = "clickstream.config";
	public static final String IS_BOT = "clickstream.is.bot";

	public static final String POSTS_NEW_DELAY = "posts.new.delay";
	public static final String POSTS_EDIT_AFTER_REPLY = "posts.edit.after.reply";
	public static final String LAST_POST_TIME = "last.post.time";

	public static final String KARMA_SHOW = "karma.show";
	public static final String KARMA_MIN_POINTS = "karma.min.points";
	public static final String KARMA_MAX_POINTS = "karma.max.points";

	public static final String IP_SHOW = "show.ip";
	public static final String ONLINE_SHOW = "show.online.status";
	public static final String AVATAR_SHOW = "show.avatar";

    public static final String MAIL_SUMMARY_SUBJECT = "mail.summary.weekly.subject";
    public static final String MAIL_SUMMARY_FILE = "mail.summary.weekly.messageFile";
    public static final String SUMMARY_DAYS_BEFORE = "summary.days.before";
    public static final String SUMMARY_IS_ENABLED = "summary.enabled";
    
    public static final String STACKTRACE_MODERATORS_ONLY = "stacktrace.moderators.only";
    public static final String JFORUM_VERSION_URL = "jforum.version.url";
	public static final String REQUEST_IGNORE_CAPTCHA = "request.ignore.captcha";

	public static final String API_SECURITY_KEY = "api.security.key";
	public static final String BANLIST_SEND_403FORBIDDEN = "banlist.send.403forbidden";
	public static final String HTTP_XFRAMEOPTIONS = "http.x-frame-options";

	public static final String LOGIN_IGNORE_XFORWARDEDHOST = "login.ignore.xforwardedhost";
	public static final String LOGIN_IGNORE_REFERER = "login.ignore.referer";

	public static final String LUCENE_ANALYZER = "lucene.analyzer";
	public static final String LUCENE_INDEX_WRITE_PATH = "lucene.index.write.path";
	public static final String LUCENE_SETTINGS = "lucene.settings";
	public static final String LUCENE_CURRENTLY_INDEXING = "lucene.currently.indexing";
	public static final String LUCENE_INDEXER_RAM_NUMDOCS = "lucene.indexer.ram.numdocs";
	public static final String LUCENE_INDEXER_DB_FETCH_COUNT = "lucene.indexer.db.fetch.count";
	public static final String LUCENE_STOPWORDs = "lucene.analyzer.stopwords";

	public static final String MODERATION_LOGGING_ENABLED = "moderation.logging.enabled";
	public static final String PROXIED_CONTEXT_PATH = "proxied.context.path";
	public static final String REDIRECT_ABSOLUTE_PATHS = "redirect.absolute.paths";
	public static final String REDIRECT_BASE_URL = "redirect.base.url";
    
	public static final String FREEMARKER_EXTRA_TEMPLATE_PATH = "freemarker.extra.template.path";

	public static final String STOPFORUMSPAM_API_ENABLED = "stopForumSpam.api.enabled";
	public static final String STOPFORUMSPAM_API_URL = "stopForumSpam.api.url";
	public static final String STOPFORUMSPAM_WEB_URL = "stopForumSpam.web.url";
	public static final String WHOIS_API_URL = "whois.api.url";

	public static final String BANNER_PAGES_LIST = "banner.pages.list";

	public static final String FORUM_TRASHCAN = "forum.trashcan.id";

	private ConfigKeys() {}
}

../jforum2-code/src/main/java/net/jforum/util/preferences/QueriesFileListener.java
/*
 * Copyright (c) JForum Team
 * 
 * All rights reserved.
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 05/06/2004 14:49:22
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.util.preferences;

import org.apache.log4j.Level;
import org.apache.log4j.Logger;

import net.jforum.util.FileChangeListener;

/**
 * Listener for changed file events.
 * <p>
 * On change of the registered resource file SystemGlobals.loadQueries is called.
 * <p> 
 * First the registered resource is reloaded followed by a reload of "&lt;database_name&gt;.sql"
 * (unless the former was already named "&lt;database_name&gt;.sql").
 * <p>
 * 
 * @author Rafael Steil
 * @version $Id$
 */
public class QueriesFileListener implements FileChangeListener
{
    private static final Logger LOGGER = Logger.getLogger(QueriesFileListener.class);

    /** 
     * @see net.jforum.util.FileChangeListener#fileChanged(java.lang.String)
     */
    @Override public void fileChanged(final String filename)
    {
    	if (LOGGER.isEnabledFor(Level.INFO)) {
    		LOGGER.info("File change detected: "+ filename);
    	}
        final String driverQueries = SystemGlobals.getValue(ConfigKeys.SQL_QUERIES_DRIVER);
        if (filename.equals(driverQueries)) {
            SystemGlobals.loadQueries(filename);
        }
        else {
            // Force reload of driver specific queries
            SystemGlobals.loadQueries(filename,driverQueries);
        }



    }

}

../jforum2-code/src/main/java/net/jforum/util/preferences/SystemGlobals.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Feb 24, 2003 / 8:25:35 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.util.preferences;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.security.InvalidParameterException;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.TreeMap;
import java.util.Vector;
import java.util.concurrent.ConcurrentHashMap;

import org.apache.log4j.Level;
import org.apache.log4j.Logger;

import net.jforum.dao.DataAccessDriver;
import net.jforum.exceptions.ForumException;

/**
 * <p>Store global configurations used in the system.
 * This is a helper class used to access the values
 * defined at SystemGlobals.properties and related config files.</p> 
 * 
 * <p>
 * Transient values are stored in a special place, and are not
 * modified when you change a regular key's value. 
 * </p>
 * 
 * @author Rafael Steil
 * @author Pieter Olivier
 */

public final class SystemGlobals implements VariableStore
{
    private static final Logger LOGGER = Logger.getLogger(SystemGlobals.class);

    private static SystemGlobals globals = new SystemGlobals();

    private String defaultConfig;
    private File installationConfig;

    private Properties defaults = new Properties();
    private Properties installation = new Properties();
    private Map<String, Object> objectProperties = new ConcurrentHashMap<>();
    private static List<File> additionalDefaultsList = new ArrayList<>();
    private static Properties queries = new Properties();
    private static Properties transientValues = new Properties();

    private VariableExpander expander = new VariableExpander(this, "${", "}");

    private SystemGlobals() {}

    /**
     * Initialize the global configuration
     * @param appPath The application path (normally the path to the webapp base dir
     * @param mainConfigurationFile The file containing system defaults (when null, defaults to <appPath>/WEB-INF/config/SystemGlobals.properties)
     */
    public static void initGlobals(String appPath, String mainConfigurationFile)
    {
        globals.buildSystem(appPath, mainConfigurationFile);
    }

    public static void reset()
    {
        globals.defaults.clear();
        globals.installation.clear();
        additionalDefaultsList.clear();
        queries.clear();
        transientValues.clear();
    }

    private void buildSystem(String appPath, String mainConfigurationFile)
    {
        if (mainConfigurationFile == null) {
            throw new InvalidParameterException("defaultConfig could not be null");
        }

        this.defaultConfig = mainConfigurationFile;
        this.defaults.clear();

        this.defaults.put(ConfigKeys.APPLICATION_PATH, appPath);
        this.defaults.put(ConfigKeys.DEFAULT_CONFIG, mainConfigurationFile);		

        SystemGlobals.loadDefaults();
        debugValues( defaults, "defaults" );

        this.installation.clear();
        this.installationConfig = new File( getVariableValue(ConfigKeys.INSTALLATION_CONFIG) );
        if (this.installationConfig.exists() && !additionalDefaultsList.contains(this.installationConfig)) {
            additionalDefaultsList.add(0, this.installationConfig );
            if (LOGGER.isEnabledFor(Level.INFO)) {
            	LOGGER.info("Added " + this.installationConfig);
            }
        }		

        for (File file : additionalDefaultsList) {
            loadAdditionalDefault(file);
        }
        globals.expander.clearCache();
        debugValues( globals.installation, "installation" );
    }

    /**
     * Sets a value for some property
     * 
     * @param field The property name
     * @param value The property value 
     * @see #getVariableValue(String)
     * */
    public static void setValue(String field, String value)
    {
        globals.installation.put(field, value);
        globals.expander.clearCache();
    }

    public static void setObjectValue(String field, Object value)
    {
        globals.objectProperties.put(field, value);
    }

    public static Object getObjectValue(String field)
    {
        return globals.objectProperties.get(field);
    }

    /**
     * Set a transient configuration value (a value that will not be saved) 
     * @param field The name of the configuration option
     * @param value The value of the configuration option
     */
    public static void setTransientValue(String field, String value)
    {
        if (LOGGER.isDebugEnabled()) {
        	LOGGER.debug( "Adding transient " + field + "=" + value );
        }
        transientValues.put(field, value);
    }

    /**
     * Load system defaults
     */
    private static void loadDefaults()
    {
    	if (LOGGER.isEnabledFor(Level.INFO)) {
    		LOGGER.info("Loading mainConfigurationFile " + globals.defaultConfig + " ...");
    	}
        loadProps( globals.defaults, new File( globals.defaultConfig ) );
        globals.expander.clearCache();
    }

    /**
     * Merge additional configuration defaults
     * 
     * @param file File from which to load the additional defaults
     */
    public static void loadAdditionalDefaults(String... file)
    {
        File[] files = new File[file.length];
        for ( int i = 0; i < file.length; i++ )
        {
            files[i] = new File(file[i]);
        }
        for ( int i = 0; i < files.length; i++ )
        {
            globals.loadAdditionalDefault( files[i] );
        }
        globals.expander.clearCache();
        debugValues( globals.installation, "installation" );
    }

    /**
     * Merge additional configuration into installations
     * <p>
     * If the file does not exist nothing is done.
     * <p>
     * The file is added to the internal list additionalDefaultsList if not yet present
     * <p>
     * 
     * @param file File from which to load the additional defaults. Must not be <code>null</code>
     */
    private void loadAdditionalDefault( File file )
    {
        if (!file.exists()) {
        	if (LOGGER.isEnabledFor(Level.INFO)) {
        		LOGGER.info("Cannot find file " + file + ". Will ignore it");
        	}
            return;
        }

        if (LOGGER.isEnabledFor(Level.INFO)) {
        	LOGGER.info("Loading additional default into installation " + file + " ...");
        }

        loadProps( installation, file );

        if (!additionalDefaultsList.contains(file)) {
            additionalDefaultsList.add(file);
            if (LOGGER.isEnabledFor(Level.INFO)) {
            	LOGGER.info("Added " + file);
            }
        }
    }

    /**
     * Save installation defaults
     * @param saveToDB false during installation, true during normal use
     */
    public static void saveInstallation (boolean saveToDB)
    {
        // We need this temporary "p" because, when new FileOutputStream()
		// is called, it will raise an event to the TimerTask who is
		// listening for file modifications, which then reloads the
        // configurations from the filesystem, overwriting our new keys. 

        Properties p = new Properties() {
			/**
			 * serialization
			 */
			private static final long serialVersionUID = 1L;

			/**
			 * Called by the store method
			 */
			@Override public synchronized Enumeration<Object> keys() {
				Vector<String> v = new Vector<>();
				for (final Object o : keySet()) {
					v.add(o.toString());
				}
				v.sort(null);
				return new Vector<Object>(v).elements();
			}
		};
        p.putAll(globals.installation);

        try {
            FileOutputStream out = new FileOutputStream(globals.installationConfig);
            p.store(out, "Installation specific configuration options");
            out.close();

			if (saveToDB) {
				DataAccessDriver.getInstance().newConfigDAO().update(p);
			}
        }
        catch (IOException e) {
            throw new ForumException(e);
        }		
    }

    /**
     * Gets the value of some property
     * 
     * @param field The property name to retrieve the value
     * @return String with the value, or <code>null</code> if not found
     * @see #setValue(String, String)
     * */
    public static String getValue(String field)
    {
        return globals.getVariableValue(field);
    }

    public static String getTransientValue(String field)
    {
        return transientValues.getProperty(field);
    }

    /**
     * Retrieve an integer-valued configuration field
     * 
     * @param field Name of the configuration option
     * @return The value of the configuration option
     * @exception NullPointerException when the field does not exists
     */
    public static int getIntValue(String field)
    {
        return Integer.parseInt(getValue(field));
    }

    /**
     * Retrieve a boolean-values configuration field
     * 
     * @param field name of the configuration option
     * @return The value of the configuration option
     * @exception NullPointerException when the field does not exists
     */
    public static boolean getBoolValue(String field)
    {
        return "true".equals(getValue(field));
    }

    /**
     * Return the value of a configuration value as a variable. Variable expansion is performed
     * on the result.
     * 
     * @param field The field name to retrieve
     * @return The value of the field if present or null if not  
     */
    @Override public String getVariableValue(String field)
    {
        String preExpansion = globals.installation.getProperty(field);

        if (preExpansion == null) {
            preExpansion = this.defaults.getProperty(field);

            if (preExpansion == null) {
            	if (LOGGER.isEnabledFor(Level.INFO)) {
            		LOGGER.info("Key '" + field + "' is not found in " + globals.defaultConfig + " and " + globals.installationConfig);
            	}
                return null;
            }
        }

        return expander.expandVariables(preExpansion);
    }

    /**
     * Sets the application's root directory 
     * 
     * @param ap String containing the complete path to the root dir
     * @see #getApplicationPath
     * */
    public static void setApplicationPath(String ap)
    {
        setValue(ConfigKeys.APPLICATION_PATH, ap);
    }

    /**
     * Gets the complete path to the application's root dir
     * 
     * @return String with the path
     * @see #setApplicationPath
     * */
    public static String getApplicationPath()
    {
        return getValue(ConfigKeys.APPLICATION_PATH);
    }

    /**
     * Gets the path to the resource's directory.
     * This method returns the directory name where the config
     * files are stored. 
     * Note that this method does not return the complete path. If you 
     * want the full path, you must use 
     * <blockquote><pre>SystemGlobals.getApplicationPath() + SystemGlobals.getApplicationResourcedir()</pre></blockquote>
     * 
     * @return String with the name of the resource dir, relative 
     * to application's root dir.
     * @see #getApplicationPath()
     * */
    public static String getApplicationResourceDir()
    {
        return getValue(ConfigKeys.RESOURCE_DIR);
    }

    /**
     * Load the SQL queries
     *
     * @param queryFiles Complete path to the SQL queries file(s).
     **/
    public static void loadQueries(String... queryFiles)
    {
        File[] files = new File[queryFiles.length];
        for ( int i = 0; i < queryFiles.length; i++ )
        {
            files[i] = new File( queryFiles[i] );
        }
        loadQueries( files );
    }

    /**
     * Load the SQL queries
     *
     * @param queryFiles Complete path to the SQL queries file(s).
     **/
    public static void loadQueries(File... queryFiles)
    {
        for ( int i = 0; i < queryFiles.length; i++ )
        {
        	if (LOGGER.isEnabledFor(Level.INFO)) {
        		LOGGER.info("Loading query file " + queryFiles[i] + " ...");
        	}
            loadProps( queries, queryFiles[i] );
        }
        debugValues( queries, "queries" );
    }

    /**
     * Loads an arbitrary property file into destination
     * <p>
     * @param destination 
     *        the loader Properties. Must not be <code>null</code>
     * @param file 
     *        file to be loaded. Must not be <code>null</code>
     */
    private static void loadProps( Properties destination, File file )
    {
        try
        {
            InputStream is = new FileInputStream( file );
            try
            {
                destination.load( is );
            }
            finally
            {
                is.close();
            } // try..finally
        }
        catch ( IOException e )
        {
            throw new ForumException( e );
        }
    }

    /**
     * Gets some SQL statement.
     * 
     * @param sql The query's name, as defined in the file loaded by
     * {@link #loadQueries(String)}
     * @return The SQL statement, or <code>null</code> if not found.
     * */
    public static String getSql(String sql)
    {
        return queries.getProperty(sql);
    }

    /**
     * Retrieve an iterator that iterates over all known configuration keys
     * 
     * @return An iterator that iterates over all known configuration keys
     */
    public static Iterator<Object> fetchConfigKeyIterator()
    {
        return globals.defaults.keySet().iterator();
    }

    public static Properties getConfigData()
    {
        return new Properties(globals.defaults);
    }

    /**
     * Lists all properties (expanded) in alphabetical order in logger
     * <p>
     * @param aProps the properties to be listed
     * @param aName the name of the 
     */
    private static void debugValues( Properties aProps, String aName )
    {
        // Note that the logger which emits this can be configured by using the param aName:
        // e.g.
        /*
            <logger name="net.jforum.util.preferences.SystemGlobals.defaults" additivity="true">
                <level value="debug" />
            </logger>

            <logger name="net.jforum.util.preferences.SystemGlobals.queries" additivity="true">
                <level value="info" />
            </logger>

            which will cause the defaults to be logged and the queries not.
         */

        Logger log = Logger.getLogger( SystemGlobals.class.getName() + "." + aName );
        if ( log.isDebugEnabled() )
        {
            StringBuilder sb = new StringBuilder( "SystemGlobals." );
            sb.append( aName ).append( " contains values:" );

            Enumeration<?> keys = aProps.propertyNames();

            if ( !keys.hasMoreElements() )
            {
                sb.append( " <none>" );
            }
            else
            {
                Map<String,String> sorted = new TreeMap<String,String>();
                while ( keys.hasMoreElements() )
                {
                    String key = (String) keys.nextElement();
                    String preExpansion = aProps.getProperty( key );
                    sorted.put( key, globals.expander.expandVariables(preExpansion) );
                }

                for (Map.Entry<String,String> entry : sorted.entrySet())
                {
                    sb.append( "\n    " ).append( entry.getKey()).append(" = ").append(entry.getValue());
                }
            }

            log.debug( sb.toString() );
        }
    }
}

../jforum2-code/src/main/java/net/jforum/util/preferences/VariableStore.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.

 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:

 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Dec 1, 2003 by pieter
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.util.preferences;

public interface VariableStore {
	String getVariableValue(String variableName);
}

../jforum2-code/src/main/java/net/jforum/util/preferences/TemplateKeys.java
/*
 * Copyright (c) JForum Team
 * 
 * All rights reserved.
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Mar 14, 2005 3:04:11 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.util.preferences;

/**
 * @author Rafael Steil
 */
public final class TemplateKeys
{
	private TemplateKeys() {}

	public static final String FORUMS_LIST = "forums.list";
	public static final String FORUMS_SHOW = "forums.show";
	public static final String FORUMS_PING = "forums.ping";
	public static final String FORUMS_BANNED = "forums.banned";

	public static final String BOOKMARKS_ADD_FORUM = "bookmarks.add.forum";
	public static final String BOOKMARKS_ADD_TOPIC = "bookmarks.add.topic";
	public static final String BOOKMARKS_ADD_USER = "bookmarks.add.user";
	public static final String BOOKMARKS_INSERT_SAVE = "bookmarks.insert.save";
	public static final String BOOKMARKS_UPDATE_SAVE = "bookmarks.update.save";
	public static final String BOOKMARKS_EDIT = "bookmarks.edit";
	public static final String BOOKMARKS_ERROR = "bookmarks.error";
	public static final String BOOKMARKS_LIST = "bookmarks.list";

	public static final String KARMA_ERROR = "karma.error";
	public static final String KARMA_LIST = "karma.list";
	public static final String KARMA_SEARCH_BYPERIOD = "karma.search.byperiod";
	public static final String KARMA_SEARCH_BYMONTH = "karma.search.bymonth";

	public static final String MODERATION_MOVE_TOPICS = "moderation.move.topics";
	public static final String MODERATION_DONE = "moderation.done";
	public static final String MODERATION_DENIED = "moderation.denied";

	public static final String POSTS_LIST = "posts.list";
	public static final String POSTS_USER_POSTS_LIST = "posts.userposts.list";
	public static final String POSTS_REVIEW = "posts.review";
	public static final String POSTS_TOPIC_NOT_FOUND = "posts.topic.not.found";
	public static final String POSTS_POST_NOT_FOUND = "posts.post.not.found";
	public static final String POSTS_REPLY_ONLY = "posts.reply.only";
	public static final String POSTS_INSERT = "posts.insert";
	public static final String POSTS_EDIT = "posts.edit";
	public static final String POSTS_EDIT_CANNOTEDIT = "posts.edit.cannotedit";
	public static final String POSTS_QUOTE = "posts.quote";
	public static final String POSTS_WAITING = "posts.waiting";
	public static final String POSTS_NOT_MODERATED = "posts.not.moderated";
	public static final String POSTS_CANNOT_DELETE = "posts.cannot.delete";
	public static final String POSTS_UNWATCH = "posts.unwatch";
	public static final String POSTS_CANNOT_DOWNLOAD = "posts.cannot.download";
	public static final String POSTS_ATTACH_NOTFOUND = "posts.attach.notfound";
	public static final String POSTS_TOPIC_LOCKED = "posts.topic.locked";
	public static final String POSTS_LIST_SMILIES = "posts.list.smilies";

	public static final String PM_INBOX = "pm.inbox";
	public static final String PM_SENTBOX = "pm.sentbox";
	public static final String PM_SENDFORM = "pm.sendform";
	public static final String PM_SENDSAVE_USER_NOTFOUND = "pm.sendsave.user.notfound";
	public static final String PM_SENDSAVE = "pm.sendsave";
	public static final String PM_READ = "pm.read";
	public static final String PM_READ_REVIEW = "pm.read.review";
	public static final String PM_READ_DENIED = "pm.read.denied";
	public static final String PM_DELETE = "pm.delete";
	public static final String PM_FIND_USER = "pm.find.user";

	public static final String RECENT_LIST = "recent.list";
	public static final String RECENT_USER_TOPICS_SHOW = "recent.usertopics.show";

	public static final String HOTTEST_LIST = "hottest.list";
	public static final String HOTTEST_USER_TOPICS_SHOW = "hottest.usertopics.show";

	public static final String TOP_DOWNLOADS_LIST = "topdownloads.list";

	public static final String SEARCH_FILTERS = "search.filters";
	public static final String SEARCH_SEARCH = "search.search";
	public static final String SEARCH_NEW_MESSAGES = "search.new.messages";

	public static final String USER_EDIT = "user.edit";
	public static final String USER_REGISTRATION_DISABLED = "user.registration.disabled";
	public static final String USER_INSERT = "user.insert";
	public static final String USER_INSERT_ACTIVATE_MAIL = "user.insert.activate.mail";
	public static final String USER_INVALID_ACTIVATION = "user.invalid.activation";
	public static final String USER_REGISTRATION_COMPLETE = "user.registration.complete";
	public static final String USER_VALIDATE_LOGIN = "user.validate.login";
	public static final String USER_PROFILE = "user.profile";
	public static final String USER_LOGIN = "user.login";
	public static final String USER_LOSTPASSWORD = "user.lostpassword";
	public static final String USER_LOSTPASSWORD_SEND = "user.lostpassword.send";
	public static final String USER_RECOVERPASSWORD = "user.recoverpassword";
	public static final String USER_RECOVERPASSWORD_VALIDATE = "user.recoverpassword.validate";
	public static final String USER_LIST = "user.list";
	public static final String USER_SEARCH_KARMA = "user.search.karma";
	public static final String USER_NOT_FOUND = "user.not.found";

	public static final String VIEWCOMMON_LOGIN = "viewcommon.login";

	public static final String ADMIN_INDEX = "admin.index";
	public static final String ADMIN_MENU = "admin.menu";
	public static final String ADMIN_MAIN = "admin.main";

	public static final String ATTACHMENTS_CONFIG = "attachments.config";
	public static final String ATTACHMENTS_QUOTA_LIMIT = "attachments.quota.limit";
	public static final String ATTACHMENTS_EXTENSION_GROUPS = "attachments.extension.groups";
	public static final String ATTACHMENTS_EXTENSIONS = "attachments.extensions";

	public static final String CACHE_LIST = "cache.list";
	public static final String CACHE_POST_MOREINFO = "cache.post.moreinfo";
	public static final String CACHE_TOPICS_MOREINFO = "cache.topics.moreinfo";

	public static final String CATEGORY_LIST = "category.list";
	public static final String CATEGORY_INSERT = "category.insert";
	public static final String CATEGORY_EDIT = "category.edit";

	public static final String CONFIG_LIST = "config.list";

	public static final String FORUM_ADMIN_LIST = "forum.admin.list";
	public static final String FORUM_ADMIN_INSERT = "forum.admin.insert";
	public static final String FORUM_ADMIN_EDIT = "forum.admin.edit";

	public static final String GROUP_LIST = "group.list";
	public static final String GROUP_INSERT = "group.insert";
	public static final String GROUP_EDIT = "group.edit";
	public static final String GROUP_PERMISSIONS = "group.permissions";

	public static final String MODERATION_ADMIN_LIST = "moderation.admin.list";
	public static final String MODERATION_ADMIN_VIEW = "moderation.admin.view";

	public static final String RANKING_LIST = "ranking.list";
	public static final String RANKING_INSERT = "ranking.insert";
	public static final String RANKING_EDIT = "ranking.edit";

	public static final String SMILIES_INSERT = "smilies.insert";
	public static final String SMILIES_EDIT = "smilies.edit";
	public static final String SMILIES_LIST = "smilies.list";

	public static final String USER_ADMIN_COMMON = "user.admin.common";
	public static final String USER_ADMIN_PERMISSIONS = "user.admin.permissions";
	public static final String USER_ADMIN_EDIT = "user.admin.edit";
	public static final String USER_ADMIN_GROUPS = "user.admin.groups";
	public static final String USER_ADMIN_PENDING_ACTIVATIONS = "user.admin.pending.activations";

	public static final String BANNER_LIST = "banner.list";
	public static final String BANNER_INSERT = "banner.insert";
	public static final String BANNER_EDIT = "banner.edit";

	public static final String RSS = "rss";
	public static final String EMPTY = "empty";

	public static final String INSTALL_WELCOME = "install.welcome";
	public static final String INSTALL_CHECK_INFO = "install.check.info";
	public static final String INSTALL_ERROR = "install.error";
	public static final String INSTALL_FINISHED = "install.finished";

	public static final String API_USER_LIST = "api.user.list";
	public static final String API_USER_INSERT = "api.user.insert";
	public static final String API_ERROR = "api.error";
	public static final String API_POST_INSERT = "api.post.insert";
	public static final String AGREEMENT_LIST = "agreement.list";
	public static final String ACTIVATE_ACCOUNT_MANUAL = "activate.account.manual";

	public static final String BANLIST_LIST = "banlist.list";
	public static final String BANLIST_INSERT = "banlist.insert";
	public static final String MODERATION_SHOW_ACTIVITY_LOG = "moderation.show.activity.log";

    public static final String BOARD_STATS_LIST = "boardStats.list";
    public static final String BOARD_STATS_SHOW_LAST = "boardStats.showLast";

    public static final String SPAM_BLOCK_LIST = "spamBlock.list";

    public static final String REG_EMAIL_LIST = "regEmail.list";

	public static final String SEARCH_STATS_LIST = "search.stats.list";
	public static final String SEARCH_STATS_NOT_ENABLED = "search.stats.not.enabled";
	public static final String AJAX_PREVIEW_POST = "ajax.preview.post";
	public static final String AJAX_IS_POST_INDEXED = "ajax.is.post.indexed";
	public static final String AJAX_TEST_MAIL = "ajax.test.mail";
	public static final String AJAX_LOAD_POST = "ajax.load.post";
    public static final String AJAX_JSON = "ajax.json";

}

../jforum2-code/src/main/java/net/jforum/util/preferences/VariableExpander.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on May 31, 2004 by pieter
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.util.preferences;

import java.util.HashMap;
import java.util.Map;

/**
 * @author Pieter Olivier
 * @author Rafael Steil
 */
public class VariableExpander
{
	private transient final VariableStore variables;

	private transient final String pre;
	private transient final String post;

	private transient final Map<String, String> cache;

	public VariableExpander(final VariableStore variables, final String pre, final String post)
	{
		this.variables = variables;
		this.pre = pre;
		this.post = post;
		cache = new HashMap<>();
	}

	public void clearCache()
	{
		cache.clear();
	}

	public String expandVariables(final String source)
	{
		String result = this.cache.get(source);

		if (source == null || result != null) {
			return result;
		}

		int fIndex = source.indexOf(this.pre);

		if (fIndex == -1) {
			return source;
		}

		final StringBuilder stringBuffer = new StringBuilder(source);

		while (fIndex > -1) {
			final int lIndex = stringBuffer.indexOf(this.post);

			final int start = fIndex + this.pre.length();

			if (fIndex == 0) {
				final String varName = stringBuffer.substring(start, start + lIndex - this.pre.length());
				stringBuffer.replace(fIndex, fIndex + lIndex + 1, this.variables.getVariableValue(varName));
			}
			else {
				final String varName = stringBuffer.substring(start, lIndex);
				stringBuffer.replace(fIndex, lIndex + 1, this.variables.getVariableValue(varName));
			}

			fIndex = stringBuffer.indexOf(this.pre);
		}

		result = stringBuffer.toString();

		this.cache.put(source, result);

		return result;
	}
}

../jforum2-code/src/main/java/net/jforum/util/preferences/SystemGlobalsListener.java
/*
 * Copyright (c) JForum Team
 * 
 * All rights reserved.
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 05/06/2004 13:48:34
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.util.preferences;

import org.apache.log4j.Level;
import org.apache.log4j.Logger;

import net.jforum.util.FileChangeListener;

/**
 * Listener for changed file events.
 * <p>
 * On change of the registered resource file the global settings are re-initialized
 * by calling SystemGlobals.initGlobals.
 * <p> 
 * @author Rafael Steil
 * @version $Id$
 */
public class SystemGlobalsListener implements FileChangeListener
{
    private static final Logger LOGGER = Logger.getLogger(SystemGlobalsListener.class);

    /** 
     * @see net.jforum.util.FileChangeListener#fileChanged(java.lang.String)
     */
    @Override public void fileChanged(final String filename)
    {
    	if (LOGGER.isEnabledFor(Level.INFO)) {
    		LOGGER.info("File change detected: "+ filename); 
    	}

        SystemGlobals.initGlobals(SystemGlobals.getApplicationPath(),
                                  SystemGlobals.getValue(ConfigKeys.DEFAULT_CONFIG));
    }
}

../jforum2-code/src/main/java/net/jforum/util/preferences/Preferences.java
package net.jforum.util.preferences;

import java.util.prefs.BackingStoreException;

/**
 * A utility class to access Java's Preferences API
 */

public class Preferences {

	private static java.util.prefs.Preferences prefRoot = java.util.prefs.Preferences.userNodeForPackage(Preferences.class);

    public static boolean getBooleanValue (final String key, final boolean defaultValue) {
        return prefRoot.getBoolean(key, defaultValue);
    }

    public static int getIntValue (final String key, final int defaultValue) {
        return prefRoot.getInt(key, defaultValue);
    }

    public static String getStringValue (final String key, final String defaultValue) {
        return prefRoot.get(key, defaultValue);
    }

    public static void setValue (final String key, final boolean value) throws BackingStoreException {
        prefRoot.putBoolean(key, value);
		prefRoot.flush();
    }

    public static void setValue (final String key, final int value) throws BackingStoreException {
        prefRoot.putInt(key, value);
		prefRoot.flush();
	}

    public static void setValue (final String key, final String value) throws BackingStoreException {
        prefRoot.put(key, value);
		prefRoot.flush();
	}
}


../jforum2-code/src/main/java/net/jforum/util/legacy/clickstream/BotChecker.java
package net.jforum.util.legacy.clickstream;

import java.util.Iterator;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import net.jforum.util.legacy.clickstream.config.ClickstreamConfig;
import net.jforum.util.legacy.clickstream.config.ConfigLoader;

/**
 * Determines if a request is actually a bot or spider.
 * 
 * @author <a href="plightbo@hotmail.com">Patrick Lightbody</a>
 * @author Rafael Steil (little hacks for JForum)
 */
public class BotChecker
{
	/**
	 * Checks if we have a bot
	 * @param request the request
	 * @return <code>null</code> if there is no bots in the current request, or the bot's name otherwise
	 */
	public static String isBot(HttpServletRequest request) 
	{
		if (request.getRequestURI().indexOf("robots.txt") != -1) {
			// there is a specific request for the robots.txt file, so we assume
			// it must be a robot (only robots request robots.txt)
			return "Unknown (asked for robots.txt)";
		}

		String userAgent = request.getHeader("User-Agent");

		ClickstreamConfig config = ConfigLoader.getInstance().getConfig();

		if (userAgent != null && config != null) {
			List<String> agents = config.getBotAgents();

			userAgent = userAgent.toLowerCase();

			for (Iterator<String> iterator = agents.iterator(); iterator.hasNext(); ) {
				String agent = iterator.next();

				if (agent == null) {
					continue;
				}

				if (userAgent.indexOf(agent) != -1) {
					return userAgent;
				}
			}
		}

		String remoteHost = request.getRemoteHost(); // requires a DNS lookup

		if (remoteHost != null && remoteHost.length() > 0 && remoteHost.charAt(remoteHost.length() - 1) > 64) {
			List<String> hosts = config.getBotHosts();

			remoteHost = remoteHost.toLowerCase();

			for (Iterator<String> iterator = hosts.iterator(); iterator.hasNext(); ) {
				String host = iterator.next();

				if (host == null) {
					continue;
				}

				if (remoteHost.indexOf(host) != -1) {
					return remoteHost;
				}
			}
		}

		return null;
	}
}

../jforum2-code/src/main/java/net/jforum/util/legacy/clickstream/ClickstreamFilter.java
package net.jforum.util.legacy.clickstream;

import java.io.IOException;

import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;

import org.apache.log4j.Logger;

import net.jforum.util.preferences.ConfigKeys;

/**
 * The filter that keeps track of a new entry in the clickstream for <b>every request</b>.
 * 
 * @author <a href="plightbo@hotmail.com">Patrick Lightbody</a>
 * @author Rafael Steil (little hacks for JForum)
 * @version $Id$
 */
public class ClickstreamFilter implements Filter
{
	private static final Logger LOGGER = Logger.getLogger(ClickstreamFilter.class);

	/**
	 * Attribute name indicating the filter has been applied to a given request.
	 */
	private static final String FILTER_APPLIED = "_clickstream_filter_applied";

	/**
	 * Processes the given request and/or response.
	 * 
	 * @param request The request
	 * @param response The response
	 * @param chain The processing chain
	 * @throws IOException If an error occurs
	 * @throws ServletException If an error occurs
	 */
	@Override public void doFilter(final ServletRequest request, final ServletResponse response, final FilterChain chain) throws IOException,
			ServletException
	{
		// Ensure that filter is only applied once per request.
		if (request.getAttribute(FILTER_APPLIED) == null) {
			request.setAttribute(FILTER_APPLIED, Boolean.TRUE);
			
			final String bot = BotChecker.isBot((HttpServletRequest)request);
			
			if (bot != null && LOGGER.isDebugEnabled()) {
				LOGGER.debug("Found a bot: " + bot);
			}
			
			request.setAttribute(ConfigKeys.IS_BOT, Boolean.valueOf(bot != null));
		}
		
		// Pass the request on
		chain.doFilter(request, response);
	}

	/**
	 * Initializes this filter.
	 * 
	 * @param filterConfig The filter configuration
	 * @throws ServletException If an error occurs
	 */
	@Override public void init(final FilterConfig filterConfig) throws ServletException {
		// Do nothing
	}

	/**
	 * Destroys this filter.
	 */
	@Override public void destroy() {
		// Do nothing
	}
}
../jforum2-code/src/main/java/net/jforum/util/legacy/clickstream/config/ClickstreamConfig.java
package net.jforum.util.legacy.clickstream.config;

import java.util.ArrayList;
import java.util.List;

/**
 * Clickstream configuration data.
 *
 * @author <a href="plightbo@hotmail.com">Patrick Lightbody</a>
 * @author Rafael Steil (little hacks for JForum)
 */
public class ClickstreamConfig {
    private transient final List<String> botAgents = new ArrayList<>();
    private transient final List<String> botHosts = new ArrayList<>();

    public void addBotAgent(final String agent) {
        botAgents.add(agent);
    }

    public void addBotHost(final String host) {
        botHosts.add(host);
    }

    public List<String> getBotAgents() {
        return botAgents;
    }

    public List<String> getBotHosts() {
        return botHosts;
    }
}

../jforum2-code/src/main/java/net/jforum/util/legacy/clickstream/config/ConfigLoader.java
package net.jforum.util.legacy.clickstream.config;

import java.io.File;
import java.io.IOException;

import javax.xml.XMLConstants;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;

import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.xml.sax.Attributes;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;

import net.jforum.exceptions.ConfigLoadException;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;

/**
 *Loads clickstream.xml for JForum.
 * 
 * @author <a href="plightbo@hotmail.com">Patrick Lightbody</a>
 * @author Rafael Steil (little hacks for JForum)
 * @version $Id$
 */
public class ConfigLoader
{
	private static final Logger LOGGER = Logger.getLogger(ConfigLoader.class);

	private transient ClickstreamConfig config;

	private static ConfigLoader instance = new ConfigLoader();;

	public static ConfigLoader getInstance()
	{
		return instance;
	}

	private ConfigLoader() {}

	public ClickstreamConfig getConfig()
	{
		if (this.config != null) {
			return this.config;
		}

		synchronized (instance) {
			this.config = new ClickstreamConfig();
	
			try {
				final SAXParserFactory factory = SAXParserFactory.newInstance();
				factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
	            final SAXParser parser = factory.newSAXParser();
	
				final String path = SystemGlobals.getValue(ConfigKeys.CLICKSTREAM_CONFIG);
				
				if (path != null) {
					if (LOGGER.isEnabledFor(Level.INFO)) {
						LOGGER.info("Loading clickstream config from " + path);
					}
					
					final File fileInput = new File(path);
					
					if (fileInput.exists()) {
						parser.parse(fileInput, new ConfigHandler());
					}
					else {
						parser.parse(new InputSource(path), new ConfigHandler());
					}
				}
				return config;
			}
			catch (SAXException e) {
				LOGGER.error("Could not parse clickstream XML", e);
				throw new ConfigLoadException(e.getMessage());				
			}
			catch (IOException e) {
				LOGGER.error("Could not read clickstream config from stream", e);
				throw new ConfigLoadException(e.getMessage());				
			}
			catch (ParserConfigurationException e) {
				LOGGER.fatal("Could not obtain SAX parser", e);
				throw new ConfigLoadException(e.getMessage());				
			}						
		}
	}

	/**
	 * SAX Handler implementation for handling tags in config file and building config objects.
	 */
	private class ConfigHandler extends DefaultHandler
	{
		@Override public void startElement(final String uri, final String localName, final String qName, final Attributes attributes) throws SAXException
		{
			if ("bot-host".equals(qName)) {
				config.addBotHost(attributes.getValue("name"));
			}
			else if ("bot-agent".equals(qName)) {
				config.addBotAgent(attributes.getValue("name"));
			}
		}
	}
}

../jforum2-code/src/main/java/net/jforum/util/rss/UserPostsRSS.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms,
 * with or without modification, are permitted provided
 * that the following conditions are met:
 *
 * 1) Redistributions of source code must retain the above
 * copyright notice, this list of conditions and the
 * following  disclaimer.
 * 2)  Redistributions in binary form must reproduce the
 * above copyright notice, this list of conditions and
 * the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor
 * the names of its contributors may be used to endorse
 * or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
 * IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 *
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.util.rss;

import java.util.Iterator;
import java.util.List;

import net.jforum.entities.Forum;
import net.jforum.entities.Post;
import net.jforum.repository.ForumRepository;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;
import net.jforum.view.forum.common.PostCommon;
import net.jforum.view.forum.common.ViewCommon;

/**
 * RSS for user posts
 */
public class UserPostsRSS extends GenericRSS {
    
    protected String forumLink;
    protected RSS rss;
    
    public UserPostsRSS(String title, String description, int userId, List<Post> posts) {
        forumLink = ViewCommon.getForumLink();
        rss = new RSS(title, description, SystemGlobals.getValue(ConfigKeys.ENCODING), 
                this.forumLink + "posts/listByUser/" + userId);
        prepareRSS(posts);
    }

    private void prepareRSS(List<Post> posts) {
        for (Iterator<Post> iter = posts.iterator(); iter.hasNext();) {
            Post p = iter.next();
            p.setBbCodeEnabled(true);
            p.setHtmlEnabled(false);
            p.setHtmlEnabled(false);

            Forum forum = ForumRepository.getForum(p.getForumId());

            RSSItem item = new RSSItem();
            item.setAuthor(p.getPostUsername());
            item.setContentType(RSSAware.CONTENT_HTML);
			item.setDescription(PostCommon.preparePostForDisplay(p).getText());
            item.setPublishDate(RSSUtils.formatDate(p.getTime()));
            item.setTitle("["+forum.getName()+"] " + p.getSubject());
            item.setLink(this.forumLink + "posts/preList/" + p.getTopicId() + "/" + p.getId());

            rss.addItem(item);
        }

        super.setRSS(rss);
    }
}

../jforum2-code/src/main/java/net/jforum/util/rss/HottestTopicsRSS.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Mar 2, 2005 10:50:55 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.util.rss;

import java.util.List;

import net.jforum.entities.Post;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;
import net.jforum.view.forum.common.ViewCommon;

/**
 * @author Andowson Chang
 * @version $Id$
 */
public class HottestTopicsRSS extends TopicRSS
{
	public HottestTopicsRSS(final String title, final String description, final List<Post> posts)
	{		
		super();
		super.posts = posts;
		this.forumLink = ViewCommon.getForumLink();
		
		this.rss = new RSS(title, description, SystemGlobals.getValue(ConfigKeys.ENCODING), 
			this.forumLink + "hottestTopics/list"
			+ SystemGlobals.getValue(ConfigKeys.SERVLET_EXTENSION));
		
		super.prepareRSS();
	}
}

../jforum2-code/src/main/java/net/jforum/util/rss/RSSAware.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 10/10/2004 - 19:07:55
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.util.rss;

/**
 * A RSS representation of some content.
 * 
 * @author Rafael Steil
 * @version $Id$
 */
public interface RSSAware
{
	String RSS_VERSION = "rss_2.0";
	String CONTENT_HTML = "text/html";
	String CONTENT_TEXT = "text/plain";
	
	String DATE_FORMAT = "EEE, d MMM yyyy HH:mm:ss";
	
	String createRSS() ;
}

../jforum2-code/src/main/java/net/jforum/util/rss/RSS.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 20/10/2004 22:59:58
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.util.rss;

import java.util.ArrayList;
import java.util.List;

/**
 * Represents a RSS document
 * 
 * @author Rafael Steil
 */
public class RSS 
{
	private List<RSSItem> items;
	private String title;
	private String description;
	private String encoding;
	private String link;
	
	/**
	 * Creates a new RSS document.
	 * 
	 * @param title The document title
	 * @param description The document description
	 * @param encoding The character encoding
	 * @param link The main document link
	 */
	public RSS(final String title, final String description, final String encoding, final String link)
	{
		this.items = new ArrayList<>();
		this.title = title;
		this.description = description;
		this.encoding = encoding;
		this.link = link;
	}
	
	/**
	 * Gets the main document link
	 * @return The document link
	 */
	public String getLink()
	{
		return this.link;
	}
	
	/**
	 * Gets he document title 
	 * @return The document title
	 */
	public String getTitle()
	{
		return this.title;
	}
	
	/**
	 * Gets the document description
	 * @return The document description
	 */
	public String getDescription()
	{
		return this.description;
	}
	
	/**
	 * Gets the document character encoding
	 * @return The encoding
	 */
	public String getEncoding()
	{
		return this.encoding;
	}
	
	/**
	 * Gets all <code>RSSItem</code> instances related
	 * to this RSS document.
	 * 
	 * @return <code>java.util.List</code> with the entries
	 */
	public List<RSSItem> getItems()
	{
		return this.items;
	}
	
	/**
	 * Add a new item to the RSS document
	 * 
	 * @param item <code>RSSItem</code> object containing the item information 
	 */
	public void addItem(final RSSItem item)
	{
		this.items.add(item);
	}
}

../jforum2-code/src/main/java/net/jforum/util/rss/RSSUtils.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 24/10/2004 14:37:26
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.util.rss;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;

import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;

/**
 * General utilities for RSS manipulation.
 * 
 * @author Rafael Steil
 * @version $Id$
 */
public final class RSSUtils 
{
	/**
	 * Formats a given date to the expected RSS format
	 * @param date The date to format
	 * @return The formatted date
	 */
	public static String formatDate(final Date date)
	{
		final SimpleDateFormat sdf = new SimpleDateFormat(SystemGlobals.getValue(ConfigKeys.RSS_DATE_TIME_FORMAT), Locale.ENGLISH);
		return sdf.format(date);
	}
	
	/**
	 * Formats a given date to the expected RSS format
	 * @param date The date to format
	 * @return The formatted date, or the original input if some parsing exception occurs
	 */
	public static String formatDate(final String date)
	{
		String formattdDate;
		try {
			final SimpleDateFormat sdf = new SimpleDateFormat(SystemGlobals.getValue(ConfigKeys.DATE_TIME_FORMAT), Locale.getDefault());
			formattdDate = formatDate(sdf.parse(date));
		}
		catch (ParseException e) {
			formattdDate = date;
		}
		return formattdDate;
	}
	
	private RSSUtils() {}
}

../jforum2-code/src/main/java/net/jforum/util/rss/TopicRSS.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 21/10/2004 00:10:00
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.util.rss;

import java.util.Iterator;
import java.util.List;

import net.jforum.entities.Post;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;
import net.jforum.view.forum.common.PostCommon;
import net.jforum.view.forum.common.ViewCommon;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public class TopicRSS extends GenericRSS 
{
	protected List<Post> posts;
	protected RSS rss;
	protected String forumLink;
	
	TopicRSS() {}
	
	public TopicRSS(String title, String description, int forumId, List<Post> posts)
	{
		this.posts = posts;
		this.forumLink = ViewCommon.getForumLink();
		
		this.rss = new RSS(title, description, 
			SystemGlobals.getValue(ConfigKeys.ENCODING), 
			this.forumLink + "forums/show/" + forumId 
			+ SystemGlobals.getValue(ConfigKeys.SERVLET_EXTENSION));
		
		this.prepareRSS();
	}
	
	protected void prepareRSS()
	{
		for (Iterator<Post> iter = posts.iterator(); iter.hasNext(); ) {
			Post post = iter.next();
			
			post.setBbCodeEnabled(false);
			post.setSmiliesEnabled(false);
			
			RSSItem item = new RSSItem();
			
			item.setAuthor(post.getPostUsername());
			item.setPublishDate(RSSUtils.formatDate(post.getTime()));
			item.setLink(this.forumLink + "posts/preList/" + post.getTopicId() + "/" + post.getId()
				+ SystemGlobals.getValue(ConfigKeys.SERVLET_EXTENSION));
			item.setTitle(post.getSubject());
			item.setContentType(RSSAware.CONTENT_HTML);
			item.setDescription(PostCommon.preparePostForDisplay(post).getText());
			
			this.rss.addItem(item);
		}
		
		super.setRSS(this.rss);
	}
}

../jforum2-code/src/main/java/net/jforum/util/rss/RSSItem.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 20/10/2004 22:58:48
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.util.rss;

import java.util.ArrayList;
import java.util.List;

/**
 * Represents a single RSS piece of content.
 * 
 * @author Rafael Steil
 */
public class RSSItem 
{
	private String author;
	private String link;
	private String title;
	private String description;
	private String contentType;
	private String publishDate;
	private transient final List<String> categories;
	
	public RSSItem() 
	{
		this.categories = new ArrayList<>();
	}
	
	/**
	 * Gets the item's author
	 * @return the author
	 */
	public String getAuthor() 
	{
		return this.author;
	}
	
	/**
	 * Sets the item's author
	 * @param author 
	 */
	public void setAuthor(final String author) 
	{
		this.author = author;
	}
	
	/**
	 * Gets the document's description content-type
	 * @return The content-type, generally represented by 
	 * <code>text/html</code> or <code>text/plain</code>
	 */
	public String getContentType() 
	{
		return this.contentType;
	}
	
	/**
	 * Sets the document's description content-type
	 * @param contentType <code>text/html</code> or <code>text/plain</code>
	 */
	public void setContentType(final String contentType) 
	{
		this.contentType = contentType;
	}

	/**
	 * Gets the document's description
	 * @return the description
	 */
	public String getDescription() 
	{
		return this.description;
	}
	
	/**
	 * Sets the document description
	 * @param description
	 */
	public void setDescription(final String description) 
	{
		this.description = description;
	}
	
	/**
	 * Gets the document's link 
	 * @return the link
	 */
	public String getLink() 
	{
		return this.link;
	}
	
	/**
	 * Sets the document's link
	 * @param link
	 */
	public void setLink(final String link) 
	{
		this.link = link;
	}
	
	/**
	 * Gets the document's title
	 * @return the title
	 */
	public String getTitle() 
	{
		return this.title;
	}
	
	/**
	 * Sets the document's the title
	 * @param title
	 */
	public void setTitle(final String title) 
	{
		this.title = title;
	}
	
	/**
	 * Sets the content publication date and time
	 * @param date
	 */
	public void setPublishDate(final String date)
	{
		this.publishDate = date;
	}
	
	/**
	 * Gets the document publication date
	 * @return the publishDate
	 */
	public String getPublishDate()
	{
		return this.publishDate;
	}
	
	/**
	 * Associated a new category to this item.
	 * It is possible to associate multiple categories to 
	 * each item 
	 * @param category The category name
	 */
	public void addCategory(final String category)
	{
		this.categories.add(category);
	}
	
	/**
	 * Gets the categories for this item
	 * @return the categories
	 */
	public List<String> getCategories()
	{
		return this.categories;
	}
}

../jforum2-code/src/main/java/net/jforum/util/rss/RecentTopicsRSS.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Mar 2, 2005 10:50:55 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.util.rss;

import java.util.List;

import net.jforum.entities.Post;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;
import net.jforum.view.forum.common.ViewCommon;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public class RecentTopicsRSS extends TopicRSS
{
	public RecentTopicsRSS(final String title, final String description, final List<Post> posts)
	{
		super();
		super.posts = posts;
		this.forumLink = ViewCommon.getForumLink();
		
		this.rss = new RSS(title, description, SystemGlobals.getValue(ConfigKeys.ENCODING), 
			this.forumLink + "recentTopics/list"
			+ SystemGlobals.getValue(ConfigKeys.SERVLET_EXTENSION));
		
		super.prepareRSS();
	}
}

../jforum2-code/src/main/java/net/jforum/util/rss/GenericRSS.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 31/01/2004 - 20:53:44
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.util.rss;

import java.io.StringWriter;

import freemarker.template.SimpleHash;
import freemarker.template.Template;
import net.jforum.JForumExecutionContext;
import net.jforum.exceptions.ForumException;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public class GenericRSS implements RSSAware 
{
	private transient RSS rss;
	
	protected void setRSS(final RSS rss) 
	{
		this.rss = rss;
	}
	
	@Override public String createRSS()
	{
		try
		{
			final Template template = JForumExecutionContext.getTemplateConfig().getTemplate(SystemGlobals.getValue(ConfigKeys.TEMPLATE_DIR)
					+ "/rss_template.htm");
			final StringWriter stringWriter = new StringWriter();

			final SimpleHash templateContext = JForumExecutionContext.getTemplateContext();

			templateContext.put("encoding", SystemGlobals.getValue(ConfigKeys.ENCODING));
			templateContext.put("rss", this.rss);
			template.process(templateContext, stringWriter);

			return stringWriter.toString();
		}
		catch (Exception e)
		{
			throw new ForumException(e);
		}
	}
}
../jforum2-code/src/main/java/net/jforum/util/rss/TopicPostsRSS.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 22/10/2004 00:51:36
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.util.rss;

import java.util.List;

import net.jforum.entities.Post;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;
import net.jforum.view.forum.common.ViewCommon;

/**
 * RSS for the messages of some topic
 * 
 * @author Rafael Steil
 * @version $Id$
 */
public class TopicPostsRSS extends TopicRSS 
{
	public TopicPostsRSS(final String title, final String description, final int topicId, final List<Post> posts)
	{
		super();
		this.forumLink = ViewCommon.getForumLink();
		
		super.posts = posts;
		this.rss = new RSS(title, description, 
			SystemGlobals.getValue(ConfigKeys.ENCODING),
			this.forumLink + "posts/list/" + topicId 
			+ SystemGlobals.getValue(ConfigKeys.SERVLET_EXTENSION));
		super.prepareRSS();
	}
}

../jforum2-code/src/main/java/net/jforum/util/mail/ActivationKeySpammer.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.util.mail;

import java.util.ArrayList;
import java.util.List;

import freemarker.template.SimpleHash;
import net.jforum.JForumExecutionContext;
import net.jforum.entities.User;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;
import net.jforum.view.forum.common.ViewCommon;

/**
 * @author James Young
 */
public class ActivationKeySpammer extends Spammer
{
	public ActivationKeySpammer (final User user)
	{
		super();
		//gets the url to the forum.
		final String forumLink = ViewCommon.getForumLink();

		final String url = new StringBuilder()
			.append(forumLink) 
			.append("user/activateAccount/") 
			.append(user.getActivationKey()) 
			.append('/')
			.append(user.getId()) 
			.append(SystemGlobals.getValue(ConfigKeys.SERVLET_EXTENSION))
			.toString();

		final String manualUrl = new StringBuilder()
			.append(forumLink)
			.append("user/activateManual") 
			.append(SystemGlobals.getValue(ConfigKeys.SERVLET_EXTENSION))
			.toString();

		final SimpleHash params = JForumExecutionContext.newSimpleHash();
		params.put("url", url);
		params.put("user", user);
		params.put("manualUrl", manualUrl);

		final List<User> recipients = new ArrayList<>();
		recipients.add(user);

		this.setUsers(recipients);
		this.setTemplateParams(params);

		final String subject = SystemGlobals.getValue(ConfigKeys.MAIL_ACTIVATION_KEY_SUBJECT).replaceAll("'", "\u2019");

		this.prepareMessage(subject, SystemGlobals.getValue(ConfigKeys.MAIL_ACTIVATION_KEY_MESSAGE_FILE));
	}
}

../jforum2-code/src/main/java/net/jforum/util/mail/TopicReplySpammer.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 04/03/2004 - 20:32:13
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.util.mail;

import java.text.MessageFormat;
import java.util.List;

import freemarker.template.SimpleHash;
import net.jforum.JForumExecutionContext;
import net.jforum.api.integration.mail.pop.MessageId;
import net.jforum.entities.Post;
import net.jforum.entities.Topic;
import net.jforum.entities.User;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;
import net.jforum.view.forum.common.PostCommon;
import net.jforum.view.forum.common.ViewCommon;

/**
 * Notify users of replies to existing topics
 * @author Rafael Steil
 */
public class TopicReplySpammer extends Spammer 
{
	/**
	 * Creates a new instance with a message's contents send
	 * @param topic the topic we are replying to 
	 * @param origPost the post instance, with the message's contents. If null,
	 * only a notification will be sent
	 * @param users list of users who'll be notified
	 */
	public TopicReplySpammer (final Topic topic, final Post origPost, final List<User> users)
	{
		super();
		Post post = new Post(origPost);
		// Make the topic url
		final StringBuilder page = new StringBuilder();
		final int postsPerPage = SystemGlobals.getIntValue(ConfigKeys.POSTS_PER_PAGE);

		if (topic.getTotalReplies() >= postsPerPage) {
			page.append(((topic.getTotalReplies() / postsPerPage)) * postsPerPage).append('/');
		}

		final String forumLink = ViewCommon.getForumLink();

		final String path = this.messageLink(topic, page, forumLink);
		final String unwatch = this.unwatchLink(topic, forumLink);

		final SimpleHash params = JForumExecutionContext.newSimpleHash();
		params.put("topic", topic);
		params.put("path", path);
		params.put("forumLink", forumLink);
		params.put("unwatch", unwatch);
		params.put("isWiki", topic.getType() == Topic.TYPE_WIKI);

		this.setMessageId(MessageId.buildMessageId(post.getId(), topic.getId(), topic.getForumId()));

		post = PostCommon.preparePostForDisplay(post);
		params.put("message", post.getText());

		this.setUsers(users);

		if (topic.getFirstPostId() != post.getId()) {
			this.setInReplyTo(MessageId.buildInReplyTo(topic));
		}

		this.setTemplateParams(params);
		final String subject = SystemGlobals.getValue(ConfigKeys.MAIL_NEW_ANSWER_SUBJECT).replaceAll("'", "\u2019");

		this.prepareMessage(
			MessageFormat.format(subject, new Object[] { topic.getTitle() }),
			SystemGlobals.getValue(ConfigKeys.MAIL_NEW_ANSWER_MESSAGE_FILE));
	}

	/**
	 * Creates the "unwatch" link for the current topic
	 * @param topic the topic
	 * @param forumLink the forum's link
	 * @return the unwath link
	 */
	private String unwatchLink(final Topic topic, final String forumLink)
	{
		return new StringBuilder(128)
			.append(forumLink)
			.append("posts/unwatch/")
			.append(topic.getId())
			.append(SystemGlobals.getValue(ConfigKeys.SERVLET_EXTENSION))
			.toString();
	}

	/**
	 * Creates the link to read the message online
	 * @param topic the topic
	 * @param page the current topic's page
	 * @param forumLink the forum's link
	 * @return the link to the message
	 */
	private String messageLink(final Topic topic, final StringBuilder page, final String forumLink)
	{
		return new StringBuilder(128)
			.append(forumLink)
			.append("posts/list/")
			.append(page.toString())
			.append(topic.getId()) 
			.append(SystemGlobals.getValue(ConfigKeys.SERVLET_EXTENSION))
			.append("#p")
			.append(topic.getLastPostId())
			.toString();
	}
}

../jforum2-code/src/main/java/net/jforum/util/mail/IdentifiableMimeMessage.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 03/10/2006 22:46:37
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.util.mail;

import jakarta.mail.MessagingException;
import jakarta.mail.Session;
import jakarta.mail.internet.MimeMessage;

/**
 * A {@link MimeMessage} implementation where it's possible to correctly set the Message-ID header.
 * 
 * @author Rafael Steil
 */
public class IdentifiableMimeMessage extends MimeMessage
{
	private transient String messageId;
	
	public IdentifiableMimeMessage(final Session session)
	{
		super(session);
	}
	
	/**
	 * Sets the Message-ID header for this message
	 * @param messageId the Message-ID
	 */
	public void setMessageId(final String messageId)
	{
		this.messageId = messageId;
	}
	
	/**
	 * @see jakarta.mail.internet.MimeMessage#updateMessageID()
	 */
	@Override protected void updateMessageID() throws MessagingException 
	{
		if (this.messageId == null) {
			super.updateMessageID();	
		}
		else {			
			this.setHeader("Message-ID", this.messageId);
		}
	}
}

../jforum2-code/src/main/java/net/jforum/util/mail/PrivateMessageSpammer.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 20/06/2004 03:30:58
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.util.mail;

import java.util.ArrayList;
import java.util.List;

import freemarker.template.SimpleHash;
import net.jforum.JForumExecutionContext;
import net.jforum.entities.User;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;
import net.jforum.view.forum.common.ViewCommon;

/**
 * @author Rafael Steil
 */
public class PrivateMessageSpammer extends Spammer
{
	public PrivateMessageSpammer (final User user)
	{
		super();
		if (user.getEmail() == null || user.getEmail().trim().equals("")) {
			return;
		}

		final String forumLink = new StringBuilder()
			.append(ViewCommon.getForumLink())
			.append("pm/inbox")
			.append(SystemGlobals.getValue(ConfigKeys.SERVLET_EXTENSION))
			.toString();

		final SimpleHash params = JForumExecutionContext.newSimpleHash();
		params.put("path", forumLink);
		params.put("user", user);

		final List<User> recipients = new ArrayList<>();
		recipients.add(user);

		this.setUsers(recipients);
		this.setTemplateParams(params);

		final String subject = SystemGlobals.getValue(ConfigKeys.MAIL_NEW_PM_SUBJECT).replaceAll("'", "\u2019");

		super.prepareMessage(subject, SystemGlobals.getValue(ConfigKeys.MAIL_NEW_PM_MESSAGE_FILE));
	}
}

../jforum2-code/src/main/java/net/jforum/util/mail/MailChecker.java
package net.jforum.util.mail;

import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;
import jakarta.mail.internet.AddressException;
import jakarta.mail.internet.InternetAddress;

import org.apache.log4j.Logger;

/**
 * Does some quick plausibility checks on an email. 
 */

public class MailChecker
{
	private static final Logger log = Logger.getLogger(MailChecker.class);

	private static Pattern validEmail;

	static
	{
		try
		{
			// playing fast and loose: assuming that the TLD is at most 20 characters long,
			// which is true as of December 2020 according to https://en.wikipedia.org/wiki/List_of_Internet_top-level_domains
			validEmail = Pattern.compile("^\\S+@([-\\w]+\\.){1,4}[a-z]{2,20}$");
		}
		catch (PatternSyntaxException psex)
		{
			log.error("mail checking regexp could not be initialized");
		}
	}

	public static boolean checkEmail (String email)
	{
		if (email == null) {
			return false;
        }
		email = email.trim().toLowerCase();
		if (email.isEmpty()) {
			return false;
        }

		// InternetAddress would not catch this: user@host is valid, but we don't want it
		int dotIdx = email.lastIndexOf(".");
		if (dotIdx == -1) {
			return false;
        }

		try {
			InternetAddress emailAddr = new InternetAddress(email);
			emailAddr.validate();
		} catch (AddressException ex) {
			return false;
		}

		// finally try the regex - it won't catch much, given it's a valid InternetAddress,
		// but it does ensure that the TLD has at least 2 characters, and characters only
		if (validEmail != null)
		{
			Matcher match = validEmail.matcher(email);
			return match.find();
		}

		return true;
	}
}

../jforum2-code/src/main/java/net/jforum/util/mail/ForumNewTopicSpammer.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 04/03/2004 - 20:32:13
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.util.mail;

import java.text.MessageFormat;
import java.util.List;

import freemarker.template.SimpleHash;
import net.jforum.JForumExecutionContext;
import net.jforum.entities.Forum;
import net.jforum.entities.Post;
import net.jforum.entities.Topic;
import net.jforum.entities.User;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;
import net.jforum.view.forum.common.PostCommon;
import net.jforum.view.forum.common.ViewCommon;

/**
 * @author Rafael Steil
 */
public class ForumNewTopicSpammer extends Spammer 
{
	public ForumNewTopicSpammer (final Forum forum, final Topic topic, final Post origPost, final List<User> users)
	{
		super();
		Post post = origPost;
		final String forumLink = ViewCommon.getForumLink();
		final String path = this.postLink(topic, forumLink);
		final String unwatch = this.unwatchLink(forum, forumLink);

		final SimpleHash params = JForumExecutionContext.newSimpleHash();
		params.put("topic", topic);
		params.put("path", path);
		params.put("forumLink", forumLink);
		params.put("unwatch", unwatch);

		this.setUsers(users);

		if (post != null) {
			post = PostCommon.preparePostForDisplay(post);
			params.put("message", post.getText());
		}

		this.setTemplateParams(params);

		final String subject = SystemGlobals.getValue(ConfigKeys.MAIL_NEW_TOPIC_SUBJECT).replaceAll("'", "\u2019");

		super.prepareMessage(
			MessageFormat.format(subject, new Object[] { topic.getTitle() }),
			SystemGlobals.getValue(ConfigKeys.MAIL_NEW_TOPIC_MESSAGE_FILE));
	}

	/**
	 * @param forum
	 * @param forumLink
	 * @return
	 */
	private String unwatchLink(final Forum forum, final String forumLink)
	{
		final String unwatch = new StringBuilder(128)
			.append(forumLink)
			.append("forums/unwatchForum/")
			.append(forum.getId())
			.append(SystemGlobals.getValue(ConfigKeys.SERVLET_EXTENSION))
			.toString();
		return unwatch;
	}

	/**
	 * @param topic
	 * @param forumLink
	 * @return
	 */
	private String postLink(final Topic topic, final String forumLink)
	{
		final String path = new StringBuilder(128)
			.append(forumLink)
			.append("posts/list/")
			.append(topic.getId()) 
			.append(SystemGlobals.getValue(ConfigKeys.SERVLET_EXTENSION))
			.append("#p")
			.append(topic.getLastPostId())
			.toString();
		return path;
	}
}

../jforum2-code/src/main/java/net/jforum/util/mail/Spammer.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 03/03/2004 - 20:29:45
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.util.mail;

import java.io.File;
import java.io.IOException;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.Date;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.List;
import java.util.Properties;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import jakarta.mail.Address;
import jakarta.mail.Header;
import jakarta.mail.Message;
import jakarta.mail.MessagingException;
import jakarta.mail.Session;
import jakarta.mail.Transport;
import jakarta.mail.event.TransportEvent;
import jakarta.mail.event.TransportListener;
import jakarta.mail.internet.InternetAddress;
import jakarta.mail.internet.MimeMessage;

import net.markenwerk.utils.mail.dkim.DkimMessage;
import net.markenwerk.utils.mail.dkim.DkimSigner;

import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;

import freemarker.template.SimpleHash;
import freemarker.template.Template;
import freemarker.template.TemplateException;
import net.jforum.JForumExecutionContext;
import net.jforum.entities.User;
import net.jforum.exceptions.MailException;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;
import net.jforum.util.stats.StatsEvent;

/**
 * Dispatch emails to the world. 
 * 
 * @author Rafael Steil
 */
public class Spammer
{
	private static final Logger LOGGER = Logger.getLogger(Spammer.class);

	private static final int MESSAGE_HTML = 0;
	private static final int MESSAGE_TEXT = 1;

	// the regex looks for a property in form "prop_key.name=propValue"
	private static final Pattern EXTRA_PROPS_PATTERN = Pattern.compile("([\\p{IsAlphabetic}0-9_\\-\\.]*)=(.*)$");

	private static String signingDomain = SystemGlobals.getValue(ConfigKeys.MAIL_DKIM_SIGNING_DOMAIN);
	private static String selector = SystemGlobals.getValue(ConfigKeys.MAIL_DKIM_SELECTOR);
	private static String derFile = SystemGlobals.getValue(ConfigKeys.MAIL_DKIM_DER_FILE);
	private static String identity = SystemGlobals.getValue(ConfigKeys.MAIL_DKIM_IDENTITY);

	private int messageFormat;
	private Session session;
	private String username;
	private String password;

	private Properties mailProps = new Properties();
	private MimeMessage message;
	private List<User> users = new ArrayList<>();
	private String messageId;
	private String inReplyTo;
	private boolean needCustomization;
	private SimpleHash templateParams;
	private Template template;

	protected Spammer() throws MailException
	{
		final boolean ssl = SystemGlobals.getBoolValue(ConfigKeys.MAIL_SMTP_SSL);

		final String hostProperty = this.hostProperty(ssl);
		final String portProperty = this.portProperty(ssl);
		final String authProperty = this.authProperty(ssl);
		final String localhostProperty = this.localhostProperty(ssl);

		mailProps.put(hostProperty, SystemGlobals.getValue(ConfigKeys.MAIL_SMTP_HOST));
		mailProps.put(portProperty, SystemGlobals.getValue(ConfigKeys.MAIL_SMTP_PORT));

		String localhost = SystemGlobals.getValue(ConfigKeys.MAIL_SMTP_LOCALHOST);
		
		if (StringUtils.isNotEmpty(localhost)) {
			LOGGER.debug("localhost="+localhost);
			mailProps.put(localhostProperty, localhost);
		}
		
		mailProps.put("mail.mime.charset", SystemGlobals.getValue(ConfigKeys.MAIL_CHARSET));
		mailProps.put(authProperty, SystemGlobals.getValue(ConfigKeys.MAIL_SMTP_AUTH));
		applyExtraMailProperties();

		username = SystemGlobals.getValue(ConfigKeys.MAIL_SMTP_USERNAME);
		password = SystemGlobals.getValue(ConfigKeys.MAIL_SMTP_PASSWORD);

		messageFormat = SystemGlobals.getValue(ConfigKeys.MAIL_MESSAGE_FORMAT).trim().equals("html") 
			? MESSAGE_HTML
			: MESSAGE_TEXT;

		this.session = Session.getInstance(mailProps);
	}

	/**
	 * Check if there any extra mail parameters to be applied to mailProps before attempting to
	 * connect to the mail server. Uses a regex matcher to avoid malformed strings.
	 */
	private void applyExtraMailProperties() {
		String mailProperties = SystemGlobals.getValue(ConfigKeys.MAIL_SMTP_ADDITIONAL_PROPERTIES);

		// if there are extra SMTP parameters to process
		if (!StringUtils.isEmpty(mailProperties)) {
			String[] propKeyVals = mailProperties.split(",");
			for (String keyVal : propKeyVals) {
				Matcher keyValMatcher = EXTRA_PROPS_PATTERN.matcher(keyVal);
				if (keyValMatcher.matches()) {
					String key = keyValMatcher.group(1).trim();
					String value = keyValMatcher.group(2).trim();
					LOGGER.debug("Additional SMTP property: " + key + "=" + value);
					mailProps.put(key, value);
				} else {
					LOGGER.warn("Property " + keyVal + " is not valid");
				}
			}
		}
	}

	public boolean dispatchMessages()
	{
        try
        {
            int sendDelay = SystemGlobals.getIntValue(ConfigKeys.MAIL_SMTP_DELAY);

			if (SystemGlobals.getBoolValue(ConfigKeys.MAIL_SMTP_AUTH)) {
				if (StringUtils.isNotEmpty(username) && StringUtils.isNotEmpty(password)) {
                	boolean ssl = SystemGlobals.getBoolValue(ConfigKeys.MAIL_SMTP_SSL);

                    Transport transport = this.session.getTransport(ssl ? "smtps" : "smtp");
					/*
					transport.addTransportListener(new TransportListener() {
						@Override
						public void messagePartiallyDelivered (TransportEvent e) {
	                       	LOGGER.debug("messagePartiallyDelivered "+e.toString());
						}

						@Override
						public void messageNotDelivered (TransportEvent e) {
	                       	LOGGER.debug("messageNotDelivered "+e.toString());
						}

						@Override
						public void messageDelivered (TransportEvent e) {
	                       	LOGGER.debug("messageDelivered "+e.toString());
						}
					});
					*/

                    try {
	                    String host = SystemGlobals.getValue(ConfigKeys.MAIL_SMTP_HOST);

	                    transport.connect(host, username, password);

	                    if (transport.isConnected()) {
	                        for (Iterator<User> userIter = this.users.iterator(); userIter.hasNext(); ) {
	                        	User user = userIter.next();

	                        	if (this.needCustomization) {
	                        		this.defineUserMessage(user);
	                        	}

	                        	if (StringUtils.isNotEmpty(user.getEmail())) {
	                        		Address address = new InternetAddress(user.getEmail());	                        	
	                        		LOGGER.debug("Sending mail to: " + user.getEmail());	                        	
	                        		this.message.setRecipient(Message.RecipientType.TO, address);	                            
									this.message.saveChanges();
									new StatsEvent("Sent email", user.getEmail()).record();

									//Enumeration headers = this.message.getAllHeaders();
									//while (headers.hasMoreElements()) {
									//	Header hdr = (Header) headers.nextElement();
									//	LOGGER.debug(hdr.getName()+"="+hdr.getValue());
									//}

									// no point in trying DKIM if the relevant properties have not been set
									MimeMessage msg = this.message;
									if (StringUtils.isNotEmpty(signingDomain) && StringUtils.isNotEmpty(derFile)) {
										try {
											DkimSigner dkimSigner = new DkimSigner(signingDomain, selector, new File(derFile));
											dkimSigner.setIdentity(identity);
											/*
											dkimSigner.setHeaderCanonicalization(Canonicalization.SIMPLE);
											dkimSigner.setBodyCanonicalization(Canonicalization.RELAXED);
											dkimSigner.setSigningAlgorithm(SigningAlgorithm.SHA256_WITH_RSA);
											dkimSigner.setLengthParam(true);
											dkimSigner.setCopyHeaderFields(false);
											*/
											msg = new DkimMessage(msg, dkimSigner);
										} catch (Exception ex) {
											LOGGER.warn("Can't use DKIM: "+ex.getMessage());
										}
									}

	                        		transport.sendMessage(msg, new Address[] { address });
	                        	}
	                        	if (sendDelay > 0) {
		                        	try {
		                            	Thread.sleep(sendDelay);
		                            } catch (InterruptedException ie) {
		                            	LOGGER.error("Error while Thread.sleep." + ie, ie);
		                            }
	                        	}
	                        }
	                    }
                    } catch (Exception e) {
                    	throw new MailException(e);
                    }
                    finally {
                    	try { transport.close(); } catch (Exception e) { LOGGER.error(e); }
                    }
                }
            }
            else {
            	for (Iterator<User> iter = this.users.iterator(); iter.hasNext();) {
                	User user = iter.next();

                	if (this.needCustomization) {
                		this.defineUserMessage(user);
                	}

                	if (StringUtils.isNotEmpty(user.getEmail())) {
                		Address address = new InternetAddress(user.getEmail());
                		LOGGER.debug("Sending mail to: " + user.getEmail());
                		this.message.setRecipient(Message.RecipientType.TO,address);
						this.message.saveChanges();
						new StatsEvent("Sent email", user.getEmail()).record();
                		Transport.send(this.message, new Address[] { address });
                	}
                    if (sendDelay > 0) {
	                    try {
	                    	Thread.sleep(sendDelay);
	                    } catch (InterruptedException ie) {
	                    	LOGGER.error("Error while Thread.sleep." + ie, ie);
	                    }
                    }
                }
            }
        }
        catch (MessagingException e) {
            LOGGER.error("Error while dispatching the message. " + e, e);
        }

        return true;
	}

	private void defineUserMessage(final User user)
	{
		try {
			this.templateParams.put("user", user);

			String text = this.processTemplate();
			int oldMessageFormat = messageFormat;
			if (user.notifyText()) {
				messageFormat = MESSAGE_HTML;
			}
			this.defineMessageText(text);
			messageFormat = oldMessageFormat;
		}
		catch (Exception e) {
			throw new MailException(e);
		}
	}

	/**
	 * Prepares the mail message for sending.
	 * 
	 * @param subject the subject of the email
	 * @param messageFile the path to the mail message template
	 * @throws MailException
	 */
	protected void prepareMessage(final String subject, final String messageFile) throws MailException
	{
		if (this.messageId != null) {
			this.message = new IdentifiableMimeMessage(session);
			((IdentifiableMimeMessage)this.message).setMessageId(this.messageId);
		} else {
			this.message = new MimeMessage(session);
		}

		this.templateParams.put("forumName", SystemGlobals.getValue(ConfigKeys.FORUM_NAME));

		try {
			this.message.setSentDate(new Date());
			this.message.setFrom(new InternetAddress(SystemGlobals.getValue(ConfigKeys.MAIL_SENDER)));
			this.message.setSubject(subject, SystemGlobals.getValue(ConfigKeys.MAIL_CHARSET));

			if (this.inReplyTo != null) {
				this.message.addHeader("In-Reply-To", this.inReplyTo);
			}

			this.createTemplate(messageFile);
			this.needCustomization = this.isCustomizationNeeded();

			// If we don't need to customize any part of the message, 
			// then build the generic text right now
			if (!this.needCustomization) {
				String text = this.processTemplate();
				this.defineMessageText(text);
			}
		} catch (Exception e) {
			throw new MailException(e);
		}
	}
	
	/**
	 * Set the text contents of the email we're sending
	 * @param text the text to set
	 * @throws MessagingException
	 */
	private void defineMessageText(final String text) throws MessagingException
	{
		String charset = SystemGlobals.getValue(ConfigKeys.MAIL_CHARSET);

		if (messageFormat == MESSAGE_HTML) {
			this.message.setContent(text.replaceAll("\n", "<br>"), "text/html; charset=" + charset);
		} else {
			this.message.setText(text, charset, "text/plain");
		}
	}

	/**
	 * Gets the message text to send in the email.
	 * 
	 * @param messageFile The optional message file to load the text. 
	 * @throws Exception
	 */
	protected void createTemplate(final String messageFile) throws IOException
	{
		String templateEncoding = SystemGlobals.getValue(ConfigKeys.MAIL_TEMPLATE_ENCODING);

		if (StringUtils.isEmpty(templateEncoding)) {
			this.template = JForumExecutionContext.getTemplateConfig().getTemplate(messageFile);
		}
		else {
			this.template = JForumExecutionContext.getTemplateConfig().getTemplate(messageFile, templateEncoding);
		}
	}

	/**
	 * Merge the template data, creating the final content.
	 * This method should only be called after {@link #createTemplate(String)}
	 * and {@link #setTemplateParams(SimpleHash)}
	 * 
	 * @return the generated content
	 * @throws IOException 
	 * @throws TemplateException 
	 */
	protected String processTemplate() throws TemplateException, IOException
	{
		StringWriter writer = new StringWriter();
		this.template.process(this.templateParams, writer);
		return writer.toString();
	}
	
	/**
	 * Set the parameters for the template being processed
	 * @param params the parameters to the template
	 */
	protected void setTemplateParams(SimpleHash params)
	{
		this.templateParams = params;
	}
	
	/**
	 * Check if we have to send customized emails
	 * @return true if there is a need for customized emails
	 */
	private boolean isCustomizationNeeded()
	{
		boolean need = false;
		
		for (Iterator<User> iter = this.users.iterator(); iter.hasNext(); ) {
			User user = iter.next();

			if (user.notifyText()) {
				need = true;
				break;
			}
		}
		
		return need;
	}
	
	protected void setMessageId(final String messageId)
	{
		this.messageId = messageId;
	}
	
	protected void setInReplyTo(final String inReplyTo)
	{
		this.inReplyTo = inReplyTo;
	}
	
	protected void setUsers(final List<User> users)
	{
		this.users = users;
	}

	private String localhostProperty(final boolean ssl)
	{
		return ssl 
			? ConfigKeys.MAIL_SMTP_SSL_LOCALHOST
			: ConfigKeys.MAIL_SMTP_LOCALHOST;
	}

	private String authProperty(final boolean ssl)
	{
		return ssl 
			? ConfigKeys.MAIL_SMTP_SSL_AUTH
			: ConfigKeys.MAIL_SMTP_AUTH;
	}

	private String portProperty(final boolean ssl)
	{
		return ssl 
			? ConfigKeys.MAIL_SMTP_SSL_PORT
			: ConfigKeys.MAIL_SMTP_PORT;
	}

	private String hostProperty(final boolean ssl)
	{
		return ssl 
			? ConfigKeys.MAIL_SMTP_SSL_HOST
			: ConfigKeys.MAIL_SMTP_HOST;
	}
}

../jforum2-code/src/main/java/net/jforum/util/mail/LostPasswordSpammer.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 19/04/2004 - 21:11:42
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.util.mail;

import java.util.ArrayList;
import java.util.List;

import freemarker.template.SimpleHash;
import net.jforum.JForumExecutionContext;
import net.jforum.entities.User;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;
import net.jforum.view.forum.common.ViewCommon;

/**
 * @author Rafael Steil
 */
public class LostPasswordSpammer extends Spammer
{
	public LostPasswordSpammer (final User user) 
	{
		super();
		final String forumLink = ViewCommon.getForumLink();

		final String url = new StringBuilder()
			.append(forumLink)
			.append("user/recoverPassword/")
			.append(user.getActivationKey()) 
			.append(SystemGlobals.getValue(ConfigKeys.SERVLET_EXTENSION))
			.toString();

		final SimpleHash params = JForumExecutionContext.newSimpleHash();
		params.put("url", url);
		params.put("user", user);

		final List<User> recipients = new ArrayList<>();
		recipients.add(user);

		this.setUsers(recipients);
		this.setTemplateParams(params);

		final String subject = SystemGlobals.getValue(ConfigKeys.MAIL_LOST_PASSWORD_SUBJECT).replaceAll("'", "\u2019");

		super.prepareMessage(subject, SystemGlobals.getValue(ConfigKeys.MAIL_LOST_PASSWORD_MESSAGE_FILE));
	}
}

../jforum2-code/src/main/java/net/jforum/util/mail/EmailSenderTask.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 03/03/2004 - 21:25:09
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.util.mail;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public class EmailSenderTask implements Runnable
{
	private final transient Spammer spammer;

	public EmailSenderTask(final Spammer spammer)
	{
		this.spammer = spammer;
	}

	/**
	 * @see java.lang.Runnable#run()
	 */
	@Override public void run()
	{
		this.spammer.dispatchMessages();
	}
}

../jforum2-code/src/main/java/net/jforum/util/log/LoggerHelper.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 01.11.2013 by Heri
 * The JForum Project
 * http://www.jforum.net
 */

package net.jforum.util.log;

import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;

import org.apache.commons.io.FileUtils;
import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.apache.log4j.xml.DOMConfigurator;


/**
 * Utilities for helping with Log4j
 * <p>
 * @author Heri
 */

public final class LoggerHelper
{

    /**
     * Checks if the log4j framework is fully initialized, i.e. if at least one appender
     * can be found in the repository.
     * <p>
     * If it is not properly initialized means that Log4j's auto-configuration did not find
     * a suitable config file. In this case JForum copies its log4j_template.xml into 
     * the classpath as log4j.xml in order that Log4j finds it the next time. This config
     * file is then used for re-configuring log4j by invoking its DOMConfigurator.
     * <p>
     * Any throwable is caught and printed onto console.
     * <p>
     * 
     * @param templateDir
     *        folder where the log4j_template.xml can be found
     * @param classpathDir
     *        a folder on the classpath (i.e. WEB-INF/classes).
     */
    public static void checkLoggerInitialization( String templateDir, String classpathDir )
    {
        try
        {
            if ( loggerFrameworkFullyConfigured() ) {
                return;
            }

            new LoggerHelper().provideJForumLogConfig( templateDir, classpathDir );
        }
        catch ( Throwable e )
        {
            System.err.println( "JForum: problems initializing the logger: " + e.getMessage() );
            e.printStackTrace();
        }
    }

    /**
     * Tries to copy the log4j_template.xml file into the classpath, renames it to log4j.xml
     * and performs a reconfiguration of Log4j by invoking the DOMConfigurator.
     * <p>
     * If one of the assumptions is not fulfilled the DOMConfigurator is invoked with the
     * template file unless the the template cannot be found. In latter case an Exception is thrown.
     * <p>
     * @param templateDir
     *        folder where the log4j_template.xml can be found
     * @param classpathDir
     *        a folder on the classpath (i.e. WEB-INF/classes).
     * @throws Exception
     *         if the template file cannot be found.
     */
    void provideJForumLogConfig( String templateDir, String classpathDir ) throws Exception
	{
        File template = checkTemplate( templateDir );
        File dest = null;
        try
        {
            //checkClasspathDir( classpathDir );
            dest = checkDestFile( classpathDir );
        }
        catch ( Throwable e )
        {
            System.err.println( "JForum: " + e.getMessage() );
            e.printStackTrace();
            System.out.println( "JForum: Going to initialize logger with " + template );
            dest = template;
        }
        if ( template != dest )
        {
            FileUtils.copyFile( template, dest, true );
        }
        DOMConfigurator.configure( dest.toURI().toURL() );
	}

    /**
     * Checks if the file log4j_template.xml can be found in given directory.
     * <p>
     * If not found also the file log4j.xml is evaluated.
     * <p>
     * @param aTemplateDir
     *        folder where the file is to be expected
     * @return an initialized File object.
     * @throws Exception
     *         if neither log4j.xml nor log4j_template.xml can be found
     */
    File checkTemplate( String aTemplateDir ) throws Exception
    {
        File template = new File( aTemplateDir, "log4j_template.xml" );
        if ( !template.exists() )
        {
            // maybe old installation which still has log4j.xml in WEB-INF:
            File firstTemplate = template;
            template = new File( aTemplateDir, "log4j.xml" );
            if ( !template.exists() )
            {
                throw new Exception( "template not found: \"" + firstTemplate + "\"" );
            }
        }
        return template;
    } 

    /**
     * Checks if the folder exists and is a classpath folder.
     * <p>
     * @param aClasspathDir
     * @throws Exception if either not exists, is not a folder or not a classpath folder.
     */
    void checkClasspathDir( String aClasspathDir ) throws Exception
    {
        checkFolderExists( aClasspathDir );

        Enumeration<URL> urls = ClassLoader.getSystemResources( "net" );
        File netRes = new File( aClasspathDir, "net" );
        while ( urls.hasMoreElements() )
        {
            URL url = urls.nextElement();
            if (url.toString().equals(netRes.toURI().toURL().toString()))
            {
                return;
            }
        }

        throw new Exception( "given folder is not classpath: \"" + aClasspathDir + "\"" );
    }

    /**
     * Checks if the given folder name exists and is a directory
     * <p>
     * @param aFolder
     * @throws Exception
     *         if either does not exist or is not a directory
     */
    void checkFolderExists( String aFolder ) throws Exception
    {
        File destDir = new File( aFolder );
        if ( !destDir.exists() )
        {
            throw new Exception( "folder does not exist: \"" + aFolder + "\"" );
        }
        if ( !destDir.isDirectory() )
        {
            throw new Exception( "given folder is not directory: \"" + aFolder + "\"" );
        }
    }

    /**
     * Builds a File object by using the given folder plus "log4j.xml".
     * <p>
     * First some checks are done:
     * <ul>
     *   <li>if given folder is a classpath at all</li>
     *   <li>if the file already exists there</li>
     * </ul> 
     * In the former case an Exception is thrown, in the latter case the file is 
     * renamed to log4j.xml.bak because we assume that it is a corrupt log4j 
     * config file (it will be replaced by our template, see caller).
     * <p>
     * 
     * @param aFolder
     * @return
     * @throws IOException
     * @throws Exception
     * @throws MalformedURLException
     */
    File checkDestFile( String aFolder ) throws Exception
    {
        File dest = new File( aFolder, "log4j.xml" );
        if ( dest.exists() )
        {
            /*
             * Note: if we reach here, it means that the found log4j.xml has no appenders configured.
             */
            throw new Exception( dest.getPath() + " already exists in classpath" );
        }

        return dest;
    }

    /**
     * Tests if the logger is configured. Returns <code>true</code>
     * if there is at least one appender found.
     * <p>
     * Since this method loads itself the LogManager it is ensured that it executes its built in 
     * auto-configuration (unless not yet done before).
     * <p>
     * @return <code>true</code> if at least one appender is configured.
     */
    static boolean loggerFrameworkFullyConfigured()
    {
        if ( LogManager.getRootLogger().getAllAppenders().hasMoreElements() )
        {
            return true;
        }

        List<Logger> loggers = getCurrentLoggers();
        for ( Logger logger : loggers )
        {
            if ( logger.getAllAppenders().hasMoreElements() )
            {
                // at least one appender found
                return true;
            }
        }

        return false;
    }

    /**
     * Retrieves the current loggers.
     * <p>
     * @return
     */
    private static List<Logger> getCurrentLoggers()
    {
        List<Logger> result = new ArrayList<>();
        @SuppressWarnings( "rawtypes")
        Enumeration loggers = LogManager.getCurrentLoggers();
        while ( loggers.hasMoreElements() )
        {
            Logger logger = (Logger) loggers.nextElement();
            result.add( logger );
        }

        return result;
    }
}

../jforum2-code/src/main/java/net/jforum/util/stats/Stats.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms,
 * with or without modification, are permitted provided
 * that the following conditions are met:
 *
 * 1) Redistributions of source code must retain the above
 * copyright notice, this list of conditions and the
 * following  disclaimer.
 * 2)  Redistributions in binary form must reproduce the
 * above copyright notice, this list of conditions and
 * the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor
 * the names of its contributors may be used to endorse
 * or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
 * IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 *
 * The JForum Project
 * http://www.jforum.net
 */

package net.jforum.util.stats;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.concurrent.ConcurrentHashMap;

import org.greenrobot.eventbus.EventBus;
import org.greenrobot.eventbus.Subscribe;

import net.jforum.util.BoundedLinkedHashMap;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;

/**
 * Collect generic performance statistics. Stores timestamped records in a ring buffer.
 */
public class Stats {
    
	private static Stats INSTANCE = new Stats();
    private Map<String, Data> buffers = new ConcurrentHashMap<>();
    private Date restartTime = new Date();

	public static void init() {
		EventBus.getDefault().register(INSTANCE);
	}
	
	public static void stop() {
		for (Map.Entry<String, Data> entry : INSTANCE.buffers.entrySet()) {
			entry.getValue().buffer.clear();
		}
		INSTANCE.buffers.clear();
		
		EventBus.getDefault().unregister(INSTANCE);
	}

    public static Data getStatsFor(String tag) {
		INSTANCE.buffers.putIfAbsent(tag, new Data());
        return INSTANCE.buffers.get(tag);
    }

	/* called by EventBus */
	@Subscribe
	public void onEvent(StatsEvent event) {
        if (active()) {
            getStatsFor(event.getTag()).record(event.getData());
        }
	}

    public static boolean active() {
        return SystemGlobals.getBoolValue(ConfigKeys.STATS_ACTIVE);
    }

    public static List<Record> getRecords() {
        List<Record> result = new ArrayList<Record>();
        for (Map.Entry<String, Data> entry : INSTANCE.buffers.entrySet()) {
            Record r = new Record();
            r.tag = entry.getKey();
            Data data = entry.getValue();
            r.count = data.count;
            if (data.buffer.size() > 0) {
                long first = data.buffer.keySet().iterator().next().getTime();
                long interval = System.currentTimeMillis() - first;
                r.cps = data.buffer.size() / ((double) interval) * 60000.;
            }
			result.add(r);
		}
		result.sort(null);
        return result;
    }

    public static Date getRestartTime() {
        return INSTANCE.restartTime;
    }

    public static class Record implements Comparable<Object> {
        private String tag;
        private double cps;
        private long count;

        public String getTag() {
            return tag;
        }

        public double getCps() {
            return cps;
        }

        public long getCount() {
            return count;
        }
        
        public boolean isDetailForbidden() {
            return ForbidDetailDisplay.isForbidden(tag);
        }

		@Override public int compareTo (Object rec) {
			return tag.compareTo(((Record) rec).tag);
		}

		@Override public boolean equals (Object rec) {
			if ((rec == null) || ! (rec instanceof Record))
				return false;

			if (rec == this) return true;

			return 0 == ((Record) rec).compareTo(this);
		}

		@Override public int hashCode() {
			return Objects.hash( tag, Double.valueOf(cps), Long.valueOf(count) );
		}
    }

    public static class Data {
        private long count;
        private Map<Date, Object> buffer;
        private static final String LINK = "<a href='%s'>%s</a>";

        private Data() {
            int size = SystemGlobals.getIntValue(ConfigKeys.STATS_RING_SIZE);
            buffer = Collections.synchronizedMap(new BoundedLinkedHashMap<Date, Object>(size));
        }

        public long getCount() {
            return count;
        }

        void record(Object datum) {
            if (datum != null && datum.toString().startsWith("http")) {
                datum = String.format(LINK, datum, datum);
            }
            buffer.put(new Date(), datum);
            ++count;
        }

        public Map<Date, Object> getValues() {
            return buffer;
        }
    }
    
    public static enum ForbidDetailDisplay {
        SENT_PMS ("Sent private message");

        private final String value;

        private ForbidDetailDisplay (String value) {
            this.value = value;
        }

        @Override public String toString() {
            return value;
        }

        public static boolean isForbidden (String candidate) {
            for (ForbidDetailDisplay forbidden : ForbidDetailDisplay.values()) {
                if ( forbidden.toString().equals(candidate)) {
                    return true;
                }
            }
            return false;
        }
    }
}

../jforum2-code/src/main/java/net/jforum/util/stats/StatsEvent.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms,
 * with or without modification, are permitted provided
 * that the following conditions are met:
 *
 * 1) Redistributions of source code must retain the above
 * copyright notice, this list of conditions and the
 * following  disclaimer.
 * 2)  Redistributions in binary form must reproduce the
 * above copyright notice, this list of conditions and
 * the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor
 * the names of its contributors may be used to endorse
 * or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
 * IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 *
 * The JForum Project
 * http://www.jforum.net
 */

package net.jforum.util.stats;

import org.greenrobot.eventbus.EventBus;

public class StatsEvent {

	private static EventBus eventBus = EventBus.getDefault();

	private String tag;
	private Object data;

	public StatsEvent (String tag, Object data) {
		this.tag = tag;
		this.data = data;
	}

	public void record() {
		eventBus.post(this);
	}

	public String getTag() {
		return tag;
	}

	public Object getData() {
		return data;
	}
}


../jforum2-code/src/main/java/net/jforum/util/concurrent/Executor.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 17/03/2007 20:36:18
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.util.concurrent;

import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

import org.apache.log4j.Level;
import org.apache.log4j.Logger;

/**
 * @author Rafael Steil
 * @author Andowson Chang
 */
public final class Executor
{
	private static final Logger LOGGER = Logger.getLogger(Executor.class);
	private static ThreadPoolExecutor poolExecutor = new ThreadPoolExecutor(2, 10, 1000 * 60 * 10, TimeUnit.MILLISECONDS, new ArrayBlockingQueue<Runnable>(5));
	
	public static void execute(final Runnable runnable) {
		try {
			poolExecutor.execute(runnable);
		}
		catch (Exception e) {
			if (LOGGER.isEnabledFor(Level.ERROR)) {
				LOGGER.error("Exception while running task: " + e, e);
			}
		}
	}
	
	private Executor() {}
}

../jforum2-code/src/main/java/net/jforum/util/image/ImageUtils.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.

 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:

 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 21/04/2004 - 19:54:16
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.util.image;

import java.awt.Dimension;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.awt.image.PixelGrabber;
import java.io.File;
import java.io.IOException;
import java.util.Iterator;
import java.util.Locale;

import javax.imageio.IIOImage;
import javax.imageio.ImageIO;
import javax.imageio.ImageWriteParam;
import javax.imageio.ImageWriter;
import javax.imageio.plugins.jpeg.JPEGImageWriteParam;
import javax.imageio.stream.ImageOutputStream;

import net.jforum.exceptions.ForumException;

/**
 * Utilities methods for image manipulation. It does not support writing of GIF images, but it can
 * read from. GIF images will be saved as PNG.
 * 
 * @author Rafael Steil
 * @version $Id$
 */
public class ImageUtils
{
	public static final int IMAGE_UNKNOWN = -1;
	public static final int IMAGE_JPEG = 0;
	public static final int IMAGE_PNG = 1;
	public static final int IMAGE_GIF = 2;

	/**
	 * Resizes an image
	 * 
	 * @param imgName The image name to resize. Must be the complete path to the file
	 * @param type int
	 * @param maxWidth The image's max width
	 * @param maxHeight The image's max height
	 * @return A resized <code>BufferedImage</code>
	 */
	public static BufferedImage resizeImage(String imgName, int type, int maxWidth, int maxHeight)
	{
		try {
			return resizeImage(ImageIO.read(new File(imgName)), type, maxWidth, maxHeight);
		}
		catch (IOException e) {
			throw new ForumException(e);
		}
	}

	/**
	 * Resizes an image.
	 * 
	 * @param image
	 *            The image to resize
	 * @param maxWidth
	 *            The image's max width
	 * @param maxHeight
	 *            The image's max height
	 * @return A resized <code>BufferedImage</code>
	 * @param type
	 *            int
	 */
	public static BufferedImage resizeImage(BufferedImage image, int type, int maxWidth, int maxHeight)
	{
		Dimension largestDimension = new Dimension(maxWidth, maxHeight);

		// Original size
		int imageWidth = image.getWidth(null);
		int imageHeight = image.getHeight(null);

		float aspectRatio = (float) imageWidth / imageHeight;

		if (imageWidth > maxWidth || imageHeight > maxHeight) {
			if ((float) largestDimension.width / largestDimension.height > aspectRatio) {
				largestDimension.width = (int) Math.ceil(largestDimension.height * aspectRatio);
			}
			else {
				largestDimension.height = (int) Math.ceil(largestDimension.width / aspectRatio);
			}

			imageWidth = largestDimension.width;
			imageHeight = largestDimension.height;
		}

		return createHeadlessSmoothBufferedImage(image, type, imageWidth, imageHeight);
	}

	/**
	 * Saves an image to the disk.
	 * 
	 * @param image  The image to save
	 * @param toFileName The filename to use
	 * @param type The image type. Use <code>ImageUtils.IMAGE_JPEG</code> to save as JPEG images,
	 *  or <code>ImageUtils.IMAGE_PNG</code> to save as PNG.
	 * @return <code>false</code> if no appropriate writer is found
	 */
	public static boolean saveImage(BufferedImage image, String toFileName, int type)
	{
		try {
			return ImageIO.write(image, type == IMAGE_JPEG ? "jpg" : "png", new File(toFileName));
		}
		catch (IOException e) {
			throw new ForumException(e);
		}
	}

	/**
	 * Compress and save an image to the disk. Currently this method only supports JPEG images.
	 * 
	 * @param image The image to save
	 * @param toFileName The filename to use
	 * @param type The image type. Use <code>ImageUtils.IMAGE_JPEG</code> to save as JPEG images,
	 * or <code>ImageUtils.IMAGE_PNG</code> to save as PNG.
	 */
	public static void saveCompressedImage(BufferedImage image, String toFileName, int type)
	{
		try {
			if (type == IMAGE_PNG) {
				throw new UnsupportedOperationException("PNG compression not implemented");
			}

			Iterator<ImageWriter> iter = ImageIO.getImageWritersByFormatName("jpg");
			ImageWriter writer;
			writer = iter.next();

			ImageOutputStream ios = ImageIO.createImageOutputStream(new File(toFileName));
			writer.setOutput(ios);

			ImageWriteParam iwparam = new JPEGImageWriteParam(Locale.getDefault());

			iwparam.setCompressionMode(ImageWriteParam.MODE_EXPLICIT);
			iwparam.setCompressionQuality(0.7F);

			writer.write(null, new IIOImage(image, null, null), iwparam);

			ios.flush();
			writer.dispose();
			ios.close();
		}
		catch (IOException e) {
			throw new ForumException(e);
		}
	}

	/**
	 * Creates a <code>BufferedImage</code> from an <code>Image</code>. This method can
	 * function on a completely headless system. This especially includes Linux and Unix systems
	 * that do not have the X11 libraries installed, which are required for the AWT subsystem to
	 * operate. This method uses nearest neighbor approximation, so it's quite fast. Unfortunately,
	 * the result is nowhere near as nice looking as the createHeadlessSmoothBufferedImage method.
	 * 
	 * @param image  The image to convert
	 * @param origType The image type 
	 * @param width The desired image width
	 * @param height The desired image height
	 * @return The converted image
	 */
	public static BufferedImage createHeadlessBufferedImage(BufferedImage image, int origType, int width, int height)
	{
		int type = origType;
		if (type == ImageUtils.IMAGE_PNG && hasAlpha(image)) {
			type = BufferedImage.TYPE_INT_ARGB;
		}
		else {
			type = BufferedImage.TYPE_INT_RGB;
		}

		BufferedImage bi = new BufferedImage(width, height, type);

		for (int y = 0; y < height; y++) {
			for (int x = 0; x < width; x++) {
				bi.setRGB(x, y, image.getRGB(x * image.getWidth() / width, y * image.getHeight() / height));
			}
		}

		return bi;
	}

	/**
	 * Creates a <code>BufferedImage</code> from an <code>Image</code>. This method can
	 * function on a completely headless system. This especially includes Linux and Unix systems
	 * that do not have the X11 libraries installed, which are required for the AWT subsystem to
	 * operate. The resulting image will be smoothly scaled using bilinear filtering.
	 * 
	 * @param source The image to convert
	 * @param origType The image type 
	 * @param width The desired image width
	 * @param height The desired image height
	 * @return The converted image

	 */
	public static BufferedImage createHeadlessSmoothBufferedImage(BufferedImage source, int origType, int width, int height)
	{
		int type = origType;
		if (type == ImageUtils.IMAGE_PNG && hasAlpha(source)) {
			type = BufferedImage.TYPE_INT_ARGB;
		}
		else {
			type = BufferedImage.TYPE_INT_RGB;
		}

		BufferedImage dest = new BufferedImage(width, height, type);

		int sourcex;
		int sourcey;

		double scalex = (double) width / source.getWidth();
		double scaley = (double) height / source.getHeight();

		int x1;
		int y1;

		double xdiff;
		double ydiff;

		int rgb;
		int rgb1;
		int rgb2;

		for (int y = 0; y < height; y++) {
			sourcey = y * source.getHeight() / dest.getHeight();
			ydiff = scale(y, scaley) - sourcey;

			for (int x = 0; x < width; x++) {
				sourcex = x * source.getWidth() / dest.getWidth();
				xdiff = scale(x, scalex) - sourcex;

				x1 = Math.min(source.getWidth() - 1, sourcex + 1);
				y1 = Math.min(source.getHeight() - 1, sourcey + 1);

				rgb1 = getRGBInterpolation(source.getRGB(sourcex, sourcey), source.getRGB(x1, sourcey), xdiff);
				rgb2 = getRGBInterpolation(source.getRGB(sourcex, y1), source.getRGB(x1, y1), xdiff);

				rgb = getRGBInterpolation(rgb1, rgb2, ydiff);

				dest.setRGB(x, y, rgb);
			}
		}

		return dest;
	}

	private static double scale(int point, double scale)
	{
		return point / scale;
	}

	private static int getRGBInterpolation(int value1, int value2, double distance)
	{
		int alpha1 = (value1 & 0xFF000000) >>> 24;
		int red1 = (value1 & 0x00FF0000) >> 16;
		int green1 = (value1 & 0x0000FF00) >> 8;
		int blue1 = (value1 & 0x000000FF);

		int alpha2 = (value2 & 0xFF000000) >>> 24;
		int red2 = (value2 & 0x00FF0000) >> 16;
		int green2 = (value2 & 0x0000FF00) >> 8;
		int blue2 = (value2 & 0x000000FF);

		int rgb = ((int) (alpha1 * (1.0 - distance) + alpha2 * distance) << 24)
			| ((int) (red1 * (1.0 - distance) + red2 * distance) << 16)
			| ((int) (green1 * (1.0 - distance) + green2 * distance) << 8)
			| (int) (blue1 * (1.0 - distance) + blue2 * distance);

		return rgb;
	}

	/**
	 * Determines if the image has transparent pixels.
	 * 
	 * @param image The image to check for transparent pixel.s
	 * @return <code>true</code> of <code>false</code>, according to the result
	 */
	public static boolean hasAlpha(Image image)
	{
		try {
			PixelGrabber pg = new PixelGrabber(image, 0, 0, 1, 1, false);
			pg.grabPixels();

			return pg.getColorModel().hasAlpha();
		}
		catch (InterruptedException e) {
			return false;
		}
	}
}

../jforum2-code/src/main/java/net/jforum/api/integration/mail/pop/POPConnector.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 21/08/2006 21:08:19
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.api.integration.mail.pop;

import java.util.Arrays;
import java.util.Properties;

import jakarta.mail.Flags.Flag;
import jakarta.mail.Folder;
import jakarta.mail.Message;
import jakarta.mail.Session;
import jakarta.mail.Store;

import org.apache.log4j.Logger;

import net.jforum.entities.MailIntegration;
import net.jforum.exceptions.MailException;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;

/**
 * Handles the connection to the POP server.
 * 
 * @author Rafael Steil
 * @version $Id$
 */
public class POPConnector
{
	private static final Logger LOGGER = Logger.getLogger(POPConnector.class);
	
	private transient Store store;
	private transient Folder folder;
	private transient MailIntegration mailIntegration;
	private transient Message[] messages;
	
	/**
	 * @param mailIntegration the {@link MailIntegration} instance with 
	 * all the information necessary to connect to the pop server
	 */
	public void setMailIntegration(final MailIntegration mailIntegration)
	{
		this.mailIntegration = mailIntegration;
	}
	
	/**
	 * Lists all available messages in the pop server
	 * @return Array of {@link Message}'s
	 */
	public Message[] listMessages()
	{
		try {
			this.messages = this.folder.getMessages();
			return Arrays.copyOf(this.messages, this.messages.length);
		}
		catch (Exception e) {
			throw new MailException(e);
		}
	}
	
	/**
	 * Opens a connection to the pop server. 
	 * The method will try to retrieve the <i>INBOX</i> folder in 
	 * <i>READ_WRITE</i> mode
	 */
	public void openConnection()
	{
		try {
			final Properties props = new Properties();
			// fix DEBUG POP3: server doesn't support TOP, disabling it
			props.setProperty(ConfigKeys.MAIL_POP3_DISABLETOP, SystemGlobals.getValue(ConfigKeys.MAIL_POP3_DISABLETOP));
			final Session session = Session.getDefaultInstance(props);
			
			this.store = session.getStore(this.mailIntegration.isSsl() ? "pop3s" : "pop3");

			this.store.connect(this.mailIntegration.getPopHost(), 
					this.mailIntegration.getPopPort(), 
					this.mailIntegration.getPopUsername(),
					this.mailIntegration.getPopPassword());
			
			this.folder = this.store.getFolder("INBOX");
			
			if (folder == null) {
				throw new Exception("No Inbox");
			}
			
			this.folder.open(Folder.READ_WRITE);
		}
		catch (Exception e) {
			throw new MailException(e);
		}
	}
	
	/**
	 * Closes the connection to the pop server.
	 * Before finishing the communication channel, all messages
	 * are flagged for deletion.
	 */
	public void closeConnection()
	{
		final boolean deleteMessages = !SystemGlobals.getBoolValue(ConfigKeys.MAIL_POP3_DEBUG_KEEP_MESSAGES);
		this.closeConnection(deleteMessages);
	}
	
	/**
	 * Closes the connection to the pop server.
	 * @param deleteAll If true, all messages are flagged for deletion
	 */
	public void closeConnection(final boolean deleteAll)
	{
		if (deleteAll) {
			this.markAllMessagesAsDeleted();
		}
		
		if (this.folder != null) {
			try {
				this.folder.close(false);
			} catch (Exception e) {
				LOGGER.error(e.getMessage(), e);
			}
		}
		if (this.store != null) {
			try {
				this.store.close();
			} catch (Exception e) {
				LOGGER.error(e.getMessage(), e);
			}
		}
	}
	
	/**
	 * Flag all messages for deletion.
	 */
	private void markAllMessagesAsDeleted()
	{
		try {
			if (this.messages != null) {
				for (int i = 0; i < this.messages.length; i++) {
					this.messages[i].setFlag(Flag.DELETED, true);
				}
			}
		}
		catch (Exception e) {
			throw new MailException(e);
		}
	}
}

../jforum2-code/src/main/java/net/jforum/api/integration/mail/pop/MessageId.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 24/09/2006 23:04:29
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.api.integration.mail.pop;

import java.security.SecureRandom;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.log4j.Logger;

import net.jforum.entities.Topic;

/**
 * Represents the In-Reply-To and Message-ID mail header.
 * 
 * @author Rafael Steil
 * @version $Id$
 */
public class MessageId
{
	private static final Logger LOGGER = Logger.getLogger(MessageId.class);
	private static final SecureRandom RANDOM = new SecureRandom();
	private transient int topicId;
	
	/**
	 * Returns the topic id this header holds.
	 * 
	 * @return the topic id represented by this instance
	 */
	public int getTopicId()
	{
		return this.topicId;
	}
	
	/**
	 * Constructs the Message-ID header.
	 * The form is "&lt;postId.topicId.forumId.randomNumber@jforum&gt;".
	 * 
	 * @param postId the post id of this message
	 * @param topicId the topic id of this message
	 * @param forumId the forum id of this message
	 * @return the Message-ID header
	 */
	public static String buildMessageId(final int postId, final int topicId, final int forumId)
	{
		return new StringBuilder()
			.append('<')
			.append(postId)
			.append('.')
			.append(topicId)
			.append('.')
			.append(forumId)
			.append('.')
			.append(System.currentTimeMillis())
			.append(RANDOM.nextInt(999999999))
			.append("@jforum>")
			.toString();
	}

	/**
	 * Constructs the In-Reply-To header.
	 * The form is "&lt;topicFirstPostId.topicId.forumId.randomNumber@jforum&gt;".
	 *  
	 * @param topic The topic we're replying to. If should have at least the
	 * values for {@link Topic#getFirstPostId()}, {@link Topic#getId()}
	 * and {@link Topic#getForumId()}
	 * 
	 * @return the In-Reply-To header
	 */
	public static String buildInReplyTo(final Topic topic)
	{
		return buildMessageId(topic.getFirstPostId(), topic.getId(), topic.getForumId());
	}
	
	/**
	 * Parses the header, extracting the information it holds
	 * @param header the header's contents to parse
	 * @return the header information parsed
	 */
	public static MessageId parse(final String header)
	{
		final MessageId messageId = new MessageId();
		
		if (header != null) {
			// <postId.topicId.forumId.randomNumber@host>
			final Matcher matcher = Pattern.compile("<(.*?)\\.(.*?)\\.(.*?)\\.(.*?)@.*>").matcher(header);
			
			if (matcher.matches()) {
				final String str = matcher.group(2);
				
				try {
					messageId.topicId = Integer.parseInt(str);
				}
				catch (NumberFormatException e) { 
					LOGGER.error(e); 
				}
			}
		}
		
		return messageId;
	}
}

../jforum2-code/src/main/java/net/jforum/api/integration/mail/pop/POPPostAction.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 26/08/2006 22:20:46
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.api.integration.mail.pop;

import java.util.Date;
import java.util.Iterator;
import java.util.concurrent.ConcurrentHashMap;

import org.apache.log4j.Level;
import org.apache.log4j.Logger;

import net.jforum.JForumExecutionContext;
import net.jforum.SessionFacade;
import net.jforum.context.JForumContext;
import net.jforum.context.RequestContext;
import net.jforum.context.standard.StandardRequestContext;
import net.jforum.context.standard.StandardSessionContext;
import net.jforum.dao.DataAccessDriver;
import net.jforum.dao.ForumDAO;
import net.jforum.entities.Topic;
import net.jforum.entities.User;
import net.jforum.entities.UserSession;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.view.forum.PostAction;

/**
 * @author Rafael Steil
 */
public class POPPostAction
{
	private static final Logger LOGGER = Logger.getLogger(POPPostAction.class);

	public void insertMessages(final POPParser parser)
	{
		final long currentTimestamp = System.currentTimeMillis();
		int counter = 0;

		try {
			final JForumExecutionContext executionContext = JForumExecutionContext.get();

			final RequestContext request = new StandardRequestContext();
			executionContext.setForumContext(new JForumContext("/", "", request, null));

			JForumExecutionContext.set(executionContext);

			SessionFacade.setAttribute(ConfigKeys.TOPICS_READ_TIME, new ConcurrentHashMap<>());

			for (final Iterator<POPMessage> iter = parser.getMessages().iterator(); iter.hasNext(); ) {
				final POPMessage message = iter.next();
				final String sessionId = currentTimestamp + message.getSender() + counter++;

				request.getSessionContext().setAttribute(StandardSessionContext.SESSION_ID, sessionId);

				final User user = this.findUser(message.getSender());

				if (user == null) {
					if (LOGGER.isEnabledFor(Level.WARN)) {
						LOGGER.warn("Could not find user with email " + message.getSender() + ". Ignoring his message.");
					}
					continue;
				}

				try {
					final UserSession userSession = new UserSession();
					userSession.setUserId(user.getId());
					userSession.setUsername(userSession.getUsername());
					userSession.setSessionId(sessionId);
					userSession.setStartTime(new Date(System.currentTimeMillis()));

					SessionFacade.add(userSession, sessionId);
					SessionFacade.setAttribute(ConfigKeys.LOGGED, "1");

					SessionFacade.removeAttribute(ConfigKeys.LAST_POST_TIME);
					SessionFacade.setAttribute(ConfigKeys.REQUEST_IGNORE_CAPTCHA, "1");

					this.insertMessage(message, user);
				}
				finally {
					SessionFacade.remove(sessionId);
				}
			}
		}
		finally {
			JForumExecutionContext.finish();
		}
	}

	/**
	 * Calls {@link PostAction#insertSave()}
	 * @param message the mail message
	 * @param user the user who's sent the message
	 */
	private void insertMessage(final POPMessage message, final User user)
	{
		this.addDataToRequest(message, user);

		final PostAction postAction = new PostAction(JForumExecutionContext.getRequest(), JForumExecutionContext.newSimpleHash());
		postAction.insertSave();
	}

	/**
	 * Extracts information from a mail message and adds it to the request context
	 * @param message the mail message
	 * @param user the user who's sending the message
	 */
	private void addDataToRequest(final POPMessage message, final User user)
	{
		final RequestContext request = JForumExecutionContext.getRequest(); 

		request.addParameter("forum_id", Integer.toString(this.discoverForumId(message.getListEmail())));
		request.addParameter("topic_type", Integer.toString(Topic.TYPE_NORMAL));
		request.addParameter("quick", "1");
		request.addParameter("subject", message.getSubject());
		request.addParameter("message", message.getMessage());

		final int topicId = this.discoverTopicId(message);

		if (topicId > 0) {
			request.addParameter("topic_id", Integer.toString(topicId));
		}

		if (!user.isBbCodeEnabled()) {
			request.addParameter("disable_bbcode", "on");
		}

		if (!user.isSmiliesEnabled()) {
			request.addParameter("disable_smilies", "on");
		}

		if (!user.isHtmlEnabled()) {
			request.addParameter("disable_html", "on");
		}
	}

	/**
	 * Tries to extract message relationship from the headers
	 * @param message the message to extract headers from
	 * @return the topic id, if found, or 0 (zero) otherwise
	 */
	private int discoverTopicId(final POPMessage message)
	{
		int topicId = 0;

		final String inReplyTo = message.getInReplyTo();

		if (inReplyTo != null) {
			topicId = MessageId.parse(inReplyTo).getTopicId();
		}

		return topicId;
	}

	/**
	 * Given an email address, finds the forum instance associated to it
	 * @param listEmail the forum's email address to search for
	 * @return the forum's id, or 0 (zero) if nothing was found
	 */
	private int discoverForumId(final String listEmail)
	{
		final ForumDAO dao = DataAccessDriver.getInstance().newForumDAO();
		return dao.discoverForumId(listEmail);
	}

	/**
	 * Finds a user by his email address
	 * @param email the email address to use in the search
	 * @return the matching record, or null if nothing was found
	 */
	private User findUser(final String email)
	{
		return DataAccessDriver.getInstance().newUserDAO().findByEmail(email);
	}
}

../jforum2-code/src/main/java/net/jforum/api/integration/mail/pop/POPListener.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 21/08/2006 21:07:36
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.api.integration.mail.pop;

import java.util.Iterator;
import java.util.List;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

import net.jforum.dao.DataAccessDriver;
import net.jforum.entities.MailIntegration;

import org.quartz.Job;
import org.quartz.JobExecutionContext;
import org.quartz.JobExecutionException;

import org.apache.log4j.Logger;

/**
 * @author Rafael Steil
 */
public class POPListener implements Job
{
	private static final Logger LOGGER = Logger.getLogger(POPListener.class);
	private static final Lock lock = new ReentrantLock();
	protected transient POPConnector connector = new POPConnector();
	
	/**
	 * @see org.quartz.Job#execute(org.quartz.JobExecutionContext)
	 */
	@Override public void execute(final JobExecutionContext jobContext) throws JobExecutionException
	{
		if (! lock.tryLock()) {
			if (LOGGER.isDebugEnabled()) {
				LOGGER.debug("Already working. Leaving for now.");
			}
			return;
		}

		try {
			final List<MailIntegration> integrationList = DataAccessDriver.getInstance().newMailIntegrationDAO().findAll();
			final POPParser parser = new POPParser();

			for (final Iterator<MailIntegration> iter = integrationList.iterator(); iter.hasNext(); ) {
				final MailIntegration integration = iter.next();

				connector.setMailIntegration(integration);

				try {
					if (LOGGER.isDebugEnabled()) {
						LOGGER.debug("Going to check " + integration);
					}

					connector.openConnection();
					parser.parseMessages(connector);

					final POPPostAction postAction = new POPPostAction();
					postAction.insertMessages(parser);
				}
				finally {
					connector.closeConnection();
				}
			}
		} finally {
			lock.unlock();
		}
	}

	public POPConnector getConnector()
	{
		return this.connector;
	}
}

../jforum2-code/src/main/java/net/jforum/api/integration/mail/pop/POPMessage.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 21/08/2006 22:14:04
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.api.integration.mail.pop;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.Date;
import java.util.Enumeration;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import jakarta.mail.Header;
import jakarta.mail.Message;
import jakarta.mail.MessagingException;
import jakarta.mail.Multipart;
import jakarta.mail.Part;
import jakarta.mail.internet.InternetAddress;

import org.apache.log4j.Logger;

import net.jforum.exceptions.MailException;

/**
 * Represents a pop message. 
 * @author Rafael Steil
 */
public class POPMessage
{
	private static final Logger LOGGER = Logger.getLogger(POPMessage.class);
	
	private static final String IN_REPLY_TO = "In-Reply-To";
	private static final String REFERENCES = "References";
	
	private String subject;
	private Object message;
	private transient String messageContents;
	private String sender;
	private String replyTo;
	private String references;
	private String inReplyTo;
	private String contentType;
	private transient String listEmail;
	private Date sendDate;
	private Map<String, String> headers;
	
	/**
	 * Creates a new instance based on a {@link Message}
	 * @param message the message to convert from.
	 */
	public POPMessage(final Message message)
	{
		this.extract(message);
	}
	
	/**
	 * Given a {@link Message}, converts it to our internal format
	 * @param message the message to convert
	 */
	private void extract(final Message message)
	{
		try {
			this.subject = message.getSubject();
			
			this.message = message.getContent();
			this.contentType = message.getContentType();
			this.sender = ((InternetAddress)message.getFrom()[0]).getAddress();
			this.listEmail = ((InternetAddress)message.getAllRecipients()[0]).getAddress();
			this.sendDate = message.getSentDate();
				
			if (message.getReplyTo().length > 0) {
				this.replyTo = ((InternetAddress)message.getReplyTo()[0]).getAddress();
			}
			else {
				this.replyTo = this.sender;
			}
			
			this.headers = new ConcurrentHashMap<>();
			
			for (final Enumeration<?> enumeration = message.getAllHeaders(); enumeration.hasMoreElements(); ) {
				final Header header = (Header)enumeration.nextElement();
				this.headers.put(header.getName(), header.getValue());
			}
			
			if (this.headers.containsKey(IN_REPLY_TO)) {
				this.inReplyTo = this.headers.get(IN_REPLY_TO);
			}
			
			if (this.headers.containsKey(REFERENCES)) {
				this.references = this.headers.get(REFERENCES);
			}
			
			this.extractMessageContents(message);
		}
		catch (Exception e) {
			LOGGER.error(e.getMessage(), e);
		}
	}
	
	private void extractMessageContents(final Message message) throws MessagingException
	{
		Part messagePart = message;
		
		if (this.message instanceof Multipart) {
			messagePart = ((Multipart)this.message).getBodyPart(0);
		}
		
		if (contentType.startsWith("text/html")
			|| contentType.startsWith("text/plain")
			|| contentType.startsWith("multipart")) {
			InputStream inputStream = null;
			BufferedReader reader = null;
			
			try {
				inputStream = messagePart.getInputStream();
				inputStream.reset();
				reader = new BufferedReader(
					new InputStreamReader(inputStream));
				
				final StringBuilder stringBuffer = new StringBuilder(512);
				int count = 0;
				final char[] chr = new char[2048];
				
				while ((count = reader.read(chr)) != -1) {
					stringBuffer.append(chr, 0, count);
				}
				
				this.messageContents = stringBuffer.toString();
			}
			catch (IOException e) {
				throw new MailException(e);
			}
			finally {
				if (reader != null) {
					try {
						reader.close();
					} catch (Exception e) {
						LOGGER.error(e.getMessage(), e);
					}
				}
				if (inputStream != null) {
					try {
						inputStream.close();
					} catch (Exception e) {
						LOGGER.error(e.getMessage(), e);
					}
				}
			}
		}
	}
	
	public String getListEmail()
	{
		return this.listEmail;
	}

	/**
	 * @return the contentType
	 */
	public String getContentType()
	{
		return this.contentType;
	}

	/**
	 * @return the headers
	 */
	public Map<String, String> getHeaders()
	{
		return this.headers;
	}

	/**
	 * @return the inReplyTo
	 */
	public String getInReplyTo()
	{
		return this.inReplyTo;
	}

	/**
	 * @return the message
	 */
	public String getMessage()
	{
		return this.messageContents;
	}

	/**
	 * @return the references
	 */
	public String getReferences()
	{
		return this.references;
	}

	/**
	 * @return the replyTo
	 */
	public String getReplyTo()
	{
		return this.replyTo;
	}

	/**
	 * @return the sendDate
	 */
	public Date getSendDate()
	{
		return this.sendDate;
	}

	/**
	 * @return the sender
	 */
	public String getSender()
	{
		return this.sender;
	}

	/**
	 * @return the subject
	 */
	public String getSubject()
	{
		return this.subject;
	}

	/**
	 * @param contentType the contentType to set
	 */
	public void setContentType(final String contentType)
	{
		this.contentType = contentType;
	}

	/**
	 * @param headers the headers to set
	 */
	public void setHeaders(final Map<String, String> headers)
	{
		this.headers = headers;
	}

	/**
	 * @param inReplyTo the inReplyTo to set
	 */
	public void setInReplyTo(final String inReplyTo)
	{
		this.inReplyTo = inReplyTo;
	}

	/**
	 * @param message the message to set
	 */
	public void setMessage(final Object message)
	{
		this.message = message;
	}

	/**
	 * @param references the references to set
	 */
	public void setReferences(final String references)
	{
		this.references = references;
	}

	/**
	 * @param replyTo the replyTo to set
	 */
	public void setReplyTo(final String replyTo)
	{
		this.replyTo = replyTo;
	}

	/**
	 * @param sendDate the sendDate to set
	 */
	public void setSendDate(final Date sendDate)
	{
		this.sendDate = sendDate;
	}

	/**
	 * @param sender the sender to set
	 */
	public void setSender(final String sender)
	{
		this.sender = sender;
	}

	/**
	 * @param subject the subject to set
	 */
	public void setSubject(final String subject)
	{
		this.subject = subject;
	}
	
	/**
	 * @see java.lang.Object#toString()
	 */
	@Override public String toString()
	{
		return new StringBuilder()
			.append('[')
			.append("subject=").append(this.subject)
			.append(", sender=").append(this.sender)
			.append(", replyTo=").append(this.replyTo)
			.append(", references=").append(this.references)
			.append(", inReplyTo=").append(this.inReplyTo)
			.append(", contentType=").append(this.contentType)
			.append(", date=").append(this.sendDate)
			.append(", content=").append(this.messageContents)
			.append(", headers=").append(this.headers)
			.append(']')
			.toString();
	}
}

../jforum2-code/src/main/java/net/jforum/api/integration/mail/pop/POPJobStarter.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 09/10/2006 21:30:35
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.api.integration.mail.pop;

import static org.quartz.CronScheduleBuilder.cronSchedule;
import static org.quartz.JobBuilder.newJob;
import static org.quartz.TriggerBuilder.newTrigger;

import org.apache.log4j.Logger;
import org.quartz.CronTrigger;
import org.quartz.JobDetail;
import org.quartz.Scheduler;
import org.quartz.SchedulerException;
import org.quartz.impl.StdSchedulerFactory;

import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;

/**
 * @author Rafael Steil
 * @author Andowson Chang
 * @version $Id$
 */
public final class POPJobStarter
{	
	private static final Logger LOGGER = Logger.getLogger(POPJobStarter.class);
	private static Scheduler scheduler;
	private static boolean isStarted = false;	
	private static final Object MUTEX = new Object();
	
	/**
	 * Starts the main integration Job. Conditions to start: Is not started yet and is enabled on the file
	 * SystemGlobasl.properties. The key to enable it is "mail.pop3.integration.enabled"
	 * (ConfigKeys.MAIL_POP3_INTEGRATION_ENABLED).
	 * 
	 * @throws SchedulerException
	 */
	public static void startJob() throws SchedulerException
	{
		final boolean isEnabled = SystemGlobals.getBoolValue(ConfigKeys.MAIL_POP3_INTEGRATION_ENABLED);
		
		synchronized(MUTEX) {
			if (!isStarted && isEnabled) {
				final String filename = SystemGlobals.getValue(ConfigKeys.QUARTZ_CONFIG);
	
				final String cronExpression = SystemGlobals.getValue("org.quartz.context.mailintegration.cron.expression");
				scheduler = new StdSchedulerFactory(filename).getScheduler();
				
				final JobDetail job = newJob(POPListener.class).withIdentity("pop3Integration", "group1").build();

				final CronTrigger trigger = newTrigger().withIdentity("trigger2", "group1").withSchedule(cronSchedule(cronExpression)).build();

				scheduler.scheduleJob(job, trigger);
				LOGGER.info("Starting POP3 integration expression " + cronExpression);					
				scheduler.start();
			}
			
			isStarted = true;
		}
	}

	/**
	 * Stops the main integration Job. Conditions to stop: Is started and is enabled on the file
	 * SystemGlobasl.properties. The key to enable it is "mail.pop3.integration.enabled"
	 * (ConfigKeys.MAIL_POP3_INTEGRATION_ENABLED).
	 * 
	 * @throws SchedulerException
	 */
	public static void stopJob() throws SchedulerException
	{
		final boolean isEnabled = SystemGlobals.getBoolValue(ConfigKeys.MAIL_POP3_INTEGRATION_ENABLED);
		
		synchronized(MUTEX) {
			if (isStarted && isEnabled) {
				final String cronExpression = SystemGlobals.getValue("org.quartz.context.mailintegration.cron.expression");
									
				LOGGER.info("Stopping POP3 integration expression " + cronExpression);					
				scheduler.shutdown(true);				 
			}
			
			isStarted = false;
		}
		
		// avoid Tomcat report memory leak
		try {
			Thread.sleep(1000);
		} catch (InterruptedException e) {
			LOGGER.error(e.getMessage(), e);
		}
	}
	
	private POPJobStarter() {}
}

../jforum2-code/src/main/java/net/jforum/api/integration/mail/pop/POPParser.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 21/08/2006 22:00:12
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.api.integration.mail.pop;

import java.util.ArrayList;
import java.util.List;

import jakarta.mail.Message;

import org.apache.log4j.Logger;

/**
 * @author Rafael Steil
 */
public class POPParser
{
	private static final Logger LOGGER = Logger.getLogger(POPParser.class);
	
	private transient final List<POPMessage> messages = new ArrayList<>();
	
	public void parseMessages(final POPConnector connector)
	{
		final Message[] connectorMessages = connector.listMessages();
		
		for (int i = 0; i < connectorMessages.length; i++) {
			final POPMessage message = new POPMessage(connectorMessages[i]);
			this.messages.add(message);
			
			if (LOGGER.isDebugEnabled()) {
				LOGGER.debug("Retrieved message " + message);
			}
		}
	}
	
	public List<POPMessage> getMessages()
	{
		return this.messages;
	}
}

../jforum2-code/src/main/java/net/jforum/api/rest/RESTAuthentication.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 04/09/2006 21:59:39
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.api.rest;

import net.jforum.dao.ApiDAO;
import net.jforum.dao.DataAccessDriver;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public class RESTAuthentication
{
	public boolean validateApiKey(final String apiKey)
	{
		final ApiDAO dao = DataAccessDriver.getInstance().newApiDAO();
		return dao.isValid(apiKey);
	}
}

../jforum2-code/src/main/java/net/jforum/api/rest/PostREST.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 01/10/2011 14:32:22
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.api.rest;

import java.util.Date;

import org.apache.commons.lang3.StringUtils;

import freemarker.template.SimpleHash;
import freemarker.template.Template;
import net.jforum.Command;
import net.jforum.JForumExecutionContext;
import net.jforum.SessionFacade;
import net.jforum.context.RequestContext;
import net.jforum.context.ResponseContext;
import net.jforum.dao.DataAccessDriver;
import net.jforum.dao.UserDAO;
import net.jforum.entities.Post;
import net.jforum.entities.Topic;
import net.jforum.entities.User;
import net.jforum.entities.UserSession;
import net.jforum.exceptions.APIException;
import net.jforum.util.I18n;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;
import net.jforum.util.preferences.TemplateKeys;
import net.jforum.view.forum.PostAction;

/**
 * @author Andowson Chang
 *
 */
public class PostREST extends Command {

	/* (non-Javadoc)
	 * @see net.jforum.Command#list()
	 */
	@Override
	public void list() {
		try {
			this.authenticate();
			// do nothing here
			// TODO: add implementation
		}
		catch (APIException e) {
			this.setTemplateName(TemplateKeys.API_ERROR);
			this.context.put("exception", e);
		}
	}

	/**
	 * Creates a new post.
	 * Required parameters are "email", "forum_id", "subject" and "message".
	 */
	public void insert()
	{
		try {
			this.authenticate();

			final String email = this.requiredRequestParameter("email");
			final String forumId = this.requiredRequestParameter("forum_id");
			final String subject = this.requiredRequestParameter("subject");
			final String message = this.requiredRequestParameter("message");

			final UserDAO dao = DataAccessDriver.getInstance().newUserDAO();
			User user = dao.findByEmail(email);
			// If user's email not exists, use anonymous instead
			if (user == null) {
				user = new User();
				user.setId(SystemGlobals.getIntValue(ConfigKeys.ANONYMOUS_USER_ID));
				user.setUsername(I18n.getMessage("Guest"));
			}
			// OK, time to insert the post
			final UserSession userSession = SessionFacade.getUserSession();
			userSession.setUserId(user.getId());
			userSession.setUsername(user.getUsername());
			final String sessionId = userSession.getSessionId(); 
			userSession.setStartTime(new Date(System.currentTimeMillis()));
			SessionFacade.makeLogged();

			SessionFacade.removeAttribute(ConfigKeys.LAST_POST_TIME);
			SessionFacade.setAttribute(ConfigKeys.REQUEST_IGNORE_CAPTCHA, "1");

			final Post post = new Post();
			post.setForumId(Integer.parseInt(forumId));
			post.setSubject(subject);
			post.setText(message);
			this.insertMessage(user, post);
			final String postLink = JForumExecutionContext.getRedirectTo(); 
			JForumExecutionContext.setRedirect(null); 
			this.setTemplateName(TemplateKeys.API_POST_INSERT); 
			this.context.put("postLink", postLink);
			SessionFacade.makeUnlogged();
			SessionFacade.remove(sessionId);
		}
		catch (Exception e) {
			this.setTemplateName(TemplateKeys.API_ERROR);
			this.context.put("exception", e);
		}
	}

	/**
	 * Calls {@link PostAction#insertSave()}
	 * @param post the post
	 * @param user the user who's doing the post
	 */
	private void insertMessage(final User user, final Post post)
	{
		this.addDataToRequest(user, post);

		final PostAction postAction = new PostAction(JForumExecutionContext.getRequest(), JForumExecutionContext.newSimpleHash());
		postAction.insertSave();
	}

	/**
	 * Extracts information from a mail message and adds it to the request context
	 * @param post the post
	 * @param user the user who's doing the post
	 */
	private void addDataToRequest(final User user, final Post post)
	{
		final RequestContext request = JForumExecutionContext.getRequest(); 

		request.addParameter("topic_type", Integer.toString(Topic.TYPE_NORMAL));
		request.addParameter("quick", "1");

		final int topicId = post.getTopicId();
		if (topicId > 0) {
			request.addParameter("topic_id", Integer.toString(topicId));
		}

		if (!user.isBbCodeEnabled()) {
			request.addParameter("disable_bbcode", "on");
		}

		if (!user.isSmiliesEnabled()) {
			request.addParameter("disable_smilies", "on");
		}

		if (!user.isHtmlEnabled()) {
			request.addParameter("disable_html", "on");
		}
	}

	/**
	 * Retrieves a parameter from the request and ensures it exists
	 * @param paramName the parameter name to retrieve its value
	 * @return the parameter value
	 * @throws APIException if the parameter is not found or its value is empty
	 */
	private String requiredRequestParameter(final String paramName)
	{
		final String value = this.request.getParameter(paramName);

		if (StringUtils.isBlank(value)) {
			throw new APIException("The parameter '" + paramName + "' was not found");
		}

		return value;
	}

	/**
	 * Tries to authenticate the user accessing the API
	 * @throws APIException if the authentication fails
	 */
	private void authenticate()
	{
		final String apiKey = this.requiredRequestParameter("api_key");

		final RESTAuthentication auth = new RESTAuthentication();

		if (!auth.validateApiKey(apiKey)) {
			throw new APIException("The provided API authentication information is not valid");
		}
	}

	@Override public Template process(final RequestContext request, final ResponseContext response, final SimpleHash context)
	{
		JForumExecutionContext.setContentType("text/xml");
		return super.process(request, response, context);
	}
}

../jforum2-code/src/main/java/net/jforum/api/rest/UserREST.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 04/09/2006 21:23:22
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.api.rest;

import java.util.List;

import org.apache.commons.lang3.StringUtils;

import freemarker.template.SimpleHash;
import freemarker.template.Template;
import net.jforum.Command;
import net.jforum.JForumExecutionContext;
import net.jforum.context.RequestContext;
import net.jforum.context.ResponseContext;
import net.jforum.dao.DataAccessDriver;
import net.jforum.dao.UserDAO;
import net.jforum.entities.User;
import net.jforum.exceptions.APIException;
import net.jforum.repository.RegEmailRepository;
import net.jforum.util.I18n;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;
import net.jforum.util.preferences.TemplateKeys;

/**
 * @author Rafael Steil
 */
public class UserREST extends Command
{
	/**
	 * List all users
	 */
	@Override public void list()
	{
		try {
			this.authenticate();
			
			final UserDAO dao = DataAccessDriver.getInstance().newUserDAO();
			final List<User> users = dao.selectAll();
		
			this.setTemplateName(TemplateKeys.API_USER_LIST);
			this.context.put("users", users);
		}
		catch (Exception e) {
			this.setTemplateName(TemplateKeys.API_ERROR);
			this.context.put("exception", e);
		}
	}
	
	/**
	 * Creates a new user.
	 * Required parameters are "username", "email" and "password".
	 */
	public void insert()
	{
		try {
			this.authenticate();
			
			final String username = this.requiredRequestParameter("username");
			final String email = this.requiredRequestParameter("email");
			final String password = this.requiredRequestParameter("password");

			if (username.length() > SystemGlobals.getIntValue(ConfigKeys.USERNAME_MAX_LENGTH)) {
				throw new APIException(I18n.getMessage("User.usernameTooBig"));
			}

			if (username.indexOf('<') > -1 || username.indexOf('>') > -1) {
				throw new APIException(I18n.getMessage("User.usernameInvalidChars"));
			}

			final UserDAO dao = DataAccessDriver.getInstance().newUserDAO();

			if (dao.isUsernameRegistered(username)) {
				throw new APIException(I18n.getMessage("UsernameExists"));
			}

			if (dao.findByEmail(email) != null) {
				throw new APIException(I18n.getMessage("User.emailExists", new Object[] { email }));
			}

			int groupId = RegEmailRepository.canRegister(email.trim());
			if (groupId < 0) {
				throw new APIException(I18n.getMessage("User.emailInvalid", new Object[] { email }));
			}

			// OK, time to insert the user
			final User user = new User();
			user.setUsername(username);
			user.setEmail(email);
			user.setPassword(password);

			final int userId = dao.addNew(user, groupId);

			this.setTemplateName(TemplateKeys.API_USER_INSERT);
			this.context.put("userId", Integer.valueOf(userId));
		}
		catch (Exception e) {
			this.setTemplateName(TemplateKeys.API_ERROR);
			this.context.put("exception", e);
		}
	}
	
	/**
	 * Retrieves a parameter from the request and ensures it exists
	 * @param paramName the parameter name to retrieve its value
	 * @return the parameter value
	 * @throws APIException if the parameter is not found or its value is empty
	 */
	private String requiredRequestParameter(final String paramName)
	{
		final String value = this.request.getParameter(paramName);
		
		if (StringUtils.isBlank(value)) {
			throw new APIException("The parameter '" + paramName + "' was not found");
		}
		
		return value;
	}

	/**
	 * Tries to authenticate the user accessing the API
	 * @throws APIException if the authentication fails
	 */
	private void authenticate()
	{
		final String apiKey = this.requiredRequestParameter("api_key");
		
		final RESTAuthentication auth = new RESTAuthentication();
		
		if (!auth.validateApiKey(apiKey)) {
			throw new APIException("The provided API authentication information is not valid");
		}
	}
	
	@Override public Template process(final RequestContext request, final ResponseContext response, final SimpleHash context)
	{
		JForumExecutionContext.setContentType("text/xml");
		return super.process(request, response, context);
	}
}

../jforum2-code/src/main/java/net/jforum/context/SessionContext.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms,
 * with or without modification, are permitted provided
 * that the following conditions are met:
 *
 * 1) Redistributions of source code must retain the above
 * copyright notice, this list of conditions and the
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the
 * above copyright notice, this list of conditions and
 * the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor                       
 * the names of its contributors may be used to endorse
 * or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
 * IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 *
 * Created on 20.08.2006 18:38:59
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.context;

import java.util.Enumeration;

/**
 * @author SergeMaslyukov 
 * @version $Id$
 */
public interface SessionContext
{
	void setAttribute(String name, Object value);

	void removeAttribute(String name);

	Object getAttribute(String name);

	String getId();

	Enumeration<String> getAttributeNames();

	void invalidate();
}

../jforum2-code/src/main/java/net/jforum/context/RequestContext.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms,
 * with or without modification, are permitted provided
 * that the following conditions are met:
 *
 * 1) Redistributions of source code must retain the above
 * copyright notice, this list of conditions and the
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the
 * above copyright notice, this list of conditions and
 * the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor
 * the names of its contributors may be used to endorse
 * or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
 * IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 *
 *
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.context;

import java.io.UnsupportedEncodingException;
import java.util.Enumeration;
import java.util.Locale;

import javax.servlet.http.Cookie;

/**
 * @author SergeMaslyukov 
 * @version $Id$
 */
public interface RequestContext
{
	/**
	 * Returns the part of this request's URL from the protocol name up to the query string in the
	 * first line of the HTTP request. The web container does not decode this String. For example:
	 * 
	 * <table summary="Examples of Returned Values">
	 * <tr>
	 * <th align="left">First line of HTTP request</th>
	 * <th align="left">Returned Value</th>
	 * <tr>
	 * <td align="left">POST /some/path.html HTTP/1.1</td>
	 * <td align="left">/some/path.html</td>
	 * </tr>
	 * <tr>
	 * <td align="left">GET http://foo.bar/a.html HTTP/1.0</td>
	 * <td align="left">/a.html</td>
	 * </tr>
	 * <tr>
	 * <td align="left">HEAD /xyz?a=b HTTP/1.1</td>
	 * <td align="left">/xyz</td>
	 * </tr>
	 * </table>
	 * 
	 * <p>
	 * To reconstruct a URL with a scheme and host, use
	 * {@link javax.servlet.http.HttpServletRequest#getRequestURL}.
	 * 
	 * @return a <code>String</code> containing the part of the URL from the protocol name up to
	 *         the query string
	 * 
	 * @see javax.servlet.http.HttpServletRequest#getRequestURI
	 */
	String getRequestURI();

	/**
	 * Returns the query string that is contained in the request URL after the path. This method
	 * returns <code>null</code> if the URL does not have a query string. Same as the value of the
	 * CGI variable QUERY_STRING.
	 * 
	 * @return a <code>String</code> containing the query string or <code>null</code> if the URL
	 *         contains no query string. The value is not decoded by the container.
	 */
	String getQueryString();

	/**
	 * Returns the value of the specified request header as a <code>String</code>. If the request
	 * did not include a header of the specified name, this method returns <code>null</code>. If
	 * there are multiple headers with the same name, this method returns the first head in the
	 * request. The header name is case insensitive. You can use this method with any request
	 * header.
	 * 
	 * @param name
	 *            a <code>String</code> specifying the header name
	 * 
	 * @return a <code>String</code> containing the value of the requested header, or
	 *         <code>null</code> if the request does not have a header of that name
	 */
	String getHeader(String name);

	/**
	 * Returns an array containing all of the <code>Cookie</code> objects the client sent with
	 * this request. This method returns <code>null</code> if no cookies were sent.
	 * 
	 * @return an array of all the <code>Cookies</code> included with this request, or
	 *         <code>null</code> if the request has no cookies
	 */
	Cookie[] getCookies();

	/**
	 * Returns the Internet Protocol (IP) address of the client or last proxy that sent the request.
	 * For HTTP servlets, same as the value of the CGI variable <code>REMOTE_ADDR</code>.
	 * 
	 * @return a <code>String</code> containing the IP address of the client that sent the request
	 */
	String getRemoteAddr();

	/**
	 * Returns the port number to which the request was sent. It is the value of the part after ":"
	 * in the <code>Host</code> header value, if any, or the server port where the client
	 * connection was accepted on.
	 * 
	 * @return an integer specifying the port number
	 */
	int getServerPort();

	/**
	 * Returns the name of the scheme used to make this request, for example, <code>http</code>,
	 * <code>https</code>, or <code>ftp</code>. Different schemes have different rules for
	 * constructing URLs, as noted in RFC 1738.
	 * 
	 * @return a <code>String</code> containing the name of the scheme used to make this request
	 */
	String getScheme();

	/**
	 * Returns the host name of the server to which the request was sent. It is the value of the
	 * part before ":" in the <code>Host</code> header value, if any, or the resolved server name,
	 * or the server IP address.
	 * 
	 * @return a <code>String</code> containing the name of the server
	 */
	String getServerName();

	/**
	 * Removes an attribute from this request. This method is not generally needed as attributes
	 * only persist as long as the request is being handled.
	 * 
	 * <p>
	 * Attribute names should follow the same conventions as package names. Names beginning with
	 * <code>java.*</code>, <code>javax.*</code>, and <code>com.sun.*</code>, are reserved
	 * for use by Sun Microsystems.
	 * 
	 * @param name a <code>String</code> specifying the name of the attribute to remove
	 */
	void removeAttribute(String name);

	/**
	 * Stores an attribute in this request. Attributes are reset between requests. This method is
	 * most often used in conjunction with {@link javax.servlet.RequestDispatcher}.
	 * 
	 * <p>
	 * Attribute names should follow the same conventions as package names. Names beginning with
	 * <code>java.*</code>, <code>javax.*</code>, and <code>com.sun.*</code>, are reserved
	 * for use by Sun Microsystems. <br>
	 * If the object passed in is null, the effect is the same as calling {@link #removeAttribute}.
	 * <br>
	 * It is warned that when the request is dispatched from the servlet resides in a different web
	 * application by <code>RequestDispatcher</code>, the object set by this method may not be
	 * correctly retrieved in the caller servlet.
	 * 
	 * @param name a <code>String</code> specifying the name of the attribute
	 * @param obj the <code>Object</code> to be stored
	 */
	void setAttribute(String name, Object obj);

	/**
	 * Returns the value of the named attribute as an <code>Object</code>, or <code>null</code>
	 * if no attribute of the given name exists.
	 * 
	 * <p>
	 * Attributes can be set two ways. The servlet container may set attributes to make available
	 * custom information about a request. For example, for requests made using HTTPS, the attribute
	 * <code>javax.servlet.request.X509Certificate</code> can be used to retrieve information on
	 * the certificate of the client. Attributes can also be set programatically using
	 * {@link #setAttribute}. This allows information to be embedded into a request before a
	 * {@link javax.servlet.RequestDispatcher} call.
	 * 
	 * <p>
	 * Attribute names should follow the same conventions as package names. This specification
	 * reserves names matching <code>java.*</code>, <code>javax.*</code>, and
	 * <code>sun.*</code>.
	 * 
	 * @param name a <code>String</code> specifying the name of the attribute
	 * @return an <code>Object</code> containing the value of the attribute, 
	 * or <code>null</code> if the attribute does not exist
	 */

	Object getAttribute(String name);

	/**
	 * Overrides the name of the character encoding used in the body of this request. This method
	 * must be called prior to reading request parameters or reading input using getReader().
	 * 
	 * @param env a <code>String</code> containing the name of the character encoding.
	 * @throws java.io.UnsupportedEncodingException if this is not a valid encoding
	 */

	void setCharacterEncoding(String env) throws UnsupportedEncodingException;

	/**
	 * Returns the current <code>HttpSession</code> associated with this request or, if there is
	 * no current session and <code>create</code> is true, returns a new session.
	 * 
	 * <p>
	 * If <code>create</code> is <code>false</code> and the request has no valid
	 * <code>HttpSession</code>, this method returns <code>null</code>.
	 * 
	 * <p>
	 * To make sure the session is properly maintained, you must call this method before the
	 * response is committed. If the container is using cookies to maintain session integrity and is
	 * asked to create a new session when the response is committed, an IllegalStateException is
	 * thrown.
	 * 
	 * @param create <code>true</code> to create a new session for this request if necessary;
	 * <code>false</code> to return <code>null</code> if there's no current session
	 * @return the <code>HttpSession</code> associated with this request or <code>null</code> if
	 * <code>create</code> is <code>false</code> and the request has no valid session
	 * 
	 * @see #getSessionContext()
	 */

	SessionContext getSessionContext(boolean create);

	/**
	 * Returns the current session associated with this request, or if the request does not have a
	 * session, creates one.
	 * 
	 * @return the <code>HttpSession</code> associated with this request
	 * @see #getSessionContext(boolean)
	 */

	SessionContext getSessionContext();

	/**
	 * Returns the portion of the request URI that indicates the context of the request. The context
	 * path always comes first in a request URI. The path starts with a "/" character but does not
	 * end with a "/" character. For servlets in the default (root) context, this method returns "".
	 * The container does not decode this string.
	 * 
	 * @return a <code>String</code> specifying the portion of the request URI that indicates the
	 * context of the request
	 */

	String getContextPath();

	/**
	 * Returns the login of the user making this request, if the user has been authenticated, or
	 * <code>null</code> if the user has not been authenticated. Whether the user name is sent
	 * with each subsequent request depends on the browser and type of authentication. Same as the
	 * value of the CGI variable REMOTE_USER.
	 * 
	 * @return a <code>String</code> specifying the login of the user making this request, or
	 * <code>null</code> if the user login is not known
	 */

	String getRemoteUser();

	/**
	 * Gets a parameter that is a number. A call to <code>Integer#parseInt(String)</code> is made
	 * to do the conversion
	 * 
	 * @param parameter The parameter name to get the value
	 * @return int
	 */
	int getIntParameter(String parameter);

	/**
	 * Returns an array of <code>String</code> objects containing all of the values the given
	 * request parameter has, or <code>null</code> if the parameter does not exist.
	 * 
	 * <p>
	 * If the parameter has a single value, the array has a length of 1.
	 * 
	 * @param name a <code>String</code> containing the name of the parameter 
	 * whose value is requested
	 * 
	 * @return an array of <code>String</code> objects containing the parameter's values
	 * @see #getParameter
	 */
	String[] getParameterValues(String name);

	/**
	 * Returns the value of a request parameter as a <code>String</code>, or <code>null</code>
	 * if the parameter does not exist. Request parameters are extra information sent with the
	 * request. For HTTP servlets, parameters are contained in the query string or posted form data.
	 * 
	 * <p>
	 * You should only use this method when you are sure the parameter has only one value. If the
	 * parameter might have more than one value, use {@link #getParameterValues}.
	 * 
	 * <p>
	 * If you use this method with a multi-valued parameter, the value returned is equal to the first
	 * value in the array returned by <code>getParameterValues</code>.
	 * 
	 * <p>
	 * If the parameter data was sent in the request body, such as occurs with an HTTP POST request,
	 * then reading the body directly via {@link javax.servlet.ServletRequest#getInputStream} or {@link javax.servlet.ServletRequest#getReader} can
	 * interfere with the execution of this method.
	 * 
	 * @param name a <code>String</code> specifying the name of the parameter
	 * @return a <code>String</code> representing the single value of the parameter
	 * @see #getParameterValues
	 */
	String getParameter(String name);

	/**
	 * Returns an <code>Enumeration</code> of <code>String</code> objects containing the names
	 * of the parameters contained in this request. If the request has no parameters, the method
	 * returns an empty <code>Enumeration</code>.
	 * 
	 * @return an <code>Enumeration</code> of <code>String</code> objects, each
	 * <code>String</code> containing the name of a request parameter; or an empty
	 * <code>Enumeration</code> if the request has no parameters
	 */
	Enumeration<String> getParameterNames();

	/**
	 * Gets the <i>action</i> of the current request.
	 * 
	 * An <i>Action</i> is the parameter name which specifies what next action should be done by
	 * the system. It may be add or edit a post, editing the groups, whatever. In the URL, the
	 * Action can the represented in two forms:
	 * <p>
	 * <blockquote> <code>
	 * http://www.host.com/webapp/servletName?module=groups&action=list
	 * </code>
	 * </blockquote>
	 * <p>
	 * or
	 * <p>
	 * <blockquote> <code>
	 * http://www.host.com/webapp/servletName/groups/list
	 * </code> </blockquote>
	 * <p>
	 * In both situations, the action's name is "list".
	 * 
	 * @return String representing the action name
	 */
	String getAction();

	/**
	 * Gets the <i>module</i> of the current request.
	 * 
	 * A <i>Module</i> is the parameter name which specifies what module the user is requesting. It
	 * may be the group administration, the topics or anything else configured module. In the URL,
	 * the Module can the represented in two forms:
	 * <p>
	 * <blockquote> <code>
	 * http://www.host.com/webapp/servletName?module=groups&action=list
	 * </code>
	 * </blockquote>
	 * <p>
	 * or
	 * <p>
	 * <blockquote> <code>
	 * http://www.host.com/webapp/servletName/groups/list
	 * </code> </blockquote>
	 * <p>
	 * In both situations, the module's name is "groups".
	 * 
	 * @return String representing the module name
	 */
	String getModule();

	/**
	 * Adds a new parameter to the request.
	 * If there is already one parameter which name is equals to the 
	 * value of the "name" parameter, a set of values associated to that
	 * name will be generated, thus requiring a call to getParameterValues()
	 * to retrieve them all. 
	 * 
	 * If you want to <strong>replace</strong> a possible existing value, 
	 * use {@link #addOrReplaceParameter(String, Object)}
	 * 
	 * @param name Parameter name
	 * @param value Parameter value
	 */
	void addParameter(String name, Object value);
	
	/**
	 * Replace or add a parameter. If it does not exist, it is added to the list, 
	 * otherwise the existing value will be replaced by the new value. 
	 * 
	 * @param name
	 * @param value
	 */
	void addOrReplaceParameter(String name, Object value);

	/**
	 * Gets some request parameter as <code>Object</code>. This method may be used when you have
	 * to get some value of a <i>multipart/form-data</i> request, like a image of file. <br>
	 * 
	 * @param parameter String
	 * @return Object
	 */
	Object getObjectParameter(String parameter);
	
	/**
	 * Gets user browser's preferred locale(s). This method may be used during first installation
	 * to automatically switch to corresponding language I18N resource and in case where there is
	 * no preferred language defined in the user's profile (-> anonymous users)
	 * 
	 * @return Enumeration<Locale>
	 */
	Enumeration<Locale> getLocales();

	/**
	 * @return the full request URL (including http://....)
	 */
	StringBuffer getRequestURL();

	/**
	 * @return whether a mobile request or a "normal" request
	 */
	 public boolean isMobileRequest();
}

../jforum2-code/src/main/java/net/jforum/context/JForumContext.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 11.10.2004
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.context;

import net.jforum.util.preferences.ConfigKeys;

/**
 * @author Marc Wick
 * @version $Id$
 */
public class JForumContext implements ForumContext
{
	private transient final String contextPath;
	private transient final String servletExtension;
	private transient final RequestContext request;
	private transient final ResponseContext response;
	private transient final boolean encodingDisabled;
	private transient final boolean isBot;

	public JForumContext(final String contextPath, final String servletExtension, 
			final RequestContext request, final ResponseContext response)
	{
		this.contextPath = contextPath;
		this.servletExtension = servletExtension;
		this.request = request;
		this.response = response;

		final Boolean isBotObject = (Boolean) request.getAttribute(ConfigKeys.IS_BOT);
		this.isBot = (isBotObject != null && isBotObject.booleanValue());

		this.encodingDisabled = isBot;
	}

	public JForumContext(final String contextPath, final String servletExtension, 
			final RequestContext request, final ResponseContext response, final boolean encodingDisabled)
	{
		this.contextPath = contextPath;
		this.servletExtension = servletExtension;
		this.request = request;
		this.response = response;
		this.encodingDisabled = encodingDisabled;

		final Boolean isBotObject = (Boolean) request.getAttribute(ConfigKeys.IS_BOT);
		this.isBot = (isBotObject != null && isBotObject.booleanValue());
	}

	@Override public boolean isBot()
	{
		return isBot;
	}

	@Override public String encodeURL(final String url)
	{
		return this.encodeURL(url, servletExtension);
	}

	@Override public String encodeURL(final String url, final String extension)
	{
		String ucomplete = contextPath + url + extension;

		if (!isEncodingDisabled()) {
			ucomplete = response.encodeURL(ucomplete);			
		}

		return ucomplete;
	}

	@Override public boolean isEncodingDisabled()
	{
		return this.encodingDisabled;
	}

	@Override public RequestContext getRequest()
	{
		return request;
	}

	@Override public ResponseContext getResponse()
	{
		return response;
	}
}

../jforum2-code/src/main/java/net/jforum/context/ResponseContext.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms,
 * with or without modification, are permitted provided
 * that the following conditions are met:
 *
 * 1) Redistributions of source code must retain the above
 * copyright notice, this list of conditions and the
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the
 * above copyright notice, this list of conditions and
 * the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor
 * the names of its contributors may be used to endorse
 * or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
 * IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 *
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.context;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletOutputStream;
import javax.servlet.http.Cookie;

/**
 * @author SergeMaslyukov 
 * @version $Id$
 */
public interface ResponseContext
{
	/**
	 * Sets the length of the content body in the response In HTTP servlets, this method sets the
	 * HTTP Content-Length header.
	 * 
	 * @param len an integer specifying the length of the content being returned to the client; 
	 * sets the Content-Length header
	 */
	void setContentLength(int len);

	/**
	 * Returns a boolean indicating whether the named response header has already been set.
	 * 
	 * @param name the header name
	 * @return <code>true</code> if the named response header has already been set;
	 * <code>false</code> otherwise
	 */
	boolean containsHeader(String name);

	/**
	 * Sets a response header with the given name and value. If the header had already been set, the
	 * new value overwrites the previous one. The <code>containsHeader</code> method can be used
	 * to test for the presence of a header before setting its value.
	 * 
	 * @param name the name of the header
	 * @param value the header value If it contains octet string, it should be encoded 
	 * according to RFC 2047 (http://www.ietf.org/rfc/rfc2047.txt)
	 * 
	 * @see #containsHeader
	 * @see #addHeader
	 */
	void setHeader(String name, String value);

	/**
	 * Adds the specified cookie to the response. This method can be called multiple times to set
	 * more than one cookie.
	 * 
	 * @param cookie the Cookie to return to the client
	 */
	void addCookie(Cookie cookie);

	/**
	 * Encodes the specified URL for use in the <code>sendRedirect</code> method or, if encoding
	 * is not needed, returns the URL unchanged. The implementation of this method includes the
	 * logic to determine whether the session ID needs to be encoded in the URL. Because the rules
	 * for making this determination can differ from those used to decide whether to encode a normal
	 * link, this method is separated from the <code>encodeURL</code> method.
	 * 
	 * <p>
	 * All URLs sent to the <code>HttpServletResponse.sendRedirect</code> method should be run
	 * through this method. Otherwise, URL rewriting cannot be used with browsers which do not
	 * support cookies.
	 * 
	 * @param url the url to be encoded.
	 * @return the encoded URL if encoding is needed; the unchanged URL otherwise.
	 * 
	 * @see #sendRedirect
	 * @see #encodeURL
	 */
	String encodeRedirectURL(String url);

	/**
	 * Returns the name of the character encoding (MIME charset) used for the body sent in this
	 * response. The character encoding may have been specified explicitly using the
	 * {@link javax.servlet.ServletResponse#setCharacterEncoding} or {@link #setContentType} methods, or implicitly using the
	 * {@link javax.servlet.ServletResponse#setLocale} method. Explicit specifications take precedence over implicit
	 * specifications. Calls made to these methods after <code>getWriter</code> has been called or
	 * after the response has been committed have no effect on the character encoding. If no
	 * character encoding has been specified, <code>ISO-8859-1</code> is returned.
	 * <p>
	 * See RFC 2047 (http://www.ietf.org/rfc/rfc2047.txt) for more information about character
	 * encoding and MIME.
	 * 
	 * @return a <code>String</code> specifying the name of the character encoding, for example,
	 * <code>UTF-8</code>
	 * 
	 */
	String getCharacterEncoding();

	/**
	 * Sends a temporary redirect response to the client using the specified redirect location URL.
	 * This method can accept relative URLs; the servlet container must convert the relative URL to
	 * an absolute URL before sending the response to the client. If the location is relative
	 * without a leading '/' the container interprets it as relative to the current request URI. If
	 * the location is relative with a leading '/' the container interprets it as relative to the
	 * servlet container root.
	 * 
	 * <p>
	 * If the response has already been committed, this method throws an IllegalStateException.
	 * After using this method, the response should be considered to be committed and should not be
	 * written to.
	 * 
	 * @param location the redirect location URL
	 * @exception IOException If an input or output exception occurs
	 * @exception IllegalStateException If the response was committed or if a partial 
	 * URL is given and cannot be converted into a valid URL
	 */
	void sendRedirect(String location) throws IOException;

	/**
	 * Returns a {@link javax.servlet.ServletOutputStream} suitable for writing binary data in the
	 * response. The servlet container does not encode the binary data.
	 * 
	 * <p>
	 * Calling flush() on the ServletOutputStream commits the response.
	 * 
	 * Either this method or {@link #getWriter} may be called to write the body, not both.
	 * 
	 * @return a {@link javax.servlet.ServletOutputStream} for writing binary data
	 * @exception IllegalStateException if the <code>getWriter</code> method has 
	 * been called on this response
	 * @exception IOException if an input or output exception occurred
	 * @see #getWriter
	 */

	ServletOutputStream getOutputStream() throws IOException;

	/**
	 * Returns a <code>PrintWriter</code> object that can send character text to the client. The
	 * <code>PrintWriter</code> uses the character encoding returned by
	 * {@link #getCharacterEncoding}. If the response's character encoding has not been specified
	 * as described in <code>getCharacterEncoding</code> (i.e., the method just returns the
	 * default value <code>ISO-8859-1</code>), <code>getWriter</code> updates it to
	 * <code>ISO-8859-1</code>.
	 * <p>
	 * Calling flush() on the <code>PrintWriter</code> commits the response.
	 * <p>
	 * Either this method or {@link #getOutputStream} may be called to write the body, not both.
	 * 
	 * @return a <code>PrintWriter</code> object that can return character data to the client
	 * 
	 * @exception java.io.UnsupportedEncodingException if the character encoding 
	 * returned by <code>getCharacterEncoding</code> cannot be used
	 * @exception IllegalStateException if the <code>getOutputStream</code> method has 
	 * already been called for this response object
	 * @exception IOException if an input or output exception occurred
	 * 
	 * @see javax.servlet.ServletResponse#getOutputStream
	 * @see javax.servlet.ServletResponse#setCharacterEncoding
	 * 
	 */
	PrintWriter getWriter() throws IOException;

	/**
	 * Sets the content type of the response being sent to the client, if the response has not been
	 * committed yet. The given content type may include a character encoding specification, for
	 * example, <code>text/html;charset=UTF-8</code>. The response's character encoding is only
	 * set from the given content type if this method is called before <code>getWriter</code> is
	 * called.
	 * <p>
	 * This method may be called repeatedly to change content type and character encoding. This
	 * method has no effect if called after the response has been committed. It does not set the
	 * response's character encoding if it is called after <code>getWriter</code> has been called
	 * or after the response has been committed.
	 * <p>
	 * Containers must communicate the content type and the character encoding used for the servlet
	 * response's writer to the client if the protocol provides a way for doing so. In the case of
	 * HTTP, the <code>Content-Type</code> header is used.
	 * 
	 * @param type a <code>String</code> specifying the MIME type of the content
	 * 
	 * @see javax.servlet.ServletResponse#setLocale
	 * @see javax.servlet.ServletResponse#setCharacterEncoding
	 * @see javax.servlet.ServletResponse#getOutputStream
	 * @see javax.servlet.ServletResponse#getWriter
	 */
	void setContentType(String type);

	/**
	 * Encodes the specified URL by including the session ID in it, or, if encoding is not needed,
	 * returns the URL unchanged. The implementation of this method includes the logic to determine
	 * whether the session ID needs to be encoded in the URL. For example, if the browser supports
	 * cookies, or session tracking is turned off, URL encoding is unnecessary.
	 * 
	 * <p>
	 * For robust session tracking, all URLs emitted by a servlet should be run through this method.
	 * Otherwise, URL rewriting cannot be used with browsers which do not support cookies.
	 * 
	 * @param url the url to be encoded.
	 * @return the encoded URL if encoding is needed; the unchanged URL otherwise.
	 */
	String encodeURL(String url);

	/**
	 * Adds a response header with the given name and value. This method allows response headers to
	 * have multiple values.
	 * 
	 * @param name the name of the header
	 * @param value the additional header value If it contains octet string, 
	 * it should be encoded according to RFC 2047 (http://www.ietf.org/rfc/rfc2047.txt)
	 */
	void addHeader(String name, String value);

	/**
	 * Sends an error response to the client using the specified status code and clearing the
	 * buffer.
	 * <p>
	 * If the response has already been committed, this method throws an IllegalStateException.
	 * After using this method, the response should be considered to be committed and should not be
	 * written to.
	 * 
	 * @param statusCode the error status code
	 * @exception java.io.IOException If an input or output exception occurs
	 * @exception IllegalStateException If the response was committed before this method call
	 */
	void sendError(int statusCode) throws IOException;
}

../jforum2-code/src/main/java/net/jforum/context/ForumContext.java
/*
 * Copyright (c)JForum Team
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms,
 * with or without modification, are permitted provided
 * that the following conditions are met:
 *
 * 1) Redistributions of source code must retain the above
 * copyright notice, this list of conditions and the
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the
 * above copyright notice, this list of conditions and
 * the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor
 * the names of its contributors may be used to endorse
 * or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
 * IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 *
 *
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.context;

/**
 * @author SergeMaslyukov
 * @version $Id$
 */
public interface ForumContext
{
    String encodeURL(String url);

    String encodeURL(String url, String extension);

    boolean isEncodingDisabled();

    RequestContext getRequest();

    ResponseContext getResponse();

    boolean isBot();
}

../jforum2-code/src/main/java/net/jforum/context/web/WebResponseContext.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms,
 * with or without modification, are permitted provided
 * that the following conditions are met:
 *
 * 1) Redistributions of source code must retain the above
 * copyright notice, this list of conditions and the
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the
 * above copyright notice, this list of conditions and
 * the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor
 * the names of its contributors may be used to endorse
 * or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
 * IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 *
 * Created on 20.08.2006 18:52:22 
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.context.web;

import java.io.IOException;
import java.io.PrintWriter;
import java.net.URI;

import javax.servlet.ServletOutputStream;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletResponse;

import net.jforum.context.ResponseContext;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;

/**
 * @author SergeMaslyukov
 * @version $Id$
 */
public class WebResponseContext implements ResponseContext
{
	private transient final HttpServletResponse response;

	public WebResponseContext(final HttpServletResponse response)
	{
		this.response = response;
	}

	@Override public void setContentLength(final int len)
	{
		response.setContentLength(len);
	}

	@Override public boolean containsHeader(final String name)
	{
		return response.containsHeader(name);
	}

	@Override public void setHeader(final String name, final String value)
	{
		response.setHeader(name, value);
	}

	@Override public void addCookie(final Cookie cookie)
	{
		response.addCookie(cookie);
	}

	@Override public String encodeRedirectURL(final String url)
	{
		return response.encodeRedirectURL(url);
	}

	@Override public void sendRedirect(final String location) throws IOException
	{
		String newLocation = location;
		if (SystemGlobals.getBoolValue(ConfigKeys.REDIRECT_ABSOLUTE_PATHS)) {
			final URI uri = URI.create(location);
			
			if (!uri.isAbsolute()) {
				newLocation = SystemGlobals.getValue(ConfigKeys.REDIRECT_BASE_URL) + location;
			}
		}
		
		response.sendRedirect(newLocation);
	}

	@Override public String getCharacterEncoding()
	{
		return response.getCharacterEncoding();
	}

	@Override public void setContentType(final String type)
	{
		response.setContentType(type);
	}

	@Override public ServletOutputStream getOutputStream() throws IOException
	{
		return response.getOutputStream();
	}

	@Override public PrintWriter getWriter() throws IOException
	{
		return response.getWriter();
	}

	@Override public String encodeURL(final String url)
	{
		return response.encodeURL(url);
	}

	@Override public void sendError(final int statusCode) throws IOException
	{
		response.sendError(statusCode);
	}

	@Override public void addHeader(final String name, final String value)
	{
		response.addHeader(name, value);
	}
}

../jforum2-code/src/main/java/net/jforum/context/web/WebSessionContext.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms,
 * with or without modification, are permitted provided
 * that the following conditions are met:
 *
 * 1) Redistributions of source code must retain the above
 * copyright notice, this list of conditions and the
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the
 * above copyright notice, this list of conditions and
 * the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor
 * the names of its contributors may be used to endorse
 * or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
 * IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 *
 * The JForum Project
 * http://www.jforum.net
 * 20.08.2006 18:42:11 
 */
package net.jforum.context.web;

import java.util.Enumeration;

import javax.servlet.http.HttpSession;

import net.jforum.context.SessionContext;

/**
 * @author SergeMaslyukov 
 * @version $Id$
 */
public class WebSessionContext implements SessionContext
{
	private transient final HttpSession httpSession;

	public WebSessionContext(final HttpSession httpSession)
	{
		this.httpSession = httpSession;
	}

	@Override public void setAttribute(final String name, final Object value)
	{
		httpSession.setAttribute(name, value);
	}

	@Override public void removeAttribute(final String name)
	{
		httpSession.removeAttribute(name);
	}

	@Override public Object getAttribute(final String name)
	{
		return httpSession.getAttribute(name);
	}

	@Override public String getId()
	{
		return httpSession.getId();
	}

	@Override public Enumeration<String> getAttributeNames()
	{
		return httpSession.getAttributeNames();
	}

	@Override public void invalidate()
	{
		httpSession.invalidate();
	}
}

../jforum2-code/src/main/java/net/jforum/context/web/WebRequestContext.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Mar 16, 2003 / 1:31:30 AM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.context.web;

import java.io.File;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.StringTokenizer;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletRequestWrapper;

import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.FileUploadException;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.apache.commons.fileupload.servlet.ServletRequestContext;
import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;

import net.jforum.UrlPattern;
import net.jforum.UrlPatternCollection;
import net.jforum.context.RequestContext;
import net.jforum.context.SessionContext;
import net.jforum.exceptions.MultipartHandlingException;
import net.jforum.util.MobileStatus;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;

/**
 * @author Rafael Steil
 */
@SuppressWarnings("unchecked")
public class WebRequestContext extends HttpServletRequestWrapper implements RequestContext
{
	private static final Logger LOGGER = Logger.getLogger(WebRequestContext.class);

	private static final String MODULE = "module";
	private static final String ACTION = "action";

	private transient final Map<String, Object> query;

	// a mobile URL was requested
	private boolean mobileRequest = false;

	/**
	 * Default constructor.
	 * 
	 * @param superRequest Original <code>HttpServletRequest</code> instance
	 * @throws IOException
	 */
	public WebRequestContext (final HttpServletRequest superRequest) throws IOException
	{
		super(superRequest);

		this.query = new HashMap<>();
		boolean isMultipart = false;

		final String requestType = superRequest.getMethod().toUpperCase();
		final String contextPath = superRequest.getContextPath();
		String requestUri = this.extractRequestUri(superRequest.getRequestURI(), contextPath);
		final String encoding = SystemGlobals.getValue(ConfigKeys.ENCODING);
		final String servletExtension = SystemGlobals.getValue(ConfigKeys.SERVLET_EXTENSION);
		superRequest.setCharacterEncoding(encoding);

		MobileStatus mobileStatus = MobileStatus.getMobileRequest(superRequest, requestUri);
		if (mobileStatus == MobileStatus.MOBILE_PAGES_WHERE_AVAILABLE) {
		    mobileRequest = true;
		}

		final boolean isPost = "POST".equals(requestType);
		final boolean isGet = !isPost;

		final boolean isQueryStringEmpty = superRequest.getQueryString() == null 
			|| superRequest.getQueryString().length() == 0;

		if (isGet && isQueryStringEmpty && requestUri.endsWith(servletExtension)) {
			superRequest.setCharacterEncoding(encoding);
			this.parseFriendlyURL(requestUri, servletExtension);
		}
		else if (isPost) {
			isMultipart = ServletFileUpload.isMultipartContent(new ServletRequestContext(superRequest));

			if (isMultipart) {
			    this.handleMultipart(superRequest, encoding);
			}
		}

		if (!isMultipart) {
			final boolean isAjax = "XMLHttpRequest".equals(superRequest.getHeader("X-Requested-With"));

			if (isAjax) {
				// Ajax requests are *usually* sent using application/x-www-form-urlencoded; charset=UTF-8.
				// In JForum, we assume this is always true.
				superRequest.setCharacterEncoding("UTF-8");
			}
			else {
				superRequest.setCharacterEncoding(encoding);
			}

			String containerEncoding = SystemGlobals.getValue(ConfigKeys.DEFAULT_CONTAINER_ENCODING);

			if (isPost) { 
				containerEncoding = encoding;
			}
			for (final Enumeration<String> enumeration = superRequest.getParameterNames(); enumeration.hasMoreElements(); ) {
				final String name = enumeration.nextElement();

				final String[] values = superRequest.getParameterValues(name);

				if (values != null && values.length > 1) {
					for (int i = 0; i < values.length; i++) {
						this.addParameter(name, new String(values[i].getBytes(containerEncoding), encoding));
					}
				} else {
					final String value = superRequest.getParameter(name);
					// Don't write password's value to log
					if (!"password".equals(name)) {
						LOGGER.debug(name + "=" + value);
					}
					this.addParameter(name, value);
				}
			}

			if (this.getModule() == null && this.getAction() == null) {
				final int index = requestUri.indexOf('?');

				if (index > -1) {
					requestUri = requestUri.substring(0, index);
				}

				this.parseFriendlyURL(requestUri, servletExtension);
			}
		}
	}

	/**
	 * @param requestUri
	 * @param servletExtension
	 */
	private void parseFriendlyURL(final String requestUri, final String servletExtension) 
	{
		if (requestUri.length() < servletExtension.length()) {
			return;
		}
		final String uri = requestUri.substring(0, requestUri.length() - servletExtension.length());
		final String[] urlModel = uri.split("/");

		final int moduleIndex = 1;
		final int actionIndex = 2;
		int baseLen = 3;

		UrlPattern url = null;

		if (urlModel.length >= baseLen) {
			// <moduleName>.<actionName>.<numberOfParameters>
			StringBuilder stringBuffer = new StringBuilder(64)
				.append(urlModel[moduleIndex])
				.append('.')
				.append(urlModel[actionIndex])
				.append('.')
				.append(urlModel.length - baseLen);

			url = UrlPatternCollection.findPattern(stringBuffer.toString());
		}

		if (url == null) {
			this.addOrReplaceParameter(MODULE, null);
			this.addOrReplaceParameter(ACTION, null);
		} else {
			if (url.getSize() >= urlModel.length - baseLen) {
				for (int i = 0; i < url.getSize(); i++) {
					this.addParameter(url.getVars()[i], urlModel[i + baseLen]);
				}
			}

			this.addOrReplaceParameter(MODULE, urlModel[moduleIndex]);
			this.addOrReplaceParameter(ACTION, urlModel[actionIndex]);
		}
	}

    @Override public SessionContext getSessionContext(final boolean create) {
        return new WebSessionContext(this.getSession(true));
    }

    @Override public SessionContext getSessionContext() {
        return new WebSessionContext(this.getSession());
    }

    /**
	 * @param superRequest HttpServletRequest
	 * @param encoding String
	 * @throws UnsupportedEncodingException
	 */
	private void handleMultipart(final HttpServletRequest superRequest, final String encoding) throws UnsupportedEncodingException
	{
		String tmpPath = new StringBuilder(256)
		    .append(SystemGlobals.getApplicationPath())
		    .append('/')
		    .append(SystemGlobals.getValue(ConfigKeys.TMP_DIR))
		    .toString();

		File tmpDir = new File(tmpPath);
		boolean success = false;

		try {
			if (!tmpDir.exists()) {
				success = tmpDir.mkdirs();
			}
		} catch (Exception e) {
			// We won't log it because the directory creation failed for some reason - a SecurityException
			// or something else. We don't care about it, as the code below tries to use java.io.tmpdir
		}

		if (!success) {
			tmpPath = System.getProperty("java.io.tmpdir");
			tmpDir = new File(tmpPath);
		}

		ServletFileUpload upload = new ServletFileUpload(new DiskFileItemFactory(100 * 1024, tmpDir));
		upload.setHeaderEncoding(encoding);
		upload.setFileCountMax(100);

		try {
			List<FileItem> items = upload.parseRequest(superRequest);

			for (Iterator<FileItem> iter = items.iterator(); iter.hasNext(); ) {
				FileItem item = iter.next();

				if (item.isFormField()) {
					this.addParameter(item.getFieldName(), item.getString(encoding));
				} else {
					if (item.getSize() > 0) {
						// We really don't want to call addParameter(), as it should
						// not be possible to have multiple values for a InputStream data
						this.query.put(item.getFieldName(), item);
					}
				}
			}
		}
		catch (FileUploadException e) {
			throw new MultipartHandlingException("Error while processing multipart content: " + e);
		}
	}

	/**
	 * @see javax.servlet.ServletRequestWrapper#getParameterValues(java.lang.String)
	 */
	@Override public String[] getParameterValues(final String name) 
	{
		Object value = this.getObjectParameter(name);

		if (value instanceof String) {
			return new String[] { (String)value };
		}

		List<?> list = (List<?>)value;

		return list == null
			? super.getParameterValues(name)
			: list.toArray(new String[list.size()]);
	}

	private String extractRequestUri(final String requestUri, final String contextPath)
	{
		String uri = requestUri;

		// First, remove the context path from the requestUri, 
		// so we can work only with the important stuff
		if (contextPath != null && contextPath.length() > 0) {
			uri = requestUri.substring(contextPath.length(), requestUri.length());
		}

		// Remove the "jsessionid" (or similar) from the URI
		// Probably this is not the right way to go, since we're discarding the value...
		int index = uri.indexOf(';');

		if (index > -1) {
			int lastIndex = uri.indexOf('?', index);

			if (lastIndex == -1) {
				lastIndex = uri.indexOf('&', index);
			}

			if (lastIndex == -1) {
				uri = uri.substring(0, index);
			}
			else {
				String part1 = uri.substring(0, index);
				uri = part1 + uri.substring(lastIndex);
			}
		}

		return uri;
	}

	/**
	 * @see javax.servlet.ServletRequest#getParameter(java.lang.String)
     * @param name String
	 * @return String
	 */
	@Override public String getParameter(final String name) 
	{
		return (String)this.query.get(name);
	}

	/**
	 * Gets a parameter that is a number.
	 * A call to <code>Integer#parseInt(String)</code> is made to do the conversion
	 * @param name The parameter name to get the value
	 * @return int
	 */
	@Override public int getIntParameter(final String name)
	{
		return Integer.parseInt(this.getParameter(name));
	}

	/**
	 * Gets some request parameter as <code>Object</code>.
	 * This method may be used when you have to get some value
	 * of a <i>multipart/form-data</i> request, like a image of file. <br>
	 * 
	 * @param name String
	 * @return Object
	 */
	@Override public Object getObjectParameter(final String name)
	{
		return this.query.get(name);
	}

	@Override public void addParameter(final String name, final Object value)
	{
		if (MODULE.equals(name) || ACTION.equals(name)) {
			addOrReplaceParameter(name, value);
			return;
		}
		if (this.query.containsKey(name)) {
			Object currentValue = this.getObjectParameter(name);
			List<Object> list;

			if (currentValue instanceof List<?>) {
				list = (List<Object>)currentValue;
			}
			else {
				list = new ArrayList<>();
				list.add(currentValue);
			}

			list.add(value);
			this.query.put(name, list);
		}
		else {
			this.query.put(name, value);
		}
	}

	@Override public void addOrReplaceParameter(final String name, final Object value)
	{
		if (value != null && (MODULE.equals(name) || ACTION.equals(name))) {
			// make safe against XSS attacks
			String val = (String) value;
			val = val.replaceAll("[^\\p{Alpha}]", "");
			this.query.put(name, val);
		} else {
			this.query.put(name, value);
		}
	}

	/**
	 * Gets the <i>action</i> of the current request.
	 * 
	 * An <i>Action</i> is the parameter name which specifies
	 * what next action should be done by the system. It may be
	 * add or edit a post, editing the groups, whatever. In the URL, the
	 * Action can the represented in two forms:
	 *
	 * http://www.host.com/webapp/servletName?module=groups&action=list
	 * or
	 * http://www.host.com/webapp/servletName/groups/list
	 * 
	 * In both situations, the action's name is "list".
	 * 
	 * @return String representing the action name
	 */
	@Override public String getAction()
	{
		return this.getParameter(ACTION);
	}

	public void changeAction(final String newAction)
	{
		this.addOrReplaceParameter(ACTION, newAction);
	}

	/**
	 * Gets the <i>module</i> of the current request.
	 * 
	 * A <i>Module</i> is the parameter name which specifies
	 * what module the user is requesting. It may be the group
	 * administration, the topics or anything else configured module.
	 *In the URL, the Module can the represented in two forms:
	 *
	 * http://www.host.com/webapp/servletName?module=groups&action=list
	 * or
	 * http://www.host.com/webapp/servletName/groups/list
	 * 
	 * In both situations, the module's name is "groups".
	 * 
	 * @return String representing the module name
	 */
	@Override public String getModule()
	{
		return this.getParameter(MODULE);
	}

	public Object getObjectRequestParameter(final String parameter)
	{
		return this.query.get(parameter);
	}

	/**
	 * @see javax.servlet.http.HttpServletRequestWrapper#getContextPath()
	 */
	@Override public String getContextPath() 
	{
		String contextPath = super.getContextPath();
		String proxiedContextPath = SystemGlobals.getValue(ConfigKeys.PROXIED_CONTEXT_PATH);

		if (StringUtils.isNotEmpty(proxiedContextPath)) {
			contextPath = proxiedContextPath;
		}

		return contextPath;
	}

	/**
	 * This will generally retrieve the last non-local IP address.
	 * Proxies may append something like "192.168.x.x". Removing those is the primary purpose. 
	 * TODO: https://tools.ietf.org/html/rfc7239 should be considered first, before anything else
	 * @see javax.servlet.ServletRequestWrapper#getRemoteAddr()
	 */
	@Override public String getRemoteAddr()
	{
		// We look if the request is forwarded
		// If it is not call the older function.
        String ip = super.getHeader("x-forwarded-for");
        
        if (ip == null) {
        	ip = super.getRemoteAddr();

			// If the ip is still null, we put 0.0.0.0 to avoid null values
			if (ip == null) {
				ip = "0.0.0.0";
			}
        } else {
			// sanitize to avoid XSS attacks because the header can be manipulated en route
			ip = ip.replaceAll("[^0-9a-f:,\\.]", "");
			StringTokenizer tokenizer = new StringTokenizer(ip, ",");
			while (tokenizer.hasMoreTokens()) {
				String part = tokenizer.nextToken();
				if (!part.equals("127.0.0.1") && !part.equals("::1") && !part.startsWith("10.") && !part.startsWith("192.168."))
					ip = part;
			}
        }

        return ip;
	}

    @Override
    public boolean isMobileRequest() {
        return mobileRequest;
    }
}

../jforum2-code/src/main/java/net/jforum/context/standard/StandardRequestContext.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 26/08/2006 21:56:05
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.context.standard;

import java.io.UnsupportedEncodingException;
import java.util.Collections;
import java.util.Enumeration;
import java.util.Locale;
import java.util.concurrent.ConcurrentHashMap;

import javax.servlet.http.Cookie;

import net.jforum.context.RequestContext;
import net.jforum.context.SessionContext;

/**
 * Request context non-dependent of HTTP 
 * @author Rafael Steil
 */
public class StandardRequestContext implements RequestContext
{
	private transient final ConcurrentHashMap<String, Object> data;
	private transient final SessionContext sessionContext;
	
	public StandardRequestContext()
	{
		this.data = new ConcurrentHashMap<>();
		this.sessionContext = new StandardSessionContext();
	}
	
	/**
	 * @see net.jforum.context.RequestContext#addParameter(java.lang.String, java.lang.Object)
	 */
	@Override public void addParameter(final String name, final Object value)
	{
		if (this.data.containsKey(name)) {
			this.data.remove(name);
		}

		this.data.put(name, value);
	}
	
	/**
	 * @see net.jforum.context.RequestContext#addOrReplaceParameter(java.lang.String, java.lang.Object)
	 */
	@Override public void addOrReplaceParameter(final String name, final Object value) 
	{
		this.addParameter(name, value);
	}

	/**
	 * @see net.jforum.context.RequestContext#getAction()
	 */
	@Override public String getAction()
	{
		return null;
	}

	/**
	 * @see net.jforum.context.RequestContext#getAttribute(java.lang.String)
	 */
	@Override public Object getAttribute(final String name)
	{
		return this.getParameter(name);
	}

	/**
	 * This method will always return null
	 */
	@Override public String getContextPath()
	{
		return null;
	}

	/**
	 * This method will always return null
	 */
	@Override public Cookie[] getCookies()
	{
		return new Cookie[0];
	}

	/**
	 * This method will always return null
	 */
	@Override public String getHeader(final String name)
	{
		return null;
	}

	/**
	 * @see net.jforum.context.RequestContext#getIntParameter(java.lang.String)
	 */
	@Override public int getIntParameter(final String parameter)
	{
		return Integer.parseInt(this.getParameter(parameter));
	}

	/**
	 * @see net.jforum.context.RequestContext#getModule()
	 */
	@Override public String getModule()
	{
		return null;
	}

	/**
	 * @see net.jforum.context.RequestContext#getObjectParameter(java.lang.String)
	 */
	@Override public Object getObjectParameter(final String parameter)
	{
		return this.data.get(parameter);
	}

	/**
	 * @see net.jforum.context.RequestContext#getParameter(java.lang.String)
	 */
	@Override public String getParameter(final String name)
	{
		final Object value = this.data.get(name);
		return value == null ? null : value.toString();
	}

	/**
	 * @see net.jforum.context.RequestContext#getParameterNames()
	 */
	@Override public Enumeration<String> getParameterNames()
	{
		return this.data.keys();
	}

	/**
	 * This method will always return null;
	 */
	@Override public String[] getParameterValues(final String name)
	{
		return new String[0];
	}

	/**
	 * This method will always return null
	 */
	@Override public String getQueryString()
	{
		return null;
	}

	/**
	 * @see net.jforum.context.RequestContext#getRemoteAddr()
	 */
	@Override public String getRemoteAddr()
	{
		return null;
	}

	/**
	 * This method will always return null
	 */
	@Override public String getRemoteUser()
	{
		return null;
	}

	/**
	 * This method will always return null
	 */
	@Override public String getRequestURI()
	{
		return null;
	}

	/**
	 * This method will always return null
	 */
	@Override public String getScheme()
	{
		return null;
	}

	/**
	 * This method will always return null
	 */
	@Override public String getServerName()
	{
		return null;
	}

	/**
	 * This method will always return 0
	 */
	@Override public int getServerPort()
	{
		return 0;
	}

	/**
	 * @see net.jforum.context.RequestContext#getSessionContext()
	 */
	@Override public SessionContext getSessionContext()
	{
		return this.sessionContext;
	}

	/**
	 * This method is equal to {@link #getSessionContext()}
	 */
	@Override public SessionContext getSessionContext(final boolean create)
	{
		return this.getSessionContext();
	}

	/**
	 * @see net.jforum.context.RequestContext#removeAttribute(java.lang.String)
	 */
	@Override public void removeAttribute(final String name)
	{
		this.data.remove(name);
	}

	/**
	 * This method is equal to {@link #addParameter(String, Object)}
	 */
	@Override public void setAttribute(final String name, final Object obj)
	{
		this.addParameter(name, obj);
	}

	/**
	 * This method does nothing 
	 */
	@Override public void setCharacterEncoding(final String env) throws UnsupportedEncodingException {
		// Empty method
	}

	@Override @SuppressWarnings("unchecked")
	public Enumeration<Locale> getLocales() {
		return (Enumeration<Locale>) Collections.enumeration(Collections.EMPTY_LIST);
		
	}

	@Override public StringBuffer getRequestURL() {
		throw new UnsupportedOperationException("this method only supported for web layer");
	}

    @Override
    public boolean isMobileRequest() {
        // since not a web request, can't be mobile
        return false;
    }
}

../jforum2-code/src/main/java/net/jforum/context/standard/StandardSessionContext.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 26/08/2006 21:55:33
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.context.standard;

import java.security.SecureRandom;
import java.util.Enumeration;
import java.util.concurrent.ConcurrentHashMap;

import net.jforum.context.SessionContext;

/**
 * Session Context non-dependent of HTTP requests
 * @author Rafael Steil
 */
public class StandardSessionContext implements SessionContext
{
	private static final SecureRandom random = new SecureRandom();
	public static final String SESSION_ID = "__sessionId";
	private transient final ConcurrentHashMap<String, Object> data;
	
	public StandardSessionContext()
	{
		this.data = new ConcurrentHashMap<>();
		this.createSessionId();
	}

	private void createSessionId()
	{
		this.data.put(SESSION_ID, Integer.toString(random.nextInt(99999999)));
	}
	
	/**
	 * @see net.jforum.context.SessionContext#getAttribute(java.lang.String)
	 */
	@Override public Object getAttribute(final String name)
	{
		return this.data.get(name);
	}

	/**
	 * @see net.jforum.context.SessionContext#getAttributeNames()
	 */
	@Override public Enumeration<String> getAttributeNames()
	{
		return this.data.keys();
	}

	/**
	 * @see net.jforum.context.SessionContext#getId()
	 */
	@Override public String getId()
	{
		return (String)this.getAttribute(SESSION_ID);
	}

	/**
	 * @see net.jforum.context.SessionContext#invalidate()
	 */
	@Override public void invalidate()
	{
		this.data.clear();
		this.createSessionId();
	}

	/**
	 * @see net.jforum.context.SessionContext#removeAttribute(java.lang.String)
	 */
	@Override public void removeAttribute(final String name)
	{
		this.data.remove(name);
	}

	/**
	 * @see net.jforum.context.SessionContext#setAttribute(java.lang.String, java.lang.Object)
	 */
	@Override public void setAttribute(final String name, final Object value)
	{
		if (this.data.containsKey(name)) {
			this.data.remove(name);
		}
		
		this.data.put(name, value);
	}
}

../jforum2-code/src/main/java/net/jforum/dao/UserDAO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Feb 19, 2003 / 8:56:56 PM
 * The JForum Project
 * http://www.jforum.net 
 */
package net.jforum.dao;

import java.util.Date;
import java.util.List;

import net.jforum.entities.User;

/**
 * Model interface for {@link net.jforum.entities.User}.
 * This interface defines methods which are expected to be implemented
 * by a specific data access driver. The intention is to provide all
 * functionality needed to update, insert, delete and select some specific data.
 * 
 * @author Rafael Steil
 */

public interface UserDAO 
{
	/**
	 * Gets a specific <code>User</code>.
	 * 
	 * @param userId The User ID to search
	 * @return <code>User</code>object containing all the information
	 * @see #selectAll
	 */
	User selectById(int userId) ;

	/**
	 * Gets a specific <code>User</code>.
	 * 
	 * @param username The User name to search
	 * @return <code>User</code> object containing all the information
	 * or <code>null</code> if no data was found. 
	 * @see #selectAll
	 */
	User selectByName(String username) ;

	/**
	 * Gets all users
	 * 
	 * @return an <code>ArrayList</code> with the users. Each entry is a <code>User</code> object
	 */
	List<User> selectAll() ;

	/**
	 * Gets all users with your Karma.
	 * 
	 * @return a <code>List</code> with the users. Each entry is a <code>User</code> object
	 * (with the KarmaStatus populated).
	 */
	List<User> selectAllWithKarma() ;

	/**
	 * Gets all users from a specific group.
	 * 
	 * @param groupId The group id
	 * @param start The index position to start fetching
	 * @param count The total number of records to fetch
	 * @return <code>List</code> with the users. Each entry is a <code>User</code> object
	 */
	List<User> selectAllByGroup(int groupId, int start, int count) ;

	/**
	 * Gets all users
	 *
	 * @param startFrom Index to start fetching from
	 * @param count Number of records to retrieve
	 * @return an <code>ArrayList</code> with the users. Each entry is a <code>User</code> object
	 * (with the KarmaStatus populated).
	 */
	List<User> selectAllWithKarma(int startFrom, int count) ;

	/**
	 * Finds a user by matching an input string. 
	 * 
	 * @param input The username to search. May be part of the username. 
	 * The method will match all users who have the input string as part of their usernames.
	 * @param exactMath Set to <code>true</code> to get the user data related to 
	 * the username passed as argument, and set it to <code>false</code> to 
	 * search all users who match the criteria. 
	 * @return a <code>List</code> with the found users. Each entry is a 
	 * <code>User</code> object, where only the <i>id</i> and <i>username</i> members are filled.
	 */
	List<User> findByName(String input, boolean exactMath) ;

	/**
	 * Gets all users
	 *
	 * @param startFrom Index to start fetching from
	 * @param count Number of records to retrieve
	 * @return an <code>ArrayList</code> with the users. Each entry is a <code>User</code> object
	 */
	List<User> selectAll(int startFrom, int count) ;


	/**
	 * Deletes a user.
	 * 
	 * @param userId The user ID to delete
	 * @see #undelete(int)
	 */
	void delete(int userId) ;

	/**
	 * Undeletes a user.
	 * The system allows user undeletation because when you 
	 * call {@link #delete(int)} the user isn't physically deleted of the
	 * database, but just marked as deleted. This is done to ensure data integrity.
	 * 
	 * @param userId The user ID to undelete
	 * @see #delete(int)
	 */
	void undelete(int userId) ;

	/**
	 * Updates a user.
	 * 
	 * @param user Reference to a <code>User</code> object to update
	 */
	void update(User user) ;

	/**
	 * Adds a new User.
	 * After successfully persisting the data, this method
	 * <b>should</b> call <code>user.setId(theNewId);</code>, as well return the new user id. 
	 * @param user Reference to a valid and configured <code>User</code> object
	 * @param groupId the group which this user gets assigned to
	 * @return The new user id
	 */
	int addNew(User user, int groupId) ;

	/**
	 * Adds a new user with a predefined user id
	 * 
	 * (added by Pieter for external login support)
	 * @param user Reference to a valid and configured <code>User</code> object, with the user id already set
	 */
	void addNewWithId(User user) ;

	/**
	 * Set the active status.
	 * a user with the active status equals to false cannot be considered
	 * a "official", "fully registered" user until its status is set to true. This is
	 * interesting when you want to request user confirmation about registrations, for example
	 * 
	 * @param userId The user ID to change the status
	 * @param active <code>true</code> or <code>false</code>
	 */
	void setActive(int userId, boolean active) ;

	/**
	 * Sets the ranking.
	 * 
	 * @param userId The user ID
	 * @param rankingId int
	 */
	void setRanking(int userId, int rankingId) ;

	/**
	 * Increments the number of posts of the user.
	 * 
	 * @param userId The user ID to increment the number of posts
	 */
	void incrementPosts(int userId) ;

	/**
	 * Decrement the number of posts of some user.
	 * 
	 * @param userId The user ID do decrement the number of posts.
	 */
	void decrementPosts(int userId) ;

	/**
	 * Gets some piece of information of the last user registered
	 * 
	 * @return <code>HashMap</code> containing the information. The map has two keys:<br>
	 * <li><b>userName</b>: The username
	 * <li><b>userId</b>: The user's ID 
	 */
	User getLastUserInfo() ;

	/**
	 * Gets the total number of users
	 * 
	 * @return The total number of users
	 */
	int getTotalUsers() ;

	/**
	 * Gets the total number of users of some group.
	 * 
	 * @param groupId The group id
	 * @return The total number of users
	 */
	int getTotalUsersByGroup(int groupId) ;

	/**
	 * whether the user is locked or not.
	 *
     * @param  userId  int
	 * @return boolean
	 */
	boolean isDeleted(int userId) ;

	/***
	 * Checks the existence of some username.
	 * This method is used to ensure that there will not be two equal usernames in the database.
	 * 
	 * @param username The username to verify
	 * @return <code>true</code> or <code>false</code>, if the user was found or not, respectively
	 */
	boolean isUsernameRegistered(String username) ;

	/**
	 * Validates the user login.
	 * 
	 * @param username The username
	 * @param password The password
	 * @return The user object if the provided information was correct, <code>null</code> if the information was invalid 
	 */
	User validateLogin(String username, String password) ;

	/**
	 * Associate the user to the group
	 * 
	 * @param userId The user id 
	 * @param groupId The group id to associate to
	 */
	void addToGroup(int userId, int[] groupId) ;

	/**
	 * Remove the user from the group
	 * 
	 * @param userId The user id
	 * @param groupId The group id to remove the user from
	 */
	void removeFromGroup(int userId, int[] groupId) ;

	/**
	 * Stores the "lost password" security hash, that was generated
	 * when the user asked the system to get a reminder of his password. 
	 * This hash is used to ensure the information supplied.  
	 * 
	 * @param email The user email
	 * @param hash The hash to store.
	 */
	void writeLostPasswordHash(String email, String hash) ;

	/**
	 * Validate the provided security hash against the data stored in our system.
	 * 
	 * @param email The user email
	 * @param hash The supplied security hash
	 * @return <code>true</code> if the data matches ok, of <code>false</code> if it is invalid
	 */
	boolean validateLostPasswordHash(String email, String hash) ;

	/**
	 * Writes a new password for the user. 
	 * 
	 * @param password The new password
	 * @param email The user email
	 */
	void saveNewPassword(String password, String email) ;

	/**
	 * Gets the username related to the email
	 * 
	 * @param email The email to search for the username
	 * @return The username, if found, or an empty <code>String</code>
	 */
	String getUsernameByEmail(String email) ;

    /**
    * Finds a user by its email address.  If multiple found, it returns the first one.
    *
    * @param email the email address to search
    * @return the user instance if a match is found, or null otherwise
    */
    User findByEmail(String email);

    /**
    * Returns the number of users who have the specified email address.<p>
    *
    * @param email the email address we will shortly be looking up.
    * @return the number of users who have that email address.
    */
    int getTotalUsersWithEmail(String email);

    /**
    * Finds all users with matching e-mails. Users migrated from UBB may have the same e-mail.
    *
    * @param email the email address we are looking up
    * @param start the offset to the 1st record we want to return from all matches
    * @param count the number of records we want to return
    * @return a List of User records matching that email address
    */
    List<User> findAllUsersByEmail(String email, int start, int count);

    /**
     * Finds all users with matching ip address. SQL style wildcards allowed (e.g. "192.168.1.%").
     *
     * @param ip the IP address we want to look up.
     * @param start the offset to the 1st record we want to return from all matches
     * @param count the number of records we want to return
     * @return a list of users who have posted via that address.
     */
    List<User> findAllUsersByIp(String ip, int start, int count);

    /**
     * Counts the number of users who have used the specified IP address.
     *
     * @param ip the IP address we want to look up.
     * @return the number of users who have used that IP address
     */
    int getTotalUsersByIp(String ip);

	/**
	 * Validate if the activated key matches the one in the database
	 * 
	 * @param userId Which user to validate the activation key
	 * @param hash The activation key
	 * @return <code>true</code> if the data matches ok, of <code>false</code> if it is invalid
	 */
	boolean validateActivationKeyHash(int userId , String hash) ;

	/**
	 * Set user account to active
	 * 
	 * @param userId Which user account to set active
	 */
	void writeUserActive(int userId) ;

	/**
	 * Updates the time of the last visit. 
	 * 
	 * @param userId The user's id related to the username to update
	 * @param lastVisit The time of the last visit
	 */
	void updateLastVisit(int userId, Date lastVisit) ;

	/**
	 * Updates only the username. 
	 * This method generally will be used in implementations of
	 * <code>net.jforum.drivers.external.LoginAuthenticator</code> to update usernames
	 * which changed in the external source and therefore should be updated in jforum's users table. 
	 * 
	 * @param userId The user's id related to the username to update
	 * @param username The new username to write
	 */
	void updateUsername(int userId, String username) ;

	/**
	 * Check if the username passed as argument is different of the username existent in the database. 
	 * 
	 * @param userId The user's id to work with
	 * @param usernameToCheck The username to compare with the existing one in <i>jforum_users</i>
	 * @return <code>true</code> if the usernames are different.
	 */
	boolean hasUsernameChanged(int userId, String usernameToCheck) ;

	/**
	 * Saves the user-specific security hash to the database
	 * @param userId the user id to save
	 * @param hash the security hash
	 */
	void saveUserAuthHash(int userId, String hash) ;

	/**
	 * Retrieves the auth hash from the database
	 * @param userId int
	 * @return String
	 */
	String getUserAuthHash(int userId) ;

	/**
	 * Returns a list of users that haven't yet activated their accounts
	 * @return ArrayList of pending activation users
	 */
	List<User> pendingActivations() ;
}

../jforum2-code/src/main/java/net/jforum/dao/PrivateMessageDAO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 20/05/2004 - 15:37:25
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao;

import java.util.List;

import net.jforum.entities.PrivateMessage;

/**
 * @author Rafael Steil
 */
public interface PrivateMessageDAO
{
	/**
	 * Send a new <code>PrivateMessage</code>
	 * 
	 * @param privMsg The PrivateMessage to add
	 */
	void send(PrivateMessage privMsg) ;
	
	/**
	 * Deletes a collection of private messages.
	 * Each instance should at least have the private message
	 * id and the owner user id.
	 * 
	 * @param privMsg PrivateMessage[]
	 * @param userId
	 */
	void delete(PrivateMessage[] privMsg, int userId) ;
	
	/**
	 * Update the type of some private message.
	 * You should pass as argument a <code>PrivateMessage</code> instance
	 * with the pm's id and the new message status. There is no need to
	 * fill the other members.
	 * 
	 * @param privMsg The instance to update 
	 */
	void updateType(PrivateMessage privMsg) ;
	
	/**
	 * Selects all messages from the user's inbox. 
	 * 
	 * @param user The user to fetch the messages
	 * @return A <code>List</code> with all messages found. Each 
	 * entry is a <code>PrivateMessage</code> entry.
	 */
	List<PrivateMessage> selectFromInbox(int userId, int startFrom, int count) ;
	
	/**
	 * Selects all messages from the user's sent box. 
	 * 
	 * @param user The user to fetch the messages
	 * @return A <code>List</code> with all messages found. Each 
	 * entry is a <code>PrivateMessage</code> entry.
	 */
	List<PrivateMessage> selectFromSent(int userId, int startFrom, int count) ;
	
	/**
	 * Gets a <code>PrivateMessage</code> by its id.
	 * 
	 * @param privMsg A <code>PrivateMessage</code> instance containing the pm's id
	 * to retrieve
	 * @return The privMsg contents
	 */
	PrivateMessage selectById(PrivateMessage privMsg) ;
	
	/**
	 * Gets the number of messages from the user's sent box.
	 * 
	 * @param userId
	 * @return The number of messages
	 */
	int getTotalSent(int userId) ;
	
	/**
	 * Gets the number of messages from the user's inbox.
	 * 
	 * @param userId
	 * @return The number of messages
	 */
	int getTotalInbox(int userId) ;
}

../jforum2-code/src/main/java/net/jforum/dao/DBVersionWorkarounder.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 13/12/2009 21:56:55
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Properties;

import org.apache.log4j.Logger;

import net.jforum.ConfigLoader;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;

public class DBVersionWorkarounder {

	private static final Logger LOGGER = Logger.getLogger(DBVersionWorkarounder.class);

	protected void ensureDaoClassIsCorrect(final String shouldBe) throws IOException {
		if (!shouldBe.equals(SystemGlobals.getValue(ConfigKeys.DAO_DRIVER))) {
			LOGGER.info("DAO class is incorrect. Setting it to " + shouldBe);
			
			this.fixDAODriver(shouldBe);
			
			SystemGlobals.setValue(ConfigKeys.DAO_DRIVER, shouldBe);
			ConfigLoader.loadDaoImplementation();
		}
	}

	protected Properties loadSqlQueries() throws IOException {
		// First, check if we really have a problem
		final String sqlQueries = SystemGlobals.getValue(ConfigKeys.SQL_QUERIES_DRIVER);
		
		final File file = new File(sqlQueries);
		
		final Properties properties = new Properties();
		
		final FileInputStream fis = new FileInputStream(file);
		
		try {
			properties.load(fis);
			
			if (file.canWrite()) {
				return properties;
			}
		}
		finally {
			try {
				fis.close();
			} catch (IOException e) {
				LOGGER.error(e.getMessage(), e);
			}
		}
		
		LOGGER.warn("Cannot overwrite" + sqlQueries + " file. Insuficient privileges");
		return null;
	}

	protected void saveSqlQueries(final Properties properties) throws IOException {
		final FileOutputStream fos = new FileOutputStream(SystemGlobals.getValue(ConfigKeys.SQL_QUERIES_DRIVER));
		
		try {
			properties.store(fos, null);
		}
		finally {
			fos.close();
		}
	
		SystemGlobals.loadQueries(SystemGlobals.getValue(ConfigKeys.SQL_QUERIES_DRIVER));
	}

	private void fixDAODriver(final String daoClassName) throws IOException {
		final String driverConfigPath = SystemGlobals.getValue(ConfigKeys.DATABASE_DRIVER_CONFIG);
		
		final File file = new File(driverConfigPath);
		
		if (file.canWrite()) {
			// Fix the DAO class
			final Properties properties = new Properties();
			
			final FileInputStream fis = new FileInputStream(driverConfigPath);
			FileOutputStream fos = null;
			
			try {
				properties.load(fis);
				properties.setProperty(ConfigKeys.DAO_DRIVER, daoClassName);
				
				fos = new FileOutputStream(driverConfigPath);
				properties.store(fos, null);
			}
			finally {
				if (fos != null) {
					fos.close();
				}
	            
				fis.close();
			}
		}
		else {
			LOGGER.warn("Cannot overwrite" + driverConfigPath + ". Insuficient privileges");
		}
	}

	protected String buildPath(final String concat) {
		return new StringBuilder(256)
			.append(SystemGlobals.getValue(ConfigKeys.CONFIG_DIR))
			.append("/database/")
			.append(SystemGlobals.getValue(ConfigKeys.DATABASE_DRIVER_NAME))
			.append('/')
			.append(concat)
			.toString();
	}

}

../jforum2-code/src/main/java/net/jforum/dao/TopicDAO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Feb 23, 2003 / 2:56:58 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao;

import java.util.Collection;
import java.util.List;
import java.util.Map;

import net.jforum.entities.Topic;
import net.jforum.entities.User;
import net.jforum.search.SearchArgs;
import net.jforum.search.SearchResult;

/**
 * Model interface for {@link net.jforum.entities.Topic}.
 * This interface defines methods which are expected to be
 * implemented by a specific data access driver. The intention is
 * to provide all functionality needed to update, insert, delete and
 * select some specific data.
 *
 * @author Rafael Steil
 * @version $Id$
 */
public interface TopicDAO 
{
	/**
	 * Fixes the fields <i>topic_first_post_id</i> and 
	 * <i>topic_last_post_id</i>.
	 * 
	 * @param topicId The topic id to fix
	 */
	void fixFirstLastPostId(int topicId) ;
	
	/**
	 * Gets a specific <code>Topic</code>.
	 * 
	 * @param topicId The Topic ID to search
	 * @return <code>Topic</code>object containing all the information
	 * @see #selectAllByForum(int forumId)
	 */
	Topic selectById(int topicId) ;
	
	/**
	 * Gets a topic's information from the topics table only.
	 * No other information, like usernames, are fetched. 
	 * 
	 * @param topicId The topic id to get
	 * @return A topic instance
	 */
	Topic selectRaw(int topicId) ;
	
	/**
	 * Selects all topics associated to a specific forum
	 * 
	 * @param forumId The forum id to select the topics
	 * @return <code>ArrayList</code> with all topics found. Each entry is a <code>net.jforum.Topic</code> object
	 */
	List<Topic> selectAllByForum(int forumId) ;
	
	List<Map<String, Object>> selectTopicTitlesByIds(Collection<?> idList) ;
	
	/**
	 * Selects all topics associated to a specific forum, limiting the total number
	 * of records returned.
	 * 
	 * @param forumId The forum id to select the topics
	 * @return <code>ArrayList</code> with all topics found. Each entry is a <code>net.jforum.Topic</code> object
     * @param startFrom int
     * @param count int
	 */
	List<Topic> selectAllByForumByLimit(int forumId, int startFrom, int count) ;

    /**
     * Selects all topics associated to a specific user and belonging to
     * given forums
     * @param userId int User ID.
     * @param startFrom int
     * @param count int
     * @return  List
     */
	List<Topic> selectByUserByLimit(int userId,int startFrom, int count) ;

	/**
	 * How many topics were created by a given user
	 * @param userId the user id to check
	 * @return the number of topics created by the user
	 */
	int countUserTopics(int userId) ;
	
	/**
	 * How many topics were created
	 * @return the number of topics created
	 */
	int countAllTopics() ;

	/**
	 * Delete a Topic.
	 * 
	 * @param topic The Topic ID to delete
	 * @param fromModeration boolean
	 */
	void delete(Topic topic, boolean fromModeration) ;
	
	/**
	 * Deletes a set of topics
	 * @param topics The topics to delete. Each entry must be
	 * an instance of net.jforum.entities.Topic
	 * @param fromModeration boolean
	 */
	void deleteTopics(List<Topic> topics, boolean fromModeration) ;
	
	/**
	 * Deletes all topics from a forum
	 * @param forumId int
	 */
	void deleteByForum(int forumId) ;
	
	/**
	 * Updates a Topic.
	 * 
	 * @param topic Reference to a <code>Topic</code> object to update
	 */
	void update(Topic topic) ;
	
	/**
	 * Adds a new Topic.
	 * 
	 * @param topic Reference to a valid and configured <code>Topic</code> object
	 * @return The new ID
	 */
	int addNew(Topic topic) ;
	
	/**
	 * Increments the number of times the topic was saw
	 * 
	 * @param topicId The topic ID to increment the total number of views
	 */
	void incrementTotalViews(int topicId) ;
	
	/**
	 * Increments the number of replies the topic has
	 * 
	 * @param topicId The topic ID to increment the total number of replies
	 */
	void incrementTotalReplies(int topicId) ;

	/**
	 * Decrements the number of replies the topic has
	 * 
	 * @param topicId The topic ID to decrement the total number of replies
	 */
	void decrementTotalReplies(int topicId) ;
	
	/**
	 * Sets the ID of the last post of the topic
	 * 
	 * @param topicId Topic ID
	 * @param postId Post ID
	 */
	void setLastPostId(int topicId, int postId) ;
	
	/**
	 * Gets the last post id associated to the topic
	 * 
	 * @param topicId The topic id
     * @return int
	 */
	int getMaxPostId(int topicId) ;
	
	/**
	 * Gets the number of posts the topic has.
	 * 
	 * @param topicId The topic id
	 * @return The number of posts
	 */
	int getTotalPosts(int topicId) ;
	
	/**
	 * Get the users to notify
	 * 
	 * @param topic The topic 
	 * @return <code>ArrayList</code> of <code>User</code> objects. Each
	 * entry is a user who will receive the topic answer notification
	 * */
	List<User> notifyUsers(Topic topic) ;
	
	/**
	 * Subscribe a set of users for notification of new post in the topic
	 * @param topicId the topic id
	 * @param users the relation of {@link User} instances to subscribe
	 */
	void subscribeUsers(int topicId, List<User> users);
	
	/**
	 * Subscribe the user for notification of new post in the topic
	 *  
	 * @param topicId The topic id
	 * @param userId The user id
	 */
	void subscribeUser(int topicId, int userId) ;
	
	/**
	 * Return the subscription status of the user on the topic.
	 * 
	 * @param topicId The topic id
	 * @param userId The user id
	 * @return true if the user is waiting notification on the topic
	 */
	boolean isUserSubscribed(int topicId, int userId) ;
	
	/**
	 * Remove the user's subscription of the topic
	 * 
	 * @param topicId The topic id
	 * @param userId the User id
	 */
	void removeSubscription(int topicId, int userId) ;
	
	/**
	 * Clean all subscriptions of some topic
	 * 
	 * @param topicId The topic id
	 */
	void removeSubscriptionByTopic(int topicId) ;
	
	/**
	 * Change the topic read status 
	 * 
	 * @param topicId The topic id
	 * @param userId The user id
	 * @param read <code>true</code> or <code>false</code>
	 */
	void updateReadStatus(int topicId, int userId, boolean read) ;
	
	/**
	 * Lock or unlock a topic. 
	 * 
	 * @param topicId The topic id to perform the action on
	 * @param status Use <code>Topic.STATUS_LOCKED</code> to lock the topic, or
	 * <code>Topic.STATUS_UNLOCKED</code> to unlock. 
	 */
	void lockUnlock(int[] topicId, int status) ;

	/**
	 * Selects recent topics 
	 *
	 * @param limit The number of topics to retrieve
     * @return List
	 */
	List<Topic> selectRecentTopics (int limit) ;

	/**
	 * Selects recent topics 
	 *
     * @param start the index of topics where to start
	 * @param limit The number of topics to retrieve
     * @return List
	 */
	List<Topic> selectRecentTopics (int start, int limit) ;

	/**
	 * Selects hottest topics
	 *
	 * @param limit The number of topics to retrieve
	    * @return List
	 */
	List<Topic> selectHottestTopics (int limit) ;
	
	/**
	 * Sets the ID of the first post of the topic
	 * 
	 * @param topicId Topic ID
	 * @param postId Post ID
	 */
	void setFirstPostId(int topicId, int postId) ;

	/**
	 * Gets the first post id associated to the topic
	 * 
	 * @param topicId The topic id
     * @return int
	 */
	int getMinPostId(int topicId) ;
	
	/**
	 * Sets the moderation flag for all topics of a given forum.
	 * 
	 * @param forumId The forum id
	 * @param status boolean
	 */
	void setModerationStatus(int forumId, boolean status) ;

	/**
	 * Sets the moderation flag for a given topic.
	 * 
	 * @param topicId The topic id
	 * @param status boolean
	 */
	void setModerationStatusByTopic(int topicId, boolean status) ;

	/**
	 * Get all unique posters of some topic
	 * @param topicId int
	 * @return A Map instance with all topic posts. Key is the userid, 
	 * value is a {@link net.jforum.entities.User} instance with minimum
	 * data filled
	 */
	Map<Integer, User> topicPosters(int topicId) ;
	
	/**
	 * @param args
	 * @return SearchResult
	 */
	SearchResult<Topic> findTopicsByDateRange(SearchArgs args) ;

	/**
	 * Returns all topics that are watched by a given user.
	 * @param userId The user id
	 */
	List<Map<String, Object>> selectWatchesByUser(int userId);

}

../jforum2-code/src/main/java/net/jforum/dao/ConfigDAO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 15/08/2003 / 21:03:31
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao;

import java.util.List;
import java.util.Properties;

import net.jforum.entities.Config;

/**
 * Model interface for the {@link net.jforum.entities.Config} class. 
 * 
 * @author Rafael Steil
 */
public interface ConfigDAO 
{
	/**
	 * Insert a new configuration.
	 * 
	 * @param config The data to store.
	 */
	void insert (Config config);
	
	/**
	 * Updates some config entry
	 * 
	 * @param config The entry to update
	 */
	void update (Config config);

	/**
	 * Updates all the config entries in the Properties
	 * Called from SystemGlobals whenever the custom settings file is saved.
	 * 
	 * @param props The Properties object containing config name/value pairs
	 */
	void update (Properties props);

	/**
	 * Deletes some specific configuration
	 * 
	 * @param config The config to delete
	 */
	void delete (Config config);
	
	/**
	 * Gets all existing configuration entries
	 * 
	 * @return <code>java.util.List</code> with all records found. 
	 * Each entry is a <code>net.jforum.entities.Config</code> instance.
	 */
	List<Config> selectAll();
	
	/**
	 * Gets a config by its name
	 * 
	 * @param name The name to search for.
	 * @return Config
	 */
	Config selectByName (String name);
}

../jforum2-code/src/main/java/net/jforum/dao/SpamDAO.java
package net.jforum.dao;

import java.util.List;

/**
 * Model interface for spam patterns and collections of them. <p/>
 *
 * This interface defines methods which are expected to be
 * implemented by a specific data access driver. The intention is to provide
 * all functionality needed to insert, delete and select some specific data.
 */

public interface SpamDAO {
    /**
     * Returns all the censored words currently in the database.
     */
    List<String> selectAll();

    /**
     * Adds the specified spam pattern to the database
     */
    void addSpam (String pattern);

    /**
     * Removes the specified spam pattern from the database
     */
    void deleteSpam (String pattern);
}

../jforum2-code/src/main/java/net/jforum/dao/BanlistDAO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 *
 * Created on 07/12/2006 20:57:09
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao;

import java.util.List;

import net.jforum.entities.Banlist;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public interface BanlistDAO
{
	void insert(Banlist banlist);
	void delete(int banlistId);
	List<Banlist> selectAll();
}

../jforum2-code/src/main/java/net/jforum/dao/GroupDAO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Feb 19, 2003 / 8:56:28 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao;

import java.util.List;

import net.jforum.entities.Group;

/**
 * Model interface for {@link net.jforum.entities.Group}.
 * This interface defines methods which are expected to be
 * implemented by a specific data access driver. The intention is
 * to provide all functionality needed to update, insert, delete and
 * select some specific data.
 * 
 * @author Rafael Steil
 * @version $Id$
 */
public interface GroupDAO 
{
	/**
	 * Gets a specific <code>Group</code>.
	 * 
	 * @param groupId The Group ID to search
	 * @return <code>Group</code>object containing all the information
	 * @see #selectAll
	 */
	Group selectById(int groupId) ;
	
	/**
	 * Get all groups
	 * 
	 * @return an <code>ArrayList</code> containing the groups. Each entry
	 * is a <code>Group</code> object.
	 */
	List<Group> selectAll() ;
	
	/**
	 * Checks if is possible to delete a specific group.
	 * 
	 * @param groupId The group ID to verify
	 * @return <code>true</code> if is possible to delete, <code>false</code> if not
	 * @see #delete(int)
	 */
	boolean canDelete(int groupId) ;
	
	/**
	 * Deletes a group.
	 * 
	 * @param groupId The group ID to delete
	 * @see #canDelete(int)
	 */
	void delete(int groupId) ;
	
	
	/**
	 * Updates a group.
	 * 
	 * @param group Reference to a <code>Group</code> object to update
	 */
	void update(Group group) ;
	
	/**
	 * Adds a new group.
	 * 
	 * @param group Reference to a valid and configured <code>Group</code> object
	 */
	void addNew(Group group) ;

	/**
	 * Select the users associated to some group; 
	 * 
	 * @return <code>ArrayList</code> with the user ids
     * @param groupId int
	 */
	List<Integer> selectUsersIds(int groupId) ;
}

../jforum2-code/src/main/java/net/jforum/dao/MailIntegrationDAO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 21/08/2006 21:17:12 
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao;

import java.util.List;

import net.jforum.entities.MailIntegration;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public interface MailIntegrationDAO
{
	/**
	 * Adds a new mail integration
	 * @param integration the information to add
	 */
	void add(MailIntegration integration);
	
	/**
	 * Updates an existing mail integration data
	 * @param integration
	 */
	void update(MailIntegration integration);
	
	/**
	 * Deletes a mail integration by its forumId
	 * @param forumId the forumId of the underlying mailintegration 
	 * to be deleted
	 */
	void delete(int forumId);
	
	/**
	 * Search for a mail integration instance
	 * @param forumId the forumId of the desired object. 
	 * @return the requested information, or null if not found
	 */
	MailIntegration find(int forumId);
	
	/**
	 * Returns all MailIntegration objects currently registered
	 * @return a list with all data found. Each entry is a MailIntegration instance
	 */
	List<MailIntegration> findAll();
}

../jforum2-code/src/main/java/net/jforum/dao/AttachmentDAO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Jan 17, 2005 4:31:45 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao;

import java.util.List;
import java.util.Map;

import net.jforum.entities.Attachment;
import net.jforum.entities.AttachmentExtension;
import net.jforum.entities.AttachmentExtensionGroup;
import net.jforum.entities.QuotaLimit;
import net.jforum.entities.TopDownloadInfo;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public interface AttachmentDAO
{
	/**
	 * Adds a new attachment.
	 * 
	 * @param attachment The attachment to add
	 */
	void addAttachment(Attachment attachment);
	
	/**
	 * Updates an attachment.
	 * Only the file comment is updated.
	 * 
	 * @param attachment The attachment to update
	 */
	void updateAttachment(Attachment attachment);
	
	/**
	 * Remove an attachment.
	 * 
	 * @param id The attachment's id to remove
	 * @param postId the post id
	 */
	void removeAttachment(int id, int postId);
	
	/**
	 * Gets the attachments of some message.
	 * 
	 * @param postId The post id associated with the attachments.
	 * @return A list where each entry is a net.jforum.entities.Attachment 
	 * instance.
	 */
	List<Attachment> selectAttachments(int postId);
	
	/**
	 * Gets an attachment by its id
	 * 
	 * @param attachId The attachment id
	 * @return The attachment, or <code>null</code> if no record was found
	 */
	Attachment selectAttachmentById(int attachId);
	
	/**
	 * Inserts a new quota limit.
	 * 
	 * @param limit The data to insert
	 */
	void addQuotaLimit(QuotaLimit limit);
	
	/**
	 * Updates a quota limit.
	 * 
	 * @param limit The data to update
	 */
	void updateQuotaLimit(QuotaLimit limit);
	
	/**
	 * Deletes a quota limit
	 * 
	 * @param id The id of the quota to remove
	 */
	void removeQuotaLimit(int id);
	
	/**
	 * Removes a set of quota limit.
	 * 
	 * @param ids The ids to remove.
	 */
	void removeQuotaLimit(String[] ids);
	
	/**
	 * Associates a quota limit to some group.
	 * 
	 * @param groupId The group id
	 * @param quotaId The quota id
	 */
	void setGroupQuota(int groupId, int quotaId);
	
	/**
	 * Removes all quotas limits from all groups.
	 *  
	 */
	void cleanGroupQuota();
	
	/**
	 * Gets all registered quota limits
	 * 
	 * @return A list instance where each entry is a
	 * {@link net.jforum.entities.QuotaLimit} instance.
	 */
	List<QuotaLimit> selectQuotaLimit();
	
	/**
	 * Gets the quota associated to some group.
	 * 
	 * @param groupId The group id
	 * @return A <code>QuotaLimit</code> instance, or <code>null</code> if
	 * no records were found. 
	 */
	QuotaLimit selectQuotaLimitByGroup(int groupId) ;
	
	/**
	 * Gets the quota limits of registered groups.
	 * 
	 * @return A map instance where each key is the group id
	 * and the value is the quota limit id.
	 */
	Map<Integer, Integer> selectGroupsQuotaLimits();
	
	/**
	 * Adds a new extension group.
	 * 
	 * @param aeg The data to insert
	 */
	void addExtensionGroup(AttachmentExtensionGroup aeg);
	
	/**
	 * Updates some extension group.
	 * 
	 * @param aeg The data to update
	 */
	void updateExtensionGroup(AttachmentExtensionGroup aeg);
	
	/**
	 * Removes a set of extension groups.
	 * 
	 * @param ids The ids to remove.
	 */
	void removeExtensionGroups(String[] ids);
	
	/**
	 * Gets all extension groups.
	 * 
	 * @return A list instance where each entry is an 
	 * {@link net.jforum.entities.AttachmentExtensionGroup} instance.
	 */
	List<AttachmentExtensionGroup> selectExtensionGroups();
	
	/**
	 * Gets all extensions and its security options, 
	 * as well from the groups. 
	 * 
	 * @return A map instance where the key is the extension name
	 * and the value is a Boolean, indicating if the extension can
	 * be used in the uploaded files. If there is no entry for
	 * a given extension, then it means that it is allowed. 
	 */
	Map<String, Boolean> extensionsForSecurity();
	
	/**
	 * Adds a new extension
	 * 
	 * @param attext The extension to add
	 */
	void addExtension(AttachmentExtension attext);
	
	/**
	 * Updates an extension
	 * 
	 * @param attext The extension to update
	 */
	void updateExtension(AttachmentExtension attext);
	
	/**
	 * Removes a set of extensions
	 * 
	 * @param ids The ids to remove
	 */
	void removeExtensions(String[] ids);
	
	/**
	 * Gets all registered extensions
	 * 
	 * @return A list instance, where each entry is an
	 * {@link net.jforum.entities.AttachmentExtension} instance
	 */
	List<AttachmentExtension> selectExtensions();
	
	/**
	 * Gets an extension information by the extension's name
	 * @param extension
	 * @return AttachmentExtension
	 */
	AttachmentExtension selectExtension(String extension);

	/**
	 * Gets the download mode by the extension group id
	 * @param extensionGroupId extension group id
	 * @return true = physical download mode; false = inline download mode
	 */
	boolean isPhysicalDownloadMode(int extensionGroupId);	

	/**
	 * Selects top download attachments
	 *
	 * @param limit The number of attachments to retrieve
	    * @return List
	 */
	List<TopDownloadInfo> selectTopDownloads(int limit);
}

../jforum2-code/src/main/java/net/jforum/dao/CategoryDAO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Feb 19, 2003 / 8:56:14 PM
 * The JForum Project
 * http://www.jforum.net 
 */
package net.jforum.dao;

import java.util.List;

import net.jforum.entities.Category;

/**
 * Model interface for {@link net.jforum.entities.Category}.
 * This interface defines methods which are expected to be
 * implemented by a specific data access driver. The intention is
 * to provide all functionality needed to update, insert, delete and
 * select some specific data.
 * 
 * @author Rafael Steil
 * @version $Id$
 */
public interface CategoryDAO 
{	
	/**
	 * Gets a specific <code>Category</code>.
	 * 
	 * @param categoryId The Category ID to search
	 * @return <code>Category</code>object containing all the information
	 * @see #selectAll
	 */
	Category selectById(int categoryId);
	
	/**
	 * Selects all categories data from the database.
	 * 
	 * @return ArrayList with the categories found 
	 * @see #selectById
	 */
	List<Category> selectAll();
	
	/**
	 * Checks if is possible to delete a specific category.
	 * 
	 * @param categoryId The category ID to verify
	 * @return <code>true</code> if is possible to delete, <code>false</code> if not
	 * @see #delete(int)
	 */
	boolean canDelete(int categoryId);
	
	/**
	 * Delete a category.
	 * 
	 * @param categoryId The category ID to delete
	 * @see #canDelete(int)
	 */
	void delete(int categoryId);
	
	/**
	 * Updates a category.
	 * 
	 * @param category Reference to a <code>Category</code> object to update
	 */
	void update(Category category);
	
	/**
	 * Adds a new category.
	 * 
	 * @param category Reference to a valid and configured <code>Category</code> object
     * @return int
	 */
	int addNew(Category category);

	/**
	 * Changes the display order of some category.
	 *  
	 * @param category The <code>Category</code> instance to change its order
	 * @see #setOrderDown(net.jforum.entities.Category, net.jforum.entities.Category)
     * @param otherCategory Category
	 */
	void setOrderUp(Category category, Category otherCategory);
	
	/**
	 * Changes the display order of some category.
	 *  
	 * @param category The <code>Category</code> instance to change its order
	 *
	 * @see #setOrderUp(net.jforum.entities.Category, net.jforum.entities.Category)
     * @param otherCategory Category
	 */
	void setOrderDown(Category category, Category otherCategory);
}

../jforum2-code/src/main/java/net/jforum/dao/LuceneDAO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 24/07/2007 10:25:39 
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao;

import java.util.Date;
import java.util.List;

import net.jforum.entities.Post;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public interface LuceneDAO
{
	List<Post> getPostsToIndex(int fromPostId, int toPostId);
	
	List<Post> getPostsData(int[] postIds);
	
	int firstPostIdByDate(Date date);
	
	int lastPostIdByDate(Date date);
}

../jforum2-code/src/main/java/net/jforum/dao/PollDAO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 *
 * Created on Dec 29, 2004 2:00:00 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao;

import net.jforum.entities.Poll;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public interface PollDAO {

	/**
	 * Gets a specific <code>Poll</code>.
	 * 
	 * @param pollId The Poll ID to search
	 * @return <code>Poll</code>object containing all the information
	 */
	Poll selectById(int pollId) ;
		
	/**
	 * Delete a Poll.
	 * 
	 * @param pollId The Poll to delete
	 */
	void delete(int pollId) ;
		
	/**
	 * Delete a Poll.
	 * 
	 * @param topicId The topic id for the poll to delete
	 */
	void deleteByTopicId(int topicId) ;
	
	/**
	 * Updates a Poll.
	 * 
	 * @param poll Reference to a <code>Poll</code> object to update
	 */
	void update(Poll poll) ;
	
	/**
	 * Adds a new Poll.
	 * 
	 * @param poll Poll Reference to a valid and configured <code>Poll</code> object
	 * @return The new ID
	 */
	int addNew(Poll poll) ;

	/**
	 * Increments the vote count on the poll for the given poll id and option id
	 * @param pollId the poll id that the vote is for
	 * @param optionId the option that was selected for the poll
	 * @param userId int 
	 * @param ipAddress String 
	 */
	void voteOnPoll(int pollId, int optionId, int userId, String ipAddress);
	
	/**
	 * Tells if the user has already voted on the given poll
	 * @param pollId the poll id that is being checked
	 * @param userId the user id to check the vote for
	 * @return true if the user has already voted on the given poll
	 */
	boolean hasUserVotedOnPoll(int pollId, int userId) ;
	
	/**
	 * Tells if any user has already voted on the given poll from the given IP
	 * @param pollId the poll id that is being checked
	 * @param ipAddress the IP address of the user to check the vote for
	 * @return true if the user has already voted on the given poll
	 */
	boolean hasUserVotedOnPoll(int pollId, String ipAddress) ;
}

../jforum2-code/src/main/java/net/jforum/dao/TreeGroupDAO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on May 3, 2003 / 2:34:16 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao;

import java.util.List;

import net.jforum.util.GroupNode;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public interface TreeGroupDAO 
{
	List<GroupNode> selectGroups(int parentId) ;
}

../jforum2-code/src/main/java/net/jforum/dao/RankingDAO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Feb 19, 2003 / 8:57:06 PM
 * The JForum Project
 * http://www.jforum.net 
 */
package net.jforum.dao;

import java.util.List;

import net.jforum.entities.Ranking;

/**
 * Model interface for {@link net.jforum.entities.Ranking}.
 * This interface defines methods which are expected to be
 * implemented by a specific data access driver. The intention is
 * to provide all functionality needed to update, insert, delete and
 * select some specific data.
 * 
 * @author Rafael Steil
 * @version $Id$
 */
public interface RankingDAO 
{
	/**
	 * Gets a specific <code>Ranking</code>.
	 * 
	 * @param rankingId The ranking ID to search
	 * @return <code>Ranking</code>object containing all the information
	 * @see #selectAll
	 */
	Ranking selectById(int rankingId) ;
	
	/**
	 * Selects all ranking data from the database.
	 * 
	 * @return ArrayList with the rankings. Each entry is a <code>Ranking</code> object 
	 * @see #selectById
	 */
	List<Ranking> selectAll() ;
	

	/**
	 * Delete a ranking.
	 * 
	 * @param rankingId The ranking ID to delete
	 */
	void delete(int rankingId) ;
	

	/**
	 * Updates a ranking.
	 * 
	 * @param ranking Reference to a <code>Ranking</code> object to update
	 */
	void update(Ranking ranking) ;
	
	/**
	 * Adds a new ranking.
	 * 
	 * @param ranking Reference to a valid and configured <code>Ranking</code> object
	 */
	void addNew(Ranking ranking) ;

	/**
	 * Return all special rankings
	 * @return ArrayList of all special rankings
	 */
	List<Ranking> selectSpecials();
}

../jforum2-code/src/main/java/net/jforum/dao/RegEmailDAO.java
package net.jforum.dao;

import net.jforum.entities.Group;

import java.util.SortedMap;

/**
 * Model interface for allowed registration emails/domains. <p/>
 *
 * This interface defines methods which are expected to be
 * implemented by a specific data access driver. The intention is to provide
 * all functionality needed to insert, delete and select some specific data.
 */

public interface RegEmailDAO {
    /**
     * Returns all the registration emails/domains and associated groups currently in the database.
     */
	SortedMap<String, Group> selectAll();

    /**
     * Adds the specified email/domain to the database
     */
    void addRegEmail (String email, Group group);

    /**
     * Removes the specified email/domain from the database
     */
    void deleteRegEmail (String email);
}

../jforum2-code/src/main/java/net/jforum/dao/UserSessionDAO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 30/05/2004 13:12:34
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao;

import java.sql.Connection;
import java.util.Date;

import net.jforum.entities.UserSession;

/**
 * @author Rafael Steil
 */
public interface UserSessionDAO
{
	/**
	 * Writes a new <code>UserSession</code> to the database.
	 * 
	 * @param userSession The <code>UserSession</code> to store
	 * @param conn The {@link java.sql.Connection} object to use. 
	 * As many times user session management will be done in places where 
	 * a valid request is not available, we cannot try to retrieve the 
	 * connection from the thread local implementation. <br>
	 * If any driver implementation of this method will not use a database
	 * ( eg, where a <code>Connection</code> is not required ), when just
	 * pass <code>null</code> as argument.
	 */
	void add(UserSession userSession, Connection conn) ;
	
	/**
	 * Updates a <code>UserSession</code> 
	 * 
	 * @param userSession The <code>UserSession</code> to update
	 * @param conn The {@link java.sql.Connection} object to use. 
	 * As many times user session management will be done in places where 
	 * a valid request is not available, we cannot try to retrieve the 
	 * connection from the thread local implementation. <br>
	 * If any driver implementation of this method will not use a database
	 * ( eg, where a <code>Connection</code> is not required ), when just
	 * pass <code>null</code> as argument.

	 */
	void update(UserSession userSession, Connection conn) ;
	
	/**
	 * Gets a <code>UserSession</code> from the database.
	 * The object passed as argument should at least have the user id 
	 * in order to find the correct register. 
	 * 
	 * @param userSession The complete <code>UserSession</code> object data
	 * @param conn The {@link java.sql.Connection} object to use. 
	 * As many times user session management will be done in places where 
	 * a valid request is not available, we cannot try to retrieve the 
	 * connection from the thread local implementation. <br>
	 * If any driver implementation of this method will not use a database
	 * ( eg, where a <code>Connection</code> is not required ), when just
	 * pass <code>null</code> as argument.
	 * 
	 * @return UserSession
	 */
	UserSession selectById(UserSession userSession, Connection conn) ;

    /**
     * Returns the last/previous visit time for the passed <code>userId</code> based on the persisted session
     * information. If there is no such information available for that user, then this method returns null
     *
	 * @param userSession The complete <code>UserSession</code> object data
     * @return the last/previous visit date, or {@code null} if not found
     */
    Date fetchLastVisitTime(UserSession userSession, Connection conn);
}

../jforum2-code/src/main/java/net/jforum/dao/SqlServerVersionWorkarounder.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 29/11/2005 13:25:55
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao;

import java.io.FileInputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.util.Properties;

import org.apache.log4j.Logger;

import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;

/**
 * Try to fix some database configuration problems.
 * This class will much likely do some checks only for MS SQL Server.
 * @author Andowson Chang
 * @version $Id$
 */
public class SqlServerVersionWorkarounder extends DBVersionWorkarounder
{
	private static final Logger LOGGER = Logger.getLogger(SqlServerVersionWorkarounder.class);
    private static final String SQLSERVER_2000_DATA_ACCESS_DRIVER = net.jforum.dao.sqlserver.SqlServer2000DataAccessDriver.class.getName();
    private static final String SQLSERVER_DATA_ACCESS_DRIVER = net.jforum.dao.sqlserver.SqlServerDataAccessDriver.class.getName();

    public void handleWorkarounds(final Connection conn)
	{
		if (conn == null) {
			LOGGER.warn("Cannot work with a null connection");
			return;
    	}
    	
    	if (!"sqlserver".equals(SystemGlobals.getValue(ConfigKeys.DATABASE_DRIVER_NAME))) {
    		return;
    	}
    	
    	try {
    		final DatabaseMetaData meta = conn.getMetaData();
    		LOGGER.debug("SQL Server Version: " + meta.getDatabaseProductVersion());
    		
    		final int major = meta.getDatabaseMajorVersion();
    		final int minor = meta.getDatabaseMinorVersion();
    		LOGGER.debug("SQL Server Major Version: " + major);
    		LOGGER.debug("SQL Server Minor Version: " + minor);
    		
    		if (major == 8) {
    			this.handleSQLServer2000();
    			LOGGER.debug("handleSQLServer2000()");
    		}
    		else if (major > 8) {
    			this.handleSQLServer2005xPlus();
    			LOGGER.debug("handleSQLServer2005xPlus()");
    		}
    	}
    	catch (Exception e) {
    		LOGGER.error(e.toString(), e);
    	}
	}
	
	private void handleSQLServer2000() throws IOException
	{
		this.ensureDaoClassIsCorrect(SQLSERVER_2000_DATA_ACCESS_DRIVER);		
		
		final Properties properties = this.loadSqlQueries();
		
		final String path = this.buildPath("sqlserver_2000.sql");
				
		final FileInputStream fis = new FileInputStream(path);
			
		try {
			properties.load(fis);
			this.saveSqlQueries(properties);
		}
		finally {
			fis.close();
		}
	}
	
	private void handleSQLServer2005xPlus() throws IOException
	{
		this.ensureDaoClassIsCorrect(SQLSERVER_DATA_ACCESS_DRIVER);
		
        final Properties properties = this.loadSqlQueries();
		
		final String path = this.buildPath("sqlserver_2005.sql");
				
		final FileInputStream fis = new FileInputStream(path);
			
		try {
			properties.load(fis);
			this.saveSqlQueries(properties);
		}
		finally {
			fis.close();
		}
	}
}

../jforum2-code/src/main/java/net/jforum/dao/ApiDAO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 04/09/2006 22:04:17
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public interface ApiDAO
{
	/**
	 * Check if the given API authentication information is valid.
	 * @param apiKey the api key
	 * @return <code>true</code> if the information is correct
	 */
	boolean isValid(String apiKey);
}

../jforum2-code/src/main/java/net/jforum/dao/BookmarkDAO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 *
 * Created on Jan 16, 2005 12:30:52 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao;

import java.util.List;

import net.jforum.entities.Bookmark;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public interface BookmarkDAO
{
	/**
	 * Adds a new bookmark.
	 * 
	 * @param bookmark The bookmark to add
	 */
	void add(Bookmark bookmark);
	
	/**
	 * Updates a bookmark.
	 * Only the fields <i>publicVisible</i>, <i>title</i>
	 * and <i>description</i> are changed.
	 * All other fields remain with the same value.
	 * 
	 * @param bookmark The bookmark to update
	 */
	void update(Bookmark bookmark);
	
	/**
	 * Removes a bookmark.
	 * 
	 * @param bookmarkId The bookmark's id to remove
	 */
	void remove(int bookmarkId);
	
	/**
	 * Gets all bookmarks of a given type.
	 * 
	 * @param userId The bookmark's owner
	 * @param relationType Any valid type declared in
	 * <code>net.jforum.entities.BookmarkType</code>
	 * @return A list with all results found. Each entry is
	 * a {@link net.jforum.entities.Bookmark} instance.
	 */
	List<Bookmark> selectByUser(int userId, int relationType);
	
	/**
	 * Gets all bookmarks from some user.
	 * 
	 * @param userId The bookmark's owner
	 * <code>net.jforum.entities.BookmarkType</code>
	 * @return A list with all results found. Each entry is
	 * a {@link net.jforum.entities.Bookmark} instance.
	 */
	List<Bookmark> selectByUser(int userId);
	
	/**
	 * Gets a bookmark.
	 * 
	 * @param bookmarkId The bookmark id
	 * @return A bookmark instance or null if no entry found
	 */
	Bookmark selectById(int bookmarkId);
	
	/**
	 * Gets a bookmark for edition.
	 * 
	 * @param relationId The relation's id
	 * @param relationType The relation type.
	 * @param userId The bookmark's owner
	 * @return A bookmark instance of <code>null</code> if 
	 * the record cannot be found
	 */
	Bookmark selectForUpdate(int relationId, int relationType, int userId);
}

../jforum2-code/src/main/java/net/jforum/dao/KarmaDAO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Jan 11, 2005 11:00:06 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao;

import java.util.Date;
import java.util.List;
import java.util.Map;

import net.jforum.entities.Karma;
import net.jforum.entities.KarmaStatus;
import net.jforum.entities.User;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public interface KarmaDAO
{
	/**
	 * Insert a new Karma.
	 * 
	 * @param karma The karma to add. The instance should at
	 * least have set the karma status, the user who is receiving
	 * the karma and the user which is setting the karme.
	 */
	void addKarma(Karma karma) ;
	
	/**
	 * Gets the karma status of some user.
	 * 
	 * @param userId The user id to get the karma status
	 * @return A <code>net.jforum.entities.KarmaStatus</code> instance
	 */
	KarmaStatus getUserKarma(int userId) ;
	
	/**
	 * Updates the karma status for some user. 
	 * This method will store the user's karme in the
	 * users table. 
	 * 
	 * @param userId The id of the user to update
	 */
	void updateUserKarma(int userId) ;
	
	/**
	 * Checks if the user can add the karma.
	 * The method will search for existing entries in
	 * the karma table associated with the user id and post id
	 * passed as argument. If found, it means that the user 
	 * already has voted, so we cannot allow him to vote one
	 * more time.
	 * 
	 * @param userId The user id to check
	 * @param postId The post id to check
	 * @return <code>true</code> if the user hasn't voted on the
	 * post yet, or <code>false</code> otherwise. 
	 */
	boolean userCanAddKarma(int userId, int postId) ;
	
	/**
	 * Gets the karma status of some post.
	 * 
	 * @param postId The post id to get the karma status
	 * @return A <code>net.jforum.entities.KarmaStatus</code> instance
	 */
	KarmaStatus getPostKarma(int postId) ;
	
	/**
     * Deletes the karma belonging to some post.
     * This method will remove the post's karma from the
     * karma table.
     *
     * @param postId The id of the post to delete
     */
	void deletePostKarma(int postId) ;
	
	/**
	 * Updates a karma
	 * @param karma The karma instance to update
	 */
	void update(Karma karma) ;
	
	/**
	 * Gets the votes the user made on some topic.
	 * @param topicId The topic id.
	 * @param userId 
	 * 
	 * @return A <code>java.util.Map</code>, where the key is the post id and the
	 * value id the rate made by the user.
	 */
	Map<Integer, Integer> getUserVotes(int topicId, int userId) ;
	
	/**
	 * @param user User
	 */
	void getUserTotalKarma(User user) ;
	
	
	/**
	 * Total points received, grouped by user and filtered by a range of dates.
	 * 
	 * @param firstPeriod Date
	 * @param lastPeriod Date
     * @param start int
     * @param orderField orderField
	 * @return Returns a List of users ant your total votes.
	 */
	List<User> getMostRatedUserByPeriod(int start, Date firstPeriod, Date lastPeriod, String orderField) ;
}

../jforum2-code/src/main/java/net/jforum/dao/ModerationLogDAO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 08/07/2007 11:28:17
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao;

import java.util.List;

import net.jforum.entities.ModerationLog;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public interface ModerationLogDAO
{
	void add(ModerationLog log);
	List<ModerationLog> selectAll(int start, int count);
	int totalRecords();
}

../jforum2-code/src/main/java/net/jforum/dao/SummaryDAO.java
/* Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms,
 * with or without modification, are permitted provided
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above
 * copyright notice, this list of conditions and the
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the
 * above copyright notice, this list of conditions and
 * the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor
 * the names of its contributors may be used to endorse
 * or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
 * IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 *
 * Created on Jul 19, 2005
 * The JForum Project
 * http://www.jforum.net
 *
 */
package net.jforum.dao;

import java.util.Date;
import java.util.List;

import net.jforum.entities.Post;

/**
 * Load summary of posts from the database
 * 
 * @author Franklin S. Dattein (<a href="mailto:franklin@portaljava.com">franklin@portaljava.com</a>) 
 * @version $Id$
 */
public interface SummaryDAO
{
	List<Post> selectLastPosts(Date firstDate, Date lastDate) ;

	List<String> listRecipients() ;
}

../jforum2-code/src/main/java/net/jforum/dao/DataAccessDriver.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Mar 3, 2003 / 1:37:05 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao;

/**
 * The class that every driver class must implement.
 * JForum implementation provides a simple and extremely
 * configurable way to use different database engines without
 * any modification to the core source code. 
 * <br>
 * For example, if you want to use the Database "XYZ" as
 * backend, all you need to do is to implement <code>DataAccessDriver</code>,
 * all *Model classes and a specific file with the SQL queries. 
 * <br>
 * The default implementation was written to support MySQL, so if you want a base code to
 * analyze, look at <code>net.jforum.drivers.generic</code> package.
 * 
 * @author Rafael Steil
 * @version $Id$
 */
public abstract class DataAccessDriver 
{
	private static DataAccessDriver driver;

	/**
	 * Empty constructor
	 */
	protected DataAccessDriver() 
	{
		// Empty constructor
	}

	/**
	 * Starts the engine.
	 * This method should be called when the system is starting. 
	 * 
	 * @param implementation The dao.driver implementation
	 */
	public static void init(final DataAccessDriver implementation)
	{
		driver = implementation;
	}

	/**
	 * Gets a driver implementation instance. 
	 * You MUST use this method when you want a instance
	 * of a valid <code>DataAccessDriver</code>. Never access
	 * the driver implementation directly.  
	 * 
	 * @return <code>DataAccessDriver</code> instance
	 */
	public static DataAccessDriver getInstance()
	{
		return driver;
	}

	/**
	 * Gets a {@link net.jforum.dao.ForumDAO} instance. 
	 * 
	 * @return <code>net.jforum.model.ForumModel</code> instance
	 */
	public abstract ForumDAO newForumDAO();

	/**
	 * Gets a {@link net.jforum.dao.GroupDAO} instance
	 * 
	 * @return <code>net.jforum.model.GroupModel</code> instance.
	 */
	public abstract GroupDAO newGroupDAO();

	/**
	 * Gets a {@link net.jforum.dao.PostDAO} instance.
	 * 
	 * @return <code>net.jforum.dao.PostDAO</code> instance.
	 */
	public abstract PostDAO newPostDAO();

	/**
	 * Gets a {@link net.jforum.dao.PollDAO} instance.
	 * 
	 * @return <code>net.jforum.model.PollModel</code> instance.
	 */
	public abstract PollDAO newPollDAO();

	/**
	 * Gets a {@link net.jforum.dao.RankingDAO} instance.
	 * 
	 * @return <code>net.jforum.model.RankingModel</code> instance
	 */
	public abstract RankingDAO newRankingDAO();

	/**
	 * Gets a {@link net.jforum.dao.TopicDAO} instance.
	 * 
	 * @return <code>net.jforum.model.TopicModel</code> instance.
	 */
	public abstract TopicDAO newTopicDAO();

	/**
	 * Gets a {@link net.jforum.dao.UserDAO} instance.
	 * 
	 * @return <code>net.jforum.dao.UserDAO</code> instance.
	 */
	public abstract UserDAO newUserDAO();

	/**
	 * Gets a {@link net.jforum.dao.CategoryDAO} instance.
	 * 
	 * @return <code>net.jforum.dao.CategoryDAO</code> instance.
	 */
	public abstract CategoryDAO newCategoryDAO();

	/**
	 * Gets a {@link net.jforum.dao.TreeGroupDAO} instance
	 * 
	 * @return <code>net.jforum.dao.TreeGroupDAO</code> instance.
	 */
	public abstract TreeGroupDAO newTreeGroupDAO();

	/**
	 * Gets a {@link net.jforum.dao.SmilieDAO} instance
	 * 
	 * @return <code>net.jforum.model.SmilieModel</code> instance.
	 */
	public abstract SmilieDAO newSmilieDAO();

	/**
	 * Gets a {@link net.jforum.dao.GroupSecurityDAO} instance
	 * 
	 * @return <code>net.jforum.model.security.GroupSecurityModel</code> instance
	 */
	public abstract GroupSecurityDAO newGroupSecurityDAO();

	/**
	 * Gets a {@link net.jforum.dao.PrivateMessageDAO} instance
	 * 
	 * @return <code>link net.jforum.model.security.PrivateMessageModel</code> instance
	 */
	public abstract PrivateMessageDAO newPrivateMessageDAO();

	/**
	 * Gets a {@link net.jforum.dao.UserSessionDAO} instance
	 * 
	 * @return <code>link net.jforum.model.UserSessionModel</code> instance
	 */
	public abstract UserSessionDAO newUserSessionDAO();

	/**
	 * Gets a {@link net.jforum.dao.ConfigDAO} instance
	 * 
	 * @return <code>link net.jforum.model.ConfigModel</code> instance
	 */
	public abstract ConfigDAO newConfigDAO();
	/**
	 * Gets a {@link net.jforum.dao.KarmaDAO} instance
	 * 
	 * @return <code>link net.jforum.model.KarmaModel</code> instance
	 */
	public abstract KarmaDAO newKarmaDAO();

	/**
	 * Gets a {@link net.jforum.dao.BookmarkDAO} instance
	 * 
	 * @return <code>link net.jforum.model.BookmarkModel</code> instance
	 */
	public abstract BookmarkDAO newBookmarkDAO();

	/**
	 * Gets a {@link net.jforum.dao.AttachmentDAO} instance
	 * 
	 * @return <code>link net.jforum.model.AttachmentModel</code> instance
	 */
	public abstract AttachmentDAO newAttachmentDAO();

	/**
	 * Gets a {@link net.jforum.dao.ModerationDAO} instance
	 * 
	 * @return <code>link net.jforum.model.ModerationModel</code> instance
	 */
	public abstract ModerationDAO newModerationDAO();

	/**
	 * Gets a {@link net.jforum.dao.BannerDAO} instance.
	 *
	 * @return <code>net.jforum.dao.BannerDAO</code> instance.
	 */
	public abstract BannerDAO newBannerDAO();
    
    /**
     * Gets a {@link net.jforum.dao.SummaryDAO} instance.
     *
     * @return <code>net.jforum.dao.SummaryDAO</code> instance.
     */
    public abstract SummaryDAO newSummaryDAO();
    
    /**
     * Gets a {@link net.jforum.dao.MailIntegrationDAO} instance.
     *
     * @return <code>net.jforum.dao.MailIntegrationDAO</code> instance.
     */
    public abstract MailIntegrationDAO newMailIntegrationDAO();

    /**
     * Gets a {@link net.jforum.dao.ApiDAO} instance.
     *
     * @return <code>net.jforum.dao.ApiDAO</code> instance.
     */
	public abstract ApiDAO newApiDAO();

    /**
     * Gets a {@link net.jforum.dao.BanlistDAO} instance.
     *
     * @return <code>net.jforum.dao.BanlistDAO</code> instance.
     */
	public abstract BanlistDAO newBanlistDAO();

    /**
     * Gets a {@link net.jforum.dao.ModerationLogDAO} instance.
     *
     * @return <code>net.jforum.dao.ModerationLogDAO</code> instance.
     */
	public abstract ModerationLogDAO newModerationLogDAO();

	/**
     * Gets a {@link net.jforum.dao.LuceneDAO} instance.
     *
     * @return <code>net.jforum.dao.LuceneDAO</code> instance.
     */
	public abstract LuceneDAO newLuceneDAO();

	/**
     * Gets a {@link net.jforum.dao.SpamDAO} instance.
     *
     * @return <code>net.jforum.dao.SpamDAO</code> instance.
     */
	public abstract SpamDAO newSpamDAO();

	/**
     * Gets a {@link net.jforum.dao.RegEmailDAO} instance.
     *
     * @return <code>net.jforum.dao.RegEmailDAO</code> instance.
     */
	public abstract RegEmailDAO newRegEmailDAO();
}

../jforum2-code/src/main/java/net/jforum/dao/ForumDAO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Feb 23, 2003 / 2:43:40 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao;

import java.util.List;
import java.util.Map;

import net.jforum.entities.Forum;
import net.jforum.entities.ForumStats;
import net.jforum.entities.LastPostInfo;
import net.jforum.entities.ModeratorInfo;
import net.jforum.entities.Topic;
import net.jforum.entities.User;

/**
 * Model interface for {@link net.jforum.entities.Forum}.
 * This interface defines methods which are expected to be
 * implemented by a specific data access driver. The intention is
 * to provide all functionality needed to update, insert, delete and
 * select some specific data.
 * 
 * @author Rafael Steil
 * @version $Id$
 */
public interface ForumDAO 
{
	/**
	 * Gets a specific <code>Forum</code>.
	 * 
	 * @param forumId The ForumID to search
	 * @return <code>Forum</code>object containing all the information
	 * @see #selectAll
	 */
	Forum selectById(int forumId) ;
	
	/**
	 * Selects all forums data from the database.
	 * 
	 * @return ArrayList with the forums found 
	 * @see #selectById
	 */
	List<Forum> selectAll() ;
	
	/**
	 * Sets the forum's order one level up.
	 * When you call this method on a specific forum, the forum that 
	 * is one level up will be sent down one level, and the forum which
	 * you are sending up will take the order position of the forum which
	 * was sent down.
	 * 
	 * @param forum The forum to change its order
	 * @param related The forum which comes before the forum we want to change
	 * @return The changed forum, with the new order set
	 */
	Forum setOrderUp(Forum forum, Forum related) ;
	
	/**
	 * Sets the forum's order one level down.
	 * For more information, take a look at @link #setOrderUp method. 
	 * The only different between both is that this method sends the 
	 * forum order down.
	 * 
	 * @param forum The forum to change its order
	 * @param related The forum which comes after the forum we want to change
	 * @return The changed forum, with the new order set
	 */
	Forum setOrderDown(Forum forum, Forum related) ;
	
	/**
	 * Delete a forum.
	 * 
	 * @param forumId The forum ID to delete
	 */
	void delete(int forumId) ;
		
	/**
	 * Updates a Forum.
	 * 
	 * @param forum Reference to a <code>Forum</code> object to update
	 */
	void update(Forum forum) ;
	
	/**
	 * Adds a new Forum.
	 * 
	 * @param forum Reference to a valid and configured <code>Forum</code> object
	 * @return The forum's ID
	 */
	int addNew(Forum forum) ;
	
	/**
	 * Sets the last topic of a forum
	 * 
	 * @param forumId The forum ID to update
	 * @param postId Last post ID
	 */
	void setLastPost(int forumId, int postId) ;

	/**
	 * Increments the total number of topics of a forum
	 * 
	 * @param forumId The forum ID to update
	 * @param count Increment a total of <code>count</code> elements
	 */
	void incrementTotalTopics(int forumId, int count) ;
	
	/**
	 * Decrements the total number of topics of a forum
	 * 
	 * @param forumId The forum ID to update
	 * @param count Decrement a total of <code>count</code> elements 
	 */
	void decrementTotalTopics(int forumId, int count) ;

	/**
	 * Gets information about the latest message posted in some forum.
	 * 
	 * @param forumId the forum's id to inspect
	 * @return A {@link LastPostInfo} instance
	 */
	LastPostInfo getLastPostInfo(int forumId) ;

	/**
	 * Get all moderators of some forum
	 * @param forumId the forum's id to inspect
	 * @return a list with all moderators. Each entry is an instance of
	 * {@link net.jforum.entities.ModeratorInfo}
	 */
	List<ModeratorInfo> getModeratorList(int forumId) ;
	
	/**
	 * Gets the total number of messages of a forum
     * @return int
     */
	int getTotalMessages() ;
	
	/**
	 * Gets the total number os topics of some forum
	 * 
	 * @return Total of topics
     * @param forumId int
	 */
	int getTotalTopics(int forumId) ;

	
	/**
	 * Gets the last post id associated to the forum
	 * 
	 * @param forumId The forum id
     * @return int
	 */
	int getMaxPostId(int forumId) ;
	
	/**
	 * Move the topics to a new forum
	 * 
	 * @param topics The topics id array
	 * @param fromForumId The original forum id
	 * @param toForumId The destination forum id
	 * @param marker whether to leave a forwarding marker in the previous forum
	 */
	void moveTopics(String[] topics, int fromForumId, int toForumId, boolean marker) ;
	
	/**
	 * Check if the forum has unread topics.
	 * 
	 * @param forumId The forum's id to check
	 * @param lastVisit The last visit time the user has seen the forum
	 * @return a <code>java.util.List</code> instance, where each entry is a
	 * <code>net.jforum.entities.Topic</code> instance. 
	 */
	List<Topic> checkUnreadTopics(int forumId, long lastVisit) ;
	
	/**
	 * Enable or disabled moderation for the forum.
	 * 
	 * @param categoryId The main category for the forum
	 * @param status a boolean value representing the desired status
	 */
	void setModerated(int categoryId, boolean status) ;
	
	/**
	 * Gets general statistics from the board
	 * @return ForumStats
	 */
	ForumStats getBoardStatus() ;
	
	
	//codes below are added by socialnework@gmail.com for "watching forum" purpose
	/**
	 * Get the users to notify
	 * 
	 * @param forum The forum 
	 * @return <code>ArrayList</code> of <code>User</code> objects. Each
	 * entry is a user who will receive the new topic in the forum notification
	 * */
	List<User> notifyUsers(Forum forum) ;
	
	
	/**
	 * Subscribe the user for notification of new topic in the forum
	 * Added by socialnetwork@gmail.com
	 * 
	 * @param forumId int
	 * @param userId int
	 */
	void subscribeUser(int forumId, int userId) ;
	
	/**
	 * Return the subscription status of the user on the forum.
	 * Added by socialnetwork@gmail.com
	 * 
	 * @param forumId int
	 * @param userId int
	 * @return boolean
	 */
	boolean isUserSubscribed(int forumId, int userId) ;
	
	/**
	 * Remove the user's subscription of the forum
	 * 
	 * @param forumId The forum id
	 * @param userId the User id
	 */
	void removeSubscription(int forumId, int userId) ;
	
	/**
	 * Clean all subscriptions of some forum
	 * 
	 * @param forumId The forum id
	 */
	void removeSubscriptionByForum(int forumId) ;

	/**
	 * Given an email address, finds the forum Id
	 * @param listEmail the email of the forum
	 * @return the forum id of the given email, or 0 if not found
	 */
	int discoverForumId(String listEmail) ;

	/**
	 * Returns all forums that are watched by a given user.
	 * @param userId The user id
	 */
	List<Map<String, Object>> selectWatchesByUser(int userId);

}

../jforum2-code/src/main/java/net/jforum/dao/MySQLVersionWorkarounder.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 29/11/2005 13:25:55
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.util.Properties;

import org.apache.log4j.Logger;

import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;

/**
 * Try to fix some database configuration problems.
 * This class will much likely do some checks only for MySQL.
 * @author Rafael Steil
 * @version $Id$
 */
public class MySQLVersionWorkarounder extends DBVersionWorkarounder
{
	private static final Logger LOGGER = Logger.getLogger(MySQLVersionWorkarounder.class);
    private static final String MYSQL_DATA_ACCESS_DRIVER = net.jforum.dao.mysql.MysqlDataAccessDriver.class.getName();

    public void handleWorkarounds(final Connection conn)
	{
		if (conn == null) {
			LOGGER.warn("Cannot work with a null connection");
			return;
    	}
    	
    	if (!"mysql".equals(SystemGlobals.getValue(ConfigKeys.DATABASE_DRIVER_NAME))) {
    		return;
    	}
    	
    	try {
    		final DatabaseMetaData meta = conn.getMetaData();
    		if (LOGGER.isDebugEnabled()) {
    			LOGGER.debug("MySQL Version: " + meta.getDatabaseProductVersion());
    		}
    		
    		final int major = meta.getDatabaseMajorVersion();
    		final int minor = meta.getDatabaseMinorVersion();
    		
    		if (major == 4 && minor == 0) {
    			this.handleMySql40x();
    		}
    		else if (major > 4 || (major == 4 && minor > 0)) {
    			this.handleMySql41xPlus();
    		}
    	}
    	catch (Exception e) {
    		LOGGER.error(e.toString(), e);
    	}
	}	
	
	private void handleMySql40x() throws IOException
	{
		this.ensureDaoClassIsCorrect(MYSQL_DATA_ACCESS_DRIVER);
		
		final Properties properties = this.loadSqlQueries();
		
		if (properties != null &&
			 (properties.size() == 0 || properties.getProperty("PermissionControl.deleteAllRoleValues") == null)) {
			final String path = this.buildPath("mysql_40.sql");

			final FileInputStream fis = new FileInputStream(path);

			try {
				properties.load(fis);
				this.saveSqlQueries(properties);
			}
			finally {
				fis.close();
			}			
		}
	}
	
	private void handleMySql41xPlus() throws IOException
	{
		this.ensureDaoClassIsCorrect(MYSQL_DATA_ACCESS_DRIVER);
		
		final Properties properties = this.loadSqlQueries();
		
		if (properties != null && properties.size() > 0) {
			this.saveSqlQueries(new Properties());
		}
		
		this.fixEncoding();
	}
	
	private void fixEncoding() throws IOException
	{
		FileInputStream fis = null;
		OutputStream outputStream = null;
		
		try {
			final Properties properties = new Properties();
			
			final File file = new File(SystemGlobals.getValue(ConfigKeys.DATABASE_DRIVER_CONFIG));
			
			if (file.canWrite()) {
				fis = new FileInputStream(file);
				
				properties.load(fis);
				
				properties.setProperty(ConfigKeys.DATABASE_MYSQL_ENCODING, "");
				properties.setProperty(ConfigKeys.DATABASE_MYSQL_UNICODE, "");
				
				outputStream = new FileOutputStream(file);
				properties.store(outputStream, null);
			}
		}
		finally {
			if (fis != null) {
				fis.close();
			}
			if (outputStream != null) {
				outputStream.close();
			}
		}
	}
}

../jforum2-code/src/main/java/net/jforum/dao/PostDAO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Feb 23, 2003 / 2:49:48 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao;

import java.util.List;

import net.jforum.entities.Post;

/**
 * Model interface for {@link net.jforum.entities.Post}.
 * This interface defines methods which are expected to be
 * implemented by a specific data access driver. The intention is
 * to provide all functionality needed to update, insert, delete and
 * select some specific data.
 * 
 * @author Rafael Steil
 * @version $Id$
 */
public interface PostDAO 
{
	/**
	 * Gets a specific <code>Post</code>.
	 * 
	 * @param postId The Post ID to search
	 * @return <code>Post</code>object containing all the information
	 */
	Post selectById(int postId) ;
		
	/**
	 * Delete a Post.
	 * 
	 * @param post Post The Post to delete
	 */
	void delete(Post post) ;
	
	/**
	 * Updates a Post.
	 * 
	 * @param post Reference to a <code>Post</code> object to update
	 */
	void update(Post post) ;
	
	/**
	 * Adds a new Post.
	 * 
	 * @param post Post Reference to a valid and configured <code>Post</code> object
	 * @return The new ID
	 */
	int addNew(Post post) ;
		
	/**
	 * Adds the post, and optionally its attachments, to the Lucene index.
	 * 
	 * @param post Post Reference to a valid and configured <code>Post</code> object
	 */
	void index (Post post) ;

	/**
	 * Selects all messages related to a specific topic. 
	 * 
	 * @param topicId The topic ID 
	 * @param startFrom The count position to start fetching
	 * @param count The total number of records to retrieve
	 * @return <code>ArrayList</code> containing all records found. Each entry of the <code>ArrayList</code> is a {@link net.jforum.entities.Post} object
	 */
	List<Post> selectAllByTopicByLimit(int topicId, int startFrom, int count) ;

    /**
	 * Selects all posts associated to a specific user and belonging to 
	 * given forums
	 * @param userId int User ID.
	 * @param startFrom int
	 * @param count int
	 * @return  List
	 */
	List<Post> selectByUserByLimit(int userId,int startFrom, int count) ;

    /**
     * Count user posts.
     * @param userId int
     * @return int
     */
	int countUserPosts(int userId) ;

	/**
	 * Selects all messages related to a specific topic. 
	 * 
	 * @param topicId The topic ID 
	 * @return <code>ArrayList</code> containing all records found. Each entry of the <code>ArrayList</code> is a {@link net.jforum.entities.Post} object
	 */
	List<Post> selectAllByTopic(int topicId) ;
	
	/**
	 * Delete all posts related to the given topic
	 * 
	 * @param topicId int
	 */
	void deleteByTopic(int topicId) ;

	/**
	 * Count how many previous posts there are before the given post id
	 * @param postId int
	 * @return int
	 */
	int countPreviousPosts(int postId) ;
	
	List<Post> selectLatestByForumForRSS(int forumId, int limit) ;
	
	List<Post> selectLatestForRSS(int limit) ;
	
	List<Post> selectHotForRSS(int limit) ;
}

../jforum2-code/src/main/java/net/jforum/dao/BannerDAO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms,
 * with or without modification, are permitted provided
 * that the following conditions are met:
 *
 * 1) Redistributions of source code must retain the above
 * copyright notice, this list of conditions and the
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the
 * above copyright notice, this list of conditions and
 * the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor
 * the names of its contributors may be used to endorse
 * or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
 * IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 *
 * Created on Feb 19, 2003 / 8:56:14 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao;

import java.util.List;

import net.jforum.entities.Banner;

/**
 * Model interface for {@link net.jforum.entities.Banner}.
 * This interface defines methods which are expected to be
 * implemented by a specific data access driver. The intention is
 * to provide all functionality needed to update, insert, delete and
 * select some specific data.
 *
 * @author Samuel Yung
 * @version $Id$
 */
public interface BannerDAO
{
	/**
	 * Gets a specific <code>Banner</code>.
	 *
	 * @param bannerId The Banner ID to search
	 * @return <code>Banner</code> object containing all the information
	 * @see #selectAll
	 */
	Banner selectById(int bannerId);

	/**
	 * Selects all banners data from the database.
	 *
	 * @return List with the banners found
	 * @see #selectById
	 */
	List<Banner> selectAll();

	/**
	 * Adds a new banner.
	 *
	 * @param banner Reference to a valid and configured <code>Banner</code> object
     * @return int
	 */
	int addNew(Banner banner);

	/**
	 * Updates a banner.
	 *
	 * @param banner Reference to a <code>Banner</code> object to update
	 */
	void update(Banner banner);

	/**
	 * Checks if is possible to delete a specific banner.
	 *
	 * @param bannerId The banner ID to verify
	 * @return <code>true</code> if is possible to delete, <code>false</code> if not
	 * @see #delete(int)
	 */
	boolean canDelete(int bannerId);

	/**
	 * Delete a banner.
	 *
	 * @param bannerId The banner ID to delete
	 */
	void delete(int bannerId);

	/**
	 * Select a list of active banners by its placement.
	 *
	 * @param placement The placement number
     * @return List
	 */
	List<Banner> selectActiveBannerByPlacement(int placement);
}

../jforum2-code/src/main/java/net/jforum/dao/GroupSecurityDAO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 19/03/2004 - 18:41:50
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao;

import net.jforum.entities.User;
import net.jforum.security.Role;
import net.jforum.security.RoleCollection;
import net.jforum.security.RoleValueCollection;


/**
 * @author Rafael Steil
 * @version $Id$
 */
public interface GroupSecurityDAO 
{
	/**
	 * Deletes all roles related to a forum
	 * @param forumId
	 */
	void deleteForumRoles(int forumId);
	
	/**
	 * Delete all roles from a specific group
	 * @param groupId ID of the group
	 **/
	void deleteAllRoles(int groupId);

	/**
	 * Adds a new role
	 * @param groupId Group id the role should be associated
	 * */
	void addRole(int groupId, Role role) ;

	/**
	 * @param id
	 * @param role
	 * @param rvc
	 */
	void addRoleValue(int id, Role role, RoleValueCollection rvc) ;
	
	/**
	 * 
	 * @param id
	 * @param role
	 * @param roleValues
	 */
	void addRole(int id, Role role, RoleValueCollection roleValues) ;

	/**
	 * @param groupId int
	 * @return RoleCollection
	 */
	RoleCollection loadRoles(int groupId) ;

    RoleCollection loadRolesByUserGroups(User user) ;
}

../jforum2-code/src/main/java/net/jforum/dao/ModerationDAO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Jan 30, 2005 11:32:49 AM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao;

import java.util.List;
import java.util.Map;

import net.jforum.entities.ModerationPendingInfo;
import net.jforum.entities.TopicModerationInfo;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public interface ModerationDAO
{
	/**
	 * Approves a post.
	 * 
	 * @param postId The post id to approve
	 */
	void approvePost(int postId) ;
	/**
	 * Gets all messages that need moderation.
	 * 
	 * @param forumId The forum id to search for messages
	 * to moderate
	 * @return A map instance where the key is the topic id and the value is 
	 * a TopicModerationInfo instance.
	 */
	Map<Integer, TopicModerationInfo> topicsByForum(int forumId) ;
	
	/**
	 * Gets information about which categories and
	 * forums have posts to moderate.
	 * 
	 * @return a list instance where each entry is a
	 * ModerationPendingInfo instance.
	 */
	List<ModerationPendingInfo> categoryPendingModeration() ;
}

../jforum2-code/src/main/java/net/jforum/dao/SmilieDAO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 13/01/2004 / 11:57:50
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao;

import java.util.List;

import net.jforum.entities.Smilie;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public interface SmilieDAO 
{
	/**
	 * Insert a new Smilie
	 * 
	 * @param smilie  Smilie
	 * @return The Smilie id
	 */
	int addNew(Smilie smilie) ;
	
	/**
	 * Deletes a smilie
	 * 
	 * @param id int
	 */
	void delete(int id) ;
	
	/**
	 * Updates a smilie
	 * 
	 * @param smilie Smilie
	 */
	void update(Smilie smilie) ;
	
	/**
	 * Select all smilies
	 * 
	 * @return List
	 */
	List<Smilie> selectAll() ;
	
	/**
	 * Gets some specific smilie.
	 * 
	 * @param id int
	 * @return Smilie
	 */
	Smilie selectById(int id) ;
}

../jforum2-code/src/main/java/net/jforum/dao/generic/GenericRegEmailDAO.java
package net.jforum.dao.generic;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.SortedMap;
import java.util.TreeMap;

import net.jforum.JForumExecutionContext;
import net.jforum.dao.DataAccessDriver;
import net.jforum.dao.GroupDAO;
import net.jforum.dao.RegEmailDAO;
import net.jforum.entities.Group;
import net.jforum.exceptions.DatabaseException;
import net.jforum.repository.RegEmailRepository;
import net.jforum.util.DbUtils;
import net.jforum.util.preferences.SystemGlobals;

public class GenericRegEmailDAO implements RegEmailDAO {

	@Override public SortedMap<String, Group> selectAll() {
		SortedMap<String, Group> result = new TreeMap<>();
		PreparedStatement p = null;
		ResultSet rs = null;
		try {
			GroupDAO groupDao = DataAccessDriver.getInstance().newGroupDAO();

			p = preparedStatementFromSqlKey("RegEmail.selectAll");

			rs = p.executeQuery();

			while (rs.next()) {
				Group group = groupDao.selectById(rs.getInt("group_id"));
				result.put(rs.getString("email"), group);
			}

			return result;
		} catch (SQLException e) {
			throw new DatabaseException(e);
		} finally {
			DbUtils.close(rs, p);
		}
	}

    @Override public void addRegEmail (String email, Group group) {
        PreparedStatement p = null;
        try {
            p = preparedStatementFromSqlKey("RegEmail.create");
            p.setString(1, email.trim());
            p.setInt(2, group.getId());

            int recordsAdded = p.executeUpdate();

            if (recordsAdded == 1) {
				RegEmailRepository.load();
            }
        } catch (SQLException e) {
            throw new DatabaseException(e);
        } finally {
            DbUtils.close(p);
        }
    }

    @Override public void deleteRegEmail (String email) {
        PreparedStatement p = null;
        try {
            p = preparedStatementFromSqlKey("RegEmail.delete");
            p.setString(1, email);

            int recordsDeleted = p.executeUpdate();

            if (recordsDeleted == 1) {
				RegEmailRepository.load();
            }
        } catch (SQLException e) {
            throw new DatabaseException(e);
        } finally {
            DbUtils.close(p);
        }
    }

    private PreparedStatement preparedStatementFromSqlKey (String sqlKey) throws SQLException {
        String sql = SystemGlobals.getSql(sqlKey);
        return JForumExecutionContext.getConnection().prepareStatement(sql);
    }
}

../jforum2-code/src/main/java/net/jforum/dao/generic/GenericBookmarkDAO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 *
 * Created on Jan 16, 2005 12:47:31 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao.generic;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import net.jforum.JForumExecutionContext;
import net.jforum.entities.Bookmark;
import net.jforum.entities.BookmarkType;
import net.jforum.exceptions.DatabaseException;
import net.jforum.exceptions.InvalidBookmarkTypeException;
import net.jforum.util.DbUtils;
import net.jforum.util.preferences.SystemGlobals;

/**
 * @author Rafael Steil
 */
public class GenericBookmarkDAO implements net.jforum.dao.BookmarkDAO
{
	/**
	 * @see net.jforum.dao.BookmarkDAO#add(net.jforum.entities.Bookmark)
	 */
	@Override public void add(final Bookmark bookmark)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(SystemGlobals.getSql("BookmarkModel.add"));
			pstmt.setInt(1, bookmark.getUserId());
			pstmt.setInt(2, bookmark.getRelationId());
			pstmt.setInt(3, bookmark.getRelationType());
			pstmt.setInt(4, bookmark.isPublicVisible() ? 1 : 0);
			pstmt.setString(5, bookmark.getTitle());
			pstmt.setString(6, bookmark.getDescription());
			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.BookmarkDAO#update(net.jforum.entities.Bookmark)
	 */
	@Override public void update(final Bookmark bookmark)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(SystemGlobals.getSql("BookmarkModel.update"));
			pstmt.setInt(1, bookmark.isPublicVisible() ? 1 : 0);
			pstmt.setString(2, bookmark.getTitle());
			pstmt.setString(3, bookmark.getDescription());
			pstmt.setInt(4, bookmark.getId());
			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.BookmarkDAO#remove(int)
	 */
	@Override public void remove(final int bookmarkId)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(SystemGlobals.getSql("BookmarkModel.remove"));
			pstmt.setInt(1, bookmarkId);
			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.BookmarkDAO#selectByUser(int, int)
	 */
	@Override public List<Bookmark> selectByUser(final int userId, final int relationType)
	{
		List<Bookmark> list = null;
		
		if (relationType == BookmarkType.FORUM) {
			list = this.getForums(userId);
		}
		else if (relationType == BookmarkType.TOPIC) {
			list = this.getTopics(userId);
		}
		else if (relationType == BookmarkType.USER) {
			list = this.getUsers(userId);
		}
		else {
			throw new InvalidBookmarkTypeException("The type " + relationType + " is not a valid bookmark type");
		}
		return list;
	}

	/**
	 * @see net.jforum.dao.BookmarkDAO#selectByUser(int)
	 */
	@Override public List<Bookmark> selectByUser(final int userId)
	{
		final List<Bookmark> list = new ArrayList<>();

		PreparedStatement pstmt = null;
		ResultSet resultSet = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("BookmarkModel.selectAllFromUser"));
			pstmt.setInt(1, userId);
			pstmt.setInt(2, userId);

			resultSet = pstmt.executeQuery();
			while (resultSet.next()) {
				Bookmark bookmark = this.getBookmark(resultSet);
				bookmark.setForumId(resultSet.getInt("forum_id"));
				list.add(bookmark);
			}

			return list;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(resultSet, pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.BookmarkDAO#selectById(int)
	 */
	@Override public Bookmark selectById(final int bookmarkId)
	{
		Bookmark bookmark = null;

		PreparedStatement pstmt = null;
		ResultSet resultSet = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("BookmarkModel.selectById"));
			pstmt.setInt(1, bookmarkId);

			resultSet = pstmt.executeQuery();
			if (resultSet.next()) {
				bookmark = this.getBookmark(resultSet);
			}

			return bookmark;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(resultSet, pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.BookmarkDAO#selectForUpdate(int, int, int)
	 */
	@Override public Bookmark selectForUpdate(final int relationId, final int relationType, final int userId)
	{
		PreparedStatement pstmt = null;
		ResultSet resultSet = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("BookmarkModel.selectForUpdate"));
			pstmt.setInt(1, relationId);
			pstmt.setInt(2, relationType);
			pstmt.setInt(3, userId);

			Bookmark bookmark = null;
			resultSet = pstmt.executeQuery();
			if (resultSet.next()) {
				bookmark = this.getBookmark(resultSet);
			}

			return bookmark;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(resultSet, pstmt);
		}
	}

	protected List<Bookmark> getUsers(final int userId)
	{
		final List<Bookmark> list = new ArrayList<>();
		PreparedStatement pstmt = null;
		ResultSet resultSet = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("BookmarkModel.selectUserBookmarks"));
			pstmt.setInt(1, userId);

			resultSet = pstmt.executeQuery();
			while (resultSet.next()) {
				final Bookmark bookmark = this.getBookmark(resultSet);

				if (bookmark.getTitle() == null || "".equals(bookmark.getTitle())) {
					bookmark.setTitle(resultSet.getString("username"));
				}

				list.add(bookmark);
			}

			return list;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(resultSet, pstmt);
		}
	}

	protected List<Bookmark> getTopics(final int userId)
	{
		PreparedStatement pstmt = null;
		ResultSet resultSet = null;
		try {
			final List<Bookmark> list = new ArrayList<>();
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("BookmarkModel.selectTopicBookmarks"));
			pstmt.setInt(1, userId);

			resultSet = pstmt.executeQuery();
			while (resultSet.next()) {
				final Bookmark bookmark = this.getBookmark(resultSet);

				if (bookmark.getTitle() == null || "".equals(bookmark.getTitle())) {
					bookmark.setTitle(resultSet.getString("topic_title"));
				}

				list.add(bookmark);
			}

			return list;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(resultSet, pstmt);
		}
	}

	protected List<Bookmark> getForums(final int userId)
	{
		PreparedStatement pstmt = null;
		ResultSet resultSet = null;
		try {
			final List<Bookmark> list = new ArrayList<>();
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("BookmarkModel.selectForumBookmarks"));
			pstmt.setInt(1, userId);

			resultSet = pstmt.executeQuery();
			while (resultSet.next()) {
				final Bookmark bookmark = this.getBookmark(resultSet);

				if (bookmark.getTitle() == null || "".equals(bookmark.getTitle())) {
					bookmark.setTitle(resultSet.getString("forum_name"));
				}

				if (bookmark.getDescription() == null || "".equals(bookmark.getDescription())) {
					bookmark.setDescription(resultSet.getString("forum_desc"));
				}

				list.add(bookmark);
			}

			return list;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(resultSet, pstmt);
		}
	}

	protected Bookmark getBookmark(final ResultSet resultSet) throws SQLException
	{
		final Bookmark bookmark = new Bookmark();
		bookmark.setId(resultSet.getInt("bookmark_id"));
		bookmark.setDescription(resultSet.getString("description"));
		bookmark.setPublicVisible(resultSet.getInt("public_visible") == 1);
		bookmark.setRelationId(resultSet.getInt("relation_id"));
		bookmark.setTitle(resultSet.getString("title"));
		bookmark.setDescription(resultSet.getString("description"));
		bookmark.setUserId(resultSet.getInt("user_id"));
		bookmark.setRelationType(resultSet.getInt("relation_type"));

		return bookmark;
	}
}

../jforum2-code/src/main/java/net/jforum/dao/generic/GenericGroupDAO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Mar 3, 2003 / 1:35:30 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao.generic;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import net.jforum.JForumExecutionContext;
import net.jforum.dao.DataAccessDriver;
import net.jforum.dao.GroupSecurityDAO;
import net.jforum.entities.Group;
import net.jforum.exceptions.DatabaseException;
import net.jforum.util.DbUtils;
import net.jforum.util.preferences.SystemGlobals;

/**
 * @author Rafael Steil
 */
public class GenericGroupDAO implements net.jforum.dao.GroupDAO
{
	/**
	 * @see net.jforum.dao.GroupDAO#selectById(int)
	 */
	@Override public Group selectById(final int groupId)
	{
		PreparedStatement pstmt = null;
		ResultSet resultSet = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(SystemGlobals.getSql("GroupModel.selectById"));
			pstmt.setInt(1, groupId);

			resultSet = pstmt.executeQuery();

			Group group = new Group();

			if (resultSet.next()) {
				group = this.getGroup(resultSet);
			}

			return group;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(resultSet, pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.GroupDAO#canDelete(int)
	 */
	@Override public boolean canDelete(final int groupId)
	{
		PreparedStatement pstmt = null;
		ResultSet resultSet = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(SystemGlobals.getSql("GroupModel.canDelete"));
			pstmt.setInt(1, groupId);

			boolean status = false;

			resultSet = pstmt.executeQuery();
			if (!resultSet.next() || resultSet.getInt("total") < 1) {
				status = true;
			}

			return status;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(resultSet, pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.GroupDAO#delete(int)
	 */
	@Override public void delete(final int groupId)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(SystemGlobals.getSql("GroupModel.delete"));
			pstmt.setInt(1, groupId);

			pstmt.executeUpdate();
			
			final GroupSecurityDAO securityDao = DataAccessDriver.getInstance().newGroupSecurityDAO();
			securityDao.deleteAllRoles(groupId);
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.GroupDAO#update(net.jforum.entities.Group)
	 */
	@Override public void update(final Group group)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(SystemGlobals.getSql("GroupModel.update"));
			pstmt.setString(1, group.getName());
			pstmt.setInt(2, group.getParentId());
			pstmt.setString(3, group.getDescription());
			pstmt.setInt(4, group.getId());

			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.GroupDAO#addNew(net.jforum.entities.Group)
	 */
	@Override public void addNew(final Group group)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(SystemGlobals.getSql("GroupModel.addNew"));
			pstmt.setString(1, group.getName());
			pstmt.setString(2, group.getDescription());
			pstmt.setInt(3, group.getParentId());

			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.GroupDAO#selectUsersIds(int)
	 */
	@Override public List<Integer> selectUsersIds(final int groupId)
	{
		final ArrayList<Integer> list = new ArrayList<>();

		PreparedStatement pstmt = null;
		ResultSet resultSet = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("GroupModel.selectUsersIds"));
			pstmt.setInt(1, groupId);

			resultSet = pstmt.executeQuery();
			while (resultSet.next()) {
				list.add(Integer.valueOf(resultSet.getInt("user_id")));
			}

			return list;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(resultSet, pstmt);
		}
	}

	protected List<Group> fillGroups(final ResultSet resultSet) throws SQLException
	{
		final List<Group> list = new ArrayList<>();

		while (resultSet.next()) {
			list.add(this.getGroup(resultSet));
		}

		return list;
	}

	protected Group getGroup(final ResultSet resultSet) throws SQLException
	{
		final Group group = new Group();

		group.setId(resultSet.getInt("group_id"));
		group.setDescription(resultSet.getString("group_description"));
		group.setName(resultSet.getString("group_name"));
		group.setParentId(resultSet.getInt("parent_id"));

		return group;
	}

	/**
	 * @see net.jforum.dao.GroupDAO#selectAll()
	 */
	@Override public List<Group> selectAll()
	{
		PreparedStatement pstmt = null;
		ResultSet resultSet = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(SystemGlobals.getSql("GroupModel.selectAll"));
			resultSet = pstmt.executeQuery();

			return this.fillGroups(resultSet);
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(resultSet, pstmt);
		}
	}
}

../jforum2-code/src/main/java/net/jforum/dao/generic/GenericModerationDAO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Jan 30, 2005 11:38:30 AM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao.generic;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import net.jforum.JForumExecutionContext;
import net.jforum.dao.ModerationDAO;
import net.jforum.entities.ModerationPendingInfo;
import net.jforum.entities.Post;
import net.jforum.entities.TopicModerationInfo;
import net.jforum.exceptions.DatabaseException;
import net.jforum.util.DbUtils;
import net.jforum.util.preferences.SystemGlobals;

/**
 * @author Rafael Steil
 */
public class GenericModerationDAO implements ModerationDAO
{
    /**
	 * @see net.jforum.dao.ModerationDAO#approvePost(int)
	 */
	@Override public void approvePost(int postId)
	{
		PreparedStatement pstmt = null;
        try
        {
            pstmt = JForumExecutionContext.getConnection().prepareStatement(
                    SystemGlobals.getSql("ModerationModel.approvePost"));
            pstmt.setTimestamp(1, new Timestamp(System.currentTimeMillis()));
            pstmt.setInt(2, postId);
            pstmt.executeUpdate();
        }
        catch (SQLException e) {
            throw new DatabaseException(e);
        }
        finally {
            DbUtils.close(pstmt);
        }
    }
	
	/**
	 * @see net.jforum.dao.ModerationDAO#topicsByForum(int)
	 */
	@Override public Map<Integer, TopicModerationInfo> topicsByForum(int forumId)
	{
		Map<Integer, TopicModerationInfo> m = new ConcurrentHashMap<>();

		PreparedStatement pstmt = null;
		ResultSet rs = null;

		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
				SystemGlobals.getSql("ModerationModel.topicsByForum"));
			pstmt.setInt(1, forumId);

			int lastId = 0;
			TopicModerationInfo info = null;
			
			rs = pstmt.executeQuery();
			
			while (rs.next()) {
				int id = rs.getInt("topic_id");
				
				if (id != lastId) {
					lastId = id;

					if (info != null) {
						m.put(Integer.valueOf(info.getTopicId()), info);
					}

					info = new TopicModerationInfo();
					info.setTopicId(id);
					info.setTopicReplies(rs.getInt("topic_replies"));
					info.setTopicTitle(rs.getString("topic_title"));
				}

				if (info != null) {
					info.addPost(this.getPost(rs));
				}
			}

			if (info != null) {
				m.put(Integer.valueOf(info.getTopicId()), info);
			}
			
			return m;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(rs, pstmt);
		}
    }
	
	protected Post getPost(ResultSet rs) throws SQLException
	{
		Post post = new Post();
		
		post.setPostUsername(rs.getString("username"));
		post.setId(rs.getInt("post_id"));
		post.setUserId(rs.getInt("user_id"));
		post.setBbCodeEnabled(rs.getInt("enable_bbcode") == 1);
		post.setHtmlEnabled(rs.getInt("enable_html") == 1);
		post.setSmiliesEnabled(rs.getInt("enable_smilies") == 1);
		post.setSubject(rs.getString("post_subject"));
		post.setText(this.getPostTextFromResultSet(rs));
		
		return post;
	}
	
	protected String getPostTextFromResultSet(ResultSet rs) throws SQLException
	{
		return rs.getString("post_text");
	}
	
	/**
	 * @see net.jforum.dao.ModerationDAO#categoryPendingModeration()
	 */
	@Override public List<ModerationPendingInfo> categoryPendingModeration()
	{
		List<ModerationPendingInfo> l = new ArrayList<>();
		int lastId = 0;
		ModerationPendingInfo info = null;
		Statement stmt = null;
		ResultSet rs = null;
		
		try {
			stmt = JForumExecutionContext.getConnection().createStatement();
			rs = stmt.executeQuery(SystemGlobals.getSql("ModerationModel.categoryPendingModeration"));
			
			while (rs.next()) {
				int id = rs.getInt("categories_id");
				
				if (id != lastId) {
					lastId = id;

					if (info != null) {
						l.add(info);
					}

					info = new ModerationPendingInfo();
					info.setCategoryName(rs.getString("title"));
					info.setCategoryId(id);
				}

				if (info != null) {
					info.addInfo(rs.getString("forum_name"), rs.getInt("forum_id"), rs.getInt("total"));
				}
			}

			if (info != null) {
				l.add(info);
			}

			return l;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
            DbUtils.close(rs, stmt);
        }
    }
}

../jforum2-code/src/main/java/net/jforum/dao/generic/GenericRankingDAO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Mar 23, 2003 / 7:52:13 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao.generic;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import net.jforum.JForumExecutionContext;
import net.jforum.entities.Ranking;
import net.jforum.exceptions.DatabaseException;
import net.jforum.util.DbUtils;
import net.jforum.util.preferences.SystemGlobals;

/**
 * @author Rafael Steil
 */
public class GenericRankingDAO implements net.jforum.dao.RankingDAO
{
	/**
	 * @see net.jforum.dao.RankingDAO#selectById(int)
	 */
	@Override public Ranking selectById(int rankingId)
	{
		Ranking ranking = new Ranking();

		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			pstmt = JForumExecutionContext.getConnection()
					.prepareStatement(SystemGlobals.getSql("RankingModel.selectById"));
			pstmt.setInt(1, rankingId);

			rs = pstmt.executeQuery();
			
			if (rs.next()) {
				ranking = this.buildRanking(rs);
			}

			return ranking;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(rs, pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.RankingDAO#selectAll()
	 */
	@Override public List<Ranking> selectAll()
	{
		List<Ranking> l = new ArrayList<>();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(SystemGlobals.getSql("RankingModel.selectAll"));
			rs = pstmt.executeQuery();

			while (rs.next()) {
				Ranking ranking = buildRanking(rs);
				l.add(ranking);
			}

			return l;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(rs, pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.RankingDAO#delete(int)
	 */
	@Override public void delete(int rankingId)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(SystemGlobals.getSql("RankingModel.delete"));
			pstmt.setInt(1, rankingId);

			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.RankingDAO#update(net.jforum.entities.Ranking)
	 */
	@Override public void update(Ranking ranking)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(SystemGlobals.getSql("RankingModel.update"));

			pstmt.setString(1, ranking.getTitle());
			pstmt.setString(2, ranking.getImage());
			pstmt.setInt(3, ranking.isSpecial() ? 1 : 0);
			pstmt.setInt(4, ranking.getMin());
			pstmt.setInt(5, ranking.getId());

			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.RankingDAO#addNew(net.jforum.entities.Ranking)
	 */
	@Override public void addNew(Ranking ranking)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(SystemGlobals.getSql("RankingModel.addNew"));

			pstmt.setString(1, ranking.getTitle());
			pstmt.setInt(2, ranking.getMin());
			pstmt.setInt(3, ranking.isSpecial() ? 1 : 0);

			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}
	
	@Override public List<Ranking> selectSpecials()
	{
		List<Ranking> l = new ArrayList<>();
		
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(SystemGlobals.getSql("RankingModel.selectSpecials"));
			rs = pstmt.executeQuery();

			while (rs.next()) {
				Ranking ranking = this.buildRanking(rs);
				l.add(ranking);
			}
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(rs, pstmt);
		}
		
		return l;
	}

	private Ranking buildRanking(ResultSet rs) throws SQLException
	{
		Ranking ranking = new Ranking();

		ranking.setId(rs.getInt("rank_id"));
		ranking.setTitle(rs.getString("rank_title"));
		ranking.setImage(rs.getString("rank_image"));
		ranking.setMin(rs.getInt("rank_min"));
		ranking.setSpecial(rs.getInt("rank_special") == 1);
		
		return ranking;
	}
}

../jforum2-code/src/main/java/net/jforum/dao/generic/GenericTreeGroupDAO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on May 3, 2003 / 2:39:52 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao.generic;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import net.jforum.JForumExecutionContext;
import net.jforum.exceptions.DatabaseException;
import net.jforum.util.DbUtils;
import net.jforum.util.GroupNode;
import net.jforum.util.preferences.SystemGlobals;

/**
 * @author Rafael Steil
 */
public class GenericTreeGroupDAO implements net.jforum.dao.TreeGroupDAO
{
	/**
	 * @see net.jforum.dao.TreeGroupDAO#selectGroups(int)
	 */
	@Override public List<GroupNode> selectGroups(final int parentId)
	{
		final List<GroupNode> list = new ArrayList<>();

		PreparedStatement pstmt = null;
		ResultSet resultSet = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(SystemGlobals.getSql("TreeGroup.selectGroup"));
			pstmt.setInt(1, parentId);

			resultSet = pstmt.executeQuery();

			while (resultSet.next()) {
				final GroupNode groupNode = new GroupNode();
				groupNode.setName(resultSet.getString("group_name"));
				groupNode.setId(resultSet.getInt("group_id"));

				list.add(groupNode);
			}

			return list;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(resultSet, pstmt);
		}
	}
}

../jforum2-code/src/main/java/net/jforum/dao/generic/AutoKeys.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.

 * Redistribution and use in source and binary forms,
 * with or without modification, are permitted provided
 * that the following conditions are met:

 * 1) Redistributions of source code must retain the above
 * copyright notice, this list of conditions and the
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the
 * above copyright notice, this list of conditions and
 * the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor
 * the names of its contributors may be used to endorse
 * or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
 * IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 *
 * Created on 24/05/2004 17:40:25
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao.generic;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import net.jforum.JForumExecutionContext;
import net.jforum.util.DbUtils;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public class AutoKeys
{
	private String autoGeneratedKeysQuery;

	protected boolean supportAutoGeneratedKeys()
	{
		return SystemGlobals.getBoolValue(ConfigKeys.DATABASE_AUTO_KEYS);
	}

	/**
	 * @param query The query to execute to retrieve the last generated key
	 */
	protected void setAutoGeneratedKeysQuery(final String query)
	{
		this.autoGeneratedKeysQuery = query;
	}

	protected String getAutoGeneratedKeysQuery()
	{
		return this.autoGeneratedKeysQuery;
	}

	protected String getErrorMessage()
	{
		return "Could not obtain the latest generated key. This error may be associated"
			+ " to some invalid database driver operation or server failure."
			+ " Please check the database configurations and code logic.";
	}

	protected PreparedStatement getStatementForAutoKeys(final String queryName, final Connection conn) throws SQLException
	{
		PreparedStatement pstmt = null;
		
		if (this.supportAutoGeneratedKeys()) {
			pstmt = conn.prepareStatement(SystemGlobals.getSql(queryName), Statement.RETURN_GENERATED_KEYS);
		}
		else {
			pstmt = conn.prepareStatement(SystemGlobals.getSql(queryName));
		}

		return pstmt;
	}

	protected PreparedStatement getStatementForAutoKeys(final String queryName) throws SQLException
	{
		return this.getStatementForAutoKeys(queryName, JForumExecutionContext.getConnection());
	}

	protected int executeAutoKeysQuery(final PreparedStatement pstmt) throws SQLException
	{
		return this.executeAutoKeysQuery(pstmt, JForumExecutionContext.getConnection());
	}

	protected int executeAutoKeysQuery(final PreparedStatement pstmt, final Connection conn) throws SQLException
	{
		int id = -1;
		pstmt.executeUpdate();

		ResultSet resultSet = null;
		PreparedStatement pstmt2 = null;
		
		try {
			if (this.supportAutoGeneratedKeys()) {
				resultSet = pstmt.getGeneratedKeys();
				
				if (resultSet.next()) {
					id = resultSet.getInt(1);
				}
			}
			else {
				pstmt2 = conn.prepareStatement(this.getAutoGeneratedKeysQuery());
				resultSet = pstmt2.executeQuery();

				if (resultSet.next()) {
					id = resultSet.getInt(1);
				}
			}
		}
		finally {
			DbUtils.close(resultSet);
			DbUtils.close(pstmt2);
		}

		if (id == -1) {
			throw new SQLException(this.getErrorMessage());
		}

		return id;
	}
}

../jforum2-code/src/main/java/net/jforum/dao/generic/GenericTopicDAO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Apr 6, 2003 / 2:38:28 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao.generic;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import net.jforum.JForumExecutionContext;
import net.jforum.SessionFacade;
import net.jforum.dao.DataAccessDriver;
import net.jforum.dao.ForumDAO;
import net.jforum.dao.PollDAO;
import net.jforum.dao.PostDAO;
import net.jforum.dao.TopicDAO;
import net.jforum.entities.KarmaStatus;
import net.jforum.entities.Topic;
import net.jforum.entities.User;
import net.jforum.exceptions.DatabaseException;
import net.jforum.repository.ForumRepository;
import net.jforum.search.SearchArgs;
import net.jforum.search.SearchResult;
import net.jforum.util.DbUtils;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;

/**
 * @author Rafael Steil
 */
public class GenericTopicDAO extends AutoKeys implements TopicDAO
{
	private static final String USER_ID = "user_id";
	/**
	 * @see net.jforum.dao.TopicDAO#findTopicsByDateRange(net.jforum.search.SearchArgs)
	 */
	@Override public SearchResult<Topic> findTopicsByDateRange(final SearchArgs args) 
	{
		SearchResult<Topic> result = null;

		PreparedStatement pstmt = null;
		ResultSet resultSet = null;

		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
				SystemGlobals.getSql("TopicModel.findTopicsByDateRange"));

			pstmt.setTimestamp(1, new Timestamp(args.getFromDate().getTime()));
			pstmt.setTimestamp(2, new Timestamp(args.getToDate().getTime()));

			resultSet = pstmt.executeQuery();
			final List<Integer> list = new ArrayList<>();

			int counter = 0;

			while (resultSet.next()) {
				if (counter >= args.startFrom() && counter < args.startFrom() + args.fetchCount()) {
					list.add(Integer.valueOf(resultSet.getInt(1)));
				}

				counter++;
			}

			result = new SearchResult<>(this.newMessages(list), list.size());
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(resultSet, pstmt);
		}

		return result;
	}

	/**
	 * @see net.jforum.dao.TopicDAO#fixFirstLastPostId(int)
	 */
	@Override public void fixFirstLastPostId(final int topicId)
	{
		PreparedStatement pstmt = null;
		ResultSet resultSet = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("TopicModel.getFirstLastPostId"));
			pstmt.setInt(1, topicId);

			resultSet = pstmt.executeQuery();
			if (resultSet.next()) {
				final int first = resultSet.getInt("first_post_id");
				final int last = resultSet.getInt("last_post_id");

				resultSet.close();
				pstmt.close();

				pstmt = JForumExecutionContext.getConnection().prepareStatement(
						SystemGlobals.getSql("TopicModel.fixFirstLastPostId"));
				pstmt.setInt(1, first);
				pstmt.setInt(2, last);
				pstmt.setInt(3, topicId);
				pstmt.executeUpdate();
			}
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(resultSet, pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.TopicDAO#selectById(int)
	 */
	@Override public Topic selectById(final int topicId)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(SystemGlobals.getSql("TopicModel.selectById"));
			pstmt.setInt(1, topicId);

			Topic topic = new Topic();
			final List<Topic> list = this.fillTopicsData(pstmt);

			if (!list.isEmpty()) {
				topic = list.get(0);
			}

			return topic;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.TopicDAO#selectRaw(int)
	 */
	@Override public Topic selectRaw(final int topicId)
	{
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(SystemGlobals.getSql("TopicModel.selectRaw"));
			pstmt.setInt(1, topicId);

			Topic topic = new Topic();
			rs = pstmt.executeQuery();
			if (rs.next()) {
				topic = this.getBaseTopicData(rs);
			}

			return topic;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(rs, pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.TopicDAO#delete(net.jforum.entities.Topic, boolean)
	 */
	@Override public void delete(final Topic topic, final boolean fromModeration)
	{
		final List<Topic> list = new ArrayList<>();
		list.add(topic);
		this.deleteTopics(list, fromModeration);
	}

	@Override public void deleteTopics(List<Topic> topics, boolean fromModeration)
	{
		// Topic
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(SystemGlobals.getSql("TopicModel.delete"));

			ForumDAO forumDao = DataAccessDriver.getInstance().newForumDAO();
			PostDAO postDao = DataAccessDriver.getInstance().newPostDAO();
			PollDAO pollDao = DataAccessDriver.getInstance().newPollDAO();

			for (Iterator<Topic> iter = topics.iterator(); iter.hasNext();) {
				Topic topic = iter.next();

				// Remove watches
				this.removeSubscriptionByTopic(topic.getId());

				// Remove the messages
				postDao.deleteByTopic(topic.getId());

				// Remove the poll
				pollDao.deleteByTopicId(topic.getId());

				// Delete the topic itself
				pstmt.setInt(1, topic.getId());
				pstmt.executeUpdate();

				if (!fromModeration) {
					forumDao.decrementTotalTopics(topic.getForumId(), 1);
				}
			}
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}

	}

	/**
	 * @see net.jforum.dao.TopicDAO#deleteByForum(int)
	 */
	@Override public void deleteByForum(int forumId)
	{
		PreparedStatement pstmt = null;
		ResultSet rs = null;

		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("TopicModel.deleteByForum"));
			pstmt.setInt(1, forumId);

			rs = pstmt.executeQuery();
			List<Topic> topics = new ArrayList<>();

			while (rs.next()) {
				Topic topic = new Topic();
				topic.setId(rs.getInt("topic_id"));
				topic.setForumId(forumId);

				topics.add(topic);
			}

			this.deleteTopics(topics, true);
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(rs, pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.TopicDAO#update(net.jforum.entities.Topic)
	 */
	@Override public void update(Topic topic)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(SystemGlobals.getSql("TopicModel.update"));

			pstmt.setString(1, topic.getTitle());
			pstmt.setInt(2, topic.getLastPostId());
			pstmt.setInt(3, topic.getFirstPostId());
			pstmt.setInt(4, topic.getType());
			pstmt.setInt(5, topic.isModerated() ? 1 : 0);
			pstmt.setInt(6, topic.getVoteId());
			pstmt.setInt(7, topic.getId());
			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}

	}

	/**
	 * @see net.jforum.dao.TopicDAO#addNew(net.jforum.entities.Topic)
	 */
	@Override public int addNew(Topic topic)
	{
		PreparedStatement pstmt = null;

		try {
			pstmt = this.getStatementForAutoKeys("TopicModel.addNew");

			pstmt.setInt(1, topic.getForumId());
			pstmt.setString(2, topic.getTitle());
			pstmt.setInt(3, topic.getPostedBy().getId());
			pstmt.setTimestamp(4, new Timestamp(topic.getTime().getTime()));
			pstmt.setInt(5, topic.getFirstPostId());
			pstmt.setInt(6, topic.getLastPostId());
			pstmt.setInt(7, topic.getType());
			pstmt.setInt(8, topic.isModerated() ? 1 : 0);

			this.setAutoGeneratedKeysQuery(SystemGlobals.getSql("TopicModel.lastGeneratedTopicId"));

			int topicId = this.executeAutoKeysQuery(pstmt);

			topic.setId(topicId);

			return topicId;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.TopicDAO#incrementTotalViews(int)
	 */
	@Override public void incrementTotalViews(int topicId)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
				SystemGlobals.getSql("TopicModel.incrementTotalViews"));
			pstmt.setInt(1, topicId);
			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.TopicDAO#incrementTotalReplies(int)
	 */
	@Override public void incrementTotalReplies(int topicId)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("TopicModel.incrementTotalReplies"));
			pstmt.setInt(1, topicId);
			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.TopicDAO#decrementTotalReplies(int)
	 */
	@Override public void decrementTotalReplies(int topicId)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("TopicModel.decrementTotalReplies"));
			pstmt.setInt(1, topicId);
			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.TopicDAO#setLastPostId(int, int)
	 */
	@Override public void setLastPostId(int topicId, int postId)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("TopicModel.setLastPostId"));
			pstmt.setInt(1, postId);
			pstmt.setInt(2, topicId);
			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.TopicDAO#selectAllByForum(int)
	 */
	@Override public List<Topic> selectAllByForum(int forumId)
	{
		return this.selectAllByForumByLimit(forumId, 0, -1);
	}

	/**
	 * @see net.jforum.dao.TopicDAO#selectAllByForumByLimit(int, int, int)
	 *
	 * A count smaller than zero means no limit - simplified SQL is used
	 * in that case in order to avoid a limit of Integer.MAX_VALUE
	 */
	@Override public List<Topic> selectAllByForumByLimit(int forumId, int startFrom, int count)
	{
		String sql = (count < 0)
					? SystemGlobals.getSql("TopicModel.selectAllByForum")
					: SystemGlobals.getSql("TopicModel.selectAllByForumByLimit");

		PreparedStatement pstmt = null;

		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(sql);
			pstmt.setInt(1, forumId);
			pstmt.setInt(2, forumId);
			if (count >= 0) {
				pstmt.setInt(3, startFrom);
				pstmt.setInt(4, count);
			}

			return this.fillTopicsData(pstmt);
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.TopicDAO#selectByUserByLimit(int, int, int)
	 */
	@Override public List<Topic> selectByUserByLimit(int userId, int startFrom, int count)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("TopicModel.selectByUserByLimit").replaceAll(":fids:",
							ForumRepository.getListAllowedForums()));

			pstmt.setInt(1, userId);
			pstmt.setInt(2, startFrom);
			pstmt.setInt(3, count);

			return this.fillTopicsData(pstmt);
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.TopicDAO#countUserTopics(int)
	 */
	@Override public int countUserTopics(int userId)
	{
		int total = 0;

		PreparedStatement pstmt = null;
		ResultSet resultSet = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("TopicModel.countUserTopics").replaceAll(":fids:",
							ForumRepository.getListAllowedForums()));
			pstmt.setInt(1, userId);

			resultSet = pstmt.executeQuery();

			if (resultSet.next()) {
				total = resultSet.getInt(1);
			}

			return total;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(resultSet, pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.TopicDAO#countAllTopics()
	 */
	@Override public int countAllTopics()
	{
		int total = 0;

		PreparedStatement pstmt = null;
		ResultSet resultSet = null;
		try {
			// performance optimization: beyond 100000 posts, return a possibly approximate topic count 
			// instead of the correct one. Mostly affects the paging of the Recent Topics pages.
			int totalPosts = ForumRepository.getTotalMessages();
			String sql = SystemGlobals.getSql(totalPosts < 100000
						? "TopicModel.countAllTopics"
						: "TopicModel.countAllTopicsApprox");

			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					sql.replaceAll(":fids:", ForumRepository.getListAllowedForums()));

			resultSet = pstmt.executeQuery();

			if (resultSet.next()) {
				total = resultSet.getInt(1);
			}

			return total;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(resultSet, pstmt);
		}
	}

	protected Topic getBaseTopicData(ResultSet rs) throws SQLException
	{
		Topic topic = new Topic();

		topic.setTitle(rs.getString("topic_title"));
		topic.setId(rs.getInt("topic_id"));
		topic.setTime(new Date(rs.getTimestamp("topic_time").getTime()));
		topic.setStatus(rs.getInt("topic_status"));
		topic.setTotalViews(rs.getInt("topic_views"));
		topic.setTotalReplies(rs.getInt("topic_replies"));
		topic.setFirstPostId(rs.getInt("topic_first_post_id"));
		topic.setLastPostId(rs.getInt("topic_last_post_id"));
		topic.setType(rs.getInt("topic_type"));
		if (topic.getType() == Topic.TYPE_WIKI) try {
			Timestamp postEditTime = rs.getTimestamp("post_edit_time");
			topic.setLastEditTime(postEditTime);
		} catch (SQLException e) { /* ignore - not all resultsets have this field */ }
		topic.setForumId(rs.getInt("forum_id"));
		topic.setModerated(rs.getInt("moderated") == 1);
		topic.setVoteId(rs.getInt("topic_vote_id"));
		topic.setMovedId(rs.getInt("topic_moved_id"));

		User user = new User();
		user.setId(rs.getInt(USER_ID));

		topic.setPostedBy(user);

		return topic;
	}

	/**
	 * @see net.jforum.dao.TopicDAO#getMaxPostId(int)
	 */
	@Override public int getMaxPostId(int topicId)
	{
		int id = -1;

		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			pstmt = JForumExecutionContext.getConnection()
					.prepareStatement(SystemGlobals.getSql("TopicModel.getMaxPostId"));
			pstmt.setInt(1, topicId);

			rs = pstmt.executeQuery();
			if (rs.next()) {
				id = rs.getInt("post_id");
			}

			return id;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(rs, pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.TopicDAO#getTotalPosts(int)
	 */
	@Override public int getTotalPosts(int topicId)
	{
		int total = 0;

		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("TopicModel.getTotalPosts"));
			pstmt.setInt(1, topicId);

			rs = pstmt.executeQuery();
			if (rs.next()) {
				total = rs.getInt("total");
			}

			return total;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(rs, pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.TopicDAO#notifyUsers(net.jforum.entities.Topic)
	 */
	@Override public List<User> notifyUsers(Topic topic)
	{
		int posterId = SessionFacade.getUserSession().getUserId();
		int anonUser = SystemGlobals.getIntValue(ConfigKeys.ANONYMOUS_USER_ID);

		PreparedStatement pstmt = null;
		ResultSet rs = null;

		boolean isTopicInTrash = topic.getForumId() == SystemGlobals.getIntValue(ConfigKeys.FORUM_TRASHCAN);

		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("TopicModel.notifyUsers"));

			pstmt.setInt(1, topic.getId());
			pstmt.setInt(2, posterId); // don't notify the poster
			pstmt.setInt(3, anonUser); // don't notify the anonymous user

			rs = pstmt.executeQuery();

			List<User> users = new ArrayList<>();

			while (rs.next()) {
				User user = new User(rs.getInt(USER_ID));

				// if topic is in trash, only notify admins and moderators
				if (isTopicInTrash && !user.isAdmin() && !user.isModerator()) {
					//LOGGER.info("skipping notification for user="+user.getId());
					continue;
				}

				user.setEmail(rs.getString("user_email"));
				user.setUsername(rs.getString("username"));
				user.setLang(rs.getString("user_lang"));
				user.setNotifyText(rs.getInt("user_notify_text") == 1);

				users.add(user);
			}

			rs.close();
			pstmt.close();

			// Set read status to false
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
				SystemGlobals.getSql("TopicModel.markAllAsUnread"));
			pstmt.setInt(1, topic.getId());
			pstmt.setInt(2, posterId); // don't notify the poster
			pstmt.setInt(3, anonUser); // don't notify the anonymous user

			pstmt.executeUpdate();

			return users;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(rs, pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.TopicDAO#subscribeUsers(int, java.util.List)
	 */
	@Override public void subscribeUsers(int topicId, List<User> users)
	{
		PreparedStatement pstmt = null;

		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
				SystemGlobals.getSql("TopicModel.subscribeUser"));

			pstmt.setInt(1, topicId);

			for (Iterator<User> iter = users.iterator(); iter.hasNext(); ) {
				int userId = iter.next().getId();

				pstmt.setInt(2, userId);
				pstmt.executeUpdate();
			}
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.TopicDAO#subscribeUser(int, int)
	 */
	@Override public void subscribeUser(int topicId, int userId)
	{
		User user = new User();
		user.setId(userId);

		List<User> l = new ArrayList<>();
		l.add(user);

		this.subscribeUsers(topicId, l);
	}

	/**
	 * @see net.jforum.dao.TopicDAO#isUserSubscribed(int, int)
	 */
	@Override public boolean isUserSubscribed(int topicId, int userId)
	{
		PreparedStatement pstmt = null;
		ResultSet rs = null;

		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
				SystemGlobals.getSql("TopicModel.isUserSubscribed"));

			pstmt.setInt(1, topicId);
			pstmt.setInt(2, userId);

			rs = pstmt.executeQuery();

			return rs.next() && rs.getInt(1) > 0;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(rs, pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.TopicDAO#removeSubscription(int, int)
	 */
	@Override public void removeSubscription(int topicId, int userId)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("TopicModel.removeSubscription"));
			pstmt.setInt(1, topicId);
			pstmt.setInt(2, userId);

			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.TopicDAO#removeSubscriptionByTopic(int)
	 */
	@Override public void removeSubscriptionByTopic(int topicId)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("TopicModel.removeSubscriptionByTopic"));
			pstmt.setInt(1, topicId);

			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.TopicDAO#updateReadStatus(int, int, boolean)
	 */
	@Override public void updateReadStatus(int topicId, int userId, boolean read)
	{
		if (this.isUserSubscribed(topicId, userId)) {
			PreparedStatement pstmt = null;
			try {
				pstmt = JForumExecutionContext.getConnection().prepareStatement(
						SystemGlobals.getSql("TopicModel.updateReadStatus"));
				pstmt.setInt(1, read ? 1 : 0);
				pstmt.setInt(2, topicId);
				pstmt.setInt(3, userId);

				pstmt.executeUpdate();
			}
			catch (SQLException e) {
				throw new DatabaseException(e);
			}
			finally {
				DbUtils.close(pstmt);
			}
		}
	}

	/**
	 * @see net.jforum.dao.TopicDAO#lockUnlock(int[], int)
	 */
	@Override public void lockUnlock(int[] topicId, int status)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(SystemGlobals.getSql("TopicModel.lockUnlock"));
			pstmt.setInt(1, status);

			for (int i = 0; i < topicId.length; i++) {
				pstmt.setInt(2, topicId[i]);
				pstmt.executeUpdate();
			}
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	private List<Topic> newMessages(List<Integer> topicIds)
	{
		if (topicIds.isEmpty()) {
			return new ArrayList<>();
		}

		PreparedStatement pstmt = null;

		try {
			String sql = SystemGlobals.getSql("TopicModel.selectForNewMessages");

			StringBuilder sb = new StringBuilder();

			for (Iterator<Integer> iter = topicIds.iterator(); iter.hasNext(); ) {
				sb.append(iter.next()).append(',');
			}

			sb.append("-1");

			sql = sql.replaceAll(":topicIds:", sb.toString());

			pstmt = JForumExecutionContext.getConnection().prepareStatement(sql);

			return this.fillTopicsData(pstmt);
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * Fills all topic data. The method will try to get all fields from the topics table, as well
	 * information about the user who made the first and the last post in the topic. <br>
	 * <b>The method <i>will</i> close the <i>PreparedStatement</i></b>
	 * 
	 * @param pstmt the PreparedStatement to execute
	 * @return A list with all topics found
	 * @throws SQLException
	 */
	public List<Topic> fillTopicsData(PreparedStatement pstmt)
	{
		List<Topic> l = new ArrayList<>();
		ResultSet rs = null;
		PreparedStatement pstmt2 = null;

		try {
			rs = pstmt.executeQuery();

			StringBuilder sbFirst = new StringBuilder(128);
			StringBuilder sbLast = new StringBuilder(128);

			while (rs.next()) {
				Topic topic = this.getBaseTopicData(rs);

				// Posted by
				User user = new User();
				user.setId(rs.getInt(USER_ID));
				topic.setPostedBy(user);

				// Last post by
				user = new User();
				user.setId(rs.getInt("last_user_id"));
				topic.setLastPostBy(user);

				topic.setHasAttach(rs.getInt("attach") > 0);
                topic.setFirstPostTime(rs.getTimestamp("topic_time"));
                Timestamp postTime = rs.getTimestamp("post_time");
                topic.setLastPostTime(postTime);
                topic.setLastPostDate(new Date(postTime.getTime()));

				l.add(topic);

				sbFirst.append(rs.getInt(USER_ID)).append(',');
				sbLast.append(rs.getInt("last_user_id")).append(',');
			}

			rs.close();

			// Users
			if (sbFirst.length() > 0) {
				sbLast.delete(sbLast.length() - 1, sbLast.length());

				String sql = SystemGlobals.getSql("TopicModel.getUserInformation");
				sql = sql.replaceAll("#ID#", sbFirst.toString() + sbLast.toString());

				Map<Integer, String> users = new ConcurrentHashMap<>();

				pstmt2 = JForumExecutionContext.getConnection().prepareStatement(sql);
				rs = pstmt2.executeQuery();

				while (rs.next()) {
					users.put(Integer.valueOf(rs.getInt(USER_ID)), rs.getString("username"));
				}

				for (Iterator<Topic> iter = l.iterator(); iter.hasNext();) {
					Topic topic = iter.next();
					topic.getPostedBy().setUsername(users.get(Integer.valueOf(topic.getPostedBy().getId())));
					topic.getLastPostBy().setUsername(users.get(Integer.valueOf(topic.getLastPostBy().getId())));
				}
			}

			return l;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(rs);
			DbUtils.close(pstmt2);
		}
	}

	/**
	 * @see net.jforum.dao.TopicDAO#selectRecentTopics(int)
	 */
	@Override public List<Topic> selectRecentTopics (int limit)
	{
		return selectRecentTopics(0, limit);
	}

	/**
	 * @see net.jforum.dao.TopicDAO#selectRecentTopics(int, int)
	 */
	@Override public List<Topic> selectRecentTopics (int start, int limit)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
				SystemGlobals.getSql("TopicModel.selectRecentTopicsByLimit"));
			pstmt.setInt(1, start);
			pstmt.setInt(2, limit);

			return this.fillTopicsData(pstmt);
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.TopicDAO#selectHottestTopics(int)
	 */
	@Override public List<Topic> selectHottestTopics (int limit)
	{
		boolean sortByViews = SystemGlobals.getBoolValue(ConfigKeys.HOTTEST_TOPICS_SORT);
	    PreparedStatement pstmt = null;
	    try {
	        String sql = SystemGlobals.getSql("TopicModel.selectHottestTopicsByLimit");
			sql = sql.replaceAll(":WHAT:", sortByViews ? "t.topic_views" : "t.topic_replies");
	        pstmt = JForumExecutionContext.getConnection().prepareStatement(sql);
	        pstmt.setInt(1, limit);

	        return this.fillTopicsData(pstmt);
	    }
	    catch (SQLException e) {
	        throw new DatabaseException(e);
	    }
	    finally {
	        DbUtils.close(pstmt);
	    }
	}

	/**
	 * @see net.jforum.dao.TopicDAO#setFirstPostId(int, int)
	 */
	@Override public void setFirstPostId(int topicId, int postId)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("TopicModel.setFirstPostId"));
			pstmt.setInt(1, postId);
			pstmt.setInt(2, topicId);
			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.TopicDAO#getMinPostId(int)
	 */
	@Override public int getMinPostId(int topicId)
	{
		int id = -1;

		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection()
					.prepareStatement(SystemGlobals.getSql("TopicModel.getMinPostId"));
			pstmt.setInt(1, topicId);

			ResultSet rs = pstmt.executeQuery();
			if (rs.next()) {
				id = rs.getInt("post_id");
			}

			return id;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.TopicDAO#setModerationStatus(int, boolean)
	 */
	@Override public void setModerationStatus(int forumId, boolean status)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("TopicModel.setModerationStatus"));
			pstmt.setInt(1, status ? 1 : 0);
			pstmt.setInt(2, forumId);
			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.TopicDAO#setModerationStatusByTopic(int, boolean)
	 */
	@Override public void setModerationStatusByTopic(int topicId, boolean status)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("TopicModel.setModerationStatusByTopic"));
			pstmt.setInt(1, status ? 1 : 0);
			pstmt.setInt(2, topicId);
			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.TopicDAO#selectTopicTitlesByIds(java.util.Collection)
	 */
	@Override public List<Map<String, Object>> selectTopicTitlesByIds(Collection<?> idList)
	{
		List<Map<String, Object>> l = new ArrayList<>();
		String sql = SystemGlobals.getSql("TopicModel.selectTopicTitlesByIds");

		StringBuilder sb = new StringBuilder(idList.size() * 2);
		for (Iterator<?> iter = idList.iterator(); iter.hasNext();) {
			sb.append(iter.next()).append(',');
		}

		int len = sb.length();
		sql = sql.replaceAll(":ids:", len > 0 ? sb.toString().substring(0, len - 1) : "0");
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(sql);

			rs = pstmt.executeQuery();
			while (rs.next()) {
				Map<String, Object> m = new ConcurrentHashMap<>();
				m.put("id", Integer.valueOf(rs.getInt("topic_id")));
				m.put("title", rs.getString("topic_title"));

				l.add(m);
			}
			return l;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(rs, pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.TopicDAO#topicPosters(int)
	 */
	@Override public Map<Integer, User> topicPosters(int topicId)
	{
		Map<Integer, User> m = new ConcurrentHashMap<>();

		PreparedStatement pstmt = null;
		ResultSet rs = null;

		try {
			StringBuilder sql = new StringBuilder(SystemGlobals.getSql("TopicModel.topicPosters"));

			pstmt = JForumExecutionContext.getConnection().prepareStatement(
				SystemGlobals.getSql("TopicModel.distinctPosters"));
			pstmt.setInt(1, topicId);

			rs = pstmt.executeQuery();

			StringBuilder sb = new StringBuilder();

			while (rs.next()) {
				sb.append(rs.getInt(USER_ID)).append(',');
			}

			rs.close();
			pstmt.close();

			int index = sql.indexOf(":ids:");
			if (index > -1) {
				sql.replace(index, index + 5, sb.substring(0, sb.length() - 1));
			}

			pstmt = JForumExecutionContext.getConnection().prepareStatement(sql.toString());
			rs = pstmt.executeQuery();

			while (rs.next()) {
				User user = new User();

				user.setId(rs.getInt(USER_ID));
				user.setUsername(rs.getString("username"));
				user.setKarma(new KarmaStatus(user.getId(), rs.getDouble("user_karma")));
				user.setAvatar(rs.getString("user_avatar"));
				user.setAvatarEnabled(rs.getInt("user_allowavatar") == 1);
				user.setRegistrationDate(new Date(rs.getTimestamp("user_regdate").getTime()));
				user.setTotalPosts(rs.getInt("user_posts"));
				user.setFrom(rs.getString("user_from"));
				user.setEmail(rs.getString("user_email"));
				user.setRankId(rs.getInt("rank_id"));
				user.setViewEmailEnabled(rs.getInt("user_viewemail") == 1);
				user.setIcq(rs.getString("user_icq"));
				user.setTwitter(rs.getString("user_twitter"));
				user.setAttachSignatureEnabled(rs.getInt("user_attachsig") == 1);
				user.setSkype(rs.getString("user_skype"));
				user.setWebSite(rs.getString("user_website"));
				user.setSignature(rs.getString("user_sig"));

				m.put(Integer.valueOf(user.getId()), user);
			}

			return m;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(rs, pstmt);
		}
	}

    /**
    * Returns all topics that are watched by a given user.
    * @param userId The user id
    */
    @Override public List<Map<String, Object>> selectWatchesByUser(int userId) {
        List<Map<String, Object>> l = new ArrayList<>();
        PreparedStatement p = null;
        ResultSet rs = null;
        try {
            p = JForumExecutionContext.getConnection().prepareStatement(
                    SystemGlobals.getSql("TopicModel.selectWatchesByUser"));
            p.setInt(1, userId);
            rs = p.executeQuery();
            while (rs.next()) {
            	Map<String, Object> m = new ConcurrentHashMap<>();
                m.put("id", Integer.valueOf(rs.getInt("topic_id")));
                m.put("title", rs.getString("topic_title"));
                m.put("forumName", rs.getString("forum_name"));
                l.add(m);
            }
            return l;
        } catch (SQLException e) {
            throw new DatabaseException(e);
        } finally {
            DbUtils.close(p);
        }
    }

}

../jforum2-code/src/main/java/net/jforum/dao/generic/GenericDataAccessDriver.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Mar 3, 2003 / 2:19:47 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao.generic;

import net.jforum.dao.ApiDAO;
import net.jforum.dao.AttachmentDAO;
import net.jforum.dao.BanlistDAO;
import net.jforum.dao.BannerDAO;
import net.jforum.dao.BookmarkDAO;
import net.jforum.dao.CategoryDAO;
import net.jforum.dao.ConfigDAO;
import net.jforum.dao.DataAccessDriver;
import net.jforum.dao.ForumDAO;
import net.jforum.dao.GroupDAO;
import net.jforum.dao.GroupSecurityDAO;
import net.jforum.dao.KarmaDAO;
import net.jforum.dao.LuceneDAO;
import net.jforum.dao.MailIntegrationDAO;
import net.jforum.dao.ModerationDAO;
import net.jforum.dao.ModerationLogDAO;
import net.jforum.dao.PollDAO;
import net.jforum.dao.PostDAO;
import net.jforum.dao.PrivateMessageDAO;
import net.jforum.dao.RankingDAO;
import net.jforum.dao.RegEmailDAO;
import net.jforum.dao.SmilieDAO;
import net.jforum.dao.SpamDAO;
import net.jforum.dao.SummaryDAO;
import net.jforum.dao.TopicDAO;
import net.jforum.dao.TreeGroupDAO;
import net.jforum.dao.UserDAO;
import net.jforum.dao.UserSessionDAO;
import net.jforum.dao.generic.security.GenericGroupSecurityDAO;

/**
 * @author Rafael Steil
 */
public class GenericDataAccessDriver extends DataAccessDriver 
{
	private static GroupDAO groupDao = new GenericGroupDAO();
	private static PostDAO postDao = new GenericPostDAO();
	private static PollDAO pollDao = new GenericPollDAO();
	private static RankingDAO rankingDao = new GenericRankingDAO();
	private static TopicDAO topicDao = new GenericTopicDAO();
	private static UserDAO userDao = new GenericUserDAO();
	private static TreeGroupDAO treeGroupDao = new GenericTreeGroupDAO();
	private static SmilieDAO smilieDao = new GenericSmilieDAO();
	private static GroupSecurityDAO groupSecurityDao = new GenericGroupSecurityDAO();
	private static PrivateMessageDAO privateMessageDao = new GenericPrivateMessageDAO();
	private static UserSessionDAO userSessionDao = new GenericUserSessionDAO();
	private static KarmaDAO karmaDao = new GenericKarmaDAO();
	private static BookmarkDAO bookmarkDao = new GenericBookmarkDAO();
	private static AttachmentDAO attachmentDao = new GenericAttachmentDAO();
	private static ModerationDAO moderationDao = new GenericModerationDAO();
	private static ForumDAO forumDao = new GenericForumDAO();
	private static CategoryDAO categoryDao = new GenericCategoryDAO();
	private static ConfigDAO configDao = new GenericConfigDAO();
	private static BannerDAO bannerDao = new GenericBannerDAO();
    private static SummaryDAO summaryDao = new GenericSummaryDAO();
    private static MailIntegrationDAO mailIntegrationDao = new GenericMailIntegrationDAO();
    private static ApiDAO apiDAO = new GenericApiDAO();
    private static BanlistDAO banlistDao = new GenericBanlistDAO();
    private static ModerationLogDAO moderationLogDao = new GenericModerationLogDAO();
    private static LuceneDAO luceneDao = new GenericLuceneDAO();
    private static SpamDAO spamDao = new GenericSpamDAO();
    private static RegEmailDAO regEmailDao = new GenericRegEmailDAO();

	/**
	 * @see net.jforum.dao.DataAccessDriver#newForumDAO()
	 */
	@Override public ForumDAO newForumDAO() 
	{
		return forumDao;
	}

	/**
	 * @see net.jforum.dao.DataAccessDriver#newGroupDAO()
	 */
	@Override public GroupDAO newGroupDAO() 
	{
		return groupDao;
	}

	/**
	 * @see net.jforum.dao.DataAccessDriver#newPostDAO()
	 */
	@Override public PostDAO newPostDAO() 
	{
		return postDao;
	}

	/**
	 * @see net.jforum.dao.DataAccessDriver#newPollDAO()
	 */
	@Override public PollDAO newPollDAO() 
	{
		return pollDao;
	}

	/**
	 * @see net.jforum.dao.DataAccessDriver#newRankingDAO()
	 */
	@Override public RankingDAO newRankingDAO() 
	{
		return rankingDao;
	}

	/**
	 * @see net.jforum.dao.DataAccessDriver#newTopicDAO()
	 */
	@Override public TopicDAO newTopicDAO() 
	{
		return topicDao;
	}

	/**
	 * @see net.jforum.dao.DataAccessDriver#newUserDAO()
	 */
	@Override public UserDAO newUserDAO() 
	{
		return userDao;
	}

	/**
	 * @see net.jforum.dao.DataAccessDriver#newCategoryDAO()
	 */
	@Override public CategoryDAO newCategoryDAO() 
	{
		return categoryDao;
	}

	/**
	 * @see net.jforum.dao.DataAccessDriver#newTreeGroupDAO()
	 */
	@Override public TreeGroupDAO newTreeGroupDAO() 
	{
		return treeGroupDao;
	}

	/** 
	 * @see net.jforum.dao.DataAccessDriver#newSmilieDAO()
	 */
	@Override public SmilieDAO newSmilieDAO() 
	{
		return smilieDao;
	}

	/** 
	 * @see net.jforum.dao.DataAccessDriver#newGroupSecurityDAO()
	 */
	@Override public GroupSecurityDAO newGroupSecurityDAO() 
	{
		return groupSecurityDao;
	}

	/** 
	 * @see net.jforum.dao.DataAccessDriver#newPrivateMessageDAO()
	 */
	@Override public PrivateMessageDAO newPrivateMessageDAO() 
	{
		return privateMessageDao;
	}

	/** 
	 * @see net.jforum.dao.DataAccessDriver#newUserSessionDAO()
	 */
	@Override public UserSessionDAO newUserSessionDAO()
	{
		return userSessionDao;
	}

	/** 
	 * @see net.jforum.dao.DataAccessDriver#newConfigDAO()
	 */
	@Override public ConfigDAO newConfigDAO()
	{
		return configDao;
	}

	/** 
	 * @see net.jforum.dao.DataAccessDriver#newKarmaDAO()
	 */
	@Override public KarmaDAO newKarmaDAO()
	{
		return karmaDao;
	}

	/** 
	 * @see net.jforum.dao.DataAccessDriver#newBookmarkDAO()
	 */
	@Override public BookmarkDAO newBookmarkDAO()
	{
		return bookmarkDao;
	}

	/** 
	 * @see net.jforum.dao.DataAccessDriver#newAttachmentDAO()
	 */
	@Override public AttachmentDAO newAttachmentDAO()
	{
		return attachmentDao;
	}

	/** 
	 * @see net.jforum.dao.DataAccessDriver#newModerationDAO()
	 */
	@Override public ModerationDAO newModerationDAO()
	{
		return moderationDao;
	}

    /**
     * @see net.jforum.dao.DataAccessDriver#newBannerDAO()
     */
	@Override public BannerDAO newBannerDAO()
	{
		return bannerDao;
	}
    
    /**
     * @see net.jforum.dao.DataAccessDriver#newSummaryDAO()
     */
    @Override public SummaryDAO newSummaryDAO()
    {
        return summaryDao;
    }
    
    /**
     * @see net.jforum.dao.DataAccessDriver#newMailIntegrationDAO()
     */
    @Override public MailIntegrationDAO newMailIntegrationDAO()
    {
    	return mailIntegrationDao;
    }

    /**
     * @see net.jforum.dao.DataAccessDriver#newApiDAO()
     */
    @Override public ApiDAO newApiDAO()
    {
    	return apiDAO;
    }

    /**
     * @see net.jforum.dao.DataAccessDriver#newBanlistDAO()
     */
    @Override public BanlistDAO newBanlistDAO()
    {
    	return banlistDao;
    }

    /**
     * @see net.jforum.dao.DataAccessDriver#newModerationLogDAO()
     */
    @Override public ModerationLogDAO newModerationLogDAO()
    {
    	return moderationLogDao;
    }

    /**
     * @see net.jforum.dao.DataAccessDriver#newLuceneDAO()
     */
    @Override public LuceneDAO newLuceneDAO()
    {
    	return luceneDao;
    }

    /**
     * @see net.jforum.dao.DataAccessDriver#newSpamDAO()
     */
    @Override public SpamDAO newSpamDAO()
    {
    	return spamDao;
    }

    /**
     * @see net.jforum.dao.DataAccessDriver#newRegEmailDAO()
     */
    @Override public RegEmailDAO newRegEmailDAO()
    {
    	return regEmailDao;
    }

}

../jforum2-code/src/main/java/net/jforum/dao/generic/GenericBannerDAO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms,
 * with or without modification, are permitted provided
 * that the following conditions are met:
 *
 * 1) Redistributions of source code must retain the above
 * copyright notice, this list of conditions and the
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the
 * above copyright notice, this list of conditions and
 * the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor
 * the names of its contributors may be used to endorse
 * or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
 * IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 *
 * Created on Mar 6, 2003 / 11:09:34 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao.generic;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import net.jforum.JForumExecutionContext;
import net.jforum.entities.Banner;
import net.jforum.exceptions.DatabaseException;
import net.jforum.util.DbUtils;
import net.jforum.util.preferences.SystemGlobals;

/**
 * @author Samuel Yung
 */
public class GenericBannerDAO extends AutoKeys implements net.jforum.dao.BannerDAO
{
	@Override public Banner selectById(final int bannerId)
	{
		PreparedStatement pstmt = null;
		ResultSet resultSet = null;
		Banner banner = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(SystemGlobals.getSql("BannerDAO.selectById"));
			pstmt.setInt(1, bannerId);

			resultSet = pstmt.executeQuery();

			banner = new Banner();
			if (resultSet.next()) {
				banner = this.getBanner(resultSet);
			}
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(resultSet, pstmt);
		}

		return banner;
	}

	@Override public List<Banner> selectAll()
	{
		PreparedStatement pstmt = null;
		ResultSet resultSet = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(SystemGlobals.getSql("BannerDAO.selectAll"));
			final List<Banner> list = new ArrayList<>();

			resultSet = pstmt.executeQuery();
			while (resultSet.next()) {
				list.add(this.getBanner(resultSet));
			}

			return list;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(resultSet, pstmt);
		}
	}

	protected Banner getBanner(final ResultSet resultSet) throws SQLException
	{
		final Banner banner = new Banner();

		banner.setId(resultSet.getInt("banner_id"));
		banner.setName(resultSet.getString("banner_name"));
		banner.setPlacement(resultSet.getInt("banner_placement"));
		banner.setDescription(resultSet.getString("banner_description"));
		banner.setClicks(resultSet.getInt("banner_clicks"));
		banner.setViews(resultSet.getInt("banner_views"));
		banner.setUrl(resultSet.getString("banner_url"));
		banner.setWeight(resultSet.getInt("banner_weight"));
		banner.setActive(resultSet.getInt("banner_active") == 1);
		banner.setComment(resultSet.getString("banner_comment"));
		banner.setType(resultSet.getInt("banner_type"));
		banner.setWidth(resultSet.getInt("banner_width"));
		banner.setHeight(resultSet.getInt("banner_height"));

		return banner;
	}

	@Override public boolean canDelete(final int bannerId)
	{
		boolean result = true;
		PreparedStatement pstmt = null;
		ResultSet resultSet = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(SystemGlobals.getSql("BannerDAO.canDelete"));
			pstmt.setInt(1, bannerId);

			resultSet = pstmt.executeQuery();
			if (!resultSet.next() || resultSet.getInt("total") < 1) {
				result = false;
			}

			return result;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(resultSet, pstmt);
		}
	}

	@Override public void delete(final int bannerId)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(SystemGlobals.getSql("BannerDAO.delete"));
			pstmt.setInt(1, bannerId);
			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	@Override public void update(final Banner banner)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(SystemGlobals.getSql("BannerDAO.update"));
			setBannerParam(pstmt, banner);
			pstmt.setInt(13, banner.getId());
			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	@Override public int addNew(final Banner banner)
	{
		PreparedStatement pstmt = null;
		try {
			this.setAutoGeneratedKeysQuery(SystemGlobals.getSql("BannerModel.lastGeneratedBannerId"));

			pstmt = this.getStatementForAutoKeys("BannerDAO.addNew");
			setBannerParam(pstmt, banner);
			final int id = this.executeAutoKeysQuery(pstmt);

			banner.setId(id);
			return id;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	protected void setBannerParam(final PreparedStatement pstmt, final Banner banner) throws SQLException
	{
		pstmt.setString(1, banner.getName());
		pstmt.setInt(2, banner.getPlacement());
		pstmt.setString(3, banner.getDescription());
		pstmt.setInt(4, banner.getClicks());
		pstmt.setInt(5, banner.getViews());
		pstmt.setString(6, banner.getUrl());
		pstmt.setInt(7, banner.getWeight());
		pstmt.setInt(8, banner.isActive() ? 1 : 0);
		pstmt.setString(9, banner.getComment());
		pstmt.setInt(10, banner.getType());
		pstmt.setInt(11, banner.getWidth());
		pstmt.setInt(12, banner.getHeight());
	}

	@Override public List<Banner> selectActiveBannerByPlacement(final int placement)
	{
		PreparedStatement pstmt = null;
		ResultSet resultSet = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("BannerDAO.selectActiveBannerByPlacement"));
			pstmt.setInt(1, placement);

			final List<Banner> list = new ArrayList<>();

			resultSet = pstmt.executeQuery();
			while (resultSet.next()) {
				list.add(this.getBanner(resultSet));
			}

			return list;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(resultSet, pstmt);
		}
	}
}

../jforum2-code/src/main/java/net/jforum/dao/generic/GenericAttachmentDAO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 *
 * Created on Jan 17, 2005 4:36:30 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao.generic;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import net.jforum.JForumExecutionContext;
import net.jforum.entities.Attachment;
import net.jforum.entities.AttachmentExtension;
import net.jforum.entities.AttachmentExtensionGroup;
import net.jforum.entities.AttachmentInfo;
import net.jforum.entities.QuotaLimit;
import net.jforum.entities.TopDownloadInfo;
import net.jforum.exceptions.DatabaseException;
import net.jforum.util.DbUtils;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;

/**
 * @author Rafael Steil
 */
public class GenericAttachmentDAO extends AutoKeys implements net.jforum.dao.AttachmentDAO
{
	/**
	 * @see net.jforum.dao.AttachmentDAO#addQuotaLimit(net.jforum.entities.QuotaLimit)
	 */
	@Override public void addQuotaLimit(final QuotaLimit limit)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("AttachmentModel.addQuotaLimit"));
			pstmt.setString(1, limit.getDescription());
			pstmt.setInt(2, limit.getSize());
			pstmt.setInt(3, limit.getType());
			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.AttachmentDAO#updateQuotaLimit(net.jforum.entities.QuotaLimit)
	 */
	@Override public void updateQuotaLimit(final QuotaLimit limit)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("AttachmentModel.updateQuotaLimit"));
			pstmt.setString(1, limit.getDescription());
			pstmt.setInt(2, limit.getSize());
			pstmt.setInt(3, limit.getType());
			pstmt.setInt(4, limit.getId());
			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.AttachmentDAO#cleanGroupQuota()
	 */
	@Override public void cleanGroupQuota()
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("AttachmentModel.deleteGroupQuota"));
			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.AttachmentDAO#setGroupQuota(int, int)
	 */
	@Override public void setGroupQuota(final int groupId, final int quotaId)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("AttachmentModel.setGroupQuota"));
			pstmt.setInt(1, groupId);
			pstmt.setInt(2, quotaId);
			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.AttachmentDAO#removeQuotaLimit(int)
	 */
	@Override public void removeQuotaLimit(final int id)
	{
		this.removeQuotaLimit(new String[] { Integer.toString(id) });
	}

	/**
	 * @see net.jforum.dao.AttachmentDAO#removeQuotaLimit(java.lang.String[])
	 */
	@Override public void removeQuotaLimit(final String[] ids)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("AttachmentModel.removeQuotaLimit"));

			for (int i = 0; i < ids.length; i++) {
				pstmt.setInt(1, Integer.parseInt(ids[i]));
				pstmt.executeUpdate();
			}
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.AttachmentDAO#selectQuotaLimit()
	 */
	@Override public List<QuotaLimit> selectQuotaLimit()
	{
		final List<QuotaLimit> list = new ArrayList<>();
		PreparedStatement pstmt = null;
		ResultSet resultSet = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("AttachmentModel.selectQuotaLimit"));

			resultSet = pstmt.executeQuery();
			while (resultSet.next()) {
				list.add(this.getQuotaLimit(resultSet));
			}

			return list;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(resultSet, pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.AttachmentDAO#selectQuotaLimit()
	 */
	@Override public QuotaLimit selectQuotaLimitByGroup(final int groupId)
	{
		QuotaLimit quotaLimit = null;

		PreparedStatement pstmt = null;
		ResultSet resultSet = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("AttachmentModel.selectQuotaLimitByGroup"));
			pstmt.setInt(1, groupId);

			resultSet = pstmt.executeQuery();
			if (resultSet.next()) {
				quotaLimit = this.getQuotaLimit(resultSet);
			}
			return quotaLimit;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(resultSet, pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.AttachmentDAO#selectGroupsQuotaLimits()
	 */
	@Override public Map<Integer, Integer> selectGroupsQuotaLimits()
	{
		final Map<Integer, Integer> map = new ConcurrentHashMap<>();
		PreparedStatement pstmt = null;
		ResultSet resultSet = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("AttachmentModel.selectGroupsQuotaLimits"));

			resultSet = pstmt.executeQuery();
			while (resultSet.next()) {
				map.put(Integer.valueOf(resultSet.getInt("group_id")), Integer.valueOf(resultSet.getInt("quota_limit_id")));
			}

			return map;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(resultSet, pstmt);
		}
	}

	protected QuotaLimit getQuotaLimit(final ResultSet resultSet) throws SQLException
	{
		final QuotaLimit quotaLimit = new QuotaLimit();
		quotaLimit.setDescription(resultSet.getString("quota_desc"));
		quotaLimit.setId(resultSet.getInt("quota_limit_id"));
		quotaLimit.setSize(resultSet.getInt("quota_limit"));
		quotaLimit.setType(resultSet.getInt("quota_type"));

		return quotaLimit;
	}

	/**
	 * @see net.jforum.dao.AttachmentDAO#addExtensionGroup(net.jforum.entities.AttachmentExtensionGroup)
	 */
	@Override public void addExtensionGroup(final AttachmentExtensionGroup aeg)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("AttachmentModel.addExtensionGroup"));
			pstmt.setString(1, aeg.getName());
			pstmt.setInt(2, aeg.isAllow() ? 1 : 0);
			pstmt.setString(3, aeg.getUploadIcon());
			pstmt.setInt(4, aeg.getDownloadMode());
			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.AttachmentDAO#removeExtensionGroups(java.lang.String[])
	 */
	@Override public void removeExtensionGroups(final String[] ids)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("AttachmentModel.removeExtensionGroups"));

			for (int i = 0; i < ids.length; i++) {
				pstmt.setInt(1, Integer.parseInt(ids[i]));
				pstmt.executeUpdate();
			}
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.AttachmentDAO#selectExtensionGroups()
	 */
	@Override public List<AttachmentExtensionGroup> selectExtensionGroups()
	{
		final List<AttachmentExtensionGroup> list = new ArrayList<>();

		PreparedStatement pstmt = null;
		ResultSet resultSet = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("AttachmentModel.selectExtensionGroups"));

			resultSet = pstmt.executeQuery();
			while (resultSet.next()) {
				list.add(this.getExtensionGroup(resultSet));
			}

			return list;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(resultSet, pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.AttachmentDAO#extensionsForSecurity()
	 */
	@Override public Map<String, Boolean> extensionsForSecurity()
	{
		final Map<String, Boolean> map = new ConcurrentHashMap<>();

		PreparedStatement pstmt = null;
		ResultSet resultSet = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("AttachmentModel.extensionsForSecurity"));

			resultSet = pstmt.executeQuery();
			while (resultSet.next()) {
				int allow = resultSet.getInt("group_allow");
				if (allow == 1) {
					allow = resultSet.getInt("allow");
				}

				map.put(resultSet.getString("extension"), Boolean.valueOf(allow == 1));
			}

			return map;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(resultSet, pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.AttachmentDAO#updateExtensionGroup(net.jforum.entities.AttachmentExtensionGroup)
	 */
	@Override public void updateExtensionGroup(final AttachmentExtensionGroup aeg)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("AttachmentModel.updateExtensionGroups"));
			pstmt.setString(1, aeg.getName());
			pstmt.setInt(2, aeg.isAllow() ? 1 : 0);
			pstmt.setString(3, aeg.getUploadIcon());
			pstmt.setInt(4, aeg.getDownloadMode());
			pstmt.setInt(5, aeg.getId());
			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	protected AttachmentExtensionGroup getExtensionGroup(final ResultSet resultSet) throws SQLException
	{
		final AttachmentExtensionGroup aeg = new AttachmentExtensionGroup();
		aeg.setId(resultSet.getInt("extension_group_id"));
		aeg.setName(resultSet.getString("name"));
		aeg.setUploadIcon(resultSet.getString("upload_icon"));
		aeg.setAllow(resultSet.getInt("allow") == 1);
		aeg.setDownloadMode(resultSet.getInt("download_mode"));

		return aeg;
	}

	/**
	 * @see net.jforum.dao.AttachmentDAO#addExtension(net.jforum.entities.AttachmentExtension)
	 */
	@Override public void addExtension(final AttachmentExtension extension)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("AttachmentModel.addExtension"));
			pstmt.setInt(1, extension.getExtensionGroupId());
			pstmt.setString(2, extension.getComment());
			pstmt.setString(3, extension.getUploadIcon());
			pstmt.setString(4, extension.getExtension().toLowerCase());
			pstmt.setInt(5, extension.isAllow() ? 1 : 0);
			pstmt.executeUpdate();
		}
		catch (SQLException ex) {
			throw new DatabaseException(ex);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.AttachmentDAO#removeExtensions(java.lang.String[])
	 */
	@Override public void removeExtensions(final String[] ids)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("AttachmentModel.removeExtension"));
			for (int i = 0; i < ids.length; i++) {
				pstmt.setInt(1, Integer.parseInt(ids[i]));
				pstmt.executeUpdate();
			}
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.AttachmentDAO#selectExtensions()
	 */
	@Override public List<AttachmentExtension> selectExtensions()
	{
		final List<AttachmentExtension> list = new ArrayList<>();

		PreparedStatement pstmt = null;
		ResultSet resultSet = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("AttachmentModel.selectExtensions"));

			resultSet = pstmt.executeQuery();
			while (resultSet.next()) {
				list.add(this.getExtension(resultSet));
			}

			return list;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(resultSet, pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.AttachmentDAO#updateExtension(net.jforum.entities.AttachmentExtension)
	 */
	@Override public void updateExtension(final AttachmentExtension extension)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("AttachmentModel.updateExtension"));
			pstmt.setInt(1, extension.getExtensionGroupId());
			pstmt.setString(2, extension.getComment());
			pstmt.setString(3, extension.getUploadIcon());
			pstmt.setString(4, extension.getExtension().toLowerCase());
			pstmt.setInt(5, extension.isAllow() ? 1 : 0);
			pstmt.setInt(6, extension.getId());
			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.AttachmentDAO#selectExtension(java.lang.String)
	 */
	@Override public AttachmentExtension selectExtension(final String extension)
	{
		return this.searchExtension(SystemGlobals.getValue(ConfigKeys.EXTENSION_FIELD), extension);
	}

	private AttachmentExtension selectExtension(final int extensionId)
	{
		return this.searchExtension("extension_id", Integer.valueOf(extensionId));
	}

	private AttachmentExtension searchExtension(final String paramName, final Object paramValue)
	{
		PreparedStatement pstmt = null;
		ResultSet resultSet = null;
		try {
			String sql = SystemGlobals.getSql("AttachmentModel.selectExtension");
			sql = sql.replaceAll("\\$field", paramName);

			pstmt = JForumExecutionContext.getConnection().prepareStatement(sql);
			pstmt.setObject(1, paramValue);

			AttachmentExtension extension = new AttachmentExtension();

			resultSet = pstmt.executeQuery();
			if (resultSet.next()) {
				extension = this.getExtension(resultSet);
			}
			else {
				extension.setUnknown(true);
			}

			return extension;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(resultSet, pstmt);
		}
	}

	protected AttachmentExtension getExtension(final ResultSet resultSet) throws SQLException
	{
		final AttachmentExtension extension = new AttachmentExtension();
		extension.setAllow(resultSet.getInt("allow") == 1);
		extension.setComment(resultSet.getString("description"));
		extension.setExtension(resultSet.getString("extension"));
		extension.setExtensionGroupId(resultSet.getInt("extension_group_id"));
		extension.setId(resultSet.getInt("extension_id"));

		String icon = resultSet.getString("upload_icon");
		if (icon == null || icon.equals("")) {
			icon = resultSet.getString("group_icon");
		}

		extension.setUploadIcon(icon);

		return extension;
	}

	/**
	 * @see net.jforum.dao.AttachmentDAO#addAttachment(net.jforum.entities.Attachment)
	 */
	@Override public void addAttachment(final Attachment attachment)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = this.getStatementForAutoKeys("AttachmentModel.addAttachment");
			pstmt.setInt(1, attachment.getPostId());
			pstmt.setInt(2, attachment.getPrivmsgsId());
			pstmt.setInt(3, attachment.getUserId());

			this.setAutoGeneratedKeysQuery(SystemGlobals.getSql("AttachmentModel.lastGeneratedAttachmentId"));
			final int id = this.executeAutoKeysQuery(pstmt);
			pstmt.close();

			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("AttachmentModel.addAttachmentInfo"));
			pstmt.setInt(1, id);
			pstmt.setString(2, attachment.getInfo().getPhysicalFilename());
			pstmt.setString(3, attachment.getInfo().getRealFilename());
			pstmt.setString(4, attachment.getInfo().getComment());
			pstmt.setString(5, attachment.getInfo().getMimetype());
			pstmt.setLong(6, attachment.getInfo().getFilesize());
			pstmt.setTimestamp(7, new Timestamp(attachment.getInfo().getUploadTimeInMillis()));
			pstmt.setInt(8, 0);
			pstmt.setInt(9, attachment.getInfo().getExtension().getId());
			pstmt.executeUpdate();

			this.updatePost(attachment.getPostId(), 1);
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	protected void updatePost(final int postId, final int count)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("AttachmentModel.updatePost"));
			pstmt.setInt(1, count);
			pstmt.setInt(2, postId);
			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.AttachmentDAO#removeAttachment(int, int)
	 */
	@Override public void removeAttachment(final int id, final int postId)
	{
		PreparedStatement pstmt = null;
		ResultSet resultSet = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("AttachmentModel.removeAttachmentInfo"));
			pstmt.setInt(1, id);
			pstmt.executeUpdate();
			pstmt.close();

			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("AttachmentModel.removeAttachment"));
			pstmt.setInt(1, id);
			pstmt.executeUpdate();
			pstmt.close();

			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("AttachmentModel.countPostAttachments"));
			pstmt.setInt(1, postId);

			resultSet = pstmt.executeQuery();
			if (resultSet.next()) {
				this.updatePost(postId, resultSet.getInt(1));
			}
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(resultSet, pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.AttachmentDAO#updateAttachment(net.jforum.entities.Attachment)
	 */
	@Override public void updateAttachment(final Attachment attachment)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("AttachmentModel.updateAttachment"));
			pstmt.setString(1, attachment.getInfo().getComment());
			pstmt.setInt(2, attachment.getInfo().getDownloadCount());
			pstmt.setInt(3, attachment.getId());
			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.AttachmentDAO#selectAttachments(int)
	 */
	@Override public List<Attachment> selectAttachments(final int postId)
	{
		final List<Attachment> list = new ArrayList<>();

		PreparedStatement pstmt = null;
		ResultSet resultSet = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("AttachmentModel.selectAttachments"));
			pstmt.setInt(1, postId);

			resultSet = pstmt.executeQuery();
			while (resultSet.next()) {
				list.add(this.getAttachment(resultSet));
			}

			return list;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(resultSet, pstmt);
		}
	}

	protected Attachment getAttachment(final ResultSet resultSet) throws SQLException
	{
		final Attachment attachment = new Attachment();
		attachment.setId(resultSet.getInt("attach_id"));
		attachment.setPostId(resultSet.getInt("post_id"));
		attachment.setPrivmsgsId(resultSet.getInt("privmsgs_id"));

		final AttachmentInfo attachmentInfo = new AttachmentInfo();
		attachmentInfo.setComment(resultSet.getString("description"));
		attachmentInfo.setDownloadCount(resultSet.getInt("download_count"));
		attachmentInfo.setFilesize(resultSet.getLong("filesize"));
		attachmentInfo.setMimetype(resultSet.getString("mimetype"));
		attachmentInfo.setPhysicalFilename(resultSet.getString("physical_filename"));
		attachmentInfo.setRealFilename(resultSet.getString("real_filename"));
		attachmentInfo.setUploadTime(new Date(resultSet.getTimestamp("upload_time").getTime()));
		attachmentInfo.setExtension(this.selectExtension(resultSet.getInt("extension_id")));

		attachment.setInfo(attachmentInfo);

		return attachment;
	}

	/**
	 * @see net.jforum.dao.AttachmentDAO#selectAttachmentById(int)
	 */
	@Override public Attachment selectAttachmentById(final int attachId)
	{
		PreparedStatement pstmt = null;
		ResultSet resultSet = null;
		try {
			Attachment attachment = null;

			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("AttachmentModel.selectAttachmentById"));
			pstmt.setInt(1, attachId);

			resultSet = pstmt.executeQuery();
			if (resultSet.next()) {
				attachment = this.getAttachment(resultSet);
			}

			return attachment;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(resultSet, pstmt);
		}
	}

	@Override public boolean isPhysicalDownloadMode(final int extensionGroupId)
	{
		boolean result = true;

		PreparedStatement pstmt = null;
		ResultSet resultSet = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("AttachmentModel.isPhysicalDownloadMode"));

			pstmt.setInt(1, extensionGroupId);

			resultSet = pstmt.executeQuery();
			if (resultSet.next()) {
				result = (resultSet.getInt("download_mode") == 2);
			}

			return result;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(resultSet, pstmt);
		}
	}

	@Override public List<TopDownloadInfo> selectTopDownloads(int limit) {
		final List<TopDownloadInfo> list = new ArrayList<>();
		PreparedStatement pstmt = null;
		ResultSet resultSet = null;
		try {			
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("AttachmentModel.selectTopDownloadsByLimit"));
			pstmt.setInt(1, limit);
			
			resultSet = pstmt.executeQuery();
			while (resultSet.next()) {
				TopDownloadInfo tdi = new TopDownloadInfo();
				tdi.setForumId(resultSet.getInt("forum_id"));
				tdi.setForumName(resultSet.getString("forum_name"));
				tdi.setTopicId(resultSet.getInt("topic_id"));
				tdi.setTopicTitle(resultSet.getString("topic_title"));
				tdi.setAttachId(resultSet.getInt("attach_id"));
				tdi.setRealFilename(resultSet.getString("real_filename"));
				tdi.setFilesize(resultSet.getLong("filesize"));
				tdi.setDownloadCount(resultSet.getInt("download_count"));
				list.add(tdi);
			}
		} catch (SQLException e) {
			throw new DatabaseException(e);
		} finally {
			DbUtils.close(resultSet, pstmt);
		}
		return list;
	}
}

../jforum2-code/src/main/java/net/jforum/dao/generic/GenericCategoryDAO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Mar 6, 2003 / 11:09:34 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao.generic;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import net.jforum.JForumExecutionContext;
import net.jforum.entities.Category;
import net.jforum.exceptions.DatabaseException;
import net.jforum.util.DbUtils;
import net.jforum.util.preferences.SystemGlobals;

/**
 * @author Rafael Steil
 */
public class GenericCategoryDAO extends AutoKeys implements net.jforum.dao.CategoryDAO
{
	/**
	 * @see net.jforum.dao.CategoryDAO#selectById(int)
	 */
	@Override public Category selectById(final int categoryId)
	{
		PreparedStatement pstmt = null;
		ResultSet resultSet = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("CategoryModel.selectById"));
			pstmt.setInt(1, categoryId);

			resultSet = pstmt.executeQuery();

			Category category = new Category();
			if (resultSet.next()) {
				category = this.getCategory(resultSet);
			}

			return category;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(resultSet, pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.CategoryDAO#selectAll()
	 */
	@Override public List<Category> selectAll()
	{
		PreparedStatement pstmt = null;
		ResultSet resultSet = null;
		try {
			pstmt = JForumExecutionContext.getConnection()
					.prepareStatement(SystemGlobals.getSql("CategoryModel.selectAll"));
			final List<Category> list = new ArrayList<>();

			resultSet = pstmt.executeQuery();
			while (resultSet.next()) {
				list.add(this.getCategory(resultSet));
			}
			return list;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(resultSet, pstmt);
		}
	}

	protected Category getCategory(final ResultSet resultSet) throws SQLException
	{
		final Category category = new Category();

		category.setId(resultSet.getInt("categories_id"));
		category.setName(resultSet.getString("title"));
		category.setOrder(resultSet.getInt("display_order"));
		category.setModerated(resultSet.getInt("moderated") == 1);

		return category;
	}

	/**
	 * @see net.jforum.dao.CategoryDAO#canDelete(int)
	 */
	@Override public boolean canDelete(final int categoryId)
	{
		PreparedStatement pstmt = null;
		ResultSet resultSet = null;
		try {
			pstmt = JForumExecutionContext.getConnection()
					.prepareStatement(SystemGlobals.getSql("CategoryModel.canDelete"));
			pstmt.setInt(1, categoryId);

			resultSet = pstmt.executeQuery();
			return !resultSet.next() || resultSet.getInt("total") < 1;

		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(resultSet, pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.CategoryDAO#delete(int)
	 */
	@Override public void delete(final int categoryId)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(SystemGlobals.getSql("CategoryModel.delete"));
			pstmt.setInt(1, categoryId);
			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.CategoryDAO#update(net.jforum.entities.Category)
	 */
	@Override public void update(final Category category)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(SystemGlobals.getSql("CategoryModel.update"));
			pstmt.setString(1, category.getName());
			pstmt.setInt(2, category.isModerated() ? 1 : 0);
			pstmt.setInt(3, category.getId());
			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.CategoryDAO#addNew(net.jforum.entities.Category)
	 */
	@Override public int addNew(final Category category)
	{
		int order = 1;
		ResultSet resultSet = null;
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("CategoryModel.getMaxOrder"));
			resultSet = pstmt.executeQuery();
			if (resultSet.next()) {
				order = resultSet.getInt(1) + 1;
			}
			resultSet.close();
			pstmt.close();

			pstmt = this.getStatementForAutoKeys("CategoryModel.addNew");
			pstmt.setString(1, category.getName());
			pstmt.setInt(2, order);
			pstmt.setInt(3, category.isModerated() ? 1 : 0);

			this.setAutoGeneratedKeysQuery(SystemGlobals.getSql("CategoryModel.lastGeneratedCategoryId"));
			final int id = this.executeAutoKeysQuery(pstmt);

			category.setId(id);
			category.setOrder(order);
			return id;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(resultSet, pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.CategoryDAO#setOrderUp(Category, Category)
	 */
	@Override public void setOrderUp(final Category category, final Category relatedCategory)
	{
		this.setOrder(category, relatedCategory);
	}

	/**
	 * @see net.jforum.dao.CategoryDAO#setOrderDown(Category, Category)
	 */
	@Override public void setOrderDown(final Category category, final Category relatedCategory)
	{
		this.setOrder(category, relatedCategory);
	}

	/**
	 * @param category Category
	 * @param otherCategory Category
	 */
	private void setOrder(final Category category, final Category otherCategory)
	{
		final int tmpOrder = otherCategory.getOrder();
		otherCategory.setOrder(category.getOrder());
		category.setOrder(tmpOrder);

		PreparedStatement pstmt = null;
		
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("CategoryModel.setOrderById"));
			pstmt.setInt(1, otherCategory.getOrder());
			pstmt.setInt(2, otherCategory.getId());
			pstmt.executeUpdate();
			pstmt.close();

			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("CategoryModel.setOrderById"));
			pstmt.setInt(1, category.getOrder());
			pstmt.setInt(2, category.getId());
			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}
}

../jforum2-code/src/main/java/net/jforum/dao/generic/GenericKarmaDAO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Jan 11, 2005 11:22:19 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao.generic;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import net.jforum.JForumExecutionContext;
import net.jforum.entities.Karma;
import net.jforum.entities.KarmaStatus;
import net.jforum.entities.User;
import net.jforum.exceptions.DatabaseException;
import net.jforum.util.DbUtils;
import net.jforum.util.preferences.SystemGlobals;

/**
 * @author Rafael Steil
 */
public class GenericKarmaDAO implements net.jforum.dao.KarmaDAO
{
	/**
	 * @see net.jforum.dao.KarmaDAO#addKarma(net.jforum.entities.Karma)
	 */
	@Override public void addKarma(final Karma karma)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(SystemGlobals.getSql("KarmaModel.add"));
			pstmt.setInt(1, karma.getPostId());
			pstmt.setInt(2, karma.getPostUserId());
			pstmt.setInt(3, karma.getFromUserId());
			pstmt.setInt(4, karma.getPoints());
			pstmt.setInt(5, karma.getTopicId());
			pstmt.setTimestamp(6, new Timestamp(System.currentTimeMillis()));
			pstmt.executeUpdate();

			this.updateUserKarma(karma.getPostUserId());
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.KarmaDAO#getUserKarma(int)
	 */
	@Override public KarmaStatus getUserKarma(final int userId)
	{
		final KarmaStatus status = new KarmaStatus();

		PreparedStatement pstmt = null;
		ResultSet resultSet = null;
		try {
			pstmt = JForumExecutionContext.getConnection()
					.prepareStatement(SystemGlobals.getSql("KarmaModel.getUserKarma"));
			pstmt.setInt(1, userId);

			resultSet = pstmt.executeQuery();
			if (resultSet.next()) {
				status.setKarmaPoints(Math.round(resultSet.getDouble("user_karma")));
			}

			return status;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(resultSet, pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.KarmaDAO#updateUserKarma(int)
	 */
	@Override public void updateUserKarma(final int userId)
	{
		PreparedStatement pstmt = null;
		ResultSet resultSet = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("KarmaModel.getUserKarmaPoints"));
			pstmt.setInt(1, userId);

			int totalRecords = 0;
			double totalPoints = 0;
			resultSet = pstmt.executeQuery();

			while (resultSet.next()) {
				final int points = resultSet.getInt("points");
				final int votes = resultSet.getInt("votes");

				totalPoints += ((double) points / votes);
				totalRecords++;
			}

			resultSet.close();
			pstmt.close();

			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("KarmaModel.updateUserKarma"));

			double karmaPoints = totalPoints / totalRecords;

			if (Double.isNaN(karmaPoints)) {
				karmaPoints = 0;
			}

			pstmt.setDouble(1, karmaPoints);
			pstmt.setInt(2, userId);
			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(resultSet, pstmt);
		}
	}	

	/**
	 * @see net.jforum.dao.KarmaDAO#update(net.jforum.entities.Karma)
	 */
	@Override public void update(final Karma karma)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(SystemGlobals.getSql("KarmaModel.update"));
			pstmt.setInt(1, karma.getPoints());
			pstmt.setInt(2, karma.getId());
			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.KarmaDAO#getPostKarma(int)
	 */
	@Override public KarmaStatus getPostKarma(final int postId)
	{
		final KarmaStatus karma = new KarmaStatus();

		PreparedStatement pstmt = null;
		ResultSet resultSet = null;
		try {
			pstmt = JForumExecutionContext.getConnection()
					.prepareStatement(SystemGlobals.getSql("KarmaModel.getPostKarma"));
			pstmt.setInt(1, postId);

			resultSet = pstmt.executeQuery();
			if (resultSet.next()) {
				karma.setKarmaPoints(Math.round(resultSet.getDouble(1)));
			}

			return karma;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(resultSet, pstmt);
		}
	}

    /**
     * @see net.jforum.dao.KarmaDAO#deletePostKarma(int)
     */
    @Override public void deletePostKarma(final int postId)
    {
        PreparedStatement pstmt = null;
        try {
        	pstmt = JForumExecutionContext.getConnection()
                    .prepareStatement(SystemGlobals.getSql("KarmaModel.deletePostKarma"));
        	pstmt.setInt(1, postId);
        	pstmt.executeUpdate();
        }
        catch (SQLException e) {
        	throw new DatabaseException(e);
        }
        finally {
        	DbUtils.close(pstmt);
        }
    }
    
	/**
	 * @see net.jforum.dao.KarmaDAO#userCanAddKarma(int, int)
	 */
	@Override public boolean userCanAddKarma(final int userId, final int postId)
	{
		boolean status = true;

		PreparedStatement pstmt = null;
		ResultSet resultSet = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("KarmaModel.userCanAddKarma"));
			pstmt.setInt(1, postId);
			pstmt.setInt(2, userId);

			resultSet = pstmt.executeQuery();
			if (resultSet.next()) {
				status = resultSet.getInt(1) < 1;
			}

			return status;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(resultSet, pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.KarmaDAO#getUserVotes(int, int)
	 */
	@Override public Map<Integer, Integer> getUserVotes(final int topicId, final int userId)
	{
		final Map<Integer, Integer> map = new ConcurrentHashMap<>();

		PreparedStatement pstmt = null;
		ResultSet resultSet = null;
		try {
			pstmt = JForumExecutionContext.getConnection()
					.prepareStatement(SystemGlobals.getSql("KarmaModel.getUserVotes"));
			pstmt.setInt(1, topicId);
			pstmt.setInt(2, userId);

			resultSet = pstmt.executeQuery();
			while (resultSet.next()) {
				map.put(Integer.valueOf(resultSet.getInt("post_id")), Integer.valueOf(resultSet.getInt("points")));
			}

			return map;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(resultSet, pstmt);
		}
	}

	@Override public void getUserTotalKarma(final User user)
	{
		PreparedStatement pstmt = null;
		ResultSet resultSet = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("KarmaModel.getUserTotalVotes"));
			pstmt.setInt(1, user.getId());

			resultSet = pstmt.executeQuery();

			user.setKarma(new KarmaStatus());

			if (resultSet.next()) {
				user.getKarma().setTotalPoints(resultSet.getInt("points"));
				user.getKarma().setVotesReceived(resultSet.getInt("votes"));
			}

			if (user.getKarma().getVotesReceived() != 0) {
				// prevetns division by zero.
				user.getKarma().setKarmaPoints(user.getKarma().getTotalPoints() / (double)user.getKarma().getVotesReceived());
			}
			this.getVotesGiven(user);
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(resultSet, pstmt);
		}
	}

	private void getVotesGiven(final User user)
	{
		PreparedStatement pstmt = null;
		ResultSet resultSet = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("KarmaModel.getUserGivenVotes"));
			pstmt.setInt(1, user.getId());

			resultSet = pstmt.executeQuery();

			if (resultSet.next()) {
				user.getKarma().setVotesGiven(resultSet.getInt("votes"));
			}
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(resultSet, pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.KarmaDAO#getMostRatedUserByPeriod(int, java.util.Date, java.util.Date,
	 *      String)
	 */
	@Override public List<User> getMostRatedUserByPeriod(final int start, final Date firstPeriod, final Date lastPeriod, final String orderField)
	{
		String sql = SystemGlobals.getSql("KarmaModel.getMostRatedUserByPeriod");
		sql = new StringBuilder(sql).append(" ORDER BY ").append(orderField).append(" DESC").toString();

		return this.getMostRatedUserByPeriod(sql, firstPeriod, lastPeriod);
	}

	/**
	 * 
	 * @param sql String
	 * @param firstPeriod Date
	 * @param lastPeriod Date
	 * @return List
	 */
	protected List<User> getMostRatedUserByPeriod(final String sql, final Date firstPeriod, final Date lastPeriod)
	{
		if (firstPeriod.after(lastPeriod)) {
			throw new DatabaseException("First Date needs to be before the Last Date");
		}

		PreparedStatement pstmt = null;
		ResultSet resultSet = null;
		
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(sql);
			pstmt.setTimestamp(1, new Timestamp(firstPeriod.getTime()));
			pstmt.setTimestamp(2, new Timestamp(lastPeriod.getTime()));

			resultSet = pstmt.executeQuery();
			return this.fillUser(resultSet);
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(resultSet, pstmt);
		}
	}

	protected List<User> fillUser(final ResultSet resultSet) throws SQLException
	{
		final List<User> usersAndPoints = new ArrayList<>();
		KarmaStatus karma = null;
		while (resultSet.next()) {
			final User user = new User();
			karma = new KarmaStatus();
			karma.setTotalPoints(resultSet.getInt("total"));
			karma.setVotesReceived(resultSet.getInt("votes_received"));
			karma.setKarmaPoints(resultSet.getDouble("user_karma"));
			karma.setVotesGiven(resultSet.getInt("votes_given"));
			user.setUsername(resultSet.getString("username"));
			user.setId(resultSet.getInt("user_id"));
			user.setKarma(karma);
			usersAndPoints.add(user);
		}
		return usersAndPoints;
	}
}

../jforum2-code/src/main/java/net/jforum/dao/generic/GenericModerationLogDAO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 08/07/2007 11:29:41
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao.generic;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import net.jforum.JForumExecutionContext;
import net.jforum.dao.ModerationLogDAO;
import net.jforum.entities.ModerationLog;
import net.jforum.entities.User;
import net.jforum.exceptions.DatabaseException;
import net.jforum.util.DbUtils;
import net.jforum.util.preferences.SystemGlobals;

/**
 * @author Rafael Steil
 */
public class GenericModerationLogDAO extends AutoKeys implements ModerationLogDAO
{
	@Override public void add(ModerationLog log)
	{
		PreparedStatement pstmt = null;
		
		try {
			pstmt = this.getStatementForAutoKeys("ModerationLog.addNew");
			pstmt.setInt(1, log.getUser().getId());
			pstmt.setString(2, log.getDescription());
			pstmt.setString(3, log.getOriginalMessage());
			pstmt.setTimestamp(4, new Timestamp(System.currentTimeMillis()));
			pstmt.setInt(5, log.getType());
			pstmt.setInt(6, log.getPostId());
			pstmt.setInt(7, log.getTopicId());
			pstmt.setInt(8, log.getPosterUser().getId());

			this.setAutoGeneratedKeysQuery(SystemGlobals.getSql("ModerationLog.lastGeneratedModerationLogId"));
			
			int logId = this.executeAutoKeysQuery(pstmt);
			
			log.setId(logId);
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	@Override public List<ModerationLog> selectAll(int start, int count)
	{
		List<ModerationLog> l = new ArrayList<>();

		String sql = SystemGlobals.getSql("ModerationLog.selectAll");

		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(sql);
			pstmt.setInt(1, start);
			pstmt.setInt(2, count);

			rs = pstmt.executeQuery();

			while (rs.next()) {
				l.add(this.makeLog(rs));
			}

			return l;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(rs, pstmt);
		}
	}
	
	protected ModerationLog makeLog(ResultSet rs) throws SQLException 
	{
		ModerationLog log = new ModerationLog();
		
		log.setId(rs.getInt("log_id"));
		log.setDescription(this.readDescriptionFromResultSet(rs));
		log.setOriginalMessage(this.readOriginalMessageFromResultSet(rs));
		log.setType(rs.getInt("log_type"));
		log.setDate(new Date(rs.getTimestamp("log_date").getTime()));
		log.setPostId(rs.getInt("post_id"));
		log.setTopicId(rs.getInt("topic_id"));
		
		User user = new User();
		user.setId(rs.getInt("user_id"));
		user.setUsername(rs.getString("username"));
		
		log.setUser(user);
		
		User posterUser = new User();
		posterUser.setId(rs.getInt("post_user_id"));
		posterUser.setUsername(rs.getString("poster_username"));
		
		log.setPosterUser(posterUser);
		
		return log;
	}
	
	protected String readDescriptionFromResultSet(ResultSet rs) throws SQLException
	{
		return rs.getString("log_description");
	}
	
	protected String readOriginalMessageFromResultSet(ResultSet rs) throws SQLException
	{
		return rs.getString("log_original_message");
	}
	
	@Override public int totalRecords()
	{
		int total = 0;
		
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
				SystemGlobals.getSql("ModerationLog.totalRecords"));

			rs = pstmt.executeQuery();
			
			if (rs.next()) {
				total = rs.getInt(1);
			}
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(rs, pstmt);
		}
		
		return total;
	}
}

../jforum2-code/src/main/java/net/jforum/dao/generic/GenericSmilieDAO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 13/01/2004 / 12:02:54
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao.generic;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import net.jforum.JForumExecutionContext;
import net.jforum.entities.Smilie;
import net.jforum.exceptions.DatabaseException;
import net.jforum.util.DbUtils;
import net.jforum.util.preferences.SystemGlobals;

/**
 * @author Rafael Steil
 */
public class GenericSmilieDAO extends AutoKeys implements net.jforum.dao.SmilieDAO
{
	/**
	 * @see net.jforum.dao.SmilieDAO#addNew(net.jforum.entities.Smilie)
	 */
	@Override public int addNew(Smilie smilie)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = this.getStatementForAutoKeys("SmiliesModel.addNew");

			pstmt.setString(1, smilie.getCode());
			pstmt.setString(2, smilie.getUrl());
			pstmt.setString(3, smilie.getDiskName());

			this.setAutoGeneratedKeysQuery(SystemGlobals.getSql("SmiliesModel.lastGeneratedSmilieId"));

			return this.executeAutoKeysQuery(pstmt);
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.SmilieDAO#delete(int)
	 */
	@Override public void delete(int id)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(SystemGlobals.getSql("SmiliesModel.delete"));
			pstmt.setInt(1, id);
			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.SmilieDAO#update(net.jforum.entities.Smilie)
	 */
	@Override public void update(Smilie smilie)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(SystemGlobals.getSql("SmiliesModel.update"));
			pstmt.setString(1, smilie.getCode());
			pstmt.setString(2, smilie.getUrl());
			pstmt.setString(3, smilie.getDiskName());
			pstmt.setInt(4, smilie.getId());

			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	private Smilie getSmilie(ResultSet rs) throws SQLException
	{
		Smilie s = new Smilie();

		s.setId(rs.getInt("smilie_id"));
		s.setCode(rs.getString("code"));
		s.setUrl(rs.getString("url"));
		s.setDiskName(rs.getString("disk_name"));

		return s;
	}

	/**
	 * @see net.jforum.dao.SmilieDAO#selectAll()
	 */
	@Override public List<Smilie> selectAll()
	{
		List<Smilie> l = new ArrayList<>();

		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(SystemGlobals.getSql("SmiliesModel.selectAll"));
			rs = pstmt.executeQuery();
			while (rs.next()) {
				l.add(this.getSmilie(rs));
			}

			return l;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(rs, pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.SmilieDAO#selectById(int)
	 */
	@Override public Smilie selectById(int id)
	{
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			pstmt = JForumExecutionContext.getConnection()
					.prepareStatement(SystemGlobals.getSql("SmiliesModel.selectById"));
			pstmt.setInt(1, id);

			Smilie s = new Smilie();

			rs = pstmt.executeQuery();
			if (rs.next()) {
				s = this.getSmilie(rs);
			}

			return s;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(rs, pstmt);
		}
	}
}

../jforum2-code/src/main/java/net/jforum/dao/generic/GenericUserSessionDAO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 30/05/2004 15:10:57
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao.generic;

import java.util.Date;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;

import net.jforum.entities.UserSession;
import net.jforum.exceptions.DatabaseException;
import net.jforum.util.DbUtils;
import net.jforum.util.preferences.SystemGlobals;

/**
 * @author Rafael Steil
 */
public class GenericUserSessionDAO implements net.jforum.dao.UserSessionDAO
{
	/**
	 * @see net.jforum.dao.UserSessionDAO#add(net.jforum.entities.UserSession, java.sql.Connection)
	 */
	@Override public void add(UserSession us, Connection conn)
	{
		this.add(us, conn, false);
	}

	private void add(UserSession us, Connection conn, boolean checked)
	{
		if (!checked && this.selectById(us, conn) != null) {
			return;
		}

		PreparedStatement pstmt = null;
		try {
			pstmt = conn.prepareStatement(SystemGlobals.getSql("UserSessionModel.add"));
			pstmt.setString(1, us.getSessionId());
			pstmt.setInt(2, us.getUserId());
			pstmt.setTimestamp(3, new Timestamp(us.getStartTime().getTime()));
			pstmt.setString(4, us.getIp());

			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.UserSessionDAO#update(net.jforum.entities.UserSession, java.sql.Connection)
	 */
	@Override public void update(UserSession us, Connection conn)
	{
		if (this.selectById(us, conn) == null) {
			this.add(us, conn, true);
			return;
		}

		PreparedStatement pstmt = null;
		try {
			pstmt = conn.prepareStatement(SystemGlobals.getSql("UserSessionModel.update"));
			pstmt.setTimestamp(1, new Timestamp(us.getStartTime().getTime()));
			pstmt.setLong(2, us.getSessionTime());
			pstmt.setString(3, us.getSessionId());
			pstmt.setString(4, us.getIp());
			pstmt.setInt(5, us.getUserId());

			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.UserSessionDAO#selectById(net.jforum.entities.UserSession, java.sql.Connection)
	 */
	@Override public UserSession selectById(UserSession us, Connection conn)
	{
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			pstmt = conn.prepareStatement(SystemGlobals.getSql("UserSessionModel.selectById"));
			pstmt.setInt(1, us.getUserId());

			rs = pstmt.executeQuery();
			boolean found = false;

			UserSession returnUs = new UserSession(us);

			if (rs.next()) {
				returnUs.setSessionTime(rs.getLong("session_time"));
				returnUs.setStartTime(rs.getTimestamp("session_start"));
				found = true;
			}

			return (found ? returnUs : null);
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(rs, pstmt);
		}
	}

    @Override
    public Date fetchLastVisitTime(UserSession us, Connection conn) {
        if (us == null || us.getStartTime() == null) {
            return null;
        }
        final Date previousVisitTime = new Date(us.getStartTime().getTime() + us.getSessionTime());
        return previousVisitTime;
    }

}

../jforum2-code/src/main/java/net/jforum/dao/generic/GenericUserDAO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Apr 5, 2003 / 11:43:46 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao.generic;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import net.jforum.JForumExecutionContext;
import net.jforum.dao.DataAccessDriver;
import net.jforum.dao.UserDAO;
import net.jforum.entities.Group;
import net.jforum.entities.KarmaStatus;
import net.jforum.entities.User;
import net.jforum.exceptions.DatabaseException;
import net.jforum.exceptions.ForumException;
import net.jforum.sso.LoginAuthenticator;
import net.jforum.util.DbUtils;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;

/**
 * @author Rafael Steil
 */
public class GenericUserDAO extends AutoKeys implements UserDAO
{
	private static LoginAuthenticator loginAuthenticator;

	public GenericUserDAO()
	{
		GenericUserDAO.setLoginAuthenticator();
		
		if (loginAuthenticator == null) {
			throw new ForumException("There is no login.authenticator configured. Check your login.authenticator configuration key.");
		}
		
		loginAuthenticator.setUserModel(this);
	}
	
	private static void setLoginAuthenticator() 
	{
		loginAuthenticator = (LoginAuthenticator)SystemGlobals.getObjectValue(
				ConfigKeys.LOGIN_AUTHENTICATOR_INSTANCE);			
	}
	
	/**
	 * @see net.jforum.dao.UserDAO#pendingActivations()
	 */
	@Override public List<User> pendingActivations() 
	{
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		List<User> l = new ArrayList<>();
		
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
				SystemGlobals.getSql("UserModel.pendingActivations"));

			rs = pstmt.executeQuery();

			while (rs.next()) {
				User user = new User();
				
				user.setId(rs.getInt("user_id"));
				user.setUsername(rs.getString("username"));
				user.setRegistrationDate(new Date(rs.getTimestamp("user_regdate").getTime()));
				
				l.add(user);
			}
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(rs, pstmt);
		}
		
		return l;
	}

	/**
	 * @see net.jforum.dao.UserDAO#selectById(int)
	 */
	@Override public User selectById(int userId)
	{
		String q = SystemGlobals.getSql("UserModel.selectById");
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(q);
			pstmt.setInt(1, userId);

			rs = pstmt.executeQuery();
			User user = new User();

			if (rs.next()) {
				this.fillUserFromResultSet(user, rs);
				user.setPrivateMessagesCount(rs.getInt("private_messages"));

				rs.close();
				pstmt.close();

				// User groups
				pstmt = JForumExecutionContext.getConnection().prepareStatement(
						SystemGlobals.getSql("UserModel.selectGroups"));
				pstmt.setInt(1, userId);

				rs = pstmt.executeQuery();
				while (rs.next()) {
					Group g = new Group();
					g.setName(rs.getString("group_name"));
					g.setId(rs.getInt("group_id"));

					user.getGroupsList().add(g);
				}
			}

			return user;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(rs, pstmt);
		}
	}

	@Override public User selectByName(String username)
	{
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(SystemGlobals.getSql("UserModel.selectByName"));
			pstmt.setString(1, username);

			rs = pstmt.executeQuery();
			User user = null;

			if (rs.next()) {
				user = new User();
				this.fillUserFromResultSet(user, rs);
			}

			return user;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(rs, pstmt);
		}
	}

	protected void fillUserFromResultSet(User user, ResultSet rs) throws SQLException
	{
		user.setAvatar(rs.getString("user_avatar"));
		user.setRankId(rs.getInt("rank_id"));
		user.setPrivateMessagesEnabled(rs.getInt("user_allow_pm") == 1);
		user.setNotifyOnMessagesEnabled(rs.getInt("user_notify") == 1);
		user.setPassword(rs.getString("user_password"));
		user.setViewEmailEnabled(rs.getInt("user_viewemail") == 1);		
		user.setAvatarEnabled(rs.getInt("user_allowavatar") == 1);
		user.setBbCodeEnabled(rs.getInt("user_allowbbcode") == 1);
		user.setHtmlEnabled(rs.getInt("user_allowhtml") == 1);
		user.setSmiliesEnabled(rs.getInt("user_allowsmilies") == 1);
		user.setEmail(rs.getString("user_email"));
		user.setFrom(rs.getString("user_from"));
		user.setIcq(rs.getString("user_icq"));
		user.setTwitter(rs.getString("user_twitter"));
		user.setId(rs.getInt("user_id"));
		user.setInterests(rs.getString("user_interests"));
		user.setBiography(rs.getString("user_biography"));
		user.setLastVisit(rs.getTimestamp("user_lastvisit"));
		user.setOccupation(rs.getString("user_occ"));
		user.setTotalPosts(rs.getInt("user_posts"));
		user.setRegistrationDate(new Date(rs.getTimestamp("user_regdate").getTime()));
		user.setSignature(rs.getString("user_sig"));
		user.setWebSite(rs.getString("user_website"));
		user.setUsername(rs.getString("username"));
		user.setLang(rs.getString("user_lang"));
		user.setAttachSignatureEnabled(rs.getInt("user_attachsig") == 1);
		user.setSkype(rs.getString("user_skype"));
		user.setActive(rs.getInt("user_active"));
		user.setKarma(new KarmaStatus(user.getId(), rs.getDouble("user_karma")));
		user.setNotifyPrivateMessagesEnabled(rs.getInt("user_notify_pm") == 1);
		user.setDeleted(rs.getInt("deleted"));
		user.setNotifyAlways(rs.getInt("user_notify_always") == 1);
		user.setNotifyText(rs.getInt("user_notify_text") == 1);

		String actkey = rs.getString("user_actkey");
		user.setActivationKey(actkey == null || "".equals(actkey) ? null : actkey);
	}

	/**
	 * @see net.jforum.dao.UserDAO#delete(int)
	 */
	@Override public void delete(int userId)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection()
					.prepareStatement(SystemGlobals.getSql("UserModel.deletedStatus"));
			pstmt.setInt(1, 1);
			pstmt.setInt(2, userId);

			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.UserDAO#update(net.jforum.entities.User)
	 */
	@Override public void update(User user)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(SystemGlobals.getSql("UserModel.update"));

			pstmt.setString(1, user.getAvatar());
			pstmt.setInt(2, user.isPrivateMessagesEnabled() ? 1 : 0);
			pstmt.setInt(3, user.isAvatarEnabled() ? 1 : 0);
			pstmt.setInt(4, user.isBbCodeEnabled() ? 1 : 0);
			pstmt.setInt(5, user.isHtmlEnabled() ? 1 : 0);
			pstmt.setInt(6, user.isSmiliesEnabled() ? 1 : 0);
			pstmt.setString(7, user.getEmail());
			pstmt.setString(8, user.getFrom());
			pstmt.setString(9, user.getIcq());
			pstmt.setString(10, user.getInterests());
			pstmt.setString(11, user.getOccupation());
			pstmt.setString(12, user.getSignature());
			pstmt.setString(13, user.getWebSite());
			pstmt.setString(14, user.getSkype());
			pstmt.setString(15, user.getPassword());
			pstmt.setInt(16, user.isViewEmailEnabled() ? 1 : 0);
			pstmt.setInt(17, user.isNotifyOnMessagesEnabled() ? 1 : 0);
			pstmt.setInt(18, user.isAttachSignatureEnabled() ? 1 : 0);
			pstmt.setString(19, user.getUsername());
			pstmt.setString(20, user.getLang());
			pstmt.setInt(21, user.isNotifyPrivateMessagesEnabled() ? 1 : 0);
			pstmt.setString(22, user.getBiography());

			if (user.getLastVisit() == null) {
				user.setLastVisit(new Date());
			}

			pstmt.setTimestamp(23, new Timestamp(user.getLastVisit().getTime()));
			pstmt.setInt(24, user.notifyAlways() ? 1 : 0);
			pstmt.setInt(25, user.notifyText() ? 1 : 0);
            pstmt.setString(26, user.getTwitter());
			pstmt.setInt(27, user.getRankId());
			pstmt.setInt(28, user.getId());

			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.UserDAO#addNew(net.jforum.entities.User)
	 */
	@Override public int addNew (User user, int groupId)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = this.getStatementForAutoKeys("UserModel.addNew");

			this.initNewUser(user, pstmt);

			this.setAutoGeneratedKeysQuery(SystemGlobals.getSql("UserModel.lastGeneratedUserId"));
			int id = this.executeAutoKeysQuery(pstmt);

			this.addToGroup(id, new int[] { groupId });

			user.setId(id);
			return id;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	protected void initNewUser(User user, PreparedStatement pstmt) throws SQLException
	{
		pstmt.setString(1, user.getUsername());
		pstmt.setString(2, user.getPassword());
		pstmt.setString(3, user.getEmail());
		pstmt.setTimestamp(4, new Timestamp(System.currentTimeMillis()));
		pstmt.setString(5, user.getActivationKey());
	}

	/**
	 * @see net.jforum.dao.UserDAO#addNewWithId(net.jforum.entities.User)
	 */
	@Override public void addNewWithId(User user)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = this.getStatementForAutoKeys("UserModel.addNewWithId");

			this.initNewUser(user, pstmt);
			pstmt.setInt(6, user.getId());

			pstmt.executeUpdate();

			this.addToGroup(user.getId(), new int[] { SystemGlobals.getIntValue(ConfigKeys.DEFAULT_USER_GROUP) });
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.UserDAO#decrementPosts(int)
	 */
	@Override public void decrementPosts(int userId)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("UserModel.decrementPosts"));
			pstmt.setInt(1, userId);

			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.UserDAO#incrementPosts(int)
	 */
	@Override public void incrementPosts(int userId)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("UserModel.incrementPosts"));
			pstmt.setInt(1, userId);

			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.UserDAO#setRanking(int, int)
	 */
	@Override public void setRanking(int userId, int rankingId)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(SystemGlobals.getSql("UserModel.rankingId"));
			pstmt.setInt(1, rankingId);
			pstmt.setInt(2, userId);

			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.UserDAO#setActive(int, boolean)
	 */
	@Override public void setActive(int userId, boolean active)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(SystemGlobals.getSql("UserModel.activeStatus"));
			pstmt.setInt(1, active ? 1 : 0);
			pstmt.setInt(2, userId);

			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.UserDAO#undelete(int)
	 */
	@Override public void undelete(int userId)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection()
					.prepareStatement(SystemGlobals.getSql("UserModel.deletedStatus"));
			pstmt.setInt(1, 0);
			pstmt.setInt(2, userId);

			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.UserDAO#selectAll()
	 */
	@Override public List<User> selectAll()
	{
		return selectAll(0, 0);
	}

	/**
	 * @see net.jforum.dao.UserDAO#selectAll(int, int)
	 */
	@Override public List<User> selectAll(int startFrom, int count)
	{
		PreparedStatement pstmt = null;
		ResultSet rs = null;

		try {
			if (count > 0) {
				pstmt = JForumExecutionContext.getConnection().prepareStatement(
						SystemGlobals.getSql("UserModel.selectAllByLimit"));
				pstmt.setInt(1, startFrom);
				pstmt.setInt(2, count);
			}
			else {
				pstmt = JForumExecutionContext.getConnection()
						.prepareStatement(SystemGlobals.getSql("UserModel.selectAll"));
			}

			rs = pstmt.executeQuery();

			return this.processSelectAll(rs);
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(rs, pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.UserDAO#selectAllWithKarma()
	 */
	@Override public List<User> selectAllWithKarma()
	{
		return this.selectAllWithKarma(0, 0);
	}

	/**
	 * @see net.jforum.dao.UserDAO#selectAllWithKarma(int, int)
	 */
	@Override public List<User> selectAllWithKarma(int startFrom, int count)
	{
		return this.loadKarma(this.selectAll(startFrom, count));
	}

	protected List<User> processSelectAll(ResultSet rs) throws SQLException
	{
		List<User> list = new ArrayList<>();

		while (rs.next()) {
			User user = new User();

			user.setEmail(rs.getString("user_email"));
			user.setId(rs.getInt("user_id"));
			user.setTotalPosts(rs.getInt("user_posts"));
			user.setRegistrationDate(new Date(rs.getTimestamp("user_regdate").getTime()));
			user.setUsername(rs.getString("username"));
			user.setDeleted(rs.getInt("deleted"));
			KarmaStatus karma = new KarmaStatus();
			karma.setKarmaPoints(rs.getInt("user_karma"));
			user.setKarma(karma);
			user.setFrom(rs.getString("user_from"));
			user.setWebSite(rs.getString("user_website"));
			user.setViewEmailEnabled(rs.getInt("user_viewemail") == 1);

			list.add(user);
		}

		return list;
	}

	/**
	 * @see net.jforum.dao.UserDAO#selectAllByGroup(int, int, int)
	 */
	@Override public List<User> selectAllByGroup(int groupId, int start, int count)
	{
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("UserModel.selectAllByGroup"));
			pstmt.setInt(1, groupId);
			pstmt.setInt(2, start);
			pstmt.setInt(3, count);

			rs = pstmt.executeQuery();

			return this.processSelectAll(rs);
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(rs, pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.UserDAO#getLastUserInfo()
	 */
	@Override public User getLastUserInfo()
	{
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			User user = new User();

			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("UserModel.lastUserRegistered"));
			rs = pstmt.executeQuery();
			rs.next();

			user.setUsername(rs.getString("username"));
			user.setId(rs.getInt("user_id"));

			return user;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(rs, pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.UserDAO#getTotalUsers()
	 */
	@Override public int getTotalUsers()
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("UserModel.totalUsers"));
			return this.getTotalUsersCommon(pstmt);
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.UserDAO#getTotalUsersByGroup(int)
	 */
	@Override public int getTotalUsersByGroup(int groupId)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("UserModel.totalUsersByGroup"));
			pstmt.setInt(1, groupId);

			return this.getTotalUsersCommon(pstmt);
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	protected int getTotalUsersCommon(PreparedStatement pstmt) throws SQLException
	{
		ResultSet rs = pstmt.executeQuery();
		int total = 0;
		if (rs.next()) {
		    total = rs.getInt(1);
		}
		rs.close();

		return total;
	}

	/**
	 * @see net.jforum.dao.UserDAO#isDeleted(int userId)
	 */
	@Override public boolean isDeleted(int userId)
	{
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(SystemGlobals.getSql("UserModel.isDeleted"));
			pstmt.setInt(1, userId);

			int deleted = 0;

			rs = pstmt.executeQuery();
			if (rs.next()) {
				deleted = rs.getInt("deleted");
			}

			return deleted == 1;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(rs, pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.UserDAO#isUsernameRegistered(String)
	 */
	@Override public boolean isUsernameRegistered(String username)
	{
		boolean status = false;

		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("UserModel.isUsernameRegistered"));
			pstmt.setString(1, username);

			rs = pstmt.executeQuery();
			if (rs.next() && rs.getInt("registered") > 0) {
				status = true;
			}			
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(rs, pstmt);
		}
		return status;
	}

	/**
	 * @see net.jforum.dao.UserDAO#validateLogin(String, String)
	 */
	@Override public User validateLogin(String username, String password)
	{
		return loginAuthenticator.validateLogin(username, password, null);
	}

	/**
	 * @see net.jforum.dao.UserDAO#addToGroup(int, int[])
	 */
	@Override public void addToGroup(int userId, int[] groupId)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(SystemGlobals.getSql("UserModel.addToGroup"));
			pstmt.setInt(1, userId);

			for (int i = 0; i < groupId.length; i++) {
				pstmt.setInt(2, groupId[i]);
				pstmt.executeUpdate();
			}
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.UserDAO#removeFromGroup(int, int[])
	 */
	@Override public void removeFromGroup(int userId, int[] groupId)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("UserModel.removeFromGroup"));
			pstmt.setInt(1, userId);

			for (int i = 0; i < groupId.length; i++) {
				pstmt.setInt(2, groupId[i]);
				pstmt.executeUpdate();
			}
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.UserDAO#saveNewPassword(String, String)
	 */
	@Override public void saveNewPassword(String password, String email)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("UserModel.saveNewPassword"));
			pstmt.setString(1, password);
			pstmt.setString(2, email);
			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.UserDAO#validateLostPasswordHash(String, String)
	 */
	@Override public boolean validateLostPasswordHash(String email, String hash)
	{
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("UserModel.validateLostPasswordHash"));
			pstmt.setString(1, hash);
			pstmt.setString(2, email);

			boolean status = false;

			rs = pstmt.executeQuery();
			if (rs.next() && rs.getInt("valid") > 0) {
				status = true;

				this.writeLostPasswordHash(email, "");
			}

			return status;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(rs, pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.UserDAO#writeLostPasswordHash(String, String)
	 */
	@Override public void writeLostPasswordHash(String email, String hash)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("UserModel.writeLostPasswordHash"));
			pstmt.setString(1, hash);
			pstmt.setString(2, email);
			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.UserDAO#getUsernameByEmail(String)
	 */
	@Override public String getUsernameByEmail(String email)
	{
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("UserModel.getUsernameByEmail"));
			pstmt.setString(1, email);

			String username = "";

			rs = pstmt.executeQuery();
			if (rs.next()) {
				username = rs.getString("username");
			}

			return username;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(rs, pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.UserDAO#findByName(String, boolean)
	 */
	@Override public List<User> findByName(String input, boolean exactMatch)
	{
		List<User> namesList = new ArrayList<>();

		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(SystemGlobals.getSql("UserModel.findByName"));
			pstmt.setString(1, exactMatch ? input : "%" + input + "%");

			rs = pstmt.executeQuery();
			while (rs.next()) {
				User user = new User();

				user.setId(rs.getInt("user_id"));
				user.setUsername(rs.getString("username"));
				user.setEmail(rs.getString("user_email"));
				user.setDeleted(rs.getInt("deleted"));

				namesList.add(user);
			}
			return namesList;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(rs, pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.UserDAO#validateActivationKeyHash(int, String)
	 */
	@Override public boolean validateActivationKeyHash(int userId, String hash)
	{
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("UserModel.validateActivationKeyHash"));
			pstmt.setString(1, hash);
			pstmt.setInt(2, userId);

			boolean status = false;

			rs = pstmt.executeQuery();
			if (rs.next() && rs.getInt("valid") == 1) {
				status = true;
			}

			return status;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(rs, pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.UserDAO#writeUserActive(int)
	 */
	@Override public void writeUserActive(int userId)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("UserModel.writeUserActive"));
			pstmt.setInt(1, userId);
			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.UserDAO#updateLastVisit(int, Date)
	 */
	@Override public void updateLastVisit(int userId, Date lastVisit)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("UserModel.updateLastVisit"));
			pstmt.setTimestamp(1, new Timestamp(lastVisit.getTime()));
			pstmt.setInt(2, userId);
			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.UserDAO#updateUsername(int, String)
	 */
	@Override public void updateUsername(int userId, String username)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("UserModel.updateUsername"));
			pstmt.setString(1, username);
			pstmt.setInt(2, userId);
			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.UserDAO#hasUsernameChanged(int, String)
	 */
	@Override public boolean hasUsernameChanged(int userId, String usernameToCheck)
	{
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(SystemGlobals.getSql("UserModel.getUsername"));
			pstmt.setString(1, usernameToCheck);
			pstmt.setInt(2, userId);

			String dbUsername = null;

			rs = pstmt.executeQuery();
			if (rs.next()) {
				dbUsername = rs.getString("username");
			}

			boolean status = false;

			if (!usernameToCheck.equals(dbUsername)) {
				status = true;
			}

			return status;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(rs, pstmt);
		}
	}

	/**
	 * Load KarmaStatus from a list of users.
	 * 
	 * @param users List
	 * @return List
	 * @throws SQLException
	 */
	protected List<User> loadKarma(List<User> users)
	{
		List<User> result = new ArrayList<>(users.size());

		for (Iterator<User> iter = users.iterator(); iter.hasNext();) {
			User user = iter.next();

			// Load Karma
			DataAccessDriver.getInstance().newKarmaDAO().getUserTotalKarma(user);
			result.add(user);
		}

		return result;
	}

	/**
	 * @see net.jforum.dao.UserDAO#saveUserAuthHash(int, String)
	 */
	@Override public void saveUserAuthHash(int userId, String hash)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("UserModel.saveUserAuthHash"));
			pstmt.setString(1, hash);
			pstmt.setInt(2, userId);
			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.UserDAO#getUserAuthHash(int)
	 */
	@Override public String getUserAuthHash(int userId)
	{
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("UserModel.getUserAuthHash"));
			pstmt.setInt(1, userId);

			rs = pstmt.executeQuery();

			String hash = null;
			if (rs.next()) {
				hash = rs.getString(1);
			}

			return hash;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(rs, pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.UserDAO#findByEmail(String)
	 */
	@Override public User findByEmail(String email) {
	    List<User> users = findAllUsersByEmail(email, 0, 1);
		if (users.isEmpty()) {
			return null;
		}
		return users.iterator().next();
	}

    /**
     * @see net.jforum.dao.UserDAO#getTotalUsersWithEmail(String)
     */
    @Override public int getTotalUsersWithEmail(String email) {
        PreparedStatement p = null;
        ResultSet rs = null;

        int totalUsers = 0;

        try {
            p = JForumExecutionContext.getConnection().prepareStatement(
                    SystemGlobals.getSql("UserModel.totalEmailMatches"));
            p.setString(1, email);
            rs = p.executeQuery();

            while (rs.next()) {
                totalUsers = rs.getInt(1);
            }
        } catch (SQLException e) {
            throw new DatabaseException(e);
        } finally {
            DbUtils.close(rs, p);
        }

        return totalUsers;
    }

	/**
     * @see net.jforum.dao.UserDAO#findAllUsersByEmail(String, int, int)
	 */
	@Override public List<User> findAllUsersByEmail(String email, int start, int count) {
		List<User> result = new ArrayList<>();
		PreparedStatement p = null;
		ResultSet rs = null;

		User u = null;

		try {
			p = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("UserModel.findByEmail"));
			p.setString(1, email);
			p.setInt(2, start);
			p.setInt(3, count);
			rs = p.executeQuery();

			while (rs.next()) {
				u = new User();
				fillUserFromResultSet(u, rs);
				result.add(u);
			}
		} catch (SQLException e) {
			throw new DatabaseException(e);
		} finally {
			DbUtils.close(rs, p);
		}

		return result;
	}

	/**
	 * @see net.jforum.dao.UserDAO#getTotalUsersByIp(String)
	 */
	@Override public int getTotalUsersByIp(String ip) {
        PreparedStatement p = null;
        ResultSet rs = null;

        int totalUsers = 0;

        try {
            p = JForumExecutionContext.getConnection().prepareStatement(
                    SystemGlobals.getSql("UserModel.totalByIp"));
            p.setString(1, ip);
            rs = p.executeQuery();

            while (rs.next()) {
                totalUsers = rs.getInt(1);
            }
        } catch (SQLException e) {
            throw new DatabaseException(e);
        } finally {
            DbUtils.close(rs, p);
        }
	    return totalUsers;
	}

	/**
     * @see net.jforum.dao.UserDAO#findAllUsersByIp(String, int, int)
	 */
	@Override public List<User> findAllUsersByIp(String ip, int start, int count) {
        List<User> result = new ArrayList<>();
        PreparedStatement p = null;
        ResultSet rs = null;

        User u = null;

        try {
            p = JForumExecutionContext.getConnection().prepareStatement(
                    SystemGlobals.getSql("UserModel.findByIp"));
            p.setString(1, ip);
            p.setInt(2, start);
            p.setInt(3, count);
            rs = p.executeQuery();

            while (rs.next()) {
                u = new User();
                fillUserFromResultSet(u, rs);
                result.add(u);
            }
        } catch (SQLException e) {
            throw new DatabaseException(e);
        } finally {
            DbUtils.close(rs, p);
        }

        return result;
	}
}

../jforum2-code/src/main/java/net/jforum/dao/generic/GenericBanlistDAO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 *
 * Created on 07/12/2006 21:01:17
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao.generic;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import net.jforum.JForumExecutionContext;
import net.jforum.dao.BanlistDAO;
import net.jforum.entities.Banlist;
import net.jforum.exceptions.DatabaseException;
import net.jforum.util.DbUtils;
import net.jforum.util.preferences.SystemGlobals;

/**
 * @author Rafael Steil
 */
public class GenericBanlistDAO extends AutoKeys implements BanlistDAO
{
	/**
	 * @see net.jforum.dao.BanlistDAO#delete(int)
	 */
	@Override public void delete(final int banlistId)
	{
		PreparedStatement pstmt = null;
		
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
				SystemGlobals.getSql("BanlistModel.delete"));
			pstmt.setInt(1, banlistId);
			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.BanlistDAO#insert(net.jforum.entities.Banlist)
	 */
	@Override public void insert(final Banlist banlist)
	{
		PreparedStatement pstmt = null;
		
		try {			
			pstmt = this.getStatementForAutoKeys("BanlistModel.insert");
			
			pstmt.setInt(1, banlist.getUserId());
			pstmt.setString(2, banlist.getIp());
			pstmt.setString(3, banlist.getEmail());
			
			this.setAutoGeneratedKeysQuery(SystemGlobals.getSql("BanlistModel.lastGeneratedBanlistId"));
			
			final int id = this.executeAutoKeysQuery(pstmt);
			
			banlist.setId(id);
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}
	
	/**
	 * @see net.jforum.dao.BanlistDAO#selectAll()
	 */
	@Override public List<Banlist> selectAll()
	{
		ResultSet resultSet = null;
		PreparedStatement pstmt = null;
		
		final List<Banlist> list = new ArrayList<>();
		
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
				SystemGlobals.getSql("BanlistModel.selectAll"));
			resultSet = pstmt.executeQuery();
			
			while (resultSet.next()) {
				final Banlist banlist = new Banlist();
				
				banlist.setId(resultSet.getInt("banlist_id"));
				banlist.setUserId(resultSet.getInt("user_id"));
				banlist.setEmail(resultSet.getString("banlist_email"));
				banlist.setIp(resultSet.getString("banlist_ip"));
				
				list.add(banlist);
			}
		}
		catch (Exception e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(resultSet, pstmt);
		}
		
		return list;
	}
}

../jforum2-code/src/main/java/net/jforum/dao/generic/GenericConfigDAO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Dec 29, 2004 1:29:52 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao.generic;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;
import java.util.Properties;

import org.apache.log4j.Logger;

import net.jforum.JForumExecutionContext;
import net.jforum.entities.Config;
import net.jforum.exceptions.DatabaseException;
import net.jforum.util.DbUtils;
import net.jforum.util.preferences.SystemGlobals;

/**
 * @author Rafael Steil
 */
public class GenericConfigDAO implements net.jforum.dao.ConfigDAO
{
    private static final Logger LOGGER = Logger.getLogger(GenericConfigDAO.class);

	/**
	 * @see net.jforum.dao.ConfigDAO#insert(net.jforum.entities.Config)
	 */
	@Override public void insert (final Config config)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(SystemGlobals.getSql("ConfigModel.insert"));
			pstmt.setString(1, config.getName());
			pstmt.setString(2, config.getValue());
			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.ConfigDAO#update(net.jforum.entities.Config)
	 */
	@Override public void update (final Config config)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(SystemGlobals.getSql("ConfigModel.update"));
			pstmt.setString(1, config.getValue());
			pstmt.setString(2, config.getName());
			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.ConfigDAO#update(java.util.Properties)
	 */
	@Override public void update (Properties props) {
		List<Config> configs = selectAll();
		for (Config cnfg : configs) {
			String name = cnfg.getName().trim();
			if (props.containsKey(name)) {
				// don't update settings which haven't changed
				if (! cnfg.getValue().trim().equals(props.get(name))) {
					cnfg.setValue((String) props.get(name));
					update(cnfg);
					LOGGER.debug("updated config " + name);
				}
				props.remove(name);
			}
		}
		// now props contains only settings which aren't in the DB yet
		Enumeration<?> e = props.propertyNames();
		while (e.hasMoreElements()) {
			String key = (String) e.nextElement();
			Config newConfig = new Config();
			newConfig.setName(key);
			newConfig.setValue(props.getProperty(key));
			insert(newConfig);
		}
	}

	/**
	 * @see net.jforum.dao.ConfigDAO#delete(net.jforum.entities.Config)
	 */
	@Override public void delete (final Config config)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(SystemGlobals.getSql("ConfigModel.delete"));
			pstmt.setInt(1, config.getId());
			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.ConfigDAO#selectAll()
	 */
	@Override public List<Config> selectAll()
	{
		final List<Config> list = new ArrayList<>();

		PreparedStatement pstmt = null;
		ResultSet resultSet = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(SystemGlobals.getSql("ConfigModel.selectAll"));
			resultSet = pstmt.executeQuery();
			while (resultSet.next()) {
				list.add(this.makeConfig(resultSet));
			}

			return list;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(resultSet, pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.ConfigDAO#selectByName(java.lang.String)
	 */
	@Override public Config selectByName (final String name)
	{
		PreparedStatement pstmt = null;
		ResultSet resultSet = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(SystemGlobals.getSql("ConfigModel.selectByName"));
			pstmt.setString(1, name);
			resultSet = pstmt.executeQuery();
			Config config = null;

			if (resultSet.next()) {
				config = this.makeConfig(resultSet);
			}

			return config;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(resultSet, pstmt);
		}
	}

	protected Config makeConfig (final ResultSet resultSet) throws SQLException
	{
		final Config config = new Config();
		config.setId(resultSet.getInt("config_id"));
		config.setName(resultSet.getString("config_name"));
		config.setValue(resultSet.getString("config_value"));

		return config;
	}
}

../jforum2-code/src/main/java/net/jforum/dao/generic/GenericLuceneDAO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 24/07/2007 10:27:23
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao.generic;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import org.apache.commons.lang3.StringUtils;

import net.jforum.JForumExecutionContext;
import net.jforum.dao.LuceneDAO;
import net.jforum.entities.Post;
import net.jforum.exceptions.DatabaseException;
import net.jforum.search.SearchPost;
import net.jforum.util.DbUtils;
import net.jforum.util.preferences.SystemGlobals;

/**
 * @author Rafael Steil
 */
public class GenericLuceneDAO implements LuceneDAO
{
	/**
	 * @see net.jforum.dao.LuceneDAO#getPostsToIndex(int, int)
	 */
	@Override public List<Post> getPostsToIndex(int fromPostId, int toPostId)
	{
		List<Post> l = new ArrayList<>();
		
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
				SystemGlobals.getSql("SearchModel.getPostsToIndexForLucene"));
			
			pstmt.setInt(1, fromPostId);
			pstmt.setInt(2, toPostId);
			
			rs = pstmt.executeQuery();
			
			while (rs.next()) {
				l.add(this.makePost(rs));
			}
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(rs, pstmt);
		}
		
		return l;
	}
	
	/**
	 * @see net.jforum.dao.LuceneDAO#firstPostIdByDate(java.util.Date)
	 */
	@Override public int firstPostIdByDate(Date date) 
	{
		return this.getPostIdByDate(date, SystemGlobals.getSql("SearchModel.firstPostIdByDate"));
	}
	
	/**
	 * @see net.jforum.dao.LuceneDAO#lastPostIdByDate(java.util.Date)
	 */
	@Override public int lastPostIdByDate(Date date) 
	{
		return this.getPostIdByDate(date, SystemGlobals.getSql("SearchModel.lastPostIdByDate"));
	}
	
	private int getPostIdByDate(Date date, String query)
	{
		int postId = 0;
		
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(query);
			
			pstmt.setTimestamp(1, new Timestamp(date.getTime()));
			
			rs = pstmt.executeQuery();
			
			if (rs.next()) {
				postId = rs.getInt(1);
			}
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(rs, pstmt);
		}
		
		return postId;
	}
	
	/**
	 * @see net.jforum.dao.LuceneDAO#getPostsData(int[])
	 */
	@Override public List<Post> getPostsData(int[] postIds)
	{
		if (postIds.length == 0) {
			return new ArrayList<>();
		}
		
		List<Post> l = new ArrayList<>();
		
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		try {
			String sql = SystemGlobals.getSql("SearchModel.getPostsDataForLucene");
			sql = sql.replaceAll(":posts:", this.buildInClause(postIds));
			
			pstmt = JForumExecutionContext.getConnection().prepareStatement(sql);
			rs = pstmt.executeQuery();
			
			while (rs.next()) {
				Post post = this.makePost(rs);
				post.setPostUsername(rs.getString("username"));
				
				l.add(post);
			}
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(rs, pstmt);
		}

		return resortByPostId(postIds, l);
	}

	/**
	 * SearchModel.getPostsDataForLucene returns the posts in the order they are
	 * stored in the database which may not be the same as the order original requested.
	 * This method resorts them in the original order returned by Lucene.
	 * 
	 * @param postIds
	 * @param l
	 * @return
	 */
	private List<Post> resortByPostId (int[] postIds, List<Post> posts) {
		Map<Integer, Post> postsById = new ConcurrentHashMap<>(postIds.length);
		for (Post post : posts) {
			postsById.put(post.getId(), post);
		}

		List<Post> result = new ArrayList<>();
		for (int postId : postIds) {
			Post post = postsById.get(postId);

			// shouldn't be null, but just in case there is no match
			if ( post != null) {
				result.add(post);
			}
		}
		return result;
	}

	private String buildInClause(int[] postIds)
	{
		StringBuilder sb = new StringBuilder(128);
		
		for (int i = 0; i < postIds.length - 1; i++) {
			sb.append(postIds[i]).append(',');
		}
		
		sb.append(postIds[postIds.length - 1]);
		
		return sb.toString();
	}
	
	private Post makePost(ResultSet rs) throws SQLException
	{
		Post post = new SearchPost();

		post.setId(rs.getInt("post_id"));
		post.setForumId(rs.getInt("forum_id"));
		post.setTopicId(rs.getInt("topic_id"));
		post.setUserId(rs.getInt("user_id"));
		post.setTime(new Date(rs.getTimestamp("post_time").getTime()));
		post.setText(this.readPostTextFromResultSet(rs));
		post.setBbCodeEnabled(rs.getInt("enable_bbcode") == 1);
		post.setSmiliesEnabled(rs.getInt("enable_smilies") == 1);
		post.hasAttachments(rs.getInt("attach") == 1);
		post.setTopicType(rs.getInt("topic_type"));
		Timestamp ts = rs.getTimestamp("post_edit_time");
		if (ts != null) {
			post.setEditTime(new Date(ts.getTime()));
		}

		String subject = rs.getString("post_subject");
		if (StringUtils.isBlank(subject)) {
			subject = rs.getString("topic_title");
		}
		post.setSubject(subject);

		return post;
	}
	
	protected String readPostTextFromResultSet(ResultSet rs) throws SQLException
	{
		return rs.getString("post_text");
	}
}

../jforum2-code/src/main/java/net/jforum/dao/generic/GenericForumDAO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms,
 * with or without modification, are permitted provided
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above
 * copyright notice, this list of conditions and the
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the
 * above copyright notice, this list of conditions and
 * the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor
 * the names of its contributors may be used to endorse
 * or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
 * IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 *
 * Created on 30/03/2003 / 02:37:20
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao.generic;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import org.apache.log4j.Logger;

import net.jforum.JForumExecutionContext;
import net.jforum.SessionFacade;
import net.jforum.dao.DataAccessDriver;
import net.jforum.dao.GroupSecurityDAO;
import net.jforum.dao.PostDAO;
import net.jforum.dao.TopicDAO;
import net.jforum.entities.Forum;
import net.jforum.entities.ForumStats;
import net.jforum.entities.LastPostInfo;
import net.jforum.entities.ModeratorInfo;
import net.jforum.entities.Post;
import net.jforum.entities.Topic;
import net.jforum.entities.User;
import net.jforum.exceptions.DatabaseException;
import net.jforum.search.SearchFacade;
import net.jforum.util.DbUtils;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;

/**
 * @author Rafael Steil
 * @author Vanessa Sabino
 * @author socialnetwork@gmail.com, adding "watch forum" methods. 
 */
public class GenericForumDAO extends AutoKeys implements net.jforum.dao.ForumDAO
{
	private static final Logger LOGGER = Logger.getLogger(GenericForumDAO.class);

	/**
	 * @see net.jforum.dao.ForumDAO#selectById(int)
	 */
	@Override public Forum selectById(final int forumId)
	{
		PreparedStatement pstmt = null;
		ResultSet resultSet = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(SystemGlobals.getSql("ForumModel.selectById"));
			pstmt.setInt(1, forumId);

			resultSet = pstmt.executeQuery();

			Forum forum = new Forum();

			if (resultSet.next()) {
				forum = this.fillForum(resultSet);
			}
			return forum;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(resultSet, pstmt);
		}
	}

	protected Forum fillForum(final ResultSet resultSet) throws SQLException
	{
		final Forum forum = new Forum();

		forum.setId(resultSet.getInt("forum_id"));
		forum.setIdCategories(resultSet.getInt("categories_id"));
		forum.setName(resultSet.getString("forum_name"));
		forum.setDescription(resultSet.getString("forum_desc"));
		forum.setOrder(resultSet.getInt("forum_order"));
		forum.setTotalTopics(resultSet.getInt("forum_topics"));
		forum.setLastPostId(resultSet.getInt("forum_last_post_id"));
		forum.setModerated(resultSet.getInt("moderated") > 0);
		forum.setTotalPosts(this.countForumPosts(forum.getId()));

		return forum;
	}

	protected int countForumPosts(final int forumId)
	{
		int count = 0;
		PreparedStatement pstmt = null;
		ResultSet resultSet = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("ForumModel.countForumPosts"));
			pstmt.setInt(1, forumId);
			resultSet = pstmt.executeQuery();

			if (resultSet.next()) {
				count = resultSet.getInt(1);
			}
			
			return count;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(resultSet, pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.ForumDAO#selectAll()
	 */
	@Override public List<Forum> selectAll()
	{
		PreparedStatement pstmt = null;
		ResultSet resultSet = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(SystemGlobals.getSql("ForumModel.selectAll"));
			final List<Forum> list = new ArrayList<>();

			resultSet = pstmt.executeQuery();

			while (resultSet.next()) {
				list.add(this.fillForum(resultSet));
			}

			return list;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(resultSet, pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.ForumDAO#setOrderUp(Forum, Forum)
	 */
	@Override public Forum setOrderUp(final Forum forum, final Forum related)
	{
		return this.changeForumOrder(forum, related);
	}

	/**
	 * @see net.jforum.dao.ForumDAO#setOrderDown(Forum, Forum)
	 */
	@Override public Forum setOrderDown(final Forum forum, final Forum related)
	{
		return this.changeForumOrder(forum, related);
	}

	private Forum changeForumOrder(final Forum forum, final Forum related)
	{
		final int tmpOrder = related.getOrder();
		related.setOrder(forum.getOrder());
		forum.setOrder(tmpOrder);

		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection()
					.prepareStatement(SystemGlobals.getSql("ForumModel.setOrderById"));
			pstmt.setInt(1, forum.getOrder());
			pstmt.setInt(2, forum.getId());
			pstmt.executeUpdate();
			pstmt.close();

			pstmt = JForumExecutionContext.getConnection()
					.prepareStatement(SystemGlobals.getSql("ForumModel.setOrderById"));
			pstmt.setInt(1, related.getOrder());
			pstmt.setInt(2, related.getId());
			pstmt.executeUpdate();

			return this.selectById(forum.getId());
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.ForumDAO#delete(int)
	 */
	@Override public void delete(final int forumId)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(SystemGlobals.getSql("ForumModel.delete"));
			pstmt.setInt(1, forumId);

			pstmt.executeUpdate();
			
			final GroupSecurityDAO groupSecurity = DataAccessDriver.getInstance().newGroupSecurityDAO();
			groupSecurity.deleteForumRoles(forumId);
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.ForumDAO#update(net.jforum.entities.Forum)
	 */
	@Override public void update(final Forum forum)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(SystemGlobals.getSql("ForumModel.update"));

			pstmt.setInt(1, forum.getCategoryId());
			pstmt.setString(2, forum.getName());
			pstmt.setString(3, forum.getDescription());
			pstmt.setInt(4, forum.isModerated() ? 1 : 0);
			pstmt.setInt(5, forum.getId());

			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.ForumDAO#addNew(net.jforum.entities.Forum)
	 */
	@Override public int addNew(final Forum forum)
	{
		// Gets the higher order
		PreparedStatement pOrder = null;
		ResultSet resultSet = null;
		try {
			pOrder = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("ForumModel.getMaxOrder"));
			resultSet = pOrder.executeQuery();

			if (resultSet.next()) {
				forum.setOrder(resultSet.getInt(1) + 1);
			}

			resultSet.close();
			pOrder.close();

			pOrder = this.getStatementForAutoKeys("ForumModel.addNew");

			pOrder.setInt(1, forum.getCategoryId());
			pOrder.setString(2, forum.getName());
			pOrder.setString(3, forum.getDescription());
			pOrder.setInt(4, forum.getOrder());
			pOrder.setInt(5, forum.isModerated() ? 1 : 0);

			this.setAutoGeneratedKeysQuery(SystemGlobals.getSql("ForumModel.lastGeneratedForumId"));
			final int forumId = this.executeAutoKeysQuery(pOrder);

			forum.setId(forumId);
			return forumId;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(resultSet, pOrder);
		}
	}

	/**
	 * @see net.jforum.dao.ForumDAO#setLastPost(int, int)
	 */
	@Override public void setLastPost(final int forumId, final int postId)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("ForumModel.updateLastPost"));

			pstmt.setInt(1, postId);
			pstmt.setInt(2, forumId);

			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.ForumDAO#incrementTotalTopics(int, int)
	 */
	@Override public void incrementTotalTopics(final int forumId, final int count)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("ForumModel.incrementTotalTopics"));
			pstmt.setInt(1, count);
			pstmt.setInt(2, forumId);
			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.ForumDAO#decrementTotalTopics(int, int)
	 */
	@Override public void decrementTotalTopics(final int forumId, final int count)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("ForumModel.decrementTotalTopics"));
			pstmt.setInt(1, count);
			pstmt.setInt(2, forumId);
			pstmt.executeUpdate();
			pstmt.close();

			// If there are no more topics, clean the last post id information
			final int totalTopics = this.getTotalTopics(forumId);
			if (totalTopics < 1) {
				this.setLastPost(forumId, 0);
			}
			
			// Fix Forum's total_topics field value
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("ForumModel.fixTotalTopics"));
			pstmt.setInt(1, totalTopics);
			pstmt.setInt(2, forumId);
			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	private LastPostInfo getLastPostInfo(final int forumId, boolean origTryFix)
	{
		boolean tryFix = origTryFix;
		final LastPostInfo lpi = new LastPostInfo();

		PreparedStatement pstmt = null;
		ResultSet resultSet = null;
		try {
			pstmt = JForumExecutionContext.getConnection()
					.prepareStatement(SystemGlobals.getSql("ForumModel.lastPostInfo"));
			pstmt.setInt(1, forumId);

			resultSet = pstmt.executeQuery();

			if (resultSet.next()) {
				lpi.setUsername(resultSet.getString("username"));
				lpi.setUserId(resultSet.getInt("user_id"));

				lpi.setPostDate(resultSet.getTimestamp("post_time"));
				lpi.setPostId(resultSet.getInt("post_id"));
				lpi.setTopicId(resultSet.getInt("topic_id"));
				lpi.setPostTimeMillis(resultSet.getTimestamp("post_time").getTime());
				lpi.setTopicReplies(resultSet.getInt("topic_replies"));

				lpi.setHasInfo(true);
				lpi.setTitle(resultSet.getString("topic_title"));

				// Check if the topic is consistent
				TopicDAO topicDao = DataAccessDriver.getInstance().newTopicDAO();
				Topic topic = topicDao.selectById(lpi.getTopicId());

				if (topic.getId() == 0) {
					// Hm, that's not good. Try to fix it
					topicDao.fixFirstLastPostId(lpi.getTopicId());
				}

				tryFix = false;
			}
			else if (tryFix) {
				resultSet.close();
				pstmt.close();

				int postId = this.getMaxPostId(forumId);

				pstmt = JForumExecutionContext.getConnection().prepareStatement(
						SystemGlobals.getSql("ForumModel.latestTopicIdForfix"));
				pstmt.setInt(1, forumId);
				resultSet = pstmt.executeQuery();

				if (resultSet.next()) {
					int topicId;
					topicId = resultSet.getInt("topic_id");

					resultSet.close();
					pstmt.close();

					// Topic
					pstmt = JForumExecutionContext.getConnection().prepareStatement(
							SystemGlobals.getSql("ForumModel.fixLatestPostData"));
					pstmt.setInt(1, postId);
					pstmt.setInt(2, topicId);
					pstmt.executeUpdate();
					pstmt.close();

					// Forum
					pstmt = JForumExecutionContext.getConnection().prepareStatement(
							SystemGlobals.getSql("ForumModel.fixForumLatestPostData"));
					pstmt.setInt(1, postId);
					pstmt.setInt(2, forumId);
					pstmt.executeUpdate();
				}
			}

			return (tryFix ? this.getLastPostInfo(forumId, false) : lpi);
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(resultSet, pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.ForumDAO#getLastPostInfo(int)
	 */
	@Override public LastPostInfo getLastPostInfo(final int forumId)
	{
		return this.getLastPostInfo(forumId, true);
	}

	/**
	 * @see net.jforum.dao.ForumDAO#getModeratorList(int)
	 */
	@Override public List<ModeratorInfo> getModeratorList(final int forumId)
	{
		List<ModeratorInfo> list = new ArrayList<>();

		PreparedStatement pstmt = null;
		ResultSet resultSet = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("ForumModel.getModeratorList"));
			pstmt.setInt(1, forumId);

			resultSet = pstmt.executeQuery();
			
			while (resultSet.next()) {
				ModeratorInfo moderatorInfo = new ModeratorInfo();
				moderatorInfo.setId(resultSet.getInt("id"));
				moderatorInfo.setName(resultSet.getString("name"));

				// avoid duplicate user_id
				boolean notExists = true;
				for (ModeratorInfo mi : list) {
					if (mi.getId() == moderatorInfo.getId()) {
						notExists = false;
						break;
					}
				}
				if (notExists) {
					list.add(moderatorInfo);
				}
			}

			return list;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(resultSet, pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.ForumDAO#getTotalMessages()
	 */
	@Override public int getTotalMessages()
	{
		int totalMessages = 0;
		PreparedStatement pstmt = null;
		ResultSet resultSet = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("ForumModel.totalMessages"));
			resultSet = pstmt.executeQuery();

			if (resultSet.next()) {
				totalMessages = resultSet.getInt("total_messages");
			}

			return totalMessages;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(resultSet, pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.ForumDAO#getTotalTopics(int)
	 */
	@Override public int getTotalTopics(final int forumId)
	{
		int total = 0;
		PreparedStatement pstmt = null;
		ResultSet resultSet = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("ForumModel.getTotalTopics"));
			pstmt.setInt(1, forumId);
			resultSet = pstmt.executeQuery();

			if (resultSet.next()) {
				total = resultSet.getInt(1);
			}

			return total;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(resultSet, pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.ForumDAO#getMaxPostId(int)
	 */
	@Override public int getMaxPostId(final int forumId)
	{
		int id = -1;

		PreparedStatement pstmt = null;
		ResultSet resultSet = null;
		try {
			pstmt = JForumExecutionContext.getConnection()
					.prepareStatement(SystemGlobals.getSql("ForumModel.getMaxPostId"));
			pstmt.setInt(1, forumId);

			resultSet = pstmt.executeQuery();
			if (resultSet.next()) {
				id = resultSet.getInt("post_id");
			}

			return id;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(resultSet, pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.ForumDAO#moveTopics(java.lang.String[], int, int, boolean)
	 */
	@Override public void moveTopics(final String[] topics, final int fromForumId, final int toForumId, boolean marker)
	{
		PreparedStatement pstmt1 = null;
		PreparedStatement pstmt2 = null;
		try {
			if (marker) {
				pstmt1 = JForumExecutionContext.getConnection().prepareStatement(SystemGlobals.getSql("ForumModel.moveTopics"));
				pstmt1.setInt(1, toForumId);
				pstmt1.setInt(2, fromForumId);
			}
			else {
				pstmt1 = JForumExecutionContext.getConnection().prepareStatement(SystemGlobals.getSql("ForumModel.compostTopics"));
				pstmt1.setInt(1, toForumId);
			}
			
			pstmt2 = JForumExecutionContext.getConnection().prepareStatement(SystemGlobals.getSql("PostModel.setForumByTopic"));
			pstmt2.setInt(1, toForumId);

			TopicDAO topicDAO = DataAccessDriver.getInstance().newTopicDAO();
			PostDAO postDAO = DataAccessDriver.getInstance().newPostDAO();

			Forum forum = this.selectById(toForumId);

			for (int i = 0; i < topics.length; i++) {
				int topicId = Integer.parseInt(topics[i]);
				pstmt1.setInt(marker ? 3 : 2, topicId);
				pstmt2.setInt(2, topicId);

				pstmt1.executeUpdate();
				pstmt2.executeUpdate();

				topicDAO.setModerationStatusByTopic(topicId, forum.isModerated());

				List<Post> posts = postDAO.selectAllByTopic(topicId);
				for (Post post : posts) {
					SearchFacade.update(post);
				}
			}

			this.decrementTotalTopics(fromForumId, topics.length);
			this.incrementTotalTopics(toForumId, topics.length);

			this.setLastPost(fromForumId, this.getMaxPostId(fromForumId));
			this.setLastPost(toForumId, this.getMaxPostId(toForumId));
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt1);
			DbUtils.close(pstmt2);
		}
	}

	/**
	 * @see net.jforum.dao.ForumDAO#checkUnreadTopics(int, long)
	 */
	@Override public List<Topic> checkUnreadTopics(final int forumId, final long lastVisit)
	{
		final List<Topic> list = new ArrayList<>();

		PreparedStatement pstmt = null;
		ResultSet resultSet = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("ForumModel.checkUnreadTopics"));
			pstmt.setInt(1, forumId);
			pstmt.setTimestamp(2, new Timestamp(lastVisit));

			resultSet = pstmt.executeQuery();
			while (resultSet.next()) {
				Topic topic = new Topic();
				topic.setId(resultSet.getInt("topic_id"));
				topic.setTime(new Date(resultSet.getTimestamp(1).getTime()));

				list.add(topic);
			}

			return list;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(resultSet, pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.ForumDAO#setModerated(int, boolean)
	 */
	@Override public void setModerated(final int categoryId, final boolean status)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection()
					.prepareStatement(SystemGlobals.getSql("ForumModel.setModerated"));
			pstmt.setInt(1, status ? 1 : 0);
			pstmt.setInt(2, categoryId);
			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.ForumDAO#getBoardStatus()
	 */
	@Override public ForumStats getBoardStatus()
	{
		ForumStats forumStats = new ForumStats();
		forumStats.setPosts(this.getTotalMessages());

		Connection conn = JForumExecutionContext.getConnection();

		// Total Users
		Statement stmt = null;
		ResultSet resultSet = null;

		try {
			stmt = conn.createStatement();
			resultSet = stmt.executeQuery(SystemGlobals.getSql("UserModel.totalUsers"));
			resultSet.next();
			forumStats.setUsers(resultSet.getInt(1));
			resultSet.close();
			stmt.close();

			// Total Topics
			stmt = conn.createStatement();
			resultSet = stmt.executeQuery(SystemGlobals.getSql("TopicModel.totalTopics"));
			resultSet.next();
			forumStats.setTopics(resultSet.getInt(1));
			resultSet.close();
			stmt.close();

			// Posts per day
			double postPerDay = 0;
			
			// Topics per day
			double topicPerDay = 0;
			
			// user per day
			double userPerDay = 0;

			stmt = conn.createStatement();
			resultSet = stmt.executeQuery(SystemGlobals.getSql("ForumModel.statsFirstPostTime"));
			if (resultSet.next()) {

				Timestamp firstTime = resultSet.getTimestamp(1);
				if (resultSet.wasNull()) {
					firstTime = null;
				}
				resultSet.close();
				stmt.close();

				Date today = new Date();

				postPerDay = firstTime == null ? 0 : (double)forumStats.getPosts() / this.daysUntilToday(today, firstTime);

				if (forumStats.getPosts() > 0 && postPerDay < 1) {
					postPerDay = 1;
				}

				topicPerDay = firstTime == null ? 0 : (double)forumStats.getTopics() / this.daysUntilToday(today, firstTime);

				// Users per day
				stmt = conn.createStatement();
				resultSet = stmt.executeQuery(SystemGlobals.getSql("ForumModel.statsFirstRegisteredUserTime"));
				if (resultSet.next()) {
					firstTime = resultSet.getTimestamp(1);
					if (resultSet.wasNull()) {
						firstTime = null;
					}
				}

				userPerDay = firstTime == null ? 0 : (double)forumStats.getUsers() / this.daysUntilToday(today, firstTime);
			}

			forumStats.setPostsPerDay(postPerDay);
			forumStats.setTopicsPerDay(topicPerDay);
			forumStats.setUsersPerDay(userPerDay);

			return forumStats;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(resultSet, stmt);
		}
	}

	private int daysUntilToday(final Date today, final Date from)
	{
		int days = (int) ((today.getTime() - from.getTime()) / (24 * 60 * 60 * 1000));
		return days == 0 ? 1 : days;
	}

	/**
	 * This code is written by looking at GenericTopicDAO.java
	 * 
	 * @see net.jforum.dao.ForumDAO#notifyUsers(Forum)
	 */
	@Override public List<User> notifyUsers(final Forum forum)
	{
		int posterId = SessionFacade.getUserSession().getUserId();
		int anonUser = SystemGlobals.getIntValue(ConfigKeys.ANONYMOUS_USER_ID);

		PreparedStatement pstmt = null;
		ResultSet resultSet = null;
		
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("ForumModel.notifyUsers"));

			pstmt.setInt(1, forum.getId());
			pstmt.setInt(2, posterId); // don't notify the poster
			pstmt.setInt(3, anonUser); // don't notify the anonymous user

			resultSet = pstmt.executeQuery();
			final List<User> users = new ArrayList<>();
			
			while (resultSet.next()) {
				final User user = new User();

				user.setId(resultSet.getInt("user_id"));
				user.setEmail(resultSet.getString("user_email"));
				user.setUsername(resultSet.getString("username"));
				user.setLang(resultSet.getString("user_lang"));				
				user.setNotifyText(resultSet.getInt("user_notify_text") == 1);

				users.add(user);
			}
			
			return users;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(resultSet, pstmt);
		}

	}

	@Override public void subscribeUser(final int forumId, final int userId)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("ForumModel.subscribeUser"));

			pstmt.setInt(1, forumId);
			pstmt.setInt(2, userId);

			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}

	}

	@Override public boolean isUserSubscribed(int forumId, int userId)
	{
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("ForumModel.isUserSubscribed"));

			pstmt.setInt(1, forumId);
			pstmt.setInt(2, userId);

			rs = pstmt.executeQuery();

			return rs.next();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(rs, pstmt);
		}
	}

	@Override public void removeSubscription(int forumId, int userId)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("ForumModel.removeSubscription"));
			pstmt.setInt(1, forumId);
			pstmt.setInt(2, userId);

			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}

	}

	/**
	 * Remove all subscriptions on a forum, such as when a forum is locked. It is not used now.
	 * 
	 * @param forumId int
	 */
	@Override public void removeSubscriptionByForum(int forumId)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("ForumModel.removeSubscriptionByForum"));
			pstmt.setInt(1, forumId);

			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}

	}
	
	/**
	 * @see net.jforum.dao.ForumDAO#discoverForumId(java.lang.String)
	 */
	@Override public int discoverForumId(String listEmail)
	{
		int forumId = 0;
		
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
				SystemGlobals.getSql("ForumModel.discoverForumId"));
			pstmt.setString(1, listEmail);
			rs = pstmt.executeQuery();
			
			if (rs.next()) {
				forumId = rs.getInt(1);
			}
		}
		catch (SQLException e) {
			LOGGER.error(e);
		}
		finally {
			DbUtils.close(rs, pstmt);
		}

		return forumId;
	}

    /**
    * Returns all forums that are watched by a given user.
    * @param userId The user id
    */
    @Override public List<Map<String, Object>> selectWatchesByUser(int userId) {
        List<Map<String, Object>> l = new ArrayList<>();
        PreparedStatement p = null;
        ResultSet rs = null;
        try {
			p = JForumExecutionContext.getConnection().prepareStatement(SystemGlobals.getSql("ForumModel.selectWatchesByUser"));
            p.setInt(1, userId);
            rs = p.executeQuery();
            while (rs.next()) {
                Map<String, Object> m = new ConcurrentHashMap<>();
                m.put("id", rs.getInt("forum_id"));
                m.put("forumName", rs.getString("forum_name"));
                l.add(m);
            }
            return l;
        } catch (SQLException e) {
            throw new DatabaseException(e);
        } finally {
            DbUtils.close(p);
        }
    }
}

../jforum2-code/src/main/java/net/jforum/dao/generic/GenericMailIntegrationDAO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 28/08/2006 23:12:09
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao.generic;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import net.jforum.JForumExecutionContext;
import net.jforum.dao.MailIntegrationDAO;
import net.jforum.entities.MailIntegration;
import net.jforum.exceptions.DatabaseException;
import net.jforum.util.DbUtils;
import net.jforum.util.preferences.SystemGlobals;

/**
 * @author Rafael Steil
 */
public class GenericMailIntegrationDAO implements MailIntegrationDAO
{
	/**
	 * @see net.jforum.dao.MailIntegrationDAO#add(net.jforum.entities.MailIntegration)
	 */
	@Override public void add(MailIntegration integration)
	{
		PreparedStatement pstmt = null;
		
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
				SystemGlobals.getSql("MailIntegration.add"));
			this.prepareForSave(integration, pstmt);
			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}
	
	/**
	 * @see net.jforum.dao.MailIntegrationDAO#delete(int)
	 */
	@Override public void delete(int forumId)
	{
		PreparedStatement pstmt = null;
		
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
				SystemGlobals.getSql("MailIntegration.delete"));
			pstmt.setInt(1, forumId);
			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.MailIntegrationDAO#find(int)
	 */
	@Override public MailIntegration find(int forumId)
	{
		MailIntegration m = null;
		
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("MailIntegration.find"));
			pstmt.setInt(1, forumId);
			rs = pstmt.executeQuery();
			
			if (rs.next()) {
				m = this.buildMailIntegration(rs);
			}
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(rs, pstmt);
		}
		
		return m;
	}

	/**
	 * @see net.jforum.dao.MailIntegrationDAO#findAll()
	 */
	@Override public List<MailIntegration> findAll()
	{
		List<MailIntegration> l = new ArrayList<>();
		
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("MailIntegration.findAll"));
			rs = pstmt.executeQuery();
			
			while (rs.next()) {
				l.add(this.buildMailIntegration(rs));
			}
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(rs, pstmt);
		}
		
		return l;
	}

	/**
	 * @see net.jforum.dao.MailIntegrationDAO#update(net.jforum.entities.MailIntegration)
	 */
	@Override public void update(MailIntegration integration)
	{
		PreparedStatement pstmt = null;
		
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
				SystemGlobals.getSql("MailIntegration.update"));
			
			this.prepareForSave(integration, pstmt);
			pstmt.setInt(8, integration.getForumId());
			
			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}
	
	private MailIntegration buildMailIntegration(ResultSet rs) throws SQLException
	{
		MailIntegration mi = new MailIntegration();
		
		mi.setForumId(rs.getInt("forum_id"));
		mi.setForumEmail(rs.getString("forum_email"));
		mi.setPopHost(rs.getString("pop_host"));
		mi.setPopPassword(rs.getString("pop_password"));
		mi.setPopPort(rs.getInt("pop_port"));
		mi.setPopUsername(rs.getString("pop_username"));
		mi.setSsl(rs.getInt("pop_ssl") == 1);
		
		return mi;
	}

	/**
	 * Given a PreparedStatement, fill its values with the data of a MailIntegration instance
	 * @param integration the data to fill the statement
	 * @param pstmt the statement to be filled
	 * @throws SQLException
	 */
	private void prepareForSave(MailIntegration integration, PreparedStatement pstmt) throws SQLException
	{
		pstmt.setInt(1, integration.getForumId());
		pstmt.setString(2, integration.getForumEmail());
		pstmt.setString(3, integration.getPopHost());
		pstmt.setString(4, integration.getPopUsername());
		pstmt.setString(5, integration.getPopPassword());
		pstmt.setInt(6, integration.getPopPort());
		pstmt.setInt(7, integration.isSsl() ? 1 : 0);
	}
}

../jforum2-code/src/main/java/net/jforum/dao/generic/GenericPostDAO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms,
 * with or without modification, are permitted provided
 * that the following conditions are met:
 *
 * 1) Redistributions of source code must retain the above
 * copyright notice, this list of conditions and the
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the
 * above copyright notice, this list of conditions and
 * the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor
 * the names of its contributors may be used to endorse
 * or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
 * IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 *
 * Created on Mar 28, 2003 / 22:57:43 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao.generic;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import net.jforum.JForumExecutionContext;
import net.jforum.dao.DataAccessDriver;
import net.jforum.dao.UserDAO;
import net.jforum.entities.Post;
import net.jforum.exceptions.DatabaseException;
import net.jforum.repository.ForumRepository;
import net.jforum.search.SearchFacade;
import net.jforum.util.DbUtils;
import net.jforum.util.preferences.SystemGlobals;

/**
 * @author Rafael Steil
 * @author Vanessa Sabino
 */
public class GenericPostDAO extends AutoKeys implements net.jforum.dao.PostDAO
{
	/**
	 * @see net.jforum.dao.PostDAO#selectById(int)
	 */
	@Override public Post selectById(int postId)
	{
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(SystemGlobals.getSql("PostModel.selectById"));
			pstmt.setInt(1, postId);

			rs = pstmt.executeQuery();

			Post post = new Post();

			if (rs.next()) {
				post = this.makePost(rs);
			}

			return post;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(rs, pstmt);
		}
	}

	protected Post makePost(ResultSet rs) throws SQLException
	{
		Post post = new Post();
		post.setId(rs.getInt("post_id"));
		post.setTopicId(rs.getInt("topic_id"));
		post.setForumId(rs.getInt("forum_id"));
		post.setUserId(rs.getInt("user_id"));

		Timestamp postTime = rs.getTimestamp("post_time");
		post.setTime(new Date(postTime.getTime()));
		post.setUserIp(rs.getString("poster_ip"));
		post.setBbCodeEnabled(rs.getInt("enable_bbcode") > 0);
		post.setHtmlEnabled(rs.getInt("enable_html") > 0);
		post.setSmiliesEnabled(rs.getInt("enable_smilies") > 0);
		post.setSignatureEnabled(rs.getInt("enable_sig") > 0);
		post.setEditCount(rs.getInt("post_edit_count"));

		Timestamp editTime = rs.getTimestamp("post_edit_time");
		post.setEditTime(editTime != null ? new Date(editTime.getTime()) : null);

		post.setSubject(rs.getString("post_subject"));
		post.setText(this.getPostTextFromResultSet(rs));
		post.setPostUsername(rs.getString("username"));
		post.hasAttachments(rs.getInt("attach") > 0);
		post.setModerate(rs.getInt("need_moderate") == 1);

		post.setKarma(DataAccessDriver.getInstance().newKarmaDAO().getPostKarma(post.getId()));

		return post;
	}

	/**
	 * Utility method to read the post text from the result set. This method may be useful when
	 * using some "non-standard" way to store text, like oracle does when using (c|b)lob
	 *
	 * @param rs The result set to fetch data from
	 * @return The post text string
	 * @throws SQLException
	 */
	protected String getPostTextFromResultSet(ResultSet rs) throws SQLException
	{
		return rs.getString("post_text");
	}

	/**
	 * @see net.jforum.dao.PostDAO#delete(Post)
	 */
	@Override public void delete(Post post)
	{
		List<Post> l = new ArrayList<>();
		l.add(post);
		this.removePosts(l);
	}

	private void removePosts(List<Post> posts)
	{
		PreparedStatement pstmtPost = null;
		PreparedStatement pstmtText = null;
		UserDAO userDAO = DataAccessDriver.getInstance().newUserDAO();

		try {
			pstmtPost = JForumExecutionContext.getConnection()
					.prepareStatement(SystemGlobals.getSql("PostModel.deletePost"));

			pstmtText = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("PostModel.deletePostText"));

			for (Iterator<Post> iter = posts.iterator(); iter.hasNext();) {
				Post post = iter.next();

				pstmtPost.setInt(1, post.getId());
				pstmtText.setInt(1, post.getId());

				pstmtText.executeUpdate();
				pstmtPost.executeUpdate();

				SearchFacade.delete(post);
				userDAO.decrementPosts(post.getUserId());
			}
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmtPost);
			DbUtils.close(pstmtText);
		}
	}

	/**
	 * @see net.jforum.dao.PostDAO#deleteByTopic(int)
	 */
	@Override public void deleteByTopic(int topicId)
	{
		PreparedStatement pstmt = null;
		ResultSet rs = null;

		try {
			pstmt = JForumExecutionContext.getConnection()
				.prepareStatement(SystemGlobals.getSql("PostModel.deleteByTopic"));
			pstmt.setInt(1, topicId);
			rs = pstmt.executeQuery();

			List<Post> posts = new ArrayList<>();

			while (rs.next()) {
				Post post = new Post();
				post.setId(rs.getInt("post_id"));
				post.setUserId(rs.getInt("user_id"));

				posts.add(post);
			}

			this.removePosts(posts);
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(rs, pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.PostDAO#update(net.jforum.entities.Post)
	 */
	@Override public void update(Post post)
	{
		this.updatePostsTable(post);
		this.updatePostsTextTable(post);

		SearchFacade.update(post);
	}

	protected void updatePostsTextTable(Post post)
	{
		PreparedStatement pstmt = null;

		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("PostModel.updatePostText"));
			pstmt.setString(1, post.getText());
			pstmt.setString(2, post.getSubject());
			pstmt.setInt(3, post.getId());

			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	protected void updatePostsTable(Post post)
	{
		PreparedStatement pstmt = null;

		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(SystemGlobals.getSql("PostModel.updatePost"));
			pstmt.setInt(1, post.getTopicId());
			pstmt.setInt(2, post.getForumId());
			pstmt.setInt(3, post.isBbCodeEnabled() ? 1 : 0);
			pstmt.setInt(4, post.isHtmlEnabled() ? 1 : 0);
			pstmt.setInt(5, post.isSmiliesEnabled() ? 1 : 0);
			pstmt.setInt(6, post.isSignatureEnabled() ? 1 : 0);
			pstmt.setTimestamp(7, new Timestamp(System.currentTimeMillis()));
			pstmt.setInt(8, post.getEditCount() + 1);
			pstmt.setString(9, post.getUserIp());
			pstmt.setInt(10, post.getId());

			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.PostDAO#addNew(net.jforum.entities.Post)
	 */
	@Override public int addNew(Post post)
	{
		try {
			this.addNewPost(post);
			this.addNewPostText(post);

			return post.getId();
		}
		catch (Exception e) {
			throw new DatabaseException(e);
		}
	}

	@Override public void index (Post post)
	{
		SearchFacade.create(post);
	}

	protected void addNewPostText(Post post) throws Exception
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
				SystemGlobals.getSql("PostModel.addNewPostText"));
			pstmt.setInt(1, post.getId());
			pstmt.setString(2, post.getText());
			pstmt.setString(3, post.getSubject());
			pstmt.executeUpdate();
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	protected void addNewPost(Post post)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = this.getStatementForAutoKeys("PostModel.addNewPost");

			pstmt.setInt(1, post.getTopicId());
			pstmt.setInt(2, post.getForumId());
			pstmt.setLong(3, post.getUserId());
			pstmt.setTimestamp(4, new Timestamp(post.getTime().getTime()));
			pstmt.setString(5, post.getUserIp());
			pstmt.setInt(6, post.isBbCodeEnabled() ? 1 : 0);
			pstmt.setInt(7, post.isHtmlEnabled() ? 1 : 0);
			pstmt.setInt(8, post.isSmiliesEnabled() ? 1 : 0);
			pstmt.setInt(9, post.isSignatureEnabled() ? 1 : 0);
			pstmt.setInt(10, post.isModerationNeeded() ? 1 : 0);

			this.setAutoGeneratedKeysQuery(SystemGlobals.getSql("PostModel.lastGeneratedPostId"));
			int postId = this.executeAutoKeysQuery(pstmt);
			post.setId(postId);
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.PostDAO#selectAllByTopic(int)
	 */
	@Override public List<Post> selectAllByTopic(int topicId)
	{
		return this.selectAllByTopicByLimit(topicId, 0, -1);
	}

	/**
	 * @see net.jforum.dao.PostDAO#selectAllByTopicByLimit(int, int, int)
	 *
	 * A count smaller than zero means no limit - simplified SQL is used
	 * in that case in order to avoid a limit of Integer.MAX_VALUE
	 */
	@Override public List<Post> selectAllByTopicByLimit(int topicId, int startFrom, int count)
	{
		List<Post> l = new ArrayList<>();

		String sql = (count < 0)
					? SystemGlobals.getSql("PostModel.selectAllByTopic")
					: SystemGlobals.getSql("PostModel.selectAllByTopicByLimit");

		PreparedStatement pstmt = null;
		ResultSet rs = null;

		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(sql);
			pstmt.setInt(1, topicId);
			if (count >= 0) {
				pstmt.setInt(2, startFrom);
				pstmt.setInt(3, count);
			}

			rs = pstmt.executeQuery();

			while (rs.next()) {
				l.add(this.makePost(rs));
			}

			return l;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(rs, pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.PostDAO#selectByUserByLimit(int, int, int)
	 */
	@Override public List<Post> selectByUserByLimit(int userId, int startFrom, int count)
	{
		String sql = SystemGlobals.getSql("PostModel.selectByUserByLimit");
		sql = sql.replaceAll(":fids:", ForumRepository.getListAllowedForums());

		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(sql);

			pstmt.setInt(1, userId);
			pstmt.setInt(2, startFrom);
			pstmt.setInt(3, count);

			rs = pstmt.executeQuery();
			List<Post> l = new ArrayList<>();

			while (rs.next()) {
				l.add(this.makePost(rs));
			}

			return l;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(rs, pstmt);
		}
	}

	@Override public int countUserPosts(int userId)
	{
		int total = 0;

		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("PostModel.countUserPosts").replaceAll(":fids:",
							ForumRepository.getListAllowedForums()));
			pstmt.setInt(1, userId);

			rs = pstmt.executeQuery();

			if (rs.next()) {
				total = rs.getInt(1);
			}

			return total;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(rs, pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.PostDAO#countPreviousPosts(int)
	 */
	@Override public int countPreviousPosts(int postId)
	{
		int total = 0;

		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("PostModel.countPreviousPosts"));
			pstmt.setInt(1, postId);
			pstmt.setInt(2, postId);

			rs = pstmt.executeQuery();

			if (rs.next()) {
				total = rs.getInt(1);
			}

			return total;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(rs, pstmt);
		}
	}

	@Override public List<Post> selectLatestByForumForRSS(int forumId, int limit)
	{
		List<Post> l = new ArrayList<>();

		PreparedStatement pstmt = null;
		ResultSet rs = null;

		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
				SystemGlobals.getSql("PostModel.selectLatestByForumForRSS"));
			pstmt.setInt(1, forumId);
			pstmt.setInt(2, limit);

			rs = pstmt.executeQuery();

			while (rs.next()) {
				Post post = this.buildPostForRSS(rs);
				l.add(post);
			}

		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(rs, pstmt);
		}

		return l;
	}

	@Override public List<Post> selectLatestForRSS(int limit) {
		List<Post> l = new ArrayList<>();

		PreparedStatement pstmt = null;
		ResultSet rs = null;

		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
				SystemGlobals.getSql("PostModel.selectLatestForRSS"));
			pstmt.setInt(1, limit);

			rs = pstmt.executeQuery();

			while (rs.next()) {
				Post post = this.buildPostForRSS(rs);
				l.add(post);
			}

		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(rs, pstmt);
		}

		return l;
	}

	@Override public List<Post> selectHotForRSS(int limit)
	{
		List<Post> l = new ArrayList<>();

		PreparedStatement pstmt = null;
		ResultSet rs = null;

		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
				SystemGlobals.getSql("PostModel.selectHotForRSS"));
			pstmt.setInt(1, limit);

			rs = pstmt.executeQuery();

			while (rs.next()) {
				Post post = this.buildPostForRSS(rs);
				l.add(post);
			}

		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(rs, pstmt);
		}

		return l;
	}

	protected Post buildPostForRSS(ResultSet rs) throws SQLException
	{
		Post post = new Post();

		post.setId(rs.getInt("post_id"));
		post.setSubject(rs.getString("subject"));
		post.setText(this.getPostTextFromResultSet(rs));
		post.setTopicId(rs.getInt("topic_id"));
		post.setForumId(rs.getInt("forum_id"));
		post.setUserId(rs.getInt("user_id"));
		post.setPostUsername(rs.getString("username"));
		post.setTime(new Date(rs.getTimestamp("post_time").getTime()));

		return post;
	}
}

../jforum2-code/src/main/java/net/jforum/dao/generic/GenericSpamDAO.java
package net.jforum.dao.generic;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import net.jforum.JForumExecutionContext;
import net.jforum.dao.SpamDAO;
import net.jforum.exceptions.DatabaseException;
import net.jforum.repository.SpamRepository;
import net.jforum.util.DbUtils;
import net.jforum.util.preferences.SystemGlobals;

public class GenericSpamDAO implements SpamDAO {

	@Override public List<String> selectAll() {
		List<String> result = new ArrayList<>();
		PreparedStatement p = null;
		ResultSet rs = null;
		try {
			p = preparedStatementFromSqlKey("Spam.selectAll");

			rs = p.executeQuery();

			while (rs.next()) {
				result.add(rs.getString("pattern"));
			}

			return result;
		} catch (SQLException e) {
			throw new DatabaseException(e);
		} finally {
			DbUtils.close(rs, p);
		}
	}

    @Override public void addSpam (String pattern) {
        PreparedStatement p = null;
        try {
            p = preparedStatementFromSqlKey("Spam.create");

            p.setString(1, pattern);

            int recordsAdded = p.executeUpdate();

            if (recordsAdded == 1) {
				SpamRepository.load();
            }
        } catch (SQLException e) {
            throw new DatabaseException(e);
        } finally {
            DbUtils.close(p);
        }
    }

    @Override public void deleteSpam (String pattern) {
        PreparedStatement p = null;
        try {
            p = preparedStatementFromSqlKey("Spam.delete");

            p.setString(1, pattern);

            int recordsDeleted = p.executeUpdate();

            if (recordsDeleted == 1) {
				SpamRepository.load();
            }
        } catch (SQLException e) {
            throw new DatabaseException(e);
        } finally {
            DbUtils.close(p);
        }
    }

    private PreparedStatement preparedStatementFromSqlKey (String sqlKey) throws SQLException {
        String sql = SystemGlobals.getSql(sqlKey);
        return JForumExecutionContext.getConnection().prepareStatement(sql);
    }
}

../jforum2-code/src/main/java/net/jforum/dao/generic/GenericApiDAO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.

 * Redistribution and use in source and binary forms,
 * with or without modification, are permitted provided
 * that the following conditions are met:

 * 1) Redistributions of source code must retain the above
 * copyright notice, this list of conditions and the
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the
 * above copyright notice, this list of conditions and
 * the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor
 * the names of its contributors may be used to endorse
 * or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
 * IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 *
 * Created on 04/09/2006 22:07:16
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao.generic;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import net.jforum.JForumExecutionContext;
import net.jforum.dao.ApiDAO;
import net.jforum.exceptions.DatabaseException;
import net.jforum.util.DbUtils;
import net.jforum.util.preferences.SystemGlobals;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public class GenericApiDAO implements ApiDAO
{
	/**
	 * @see net.jforum.dao.ApiDAO#isValid(java.lang.String)
	 */
	@Override public boolean isValid(final String apiKey)
	{
		boolean status = false;
		
		PreparedStatement pstmt = null;
		ResultSet resultSet = null;
		
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
				SystemGlobals.getSql("ApiModel.isValid"));
			pstmt.setString(1, apiKey);
			
			resultSet = pstmt.executeQuery();
			status = resultSet.next();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(resultSet, pstmt);
		}
		
		return status;
	}
}

../jforum2-code/src/main/java/net/jforum/dao/generic/GenericPrivateMessageDAO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 20/05/2004 - 15:51:10
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao.generic;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import net.jforum.JForumExecutionContext;
import net.jforum.dao.DataAccessDriver;
import net.jforum.dao.UserDAO;
import net.jforum.entities.Post;
import net.jforum.entities.PrivateMessage;
import net.jforum.entities.PrivateMessageType;
import net.jforum.entities.User;
import net.jforum.exceptions.DatabaseException;
import net.jforum.util.DbUtils;
import net.jforum.util.preferences.SystemGlobals;

/**
 * @author Rafael Steil
 */
public class GenericPrivateMessageDAO extends AutoKeys implements net.jforum.dao.PrivateMessageDAO
{
	/**
	 * @see net.jforum.dao.PrivateMessageDAO#send(net.jforum.entities.PrivateMessage)
	 */
	@Override public void send(PrivateMessage pm)
	{
		// We should store 2 copies: one for the sendee's sent box
		// and another for the target user's inbox.
		PreparedStatement pstmt = null;
		
		try {
			pstmt = this.getStatementForAutoKeys("PrivateMessageModel.add");

			// Sendee's sent box
			this.addPm(pm, pstmt);
			this.addPmText(pm);

			// Target user's inbox
			pstmt.setInt(1, PrivateMessageType.NEW);
			pm.setId(this.executeAutoKeysQuery(pstmt));

			this.addPmText(pm);
		}
		catch (Exception e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	protected void addPmText(PrivateMessage pm) throws Exception
	{
		PreparedStatement text = null;

		try {
			text = JForumExecutionContext.getConnection().prepareStatement(SystemGlobals.getSql("PrivateMessagesModel.addText"));

			text.setInt(1, pm.getId());
			text.setString(2, pm.getPost().getText());
			text.executeUpdate();
		} 
		finally {
			DbUtils.close(text);
		}
	}

	protected void addPm(PrivateMessage pm, PreparedStatement pstmt) throws SQLException
	{
		pstmt.setInt(1, PrivateMessageType.SENT);
		pstmt.setString(2, pm.getPost().getSubject());
		pstmt.setInt(3, pm.getFromUser().getId());
		pstmt.setInt(4, pm.getToUser().getId());
		pstmt.setTimestamp(5, new Timestamp(pm.getPost().getTime().getTime()));
		pstmt.setInt(6, pm.getPost().isBbCodeEnabled() ? 1 : 0);
		pstmt.setInt(7, pm.getPost().isHtmlEnabled() ? 1 : 0);
		pstmt.setInt(8, pm.getPost().isSmiliesEnabled() ? 1 : 0);
		pstmt.setInt(9, pm.getPost().isSignatureEnabled() ? 1 : 0);
		pstmt.setString(10, pm.getPost().getUserIp());

		this.setAutoGeneratedKeysQuery(SystemGlobals.getSql("PrivateMessagesModel.lastGeneratedPmId"));
		pm.setId(this.executeAutoKeysQuery(pstmt));
	}

	/**
	 * @see net.jforum.dao.PrivateMessageDAO#delete(net.jforum.entities.PrivateMessage[], int)
	 */
	@Override public void delete(PrivateMessage[] pm, int userId)
	{
		PreparedStatement deleteMessage = null;
		PreparedStatement deleteText = null;
		PreparedStatement isDeleteAllowed = null;
		
		try {
			Connection connection = JForumExecutionContext.getConnection();
			
			deleteMessage = connection.prepareStatement(SystemGlobals.getSql("PrivateMessageModel.delete"));
			deleteText = connection.prepareStatement(SystemGlobals.getSql("PrivateMessagesModel.deleteText"));
			
			isDeleteAllowed = connection.prepareStatement(SystemGlobals.getSql("PrivateMessagesModel.isDeleteAllowed"));
			isDeleteAllowed.setInt(2, userId);
			isDeleteAllowed.setInt(3, userId);

			for (int i = 0; i < pm.length; i++) {
				PrivateMessage currentMessage = pm[i];
				
				isDeleteAllowed.setInt(1, currentMessage.getId());

				ResultSet rs = null;
				
				try {
					rs = isDeleteAllowed.executeQuery();
					
					if (rs.next()) {
						deleteText.setInt(1, currentMessage.getId());
						deleteText.executeUpdate();
		
						deleteMessage.setInt(1, currentMessage.getId());
						deleteMessage.executeUpdate();
					}
				}
				finally {
					DbUtils.close(rs);
				}
			}
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(deleteMessage);
			DbUtils.close(deleteText);
			DbUtils.close(isDeleteAllowed);
		}
	}

	/**
	 * @see net.jforum.dao.PrivateMessageDAO#selectFromInbox(net.jforum.entities.User)
	 */
	@Override public List<PrivateMessage> selectFromInbox(int userId, int startFrom, int count)
	{
		String query = SystemGlobals.getSql("PrivateMessageModel.baseListing");
		query = query.replaceAll("#FILTER#", SystemGlobals.getSql("PrivateMessageModel.inbox"));

		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(query);
			pstmt.setInt(1, userId);
			pstmt.setInt(2, startFrom);
			pstmt.setInt(3, count);

			List<PrivateMessage> pmList = new ArrayList<>();

			rs = pstmt.executeQuery();
			while (rs.next()) {
				PrivateMessage pm = this.getPm(rs, false);

				User fromUser = new User();
				fromUser.setId(rs.getInt("user_id"));
				fromUser.setUsername(rs.getString("username"));

				pm.setFromUser(fromUser);

				pmList.add(pm);
			}

			return pmList;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(rs, pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.PrivateMessageDAO#selectFromSent(net.jforum.entities.User)
	 */
	@Override public List<PrivateMessage> selectFromSent(int userId, int startFrom, int count)
	{
		String query = SystemGlobals.getSql("PrivateMessageModel.baseListing");
		query = query.replaceAll("#FILTER#", SystemGlobals.getSql("PrivateMessageModel.sent"));

		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(query);
			pstmt.setInt(1, userId);
			pstmt.setInt(2, startFrom);
			pstmt.setInt(3, count);

			List<PrivateMessage> pmList = new ArrayList<>();

			rs = pstmt.executeQuery();
			while (rs.next()) {
				PrivateMessage pm = this.getPm(rs, false);

				User toUser = new User();
				toUser.setId(rs.getInt("user_id"));
				toUser.setUsername(rs.getString("username"));

				pm.setToUser(toUser);

				pmList.add(pm);
			}
			return pmList;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(rs, pstmt);
		}
	}

	protected PrivateMessage getPm(ResultSet rs) throws SQLException
	{
		return this.getPm(rs, true);
	}

	protected PrivateMessage getPm(ResultSet rs, boolean full) throws SQLException
	{
		PrivateMessage pm = new PrivateMessage();
		Post post = new Post();

		pm.setId(rs.getInt("privmsgs_id"));
		pm.setType(rs.getInt("privmsgs_type"));

		post.setTime(new Date(rs.getTimestamp("privmsgs_date").getTime()));
		post.setSubject(rs.getString("privmsgs_subject"));
		pm.setPostDate(post.getTime());

		if (full) {
			UserDAO um = DataAccessDriver.getInstance().newUserDAO();
			pm.setFromUser(um.selectById(rs.getInt("privmsgs_from_userid")));
			pm.setToUser(um.selectById(rs.getInt("privmsgs_to_userid")));

			post.setBbCodeEnabled(rs.getInt("privmsgs_enable_bbcode") == 1);
			post.setSignatureEnabled(rs.getInt("privmsgs_attach_sig") == 1);
			post.setHtmlEnabled(rs.getInt("privmsgs_enable_html") == 1);
			post.setSmiliesEnabled(rs.getInt("privmsgs_enable_smilies") == 1);
			post.setText(this.getPmText(rs));
		}

		pm.setPost(post);

		return pm;
	}

	protected String getPmText(ResultSet rs) throws SQLException
	{
		return rs.getString("privmsgs_text");
	}

	/**
	 * @see net.jforum.dao.PrivateMessageDAO#selectById(net.jforum.entities.PrivateMessage)
	 */
	@Override public PrivateMessage selectById(PrivateMessage origPrivMsg)
	{
		PrivateMessage pm = origPrivMsg;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("PrivateMessageModel.selectById"));
			pstmt.setInt(1, pm.getId());

			rs = pstmt.executeQuery();
			if (rs.next()) {
				pm = this.getPm(rs);
			}

			return pm;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(rs, pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.PrivateMessageDAO#updateType(net.jforum.entities.PrivateMessage)
	 */
	@Override public void updateType(PrivateMessage pm)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("PrivateMessageModel.updateType"));
			pstmt.setInt(1, pm.getType());
			pstmt.setInt(2, pm.getId());
			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.PrivateMessageDAO#getTotalSent(int)
	 */
	@Override public int getTotalSent(int userId)
	{
		int total = 0;

		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("PrivateMessageModel.sentTotal"));
			pstmt.setInt(1, userId);

			rs = pstmt.executeQuery();
			if (rs.next()) {
				total = rs.getInt("total");
			}

			return total;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(rs, pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.PrivateMessageDAO#getTotalInbox(int)
	 */
	@Override public int getTotalInbox(int userId)
	{
		int total = 0;

		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("PrivateMessageModel.inboxTotal"));
			pstmt.setInt(1, userId);

			rs = pstmt.executeQuery();
			if (rs.next()) {
				total = rs.getInt("total");
			}

			return total;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(rs, pstmt);
		}
	}
}

../jforum2-code/src/main/java/net/jforum/dao/generic/GenericSummaryDAO.java
/* Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms,
 * with or without modification, are permitted provided
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above
 * copyright notice, this list of conditions and the
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the
 * above copyright notice, this list of conditions and
 * the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor
 * the names of its contributors may be used to endorse
 * or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
 * IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 *
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao.generic;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.log4j.Logger;

import net.jforum.JForumExecutionContext;
import net.jforum.dao.DataAccessDriver;
import net.jforum.dao.SummaryDAO;
import net.jforum.entities.Post;
import net.jforum.exceptions.DatabaseException;
import net.jforum.util.DbUtils;
import net.jforum.util.preferences.SystemGlobals;

/**
 * @author Franklin Samir (franklin (at) portaljava [dot] com)
 */
public class GenericSummaryDAO extends AutoKeys implements SummaryDAO
{
	private static final Logger LOGGER = Logger.getLogger(GenericSummaryDAO.class);
	
	/**
	 * @see net.jforum.dao.SummaryDAO#selectLastPosts(Date, Date)
	 */
	@Override public List<Post> selectLastPosts(Date firstDate, Date lastDate)
	{
		String query = SystemGlobals.getSql("SummaryDAO.selectPosts");
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(query);
			pstmt.setTimestamp(1, new Timestamp(firstDate.getTime()));
			pstmt.setTimestamp(2, new Timestamp(lastDate.getTime()));

			List<Post> posts = new ArrayList<>();
			rs = pstmt.executeQuery();

			while (rs.next()) {
				posts.add(this.fillPost(rs));
			}

			return posts;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(rs, pstmt);
		}
	}

	private Post fillPost(ResultSet rs) throws SQLException
	{
		Post post = new Post();

		post.setId(rs.getInt("post_id"));
		post.setTopicId(rs.getInt("topic_id"));
		post.setForumId(rs.getInt("forum_id"));
		post.setUserId(rs.getInt("user_id"));
		Timestamp postTime = rs.getTimestamp("post_time");
		post.setTime(postTime);
		post.setSubject(rs.getString("post_subject"));
		post.setText(this.getPostTextFromResultSet(rs));
		post.setPostUsername(rs.getString("username"));

		post.setKarma(DataAccessDriver.getInstance().newKarmaDAO().getPostKarma(post.getId()));

		LOGGER.debug("Add to Weekly Summary: post.id="+ post.getId() +" post.subject="+ post.getSubject());
		
		return post;
	}

	@Override public List<String> listRecipients()
	{
		String query = SystemGlobals.getSql("SummaryDAO.selectAllRecipients");
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(query);
			rs = pstmt.executeQuery();

			List<String> recipients = new ArrayList<>();
			String mail = null;
			while (rs.next()) {
				mail = rs.getString("user_email");
				LOGGER.debug("user_email=<" + mail + ">");
				if (mail != null && !"".equals(mail.trim())) {
					recipients.add(mail);
					LOGGER.debug("recipients add " + mail);
				}
			}

			return recipients;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(rs, pstmt);
		}
	}
	
	protected String getPostTextFromResultSet(ResultSet rs) throws SQLException
	{
		return rs.getString("post_text");
	}
}

../jforum2-code/src/main/java/net/jforum/dao/generic/GenericPollDAO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 *
 * Created on 21/05/2004 - 14:19:11
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao.generic;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import net.jforum.JForumExecutionContext;
import net.jforum.dao.PollDAO;
import net.jforum.entities.Poll;
import net.jforum.entities.PollOption;
import net.jforum.exceptions.DatabaseException;
import net.jforum.util.DbUtils;
import net.jforum.util.preferences.SystemGlobals;

/**
 * @author David Almilli
 * @version $Id$
 */
public class GenericPollDAO extends AutoKeys implements PollDAO
{
	/**
	 * @see net.jforum.dao.PollDAO#addNew(net.jforum.entities.Poll)
	 */
	@Override public int addNew(Poll poll)
	{
		this.addNewPoll(poll);
		this.addNewPollOptions(poll.getId(), poll.getOptions());

		return poll.getId();
	}

	protected void addNewPoll(Poll poll)
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = this.getStatementForAutoKeys("PollModel.addNewPoll");
			pstmt.setInt(1, poll.getTopicId());
			pstmt.setString(2, poll.getLabel());
			pstmt.setInt(3, poll.getLength());
			pstmt.setTimestamp(4, new Timestamp(System.currentTimeMillis()));

			this.setAutoGeneratedKeysQuery(SystemGlobals.getSql("PollModel.lastGeneratedPollId"));
			int pollId = this.executeAutoKeysQuery(pstmt);
			poll.setId(pollId);
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	protected void addNewPollOptions(int pollId, List<PollOption> options)
	{
		Connection connection = JForumExecutionContext.getConnection();

		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			pstmt = connection.prepareStatement(SystemGlobals.getSql("PollModel.selectMaxVoteId"));

			pstmt.setInt(1, pollId);
			rs = pstmt.executeQuery();
			rs.next();

			int optionId = rs.getInt(1);

			rs.close();
			pstmt.close();

			pstmt = connection.prepareStatement(SystemGlobals.getSql("PollModel.addNewPollOption"));
			for (Iterator<PollOption> iter = options.iterator(); iter.hasNext();) {
				PollOption option = iter.next();

				pstmt.setInt(1, pollId);
				pstmt.setInt(2, ++optionId);
				pstmt.setString(3, option.getText());

				pstmt.executeUpdate();
			}
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(rs, pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.PollDAO#selectById(int)
	 */
	@Override public Poll selectById(int pollId)
	{
		PreparedStatement pstmt = null;
		PreparedStatement optionPstmt = null;
		ResultSet ors = null;
		ResultSet prs = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(SystemGlobals.getSql("PollModel.selectById"));
			pstmt.setInt(1, pollId);
			prs = pstmt.executeQuery();

			Poll poll = null;
			if (prs.next()) {
				poll = this.makePoll(prs);

				optionPstmt = JForumExecutionContext.getConnection().prepareStatement(
						SystemGlobals.getSql("PollModel.selectOptionsByPollId"));
				optionPstmt.setInt(1, pollId);
				ors = optionPstmt.executeQuery();

				while (ors.next()) {
					poll.addOption(this.makePollOption(ors));
				}
			}

			return poll;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(prs, pstmt);
			DbUtils.close(ors, optionPstmt);
		}
	}

	protected Poll makePoll(ResultSet rs) throws SQLException
	{
		Poll poll = new Poll();
		poll.setId(rs.getInt("vote_id"));
		poll.setTopicId(rs.getInt("topic_id"));
		poll.setLabel(rs.getString("vote_text"));
		poll.setStartTime(new Date(rs.getTimestamp("vote_start").getTime()));
		poll.setLength(rs.getInt("vote_length"));

		return poll;
	}

	protected PollOption makePollOption(ResultSet rs) throws SQLException
	{
		PollOption option = new PollOption();
		option.setPollId(rs.getInt("vote_id"));
		option.setId(rs.getInt("vote_option_id"));
		option.setText(rs.getString("vote_option_text"));
		option.setVoteCount(rs.getInt("vote_result"));

		return option;
	}

	/**
	 * @see net.jforum.dao.PollDAO#voteOnPoll(int, int, int, java.lang.String)
	 */
	@Override public void voteOnPoll(int pollId, int optionId, int userId, String ipAddress)
	{
		Connection connection = JForumExecutionContext.getConnection();

		PreparedStatement votePstmt = null;
		PreparedStatement pstmt = null;
		try {
			pstmt = connection.prepareStatement(SystemGlobals.getSql("PollModel.incrementVoteCount"));
			votePstmt = connection.prepareStatement(SystemGlobals.getSql("PollModel.addNewVoter"));

			pstmt.setInt(1, pollId);
			pstmt.setInt(2, optionId);

			votePstmt.setInt(1, pollId);
			votePstmt.setInt(2, userId);
			votePstmt.setString(3, ipAddress);

			pstmt.executeUpdate();
			votePstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
			DbUtils.close(votePstmt);
		}
	}

	/**
	 * @see net.jforum.dao.PollDAO#hasUserVotedOnPoll(int, int)
	 */
	@Override public boolean hasUserVotedOnPoll(int pollId, int userId)
	{
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(SystemGlobals.getSql("PollModel.selectVoter"));
			pstmt.setInt(1, pollId);
			pstmt.setInt(2, userId);

			rs = pstmt.executeQuery();

			return rs.next();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(rs, pstmt);
		}
	}

	/**
	 * Tells if the anonymous user has already voted on the given poll from the given IP
	 * 
	 * @param pollId
	 *            the poll id that is being checked
	 * @param ipAddress
	 *            the IP address of the anonymoususer to check the vote for
	 * @return true if the user has already voted on the given poll
	 */
	@Override public boolean hasUserVotedOnPoll(int pollId, String ipAddress)
	{
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("PollModel.selectVoterByIP"));
			pstmt.setInt(1, pollId);
			pstmt.setString(2, ipAddress);

			rs = pstmt.executeQuery();

			return rs.next();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(rs, pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.PollDAO#delete(int)
	 */
	@Override public void deleteByTopicId(int topicId)
	{
		// first, lookup the poll id, then delete it
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("PollModel.selectPollByTopicId"));

			pstmt.setInt(1, topicId);

			rs = pstmt.executeQuery();

			int pollId = 0;
			if (rs.next()) {
				pollId = rs.getInt("vote_id");
			}

			if (pollId != 0) {
				delete(pollId);
			}
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(rs, pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.PollDAO#delete(int)
	 */
	@Override public void delete(int pollId)
	{
		this.deletePollVotes(pollId);
		this.deleteAllPollOptions(pollId);
		this.deletePoll(pollId);
	}

	protected void deletePoll(int pollId)
	{
		PreparedStatement poll = null;
		try {
			poll = JForumExecutionContext.getConnection()
					.prepareStatement(SystemGlobals.getSql("PollModel.deletePoll"));
			poll.setInt(1, pollId);
			poll.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(poll);
		}
	}

	protected void deletePollVotes(int pollId)
	{
		PreparedStatement poll = null;
		try {
			poll = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("PollModel.deletePollVoters"));
			poll.setInt(1, pollId);
			poll.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(poll);
		}
	}

	protected void deleteAllPollOptions(int pollId)
	{
		PreparedStatement poll = null;
		try {
			poll = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("PollModel.deleteAllPollOptions"));

			poll.setInt(1, pollId);
			poll.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(poll);
		}
	}

	protected void deletePollOptions(int pollId, List<PollOption> deleted) throws SQLException
	{
		Connection connection = JForumExecutionContext.getConnection();

		PreparedStatement options = null;
		try {
			options = connection.prepareStatement(SystemGlobals.getSql("PollModel.deletePollOption"));

			for (Iterator<PollOption> iter = deleted.iterator(); iter.hasNext();) {
				PollOption o = iter.next();

				// Option
				options.setInt(1, pollId);
				options.setInt(2, o.getId());
				options.executeUpdate();
			}
		}
		finally {
			DbUtils.close(options);
		}
	}

	protected void updatePollOptions(int pollId, List<PollOption> options) throws SQLException
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("PollModel.updatePollOption"));

			for (Iterator<PollOption> iter = options.iterator(); iter.hasNext();) {
				PollOption o = iter.next();

				pstmt.setString(1, o.getText());
				pstmt.setInt(2, o.getId());
				pstmt.setInt(3, pollId);

				pstmt.executeUpdate();
			}
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.PollDAO#update(net.jforum.entities.Poll)
	 */
	@Override public void update(Poll poll)
	{
		try {
			this.updatePoll(poll);

			if (poll.getChanges() != null) {
				this.deletePollOptions(poll.getId(), poll.getChanges().getDeletedOptions());
				this.updatePollOptions(poll.getId(), poll.getChanges().getChangedOptions());
				this.addNewPollOptions(poll.getId(), poll.getChanges().getNewOptions());
			}
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
	}

	protected void updatePoll(Poll poll) throws SQLException
	{
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(SystemGlobals.getSql("PollModel.updatePoll"));

			pstmt.setString(1, poll.getLabel());
			pstmt.setInt(2, poll.getLength());
			pstmt.setInt(3, poll.getId());

			pstmt.executeUpdate();
		}
		finally {
			DbUtils.close(pstmt);
		}
	}
}

../jforum2-code/src/main/java/net/jforum/dao/generic/security/GenericGroupSecurityDAO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 19/03/2004 - 18:44:56
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao.generic.security;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;

import org.apache.commons.lang3.StringUtils;

import net.jforum.JForumExecutionContext;
import net.jforum.dao.GroupSecurityDAO;
import net.jforum.dao.generic.AutoKeys;
import net.jforum.entities.Group;
import net.jforum.entities.User;
import net.jforum.exceptions.DatabaseException;
import net.jforum.repository.RolesRepository;
import net.jforum.security.Role;
import net.jforum.security.RoleCollection;
import net.jforum.security.RoleValue;
import net.jforum.security.RoleValueCollection;
import net.jforum.util.DbUtils;
import net.jforum.util.preferences.SystemGlobals;

/**
 * @author Rafael Steil
 */
public class GenericGroupSecurityDAO extends AutoKeys implements GroupSecurityDAO
{
	private List<Integer> selectForumRoles(final int forumId) 
	{
		final List<Integer> l = new ArrayList<>();

		PreparedStatement pstmt = null;
		ResultSet rs = null;

		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
				SystemGlobals.getSql("PermissionControl.selectForumRoles"));
			pstmt.setString(1, String.valueOf(forumId));

			rs = pstmt.executeQuery();

			while (rs.next()) {
				l.add(Integer.valueOf(rs.getInt("role_id")));
			}
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(rs, pstmt);
		}

		return l;
	}

	@Override public void deleteForumRoles(final int forumId) 
	{
		PreparedStatement pstmt = null;

		final List<Integer> roleIds = this.selectForumRoles(forumId);

		try {
			final StringBuilder ids = new StringBuilder();

			for (final Iterator<Integer> iterator = roleIds.iterator(); iterator.hasNext();) {
				final Integer id = iterator.next();
				ids.append(id).append(',');
			}

			ids.append("-1");

			// Role values
			String sql = SystemGlobals.getSql("PermissionControl.deleteRoleValues");
			sql = StringUtils.replace(sql, "#IDS#", ids.toString());

			pstmt = JForumExecutionContext.getConnection().prepareStatement(sql);
			pstmt.setString(1, String.valueOf(forumId));
			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.GroupSecurityDAO#deleteAllRoles(int)
	 */
	@Override public void deleteAllRoles(final int groupId)
	{
		PreparedStatement pstmt = null;

		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
				SystemGlobals.getSql("PermissionControl.deleteAllRoleValues"));
			pstmt.setInt(1, groupId);
			pstmt.executeUpdate();
			pstmt.close();

			pstmt = JForumExecutionContext.getConnection().prepareStatement(
				SystemGlobals.getSql("PermissionControl.deleteAllGroupRoles"));
			pstmt.setInt(1, groupId);
			pstmt.executeUpdate();
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.GroupSecurityDAO#addRole(int, net.jforum.security.Role)
	 */
	@Override public void addRole(final int id, final Role role)
	{
		this.addRole(id, role, null);
	}

	/**
	 * @see net.jforum.dao.GroupSecurityDAO#addRole(int, net.jforum.security.Role,
	 *      net.jforum.security.RoleValueCollection)
	 */
	@Override public void addRole(int id, Role role, RoleValueCollection roleValues)
	{
		this.setAutoGeneratedKeysQuery(SystemGlobals.getSql("PermissionControl.lastGeneratedRoleId"));
		SecurityCommon.executeAddRole(SystemGlobals.getSql("PermissionControl.addGroupRole"), id, role, roleValues,
			this.supportAutoGeneratedKeys(), this.getAutoGeneratedKeysQuery());
	}

	/**
	 * @see net.jforum.dao.GroupSecurityDAO#loadRoles(int)
	 */
	@Override public RoleCollection loadRoles(int groupId)
	{
		return this.loadRoles(new int[] { groupId });
	}

	protected RoleCollection loadRoles(int[] groupIds)
	{
		String sql = SystemGlobals.getSql("PermissionControl.loadGroupRoles");
		String groupIdAsString = SecurityCommon.groupIdAsString(groupIds);

		if ("".equals(groupIdAsString)) {
			// We suppose there is no "negative" group ids
			sql = sql.replaceAll("#IN#", "-1");
		}
		else {
			sql = sql.replaceAll("#IN#", groupIdAsString);
		}

		RoleCollection roles = null;

		PreparedStatement pstmt = null;
		ResultSet rs = null;

		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(sql);
			rs = pstmt.executeQuery();

			roles = SecurityCommon.loadRoles(rs);
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(rs, pstmt);
		}

		return roles;
	}

	/**
	 * @see net.jforum.dao.GroupSecurityDAO#addRoleValue(int, net.jforum.security.Role, net.jforum.security.RoleValueCollection)
	 */
	@Override public void addRoleValue(int groupId, Role role, RoleValueCollection rvc)
	{
		PreparedStatement pstmt = null;
		ResultSet rs = null;

		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("PermissionControl.getRoleIdByName"));
			pstmt.setString(1, role.getName());
			pstmt.setInt(2, groupId);

			int roleId = -1;

			rs = pstmt.executeQuery();
			if (rs.next()) {
				roleId = rs.getInt("role_id");
			}

			rs.close();
			pstmt.close();

			if (roleId == -1) {
				this.addRole(groupId, role, rvc);
			}
			else {
				pstmt = JForumExecutionContext.getConnection().prepareStatement(
						SystemGlobals.getSql("PermissionControl.addRoleValues"));
				pstmt.setInt(1, roleId);

				for (Iterator<?> iter = rvc.iterator(); iter.hasNext();) {
					RoleValue rv = (RoleValue) iter.next();
					pstmt.setString(2, rv.getValue());
					pstmt.executeUpdate();
				}
			}
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(rs, pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.GroupSecurityDAO#loadRolesByUserGroups(net.jforum.entities.User)
	 */
	@Override public RoleCollection loadRolesByUserGroups(User user)
	{
		List<Group> groups = user.getGroupsList();

		// When the user is associated to more than one group, we
		// should check the merged roles
		int[] groupIds = this.getSortedGroupIds(groups);

		RoleCollection groupRoles = RolesRepository.getGroupRoles(groupIds);

		// Not cached yet? then do it now
		if (groupRoles == null) {
			groupRoles = this.loadRoles(groupIds);
			RolesRepository.addGroupRoles(groupIds, groupRoles);
		}

		return groupRoles;
	}

	private int[] getSortedGroupIds(List<Group> groups)
	{
		int[] groupsIds = new int[groups.size()];
		int i = 0;

		for (Iterator<Group> iter = groups.iterator(); iter.hasNext();) {
			groupsIds[i++] = iter.next().getId();
		}

		Arrays.sort(groupsIds);

		return groupsIds;
	}
}

../jforum2-code/src/main/java/net/jforum/dao/generic/security/SecurityCommon.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 19/03/2004 - 18:45:54
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao.generic.security;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Iterator;

import org.apache.commons.lang3.StringUtils;

import net.jforum.JForumExecutionContext;
import net.jforum.exceptions.DatabaseException;
import net.jforum.security.PermissionControl;
import net.jforum.security.Role;
import net.jforum.security.RoleCollection;
import net.jforum.security.RoleValue;
import net.jforum.security.RoleValueCollection;
import net.jforum.util.DbUtils;
import net.jforum.util.preferences.SystemGlobals;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public class SecurityCommon
{
	/**
	 * Execute the <i>add role</i> thing. As the SQL statement to insert user and group roles are
	 * different, they cannot be manipulated with a 'generic' statement, and is for this reason that
	 * <code>addRole</code> method is marked abstract. <br>
	 * The only job the <code>addRole</code> method should do is to get the correct SQL statement
	 * for each case - user or group - and then re-pass it to this method, who then do the job for us.
	 * 
	 * @param sql The SQL statement to be executed.
	 * @param id The ID do insert. May be user's or group's id, depending of the situation ( the caller )
	 * @param role The role name to insert
	 * @param roleValues A <code>RoleValueCollection</code> collection containing the role values to
	 * insert. If none is wanted, just pass null as argument.
	 * @param supportAutoGeneratedKeys Set to <code>true</code> if <i>Statement.RETURN_GENERATED_KEYS</i> is supported
	 * by the Driver, or <code>false</code> if not.
	 * @param autoKeysQuery String
	 */
	public static void executeAddRole(String sql, int id, Role role, RoleValueCollection roleValues,
			boolean supportAutoGeneratedKeys, String autoKeysQuery)
	{
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		try {
			if (supportAutoGeneratedKeys) {
				pstmt = JForumExecutionContext.getConnection().prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
			}
			else {
				pstmt = JForumExecutionContext.getConnection().prepareStatement(sql);
			}

			pstmt.setInt(1, id);
			pstmt.setString(2, role.getName());

			pstmt.executeUpdate();

			if (roleValues != null) {
				int roleId = -1;

				if (supportAutoGeneratedKeys) {
					rs = pstmt.getGeneratedKeys();
					rs.next();
					roleId = rs.getInt(1);
				}
				else {
					pstmt.close();
					pstmt = JForumExecutionContext.getConnection().prepareStatement(autoKeysQuery);
					rs = pstmt.executeQuery();
					if (rs.next()) {
						roleId = rs.getInt(1);
					}
				}
				rs.close();
				pstmt.close();

				if (roleId == -1) {
					throw new SQLException("Could not obtain the latest role id");
				}

				pstmt = JForumExecutionContext.getConnection().prepareStatement(
						SystemGlobals.getSql("PermissionControl.addRoleValues"));

				for (Iterator<?> iter = roleValues.iterator(); iter.hasNext();) {
					RoleValue rv = (RoleValue) iter.next();

					pstmt.setInt(1, roleId);
					pstmt.setString(2, rv.getValue());

					pstmt.executeUpdate();
				}
			}
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(rs, pstmt);
		}
	}

	/**
	 * See {@link PermissionControl#addRole(int, net.jforum.security.Role, net.jforum.security.RoleValueCollection)} for
	 * explanation about this method. The working way is the same.
	 * 
	 * @param rs The ResultSet containing the data to be fetched. This method does not
	 * free the resultset after it finished using it, so it's responsibility of the 
	 * caller to do such task.
	 * @return A <code>RoleCollection</code> collection with the roles processed.
	 */
	public static RoleCollection loadRoles(ResultSet rs)
	{
		RoleCollection rc = new RoleCollection();

		try {
			Role r = null;
			String lastName = null;

			while (rs.next()) {
				String currentName = rs.getString("name");
				
				if (!currentName.equals(lastName)) {
					if (r != null) {
						rc.add(r);
					}

					r = new Role();
					r.setName(rs.getString("name"));

					lastName = currentName;
				}

				String roleValue = rs.getString("role_value");

				if (!rs.wasNull() && StringUtils.isNotBlank(roleValue)) {
					r.getValues().add(new RoleValue(roleValue));
				}
			}

			if (r != null) {
				rc.add(r);
			}

			return rc;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
	}
	
	public static String groupIdAsString(int[] ids)
	{
		StringBuilder sb = new StringBuilder();
		
		for (int i = 0; i < ids.length - 1; i++) {
			sb.append(ids[i]).append(',');
		}
		
		if (ids.length > 0) {
			sb.append(ids[ids.length - 1]);			
		}
		
		return sb.toString();
	}
}

../jforum2-code/src/main/java/net/jforum/dao/sqlserver/SqlServerTopicDAO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 24/05/2004 12:25:35
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao.sqlserver;

import java.util.List;

import net.jforum.dao.generic.GenericTopicDAO;
import net.jforum.entities.Topic;

/**
 * @author Andre de Andrade da Silva (<a href="mailto:andre.de.andrade@gmail.com">andre.de.andrade@gmail.com</a>)
 * @author Dirk Rasmussen (<a href="mailto:d.rasmussen@bevis.de">d.rasmussen@bevis.de</a>)
 */
public class SqlServerTopicDAO extends GenericTopicDAO
{
	/**
	 * @see net.jforum.dao.TopicDAO#selectAllByForumByLimit(int, int, int)
	 */
	@Override public List<Topic> selectAllByForumByLimit(final int forumId, final int startFrom, final int count)
	{		
		return super.selectAllByForumByLimit(forumId, startFrom, startFrom + count);
	}

	/**
	 * @see net.jforum.dao.TopicDAO#selectByUserByLimit(int, int, int)
	 */
	@Override public List<Topic> selectByUserByLimit(final int userId, final int startFrom, final int count)
	{
		return super.selectByUserByLimit(userId, startFrom, startFrom + count);
	}

	/**
	 * @see net.jforum.dao.TopicDAO#selectRecentTopics(int, int)
	 */
	@Override public List<Topic> selectRecentTopics(final int startFrom, final int count)
	{
		return super.selectRecentTopics(startFrom, startFrom + count);
	}
}

../jforum2-code/src/main/java/net/jforum/dao/sqlserver/SqlServer2000TopicDAO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 24/05/2004 12:25:35
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao.sqlserver;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import net.jforum.JForumExecutionContext;
import net.jforum.dao.generic.GenericTopicDAO;
import net.jforum.entities.Topic;
import net.jforum.entities.User;
import net.jforum.exceptions.DatabaseException;
import net.jforum.repository.ForumRepository;
import net.jforum.util.DbUtils;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;

/**
 * @author Andre de Andrade da Silva (<a href="mailto:andre.de.andrade@gmail.com">andre.de.andrade@gmail.com</a>)
 * @author Dirk Rasmussen (<a href="mailto:d.rasmussen@bevis.de">d.rasmussen@bevis.de</a>)
 * @author Andowson Chang
 */
public class SqlServer2000TopicDAO extends GenericTopicDAO
{
	/**
	 * @see net.jforum.dao.TopicDAO#selectAllByForumByLimit(int, int, int)
	 */
	@Override
	public List<Topic> selectAllByForumByLimit(int forumId, int startFrom, int count)
    {
        String sql = SystemGlobals.getSql("TopicModel.selectAllByForumByLimit");
        sql = sql.replaceAll("%d", String.valueOf(startFrom + count));
        
        PreparedStatement pstmt = null;

        try {
            pstmt = JForumExecutionContext.getConnection().prepareStatement(sql,
                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                    ResultSet.CONCUR_READ_ONLY);
            pstmt.setInt(1, forumId);
            pstmt.setInt(2, forumId);

            return this.fillTopicsDataByLimit(pstmt, startFrom);
        }
        catch (SQLException e) {
            throw new DatabaseException(e);
        }
        finally {
            DbUtils.close(pstmt);
        }
    }

	/**
	 * @see net.jforum.dao.TopicDAO#selectByUserByLimit(int, int, int)
	 */
	@Override
	public List<Topic> selectByUserByLimit(int userId, int startFrom, int count)
	{
        String sql = SystemGlobals.getSql("TopicModel.selectByUserByLimit");        
        sql = sql.replaceAll("%d", String.valueOf(startFrom + count));
        
        PreparedStatement pstmt = null;
        try {
            pstmt = JForumExecutionContext.getConnection().prepareStatement(
                    sql.replaceAll(":fids:",
                            ForumRepository.getListAllowedForums()), 
                            ResultSet.TYPE_SCROLL_INSENSITIVE,
                            ResultSet.CONCUR_READ_ONLY);

            pstmt.setInt(1, userId);

            return this.fillTopicsDataByLimit(pstmt, startFrom);            
        }
        catch (SQLException e) {
            throw new DatabaseException(e);
        }
        finally {
            DbUtils.close(pstmt);
        }
    }

    /**
     * @see net.jforum.dao.TopicDAO#selectRecentTopics(int)
     */
	@Override
    public List<Topic> selectRecentTopics(int limit)
    {
		return selectRecentTopics(0, limit);
    }
    
    /**
     * @see net.jforum.dao.TopicDAO#selectRecentTopics(int, int)
     */
	@Override
    public List<Topic> selectRecentTopics(int startFrom, int limit)
    {
        String sql = SystemGlobals.getSql("TopicModel.selectRecentTopicsByLimit");
        sql = sql.replaceAll("%d", String.valueOf(startFrom + limit));

        PreparedStatement pstmt = null;
        try {
            pstmt = JForumExecutionContext.getConnection().prepareStatement(sql);

            return this.fillTopicsDataByLimit(pstmt, startFrom);            
        }
        catch (SQLException e) {
            throw new DatabaseException(e);
        }
        finally {
            DbUtils.close(pstmt);
        }
    }

    
    /**
     * @see net.jforum.dao.TopicDAO#selectHottestTopics(int)
     */
	@Override
    public List<Topic> selectHottestTopics (int limit)
    {
		boolean sortByViews = SystemGlobals.getBoolValue(ConfigKeys.HOTTEST_TOPICS_SORT);
        String sql = SystemGlobals.getSql("TopicModel.selectHottestTopicsByLimit");
		sql = sql.replaceAll(":WHAT:", sortByViews ? "t.topic_views" : "t.topic_replies");
        sql = sql.replaceAll("%d", String.valueOf(limit));

        PreparedStatement pstmt = null;
        try {
            pstmt = JForumExecutionContext.getConnection().prepareStatement(sql);
      
            return this.fillTopicsData(pstmt);            
        }
        catch (SQLException e) {
            throw new DatabaseException(e);
        }
        finally {
            DbUtils.close(pstmt);
        }    
    }

	/**
		 * Fills all topic data. The method will try to get all fields from the
		 * topics table, as well information about the user who made the first
		 * and the last post in the topic. <br>
		 * <b>The method <i>will</i> close the <i>PreparedStatement</i></b>
		 * 
		 * @param pstmt the PreparedStatement to execute
		 * @return A list with all topics found
		 * @throws SQLException
		 */
	private List<Topic> fillTopicsDataByLimit(PreparedStatement pstmt, int startFrom) {
		List<Topic> l = new ArrayList<>();
		PreparedStatement pstmt2 = null;

		ResultSet rs = null;
		try {
			rs = pstmt.executeQuery();
			rs.absolute(startFrom);

			StringBuilder sbFirst = new StringBuilder(128);
			StringBuilder sbLast = new StringBuilder(128);

			while (rs.next()) {
				Topic topic = this.getBaseTopicData(rs);

				// Posted by
				User user = new User();
				user.setId(rs.getInt("user_id"));
				topic.setPostedBy(user);

				// Last post by
				user = new User();
				user.setId(rs.getInt("last_user_id"));
				topic.setLastPostBy(user);

				topic.setHasAttach(rs.getInt("attach") > 0);
                topic.setFirstPostTime(rs.getTimestamp("topic_time"));
                Timestamp postTime = rs.getTimestamp("post_time");
                topic.setLastPostTime(postTime);
                topic.setLastPostDate(new Date(postTime.getTime()));

				l.add(topic);

				sbFirst.append(rs.getInt("user_id")).append(',');
				sbLast.append(rs.getInt("last_user_id")).append(',');
			}

			rs.close();

			// Users
			if (sbFirst.length() > 0) {
				sbLast.delete(sbLast.length() - 1, sbLast.length());

				String sql = SystemGlobals.getSql("TopicModel.getUserInformation");
				sql = sql.replaceAll("#ID#", sbFirst.toString() + sbLast.toString());

				Map<Integer, String> users = new ConcurrentHashMap<>();

				pstmt2 = JForumExecutionContext.getConnection().prepareStatement(sql);
				rs = pstmt2.executeQuery();

				while (rs.next()) {
					users.put(Integer.valueOf(rs.getInt("user_id")), rs.getString("username"));
				}

				for (Iterator<Topic> iter = l.iterator(); iter.hasNext();) {
					Topic topic = iter.next();
					topic.getPostedBy().setUsername(users.get(Integer.valueOf(topic.getPostedBy().getId())));
					topic.getLastPostBy().setUsername(users.get(Integer.valueOf(topic.getLastPostBy().getId())));
				}
			}

			return l;
		} catch (SQLException e) {
			throw new DatabaseException(e);
		} finally {
			DbUtils.close(rs);
			DbUtils.close(pstmt2);
		}
	}
}


../jforum2-code/src/main/java/net/jforum/dao/sqlserver/SqlServer2000DataAccessDriver.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.

 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:

 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 29/05/2004 00:12:37
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao.sqlserver;

import net.jforum.dao.PostDAO;
import net.jforum.dao.TopicDAO;
import net.jforum.dao.UserDAO;

/**
 * @author Andowson Chang
 * @version $Id$
 */
public class SqlServer2000DataAccessDriver extends SqlServerDataAccessDriver
{
	private static PostDAO postDao = new SqlServer2000PostDAO();
	private static TopicDAO topicDao = new SqlServer2000TopicDAO();
	private static UserDAO userDao = new SqlServer2000UserDAO();

	/** 
	 * @see net.jforum.dao.DataAccessDriver#newPostDAO()
	 */
	@Override public net.jforum.dao.PostDAO newPostDAO()
	{
		return postDao;
	}

	/** 
	 * @see net.jforum.dao.DataAccessDriver#newTopicDAO()
	 */
	@Override public net.jforum.dao.TopicDAO newTopicDAO()
	{
		return topicDao;
	}
	
	/** 
	 * @see net.jforum.dao.DataAccessDriver#newUserDAO()
	 */
	@Override public net.jforum.dao.UserDAO newUserDAO()
	{
		return userDao;
	}
}

../jforum2-code/src/main/java/net/jforum/dao/sqlserver/SqlServerKarmaDAO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Feb 17, 2005
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao.sqlserver;

import java.util.Date;
import java.util.List;

import net.jforum.dao.generic.GenericKarmaDAO;
import net.jforum.entities.User;
import net.jforum.util.preferences.SystemGlobals;

/**
 * @author Franklin S. Dattein (<a href="mailto:franklin@portaljava.com">franklin@portaljava.com</a>)
 * @version $Id$
 */
public class SqlServerKarmaDAO extends GenericKarmaDAO
{
	/**
	 * @see net.jforum.dao.KarmaDAO#getMostRatedUserByPeriod(int, java.util.Date, java.util.Date, String) 
	 */
	@Override public List<User> getMostRatedUserByPeriod(final int start, final Date firstPeriod, final Date lastPeriod, final String orderField)
    {
		final StringBuilder stringBuffer = new StringBuilder(SystemGlobals.getSql("GenericModel.selectByLimit")).append(" ").append(start).append(" ").
		append(SystemGlobals.getSql("KarmaModel.getMostRatedUserByPeriod")).
		append(" ORDER BY ").append(orderField).append(" DESC");
		final String sql = stringBuffer.toString();
		return super.getMostRatedUserByPeriod(sql, firstPeriod, lastPeriod);
	}
}

../jforum2-code/src/main/java/net/jforum/dao/sqlserver/SqlServer2000ModerationLogDAO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 12/03/2007 01:05:41
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao.sqlserver;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import net.jforum.JForumExecutionContext;
import net.jforum.dao.generic.GenericModerationLogDAO;
import net.jforum.entities.ModerationLog;
import net.jforum.exceptions.DatabaseException;
import net.jforum.util.DbUtils;
import net.jforum.util.preferences.SystemGlobals;

/**
 * @author Andowson Chang
 */
public class SqlServer2000ModerationLogDAO extends GenericModerationLogDAO {

	/**
	 * @see net.jforum.dao.generic.GenericModerationLogDAO#selectAll(int, int)
	 */
	@Override public List<ModerationLog> selectAll(final int startFrom, final int count) 
	{
		final List<ModerationLog> list = new ArrayList<>();

		String sql = SystemGlobals.getSql("ModerationLog.selectAll");
		sql = sql.replaceAll("%d", String.valueOf(startFrom + count));

		PreparedStatement pstmt = null;
		ResultSet resultSet = null;

		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(sql);

			resultSet = pstmt.executeQuery();

			while (resultSet.next()) {
				list.add(this.makeLog(resultSet));
			}

			return list;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(resultSet, pstmt);
		}
	}
}

../jforum2-code/src/main/java/net/jforum/dao/sqlserver/SqlServer2000UserDAO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.

 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:

 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 24/05/2004 22:36:07
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao.sqlserver;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import net.jforum.JForumExecutionContext;
import net.jforum.dao.generic.GenericUserDAO;
import net.jforum.entities.User;
import net.jforum.exceptions.DatabaseException;
import net.jforum.util.DbUtils;
import net.jforum.util.preferences.SystemGlobals;


/**
 * @author Andre de Andrade da Silva (<a href="mailto:andre.de.andrade@gmail.com">andre.de.andrade@gmail.com</a>)
 * @author Dirk Rasmussen (<a href="mailto:d.rasmussen@bevis.de">d.rasmussen@bevis.de</a>)
 * @author Andowson Chang
 * @version $Id$
 */
public class SqlServer2000UserDAO extends GenericUserDAO
{
	/**
	 * @see net.jforum.dao.UserDAO#selectAll(int, int)
	 */
	@Override public List<User> selectAll(final int startFrom, final int count)
	{
        String sql = SystemGlobals.getSql("UserModel.selectAllByLimit");
        sql = sql.replaceAll("%d", String.valueOf(startFrom + count));
        
        PreparedStatement pstmt = null;
        ResultSet resultSet = null;

        try {
            if (count > 0) {
                pstmt = JForumExecutionContext.getConnection().prepareStatement(sql, 
                        ResultSet.TYPE_SCROLL_INSENSITIVE,
                        ResultSet.CONCUR_READ_ONLY);
                resultSet = pstmt.executeQuery();
                resultSet.absolute(startFrom);
            }
            else {
                pstmt = JForumExecutionContext.getConnection()
                        .prepareStatement(SystemGlobals.getSql("UserModel.selectAll"));
                resultSet = pstmt.executeQuery();
            }           

            return this.processSelectAll(resultSet);
        }
        catch (SQLException e) {
            throw new DatabaseException(e);
        }
        finally {
            DbUtils.close(resultSet, pstmt);
        }
    }

	/**
	 * @see net.jforum.dao.UserDAO#selectAllByGroup(int, int, int)
	 */
	@Override public List<User> selectAllByGroup(final int groupId, final int startFrom, final int count)
	{
	    String sql = SystemGlobals.getSql("UserModel.selectAllByGroup");
        sql = sql.replaceAll("%d", String.valueOf(startFrom + count));
        
	    PreparedStatement pstmt = null;
		ResultSet resultSet = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(sql);
			pstmt.setInt(1, groupId);			

			resultSet = pstmt.executeQuery();

			return this.processSelectAll(resultSet);
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(resultSet, pstmt);
		}
	}
		
	/**
	 * @see net.jforum.dao.UserDAO#selectAllWithKarma(int, int)
	 */
	@Override public List<User> selectAllWithKarma(final int startFrom, final int count)
	{
		return super.loadKarma(this.selectAll(startFrom, count));
	}
}

../jforum2-code/src/main/java/net/jforum/dao/sqlserver/SqlServerPostDAO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 24/05/2004 / 12:04:11
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao.sqlserver;

import java.util.List;

import net.jforum.dao.generic.GenericPostDAO;
import net.jforum.entities.Post;

/**
 * @author Andre de Andrade da Silva (<a href="mailto:andre.de.andrade@gmail.com">andre.de.andrade@gmail.com</a>)
 * @author Dirk Rasmussen (<a href="mailto:d.rasmussen@bevis.de">d.rasmussen@bevis.de</a>)
 * @version $Id$
 */
public class SqlServerPostDAO extends GenericPostDAO
{
	/**
	 * @see net.jforum.dao.PostDAO#selectAllByTopicByLimit(int, int, int)
	 */
	@Override public List<Post> selectAllByTopicByLimit(final int topicId, final int startFrom, final int count)
	{
		return super.selectAllByTopicByLimit(topicId, startFrom, startFrom + count);
	}

	/**
	 * @see net.jforum.dao.PostDAO#selectByUserByLimit(int, int, int)
	 */
	@Override public List<Post> selectByUserByLimit(final int userId, final int startFrom, final int count)
	{
		return super.selectByUserByLimit(userId, startFrom, startFrom + count);
	}

}

../jforum2-code/src/main/java/net/jforum/dao/sqlserver/SqlServerModerationLogDAO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 2009/7/29 10:04:03 AM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao.sqlserver;

import java.util.List;

import net.jforum.dao.generic.GenericModerationLogDAO;
import net.jforum.entities.ModerationLog;

/**
 * @author Andowson Chang
 * @version $Id$
 */
public class SqlServerModerationLogDAO extends GenericModerationLogDAO 
{
    /**
     * @see net.jforum.dao.generic.GenericModerationLogDAO#selectAll(int, int)
     */
    @Override public List<ModerationLog> selectAll(final int start, final int count) 
    {
        return super.selectAll(start, start + count);
    }
}

../jforum2-code/src/main/java/net/jforum/dao/sqlserver/SqlServer2000PostDAO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 24/05/2004 / 12:04:11
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao.sqlserver;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import net.jforum.JForumExecutionContext;
import net.jforum.dao.generic.GenericPostDAO;
import net.jforum.entities.Post;
import net.jforum.exceptions.DatabaseException;
import net.jforum.repository.ForumRepository;
import net.jforum.util.DbUtils;
import net.jforum.util.preferences.SystemGlobals;

/**
 * @author Andre de Andrade da Silva (<a href="mailto:andre.de.andrade@gmail.com">andre.de.andrade@gmail.com</a>)
 * @author Dirk Rasmussen (<a href="mailto:d.rasmussen@bevis.de">d.rasmussen@bevis.de</a>)
 * @author Andowson Chang
 */
public class SqlServer2000PostDAO extends GenericPostDAO
{
	/**
	 * @see net.jforum.dao.PostDAO#selectAllByTopicByLimit(int, int, int)
	 */
	@Override public List<Post> selectAllByTopicByLimit(int topicId, int startFrom, int count)
	{
		List<Post> l = new ArrayList<>();

		String sql = SystemGlobals.getSql("PostModel.selectAllByTopicByLimit");
		sql = sql.replaceAll("%d", String.valueOf(startFrom + count));

		PreparedStatement pstmt = null;
		ResultSet rs = null;

		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(sql);
			pstmt.setInt(1, topicId);

			rs = pstmt.executeQuery();

			while (rs.next()) {
				l.add(this.makePost(rs));
			}

			return l;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(rs, pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.PostDAO#selectByUserByLimit(int, int, int)
	 */
	@Override public List<Post> selectByUserByLimit(int userId, int startFrom, int count)
	{
		String sql = SystemGlobals.getSql("PostModel.selectByUserByLimit");
		sql = sql.replaceAll(":fids:", ForumRepository.getListAllowedForums());
		sql = sql.replaceAll("%d", String.valueOf(startFrom + count));

		PreparedStatement pstmt = null;
		ResultSet rs = null;

		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(sql);
			pstmt.setInt(1, userId);

			rs = pstmt.executeQuery();
			List<Post> l = new ArrayList<>();

			while (rs.next()) {
				l.add(this.makePost(rs));
			}

			return l;
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(rs, pstmt);
		}
	}

    @Override public List<Post> selectLatestByForumForRSS(int forumId, int limit) 
    {
        List<Post> l = new ArrayList<>();

        String sql = SystemGlobals.getSql("PostModel.selectLatestByForumForRSS");
        sql = sql.replaceAll("%d", String.valueOf(limit));
        
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        
        try {
            pstmt = JForumExecutionContext.getConnection().prepareStatement(sql);
            pstmt.setInt(1, forumId);
            
            rs = pstmt.executeQuery();
            
            while (rs.next()) {
                Post post = this.buildPostForRSS(rs);
                l.add(post);
            }
            
        }
        catch (SQLException e) {
            throw new DatabaseException(e);
        }
        finally {
            DbUtils.close(rs, pstmt);
        }
        
        return l;
    }

    @Override public List<Post> selectLatestForRSS(int limit) 
    {
        List<Post> l = new ArrayList<>();

        String sql = SystemGlobals.getSql("PostModel.selectLatestForRSS");
        sql = sql.replaceAll("%d", String.valueOf(limit));
        
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        
        try {
            pstmt = JForumExecutionContext.getConnection().prepareStatement(sql);
            
            rs = pstmt.executeQuery();
            
            while (rs.next()) {
                Post post = this.buildPostForRSS(rs);
                l.add(post);
            }
            
        }
        catch (SQLException e) {
            throw new DatabaseException(e);
        }
        finally {
            DbUtils.close(rs, pstmt);
        }
        
        return l;
    } 
    
    @Override public List<Post> selectHotForRSS(int limit) 
    {
        List<Post> l = new ArrayList<>();

        String sql = SystemGlobals.getSql("PostModel.selectHotForRSS");
        sql = sql.replaceAll("%d", String.valueOf(limit));
        
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        
        try {
            pstmt = JForumExecutionContext.getConnection().prepareStatement(sql);
            
            rs = pstmt.executeQuery();
            
            while (rs.next()) {
                Post post = this.buildPostForRSS(rs);
                l.add(post);
            }
            
        }
        catch (SQLException e) {
            throw new DatabaseException(e);
        }
        finally {
            DbUtils.close(rs, pstmt);
        }
        
        return l;
    }  
}

../jforum2-code/src/main/java/net/jforum/dao/sqlserver/SqlServerDataAccessDriver.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.

 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:

 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 29/05/2004 00:12:37
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao.sqlserver;

import net.jforum.dao.KarmaDAO;
import net.jforum.dao.ModerationLogDAO;
import net.jforum.dao.PostDAO;
import net.jforum.dao.TopicDAO;
import net.jforum.dao.UserDAO;

/**
 * @author Andre de Andrade da Silva (<a href="mailto:andre.de.andrade@gmail.com">andre.de.andrade@gmail.com</a>)
 * @author Dirk Rasmussen (<a href="mailto:d.rasmussen@bevis.de">d.rasmussen@bevis.de</a>)
 * @author Andowson Chang
 * @version $Id$
 */
public class SqlServerDataAccessDriver extends net.jforum.dao.generic.GenericDataAccessDriver
{
	private static PostDAO postDao = new SqlServerPostDAO();
	private static TopicDAO topicDao = new SqlServerTopicDAO();
	private static UserDAO userDao = new SqlServerUserDAO();
	private static KarmaDAO karmaDao = new SqlServerKarmaDAO();
	private static ModerationLogDAO moderationLogDao = new SqlServerModerationLogDAO();

	/** 
	 * @see net.jforum.dao.DataAccessDriver#newPostDAO()
	 */
	@Override public net.jforum.dao.PostDAO newPostDAO()
	{
		return postDao;
	}

	/** 
	 * @see net.jforum.dao.DataAccessDriver#newTopicDAO()
	 */
	@Override public net.jforum.dao.TopicDAO newTopicDAO()
	{
		return topicDao;
	}
	
	/** 
	 * @see net.jforum.dao.DataAccessDriver#newUserDAO()
	 */
	@Override public net.jforum.dao.UserDAO newUserDAO()
	{
		return userDao;
	}	

	/** 
	 * @see net.jforum.dao.DataAccessDriver#newKarmaDAO()
	 */
	@Override public net.jforum.dao.KarmaDAO newKarmaDAO()
	{
		return karmaDao;
	}
	
	/**
     * @see net.jforum.dao.generic.GenericDataAccessDriver#newModerationLogDAO()
     */
    @Override public ModerationLogDAO newModerationLogDAO() 
    {
        return moderationLogDao;
    }
}

../jforum2-code/src/main/java/net/jforum/dao/sqlserver/SqlServerUserDAO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.

 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:

 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 24/05/2004 22:36:07
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao.sqlserver;

import java.util.List;

import net.jforum.dao.generic.GenericUserDAO;
import net.jforum.entities.User;

/**
 * @author Andre de Andrade da Silva (<a href="mailto:andre.de.andrade@gmail.com">andre.de.andrade@gmail.com</a>)
 * @author Dirk Rasmussen (<a href="mailto:d.rasmussen@bevis.de">d.rasmussen@bevis.de</a>)
 * @version $Id$
 */
public class SqlServerUserDAO extends GenericUserDAO
{
	/**
	 * @see net.jforum.dao.UserDAO#selectAll(int, int)
	 */
	@Override public List<User> selectAll(final int startFrom, final int count)
	{
		return super.selectAll(startFrom, (count > 0 ? startFrom + count : 0));
	}

	/**
	 * @see net.jforum.dao.UserDAO#selectAllByGroup(int, int, int)
	 */
	@Override public List<User> selectAllByGroup(final int groupId, final int startFrom, final int count)
	{
		return super.selectAllByGroup(groupId, startFrom, startFrom + count);
	}

	/**
	 * @see net.jforum.dao.UserDAO#selectAllWithKarma(int, int)
	 */
	@Override public List<User> selectAllWithKarma(final int startFrom, final int count)
	{
		return super.loadKarma(this.selectAll(startFrom, count));
	}
}

../jforum2-code/src/main/java/net/jforum/dao/oracle/OracleTopicDAO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 24/05/2004 12:25:35
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao.oracle;

import java.util.List;

import net.jforum.entities.Topic;

/**
 * @author Dmitriy Kiriy 
 * @author Jake Fear
 */
public class OracleTopicDAO extends net.jforum.dao.generic.GenericTopicDAO
{
   	/**
   	 * Does some addition to make the parameters work with our query flavor.
	 * @see net.jforum.dao.TopicDAO#selectAllByForumByLimit(int, int, int)
	 */
	@Override public List<Topic> selectAllByForumByLimit(final int forumId, final int startFrom, final int count)
	{
		if (count < 0)
			return super.selectAllByForumByLimit(forumId, startFrom, count);
		else
			return super.selectAllByForumByLimit(forumId, startFrom, startFrom + count);
	}
	
	/**
	 * @see net.jforum.dao.TopicDAO#selectByUserByLimit(int, int, int)
	 */
	@Override public List<Topic> selectByUserByLimit(final int userId, final int startFrom, final int count) 
	{
		return super.selectByUserByLimit(userId, startFrom, startFrom + count);
	}

	/**
	 * @see net.jforum.dao.TopicDAO#selectRecentTopics(int, int)
	 */
	@Override public List<Topic> selectRecentTopics(final int startFrom, final int count)
	{
		return super.selectRecentTopics(startFrom, startFrom + count);
	}
}

../jforum2-code/src/main/java/net/jforum/dao/oracle/OracleDataAccessDriver.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 24/05/2004 / 12:01 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao.oracle;

import net.jforum.dao.LuceneDAO;
import net.jforum.dao.ModerationDAO;
import net.jforum.dao.ModerationLogDAO;
import net.jforum.dao.PostDAO;
import net.jforum.dao.PrivateMessageDAO;
import net.jforum.dao.SummaryDAO;
import net.jforum.dao.TopicDAO;
import net.jforum.dao.UserDAO;
import net.jforum.dao.generic.GenericDataAccessDriver;

/**
 * @author Dmitriy Kiriy
 * @version $Id$
 */
public class OracleDataAccessDriver extends GenericDataAccessDriver
{
	private static PostDAO postDao = new OraclePostDAO();
	private static TopicDAO topicDao = new OracleTopicDAO();
	private static UserDAO userDao = new OracleUserDAO();
	private static PrivateMessageDAO pmDao = new OraclePrivateMessageDAO();
	private static ModerationDAO moderationDao = new OracleModerationDAO();
	private static ModerationLogDAO moderationLogDao = new OracleModerationLogDAO();
	private static LuceneDAO luceneDao = new OracleLuceneDAO();
	private static SummaryDAO summaryDao = new OracleSummaryDAO();
	
	/**
	 * @see net.jforum.dao.generic.GenericDataAccessDriver#newModerationLogDAO()
	 */
	@Override public ModerationLogDAO newModerationLogDAO() 
	{
		return moderationLogDao;
	}
	
	/**
	 * @see net.jforum.dao.DataAccessDriver#newModerationDAO()
	 */
	@Override public ModerationDAO newModerationDAO()
	{
		return moderationDao;
	}
	
	/**
	 * @see net.jforum.dao.DataAccessDriver#newPostDAO()
	 */
	@Override public PostDAO newPostDAO()
	{
		return postDao;
	}

	/** 
	 * @see net.jforum.dao.DataAccessDriver#newTopicDAO()
	 */
	@Override public TopicDAO newTopicDAO()
	{
		return topicDao;
	}
	
	/** 
	 * @see net.jforum.dao.DataAccessDriver#newUserDAO()
	 */
	@Override public UserDAO newUserDAO()
	{
		return userDao;
	}
	
	/**
	 * @see net.jforum.dao.DataAccessDriver#newPrivateMessageDAO()
	 */
	@Override public PrivateMessageDAO newPrivateMessageDAO()
	{
		return pmDao;
	}
	
	/**
	 * @see net.jforum.dao.generic.GenericDataAccessDriver#newLuceneDAO()
	 */
	@Override public LuceneDAO newLuceneDAO() 
	{
		return luceneDao;
	}
	
	/**
	 * @see net.jforum.dao.generic.GenericDataAccessDriver#newSummaryDAO()
	 */
	@Override public SummaryDAO newSummaryDAO() 
	{
		return summaryDao;
	}
}

../jforum2-code/src/main/java/net/jforum/dao/oracle/OraclePrivateMessageDAO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 24/05/2004 01:07:39
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao.oracle;

import java.io.IOException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import net.jforum.JForumExecutionContext;
import net.jforum.dao.generic.GenericPrivateMessageDAO;
import net.jforum.entities.PrivateMessage;
import net.jforum.util.DbUtils;
import net.jforum.util.preferences.SystemGlobals;

/**
 * @author Dmitriy Kiriy
 * @version $Id$
 */
public class OraclePrivateMessageDAO extends GenericPrivateMessageDAO
{
	/**
	 * @throws SQLException 
	 * @throws IOException 
	 * @see net.jforum.dao.generic.GenericPrivateMessageDAO#addPmText(net.jforum.entities.PrivateMessage)
	 */
	@Override protected void addPmText(final PrivateMessage privMsg) throws SQLException, IOException
    {
		PreparedStatement pstmt = null;
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(SystemGlobals.getSql("PrivateMessagesModel.addText"));
			pstmt.setInt(1, privMsg.getId());
			pstmt.executeUpdate();

			OracleUtils.writeBlobUTF16BinaryStream(SystemGlobals.getSql("PrivateMessagesModel.addTextField"), 
					privMsg.getId(), privMsg.getPost().getText());
		} 
		finally {
			DbUtils.close(pstmt);
		}
	}
	
	/**
	 * @see net.jforum.dao.generic.GenericPrivateMessageDAO#getPmText(java.sql.ResultSet)
	 */
	@Override protected String getPmText(final ResultSet resultSet) throws SQLException
	{
		return OracleUtils.readBlobUTF16BinaryStream(resultSet, "privmsgs_text");
	}
}

../jforum2-code/src/main/java/net/jforum/dao/oracle/OracleModerationLogDAO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Aug 31, 2007 7:21:02 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao.oracle;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.List;

import net.jforum.dao.generic.GenericModerationLogDAO;
import net.jforum.entities.ModerationLog;
import net.jforum.exceptions.DatabaseException;
import net.jforum.util.DbUtils;
import net.jforum.util.preferences.SystemGlobals;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public class OracleModerationLogDAO extends GenericModerationLogDAO 
{
	/**
	 * @see net.jforum.dao.generic.GenericModerationLogDAO#add(net.jforum.entities.ModerationLog)
	 */
	@Override public void add(final ModerationLog log) 
	{
		PreparedStatement pstmt = null;
		
		try {
			pstmt = this.getStatementForAutoKeys("ModerationLog.addNew");
			
			pstmt.setInt(1, log.getUser().getId());
			pstmt.setTimestamp(2, new Timestamp(System.currentTimeMillis()));
			pstmt.setInt(3, log.getType());
			pstmt.setInt(4, log.getPostId());
			pstmt.setInt(5, log.getTopicId());
			pstmt.setInt(6, log.getPosterUser().getId());
			
			if (log.getOriginalMessage() == null) {
				log.setOriginalMessage("");
			}

			this.setAutoGeneratedKeysQuery(SystemGlobals.getSql("ModerationLog.lastGeneratedModerationLogId"));
			
			final int logId = this.executeAutoKeysQuery(pstmt);
			
			log.setId(logId);
			
			OracleUtils.writeBlobUTF16BinaryStream(SystemGlobals.getSql("ModerationLog.setDescription"), 
				log.getId(), log.getDescription());
			
			OracleUtils.writeBlobUTF16BinaryStream(SystemGlobals.getSql("ModerationLog.setOriginalMessage"), 
				log.getId(), log.getOriginalMessage());
		}
		catch (Exception e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}
	
	/**
	 * @see net.jforum.dao.generic.GenericModerationLogDAO#selectAll(int, int)
	 */
	@Override public List<ModerationLog> selectAll(final int start, final int count) 
	{
		return super.selectAll(start, start + count);
	}
	
	/**
	 * @see net.jforum.dao.generic.GenericModerationLogDAO#readDescriptionFromResultSet(java.sql.ResultSet)
	 */
	@Override protected String readDescriptionFromResultSet(final ResultSet resultSet) throws SQLException 
	{
		return OracleUtils.readBlobUTF16BinaryStream(resultSet, "log_description");
	}
	
	/**
	 * @see net.jforum.dao.generic.GenericModerationLogDAO#readOriginalMessageFromResultSet(java.sql.ResultSet)
	 */
	@Override protected String readOriginalMessageFromResultSet(final ResultSet resultSet) throws SQLException 
	{
		return OracleUtils.readBlobUTF16BinaryStream(resultSet, "log_original_message");
	}
}

../jforum2-code/src/main/java/net/jforum/dao/oracle/OraclePostDAO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 24/05/2004 / 12:04:11
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao.oracle;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import net.jforum.JForumExecutionContext;
import net.jforum.dao.generic.GenericPostDAO;
import net.jforum.entities.Post;
import net.jforum.exceptions.DatabaseException;
import net.jforum.util.DbUtils;
import net.jforum.util.preferences.SystemGlobals;

/**
 * @author Dmitriy Kiriy
 * @version $Id$
 */
public class OraclePostDAO extends GenericPostDAO
{
	/**
	 * @see net.jforum.dao.generic.GenericPostDAO#addNewPostText(net.jforum.entities.Post)
	 */
	@Override protected void addNewPostText(final Post post) throws Exception
	{
		PreparedStatement pstmt = null;
		
		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
				SystemGlobals.getSql("PostModel.addNewPostText"));
			pstmt.setInt(1, post.getId());
			pstmt.setString(2, post.getSubject());
			pstmt.executeUpdate();

			OracleUtils.writeBlobUTF16BinaryStream(SystemGlobals.getSql("PostModel.addNewPostTextField"), 
				post.getId(), post.getText());
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.generic.GenericPostDAO#updatePostsTextTable(net.jforum.entities.Post)
	 */
	@Override protected void updatePostsTextTable(final Post post)
	{
		PreparedStatement pstmt = null;

		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("PostModel.updatePostText"));
			pstmt.setString(1, post.getSubject());
			pstmt.setInt(2, post.getId());

			pstmt.executeUpdate();

			OracleUtils.writeBlobUTF16BinaryStream(SystemGlobals.getSql("PostModel.addNewPostTextField"), 
				post.getId(), post.getText());
		}
		catch (Exception e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}

	/**
	 * @see net.jforum.dao.generic.GenericPostDAO#getPostTextFromResultSet(java.sql.ResultSet)
	 */
	@Override protected String getPostTextFromResultSet(final ResultSet resultSet) throws SQLException
	{
		return OracleUtils.readBlobUTF16BinaryStream(resultSet, "post_text");
	}

	/**
	 * @see net.jforum.dao.PostDAO#selectAllByTopicByLimit(int, int, int)
	 */
	@Override public List<Post> selectAllByTopicByLimit(final int topicId, final int startFrom, final int count)
	{
		return super.selectAllByTopicByLimit(topicId, startFrom, startFrom + count);
	}

	/**
	 * @see net.jforum.dao.PostDAO#selectByUserByLimit(int, int, int)
	 */
	@Override public List<Post> selectByUserByLimit(final int userId, final int startFrom, final int count)
	{
		return super.selectByUserByLimit(userId, startFrom, startFrom + count);
	}
}

../jforum2-code/src/main/java/net/jforum/dao/oracle/OracleUtils.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms,
 * with or without modification, are permitted provided
 * that the following conditions are met:
 *
 * 1) Redistributions of source code must retain the above
 * copyright notice, this list of conditions and the
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the
 * above copyright notice, this list of conditions and
 * the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor
 * the names of its contributors may be used to endorse
 * or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
 * IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 *
 * Created on Jan 26, 2005 4:42:44 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao.oracle;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.sql.Blob;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import net.jforum.JForumExecutionContext;
import net.jforum.exceptions.DatabaseException;
import net.jforum.util.DbUtils;

/**
 * @author Dmitriy Kiriy
 * @version $Id$
 */
public final class OracleUtils
{
	private static final int BUFFER_SIZE = 4096;

	public static String readBlobUTF16BinaryStream(final ResultSet resultSet, final String fieldName) throws SQLException
	{
		try {
			final Blob clob = resultSet.getBlob(fieldName);

			final InputStream inputStream = clob.getBinaryStream();
			final StringBuilder stringBuffer = new StringBuilder();

			int readedBytes;

			do {
				final byte[] bytes = new byte[BUFFER_SIZE];

				readedBytes = inputStream.read(bytes);

				if (readedBytes > 0) {
					final String read = new String(bytes, 0, readedBytes, "UTF-16");
					stringBuffer.append(read);
				}
			} while (readedBytes == BUFFER_SIZE);

			inputStream.close();
			return stringBuffer.toString();
		}
		catch (IOException e) {
			throw new DatabaseException(e);
		}
	}

	/**
	 * The query should look like:
	 *
	 * SELECT blob_field from any_table WHERE id = ? FOR UPDATE
	 *
	 * BUT KEEP IN MIND:
	 *
	 * When you insert record in previous step, it should go with empty_blob() like:
	 *
	 * INSERT INTO jforum_posts_text ( post_text ) VALUES (EMPTY_BLOB())
	 *
	 * @param query String
	 * @param idForQuery int
	 * @param value String
	 * @throws SQLException
	 * @throws IOException
	 */
	public static void writeBlobUTF16BinaryStream(final String query, final int idForQuery, final String value) throws SQLException, IOException
	{
		PreparedStatement pstmt = null;
		ResultSet resultSet = null;
		OutputStream blobWriter = null;

		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(query);
			pstmt.setInt(1, idForQuery);

			resultSet = pstmt.executeQuery();
			resultSet.next();
			final Blob text = resultSet.getBlob(1);

			blobWriter = text.setBinaryStream(0L);

			blobWriter.write(value.getBytes("UTF-16"));

			blobWriter.close();
		}
		catch (IOException e) {
			throw new DatabaseException(e);
		}
		finally {
			if (blobWriter != null) {
				blobWriter.close();
			}

			DbUtils.close(resultSet, pstmt);
		}
	}

	private OracleUtils() {}
}
../jforum2-code/src/main/java/net/jforum/dao/oracle/OracleModerationDAO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Apr 10, 2005 1:21:45 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao.oracle;

import java.sql.ResultSet;
import java.sql.SQLException;

import net.jforum.dao.generic.GenericModerationDAO;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public class OracleModerationDAO extends GenericModerationDAO
{
	/**
	 * @see net.jforum.dao.generic.GenericModerationDAO#getPostTextFromResultSet(java.sql.ResultSet)
	 */
	@Override protected String getPostTextFromResultSet(final ResultSet resultSet) throws SQLException
    {
		return OracleUtils.readBlobUTF16BinaryStream(resultSet, "post_text");
	}
}

../jforum2-code/src/main/java/net/jforum/dao/oracle/OracleUserDAO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.

 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:

 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 24/05/2004 22:36:07
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao.oracle;

import java.util.List;

import net.jforum.entities.User;

/**
 * @author Dmitriy Kiriy
 * @version $Id$
 */
public class OracleUserDAO extends net.jforum.dao.generic.GenericUserDAO
{
	/** 
	 * @see net.jforum.dao.UserDAO#selectAll(int, int)
	 */
	@Override public List<User> selectAll(final int startFrom, final int count) 
	{
		return super.selectAll(startFrom, (count > 0 ? startFrom + count : 0));
	}
	
	/** 
	 * @see net.jforum.dao.UserDAO#selectAllByGroup(int, int, int)
	 */
	@Override public List<User> selectAllByGroup(final int groupId, final int startFrom, final int count) 
	{
		return super.selectAllByGroup(groupId, startFrom, startFrom + count);
	}
}

../jforum2-code/src/main/java/net/jforum/dao/oracle/OracleLuceneDAO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Sep 10, 2007 6:58:20 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao.oracle;

import java.sql.ResultSet;
import java.sql.SQLException;

import net.jforum.dao.generic.GenericLuceneDAO;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public class OracleLuceneDAO extends GenericLuceneDAO 
{
	/**
	 * @see net.jforum.dao.generic.GenericLuceneDAO#readPostTextFromResultSet(java.sql.ResultSet)
	 */
	@Override protected String readPostTextFromResultSet(final ResultSet resultSet) throws SQLException 
	{
		return OracleUtils.readBlobUTF16BinaryStream(resultSet, "post_text");
	}
}

../jforum2-code/src/main/java/net/jforum/dao/oracle/OracleSummaryDAO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms,
 * with or without modification, are permitted provided
 * that the following conditions are met:
 *
 * 1) Redistributions of source code must retain the above
 * copyright notice, this list of conditions and the
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the
 * above copyright notice, this list of conditions and
 * the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor
 * the names of its contributors may be used to endorse
 * or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
 * IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 *
 * Created on 08/06/2012 / 21:05 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao.oracle;

import java.sql.ResultSet;
import java.sql.SQLException;

import net.jforum.dao.generic.GenericSummaryDAO;

/**
 * @author Andowson Chang
 * @version $Id$
 */
public class OracleSummaryDAO extends GenericSummaryDAO
{
	/**
	 * @see net.jforum.dao.generic.GenericSummaryDAO#getPostTextFromResultSet(java.sql.ResultSet)
	 */
	@Override protected String getPostTextFromResultSet(final ResultSet resultSet) throws SQLException
    {
		return OracleUtils.readBlobUTF16BinaryStream(resultSet, "post_text");
	}
}
../jforum2-code/src/main/java/net/jforum/dao/hsqldb/HsqldbPrivateMessageDAO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 20/05/2004 - 15:51:10
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao.hsqldb;

import java.util.List;

import net.jforum.dao.generic.GenericPrivateMessageDAO;
import net.jforum.entities.PrivateMessage;

public class HsqldbPrivateMessageDAO extends GenericPrivateMessageDAO
{
	/**
	 * @see net.jforum.dao.PrivateMessageDAO#selectFromInbox(net.jforum.entities.User)
	 */
	@Override public List<PrivateMessage> selectFromInbox (int userId, int startFrom, int count)
	{
		return super.selectFromInbox(startFrom, count, userId);
	}

	/**
	 * @see net.jforum.dao.PrivateMessageDAO#selectFromSent(net.jforum.entities.User)
	 */
	@Override public List<PrivateMessage> selectFromSent (int userId, int startFrom, int count)
	{
		return super.selectFromSent(startFrom, count, userId);
	}

}

../jforum2-code/src/main/java/net/jforum/dao/hsqldb/HsqldbUserDAO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.

 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:

 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 09/11/2004 22:36:07
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao.hsqldb;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import net.jforum.JForumExecutionContext;
import net.jforum.dao.generic.GenericUserDAO;
import net.jforum.entities.User;
import net.jforum.exceptions.DatabaseException;
import net.jforum.util.DbUtils;
import net.jforum.util.preferences.SystemGlobals;

/**
 * @author Marc Wick
 * @author Rafael Steil
 */
public class HsqldbUserDAO extends GenericUserDAO
{
	/**
	 * @see net.jforum.dao.generic.GenericUserDAO#selectAllByGroup(int, int, int)
	 */
	@Override public List<User> selectAllByGroup(final int groupId, final int start, final int count)
	{
		return super.selectAllByGroup(start, count, groupId);
	}
	
	/**
     * @see net.jforum.dao.UserDAO#findAllUsersByEmail(String, int, int)
	 */
	@Override public List<User> findAllUsersByEmail(final String email, final int start, final int count) {
		final List<User> result = new ArrayList<>();
		PreparedStatement p = null;
		ResultSet rs = null;

		User u = null;

		try {
			p = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("UserModel.findByEmail"));
			p.setInt(1, start);
			p.setInt(2, count);
			p.setString(3, email);
			rs = p.executeQuery();

			while (rs.next()) {
				u = new User();
				fillUserFromResultSet(u, rs);
				result.add(u);
			}
		} catch (SQLException e) {
			throw new DatabaseException(e);
		} finally {
			DbUtils.close(rs, p);
		}

		return result;
	}
	
	/**
     * @see net.jforum.dao.UserDAO#findAllUsersByIp(String, int, int)
	 */
	@Override public List<User> findAllUsersByIp(final String ip, final int start, final int count) {
		final List<User> result = new ArrayList<>();
        PreparedStatement p = null;
        ResultSet rs = null;

        User u = null;

        try {
            p = JForumExecutionContext.getConnection().prepareStatement(
                    SystemGlobals.getSql("UserModel.findByIp"));            
            p.setInt(1, start);
            p.setInt(2, count);
            p.setString(3, ip);
            rs = p.executeQuery();

            while (rs.next()) {
                u = new User();
                fillUserFromResultSet(u, rs);
                result.add(u);
            }
        } catch (SQLException e) {
            throw new DatabaseException(e);
        } finally {
            DbUtils.close(rs, p);
        }

        return result;
	}
}

../jforum2-code/src/main/java/net/jforum/dao/hsqldb/HsqldbTopicDAO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 21.09.2004 
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao.hsqldb;

import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.List;

import net.jforum.JForumExecutionContext;
import net.jforum.dao.generic.GenericTopicDAO;
import net.jforum.entities.Topic;
import net.jforum.exceptions.DatabaseException;
import net.jforum.util.DbUtils;
import net.jforum.util.preferences.SystemGlobals;

/**
 * @author Marc Wick
 */
public class HsqldbTopicDAO extends GenericTopicDAO
{
	/**
	 * @see net.jforum.dao.TopicDAO#selectAllByForumByLimit(int, int, int)
	 */
	@Override public List<Topic> selectAllByForumByLimit(final int forumId, final int startFrom, final int count)
	{
		if (count < 0) {
			// 2nd and 3rd parameter are ignored anyway
			return super.selectAllByForumByLimit(forumId, startFrom, count);
		}

		final String sql = SystemGlobals.getSql("TopicModel.selectAllByForumByLimit");

		PreparedStatement pstmt = null;

		try {
			pstmt = JForumExecutionContext.getConnection().prepareStatement(sql);
			pstmt.setInt(1, startFrom);
			pstmt.setInt(2, count);
			pstmt.setInt(3, forumId);
			pstmt.setInt(4, forumId);

			return this.fillTopicsData(pstmt);
		}
		catch (SQLException e) {
			throw new DatabaseException(e);
		}
		finally {
			DbUtils.close(pstmt);
		}
	}
	
	/**
	 * @see net.jforum.dao.generic.GenericTopicDAO#selectByUserByLimit(int, int, int)
	 */
	@Override public List<Topic> selectByUserByLimit(final int userId, final int startFrom, final int count) 
	{
		return super.selectByUserByLimit(startFrom, count, userId);
	}

	/**
	 * @see net.jforum.dao.TopicDAO#selectRecentTopics(int, int)
	 */
	@Override public List<Topic> selectRecentTopics(final int startFrom, final int count)
	{
		return super.selectRecentTopics(startFrom, startFrom + count);
	}

}

../jforum2-code/src/main/java/net/jforum/dao/hsqldb/HsqldbPostDAO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 24/05/2004 / 12:04:11
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao.hsqldb;

import java.util.List;

import net.jforum.dao.generic.GenericPostDAO;
import net.jforum.entities.Post;

/**
 * @author Marc Wick
 */
public class HsqldbPostDAO extends GenericPostDAO
{
	/**
	 * @see net.jforum.dao.generic.GenericPostDAO#selectLatestByForumForRSS(int, int)
	 */
	@Override public List<Post> selectLatestByForumForRSS(final int forumId, final int limit) 
	{
		return super.selectLatestByForumForRSS(limit, forumId);
	}

	/**
	 * @see net.jforum.dao.PostDAO#selectAllByTopicByLimit(int, int, int)
	 */
	@Override public List<Post> selectAllByTopicByLimit(final int topicId, final int startFrom, final int count)
	{
		if (count < 0) {
			// 2nd and 3rd parameters are ignored anyway
			return super.selectAllByTopicByLimit(topicId, startFrom, count);
		} else {
			return super.selectAllByTopicByLimit(startFrom, count, topicId);
		}
	}

	/**
	 * @see net.jforum.dao.generic.GenericPostDAO#selectByUserByLimit(int, int, int)
	 */
	@Override public List<Post> selectByUserByLimit(final int userId, final int startFrom, final int count) 
	{
		return super.selectByUserByLimit(startFrom, count, userId);
	}
}

../jforum2-code/src/main/java/net/jforum/dao/hsqldb/HsqldbDataAccessDriver.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 21.09.2004 
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao.hsqldb;

import net.jforum.dao.PostDAO;
import net.jforum.dao.PrivateMessageDAO;
import net.jforum.dao.TopicDAO;
import net.jforum.dao.UserDAO;
import net.jforum.dao.generic.GenericDataAccessDriver;

/**
 * @author Marc Wick
 */
public class HsqldbDataAccessDriver extends GenericDataAccessDriver 
{
	private static PostDAO postDao = new HsqldbPostDAO();
	private static PrivateMessageDAO pmDao = new HsqldbPrivateMessageDAO();
	private static UserDAO userDao = new HsqldbUserDAO();
	private static TopicDAO topicDao = new HsqldbTopicDAO();
	
	/**
	 * @see net.jforum.dao.DataAccessDriver#newPostDAO()
	 */
	@Override public PostDAO newPostDAO() {
		return postDao;
	}
	
	/**
	 * @see net.jforum.dao.DataAccessDriver#newPrivateMessageDAO()
	 */
	@Override public PrivateMessageDAO newPrivateMessageDAO() {
		return pmDao;
	}

	/**
	 * @see net.jforum.dao.DataAccessDriver#newTopicDAO()
	 */
	@Override public TopicDAO newTopicDAO() {
		return topicDao;
	}
	
	/**
	 * @see net.jforum.dao.DataAccessDriver#newUserDAO()
	 */
	@Override public UserDAO newUserDAO() {
		return userDao;
	}
}

../jforum2-code/src/main/java/net/jforum/dao/mysql/MysqlDataAccessDriver.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 29/05/2004 00:12:37
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao.mysql;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public class MysqlDataAccessDriver extends net.jforum.dao.generic.GenericDataAccessDriver {
}

../jforum2-code/src/main/java/net/jforum/dao/postgresql/PostgresqlDataAccessDriver.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 29/05/2004 00:12:37
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.dao.postgresql;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public class PostgresqlDataAccessDriver extends net.jforum.dao.generic.GenericDataAccessDriver {
}

../jforum2-code/src/main/java/net/jforum/entities/ModerationPendingInfo.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Jan 30, 2005 11:50:42 AM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.entities;

import java.util.ArrayList;
import java.util.List;

/**
 * @author Rafael Steil
 */
public class ModerationPendingInfo
{
	private int categoryId;
	private String categoryName;
	private transient final List<ForumModerationInfo> infoList = new ArrayList<>();
	
	public void setCategoryId(final int categoryId)
	{
		this.categoryId = categoryId;
	}
	
	public void setCategoryName(final String name)
	{
		this.categoryName = name;
	}
	
	public String getCategoryName()
	{
		return this.categoryName;
	}
	
	public int getCategoryId()
	{
		return this.categoryId;
	}
	
	public void addInfo(final String forumName, final int forumId, final int postsToModerate)
	{
		this.infoList.add(new ForumModerationInfo(forumName, forumId, postsToModerate));
	}
	
	public List<ForumModerationInfo> getForums()
	{
		return this.infoList;
	}
}

../jforum2-code/src/main/java/net/jforum/entities/TopicModerationInfo.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Jan 30, 2005 5:15:36 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.entities;

import java.util.ArrayList;
import java.util.List;

/**
 * @author Rafael Steil
 */
public class TopicModerationInfo
{
	private int topicId;
	private int topicReplies;
	private String topicTitle;
	private transient final List<Post> posts = new ArrayList<>();
	
	public void setTopicId(final int topicId)
	{
		this.topicId = topicId;
	}
	
	public void setTopicReplies(final int replies)
	{
		this.topicReplies = replies;
	}
	
	public void setTopicTitle(final String title)
	{
		this.topicTitle = title;
	}
	
	public int getTopicId()
	{
		return this.topicId;
	}
	
	public String getTopicTitle()
	{
		return this.topicTitle;
	}
	
	public void addPost(final Post post)
	{
		this.posts.add(post);
	}
	
	public List<Post> getPosts()
	{
		return this.posts;
	}
	
	public int getTopicReplies()
	{
		return this.topicReplies;
	}
}

../jforum2-code/src/main/java/net/jforum/entities/Attachment.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Jan 18, 2005 2:58:22 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.entities;

import java.io.File;

import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;

/**
 * @author Rafael Steil
 */
public class Attachment
{
	private int id;
	private int postId;
	private int privmsgsId;
	private int userId;
	private AttachmentInfo info;
	
	/**
	 * @return Returns the id.
	 */
	public int getId()
	{
		return this.id;
	}
	
	/**
	 * @param id The id to set.
	 */
	public void setId(int id)
	{
		this.id = id;
	}
	
	/**
	 * @return Returns the postId.
	 */
	public int getPostId()
	{
		return this.postId;
	}
	
	/**
	 * @param postId The postId to set.
	 */
	public void setPostId(int postId)
	{
		this.postId = postId;
	}
	
	/**
	 * @return Returns the privmsgsId.
	 */
	public int getPrivmsgsId()
	{
		return this.privmsgsId;
	}
	
	/**
	 * @param privmsgsId The privmsgsId to set.
	 */
	public void setPrivmsgsId(int privmsgsId)
	{
		this.privmsgsId = privmsgsId;
	}
	
	/**
	 * @return Returns the userId.
	 */
	public int getUserId()
	{
		return this.userId;
	}
	/**
	 * @param userId The userId to set.
	 */
	public void setUserId(int userId)
	{
		this.userId = userId;
	}
	
	/**
	 * @return Returns the info.
	 */
	public AttachmentInfo getInfo()
	{
		return this.info;
	}
	
	/**
	 * @param info The info to set.
	 */
	public void setInfo(AttachmentInfo info)
	{
		this.info = info;
	}

	public boolean hasThumb() 
	{
		String filename = this.info.getPhysicalFilename();
		String extension = filename.substring(filename.lastIndexOf('.') + 1, filename.length() - 1);
		return SystemGlobals.getBoolValue(ConfigKeys.ATTACHMENTS_IMAGES_CREATE_THUMB) && isPicture(extension);
	}

	public String thumbPath() {
		String urlPath = SystemGlobals.getValue(ConfigKeys.ATTACHMENTS_UPLOAD_DIR)
		    + "/" + this.info.getPhysicalFilename();
		String realPath = SystemGlobals.getValue(ConfigKeys.ATTACHMENTS_STORE_DIR)
		    + "/" + this.info.getPhysicalFilename();
		if (new File(realPath + "_thumb").exists()) {
			return urlPath + "_thumb";
		} else {
			return urlPath;
		}    
	}

	public static boolean isPicture (String extension) {
		return ("jpg".equals(extension) || "jpeg".equals(extension) 
				|| "gif".equals(extension) || "png".equals(extension)
				|| "svg".equals(extension) || "webp".equals(extension)
				|| "apng".equals(extension) || "avif".equals(extension)
				|| "bmp".equals(extension));
	}
}

../jforum2-code/src/main/java/net/jforum/entities/PollOption.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 *
 * Created on 21/05/2004 - 15:17:46
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.entities;

import java.io.Serializable;
import java.util.Objects;

/**
 * @author David Almilli
 */
public class PollOption implements Serializable 
{
	private static final long serialVersionUID = -3742401056713357659L;
	private int id;
	private int pollId;
	private String text;
	private int voteCount;

	private Poll poll;
	
	public PollOption() {}
	
	public PollOption(int id, String text, int voteCount) {
		this.id = id;
		this.text = text;
		this.voteCount = voteCount;
	}
	
	public int getId() {
		return id;
	}
	public void setId(int id) {
		this.id = id;
	}
	public int getPollId() {
		return pollId;
	}
	public void setPollId(int pollId) {
		this.pollId = pollId;
	}
	public String getText() {
		return text;
	}
	public void setText(String text) {
		this.text = text;
	}
	public int getVoteCount() {
		return voteCount;
	}
	public void setVoteCount(int voteCount) {
		this.voteCount = voteCount;
	}
	
	public int getVotePercentage() {
		int percent = 0;
		if (poll != null) {
			int totalCount = poll.getTotalVotes();
			percent = Math.round(100f*voteCount/totalCount);
		}
		return percent;
	}
	
	public Poll getPoll() {
		return poll;
	}
	
	protected void setPoll(Poll poll) {
		this.poll = poll;
	}
	
	/**
	 * @see java.lang.Object#toString()
	 */
	@Override public String toString()
	{
		return new StringBuilder(128)
			.append('[')
			.append(this.id)
			.append(", ")
			.append(this.text)
			.append(", ")
			.append(this.voteCount)
			.append(']')
			.toString();
	}
	
	/**
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override public boolean equals(Object o)
	{
		if (!(o instanceof PollOption)) {
			return false;
		}
		
		PollOption po = (PollOption)o;
		return po.getId() == this.id
			&& po.getText().equals(this.text)
			&& po.getVoteCount() == this.voteCount;
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	@Override public int hashCode()
	{
		return Objects.hash(this.id, this.text, this.voteCount);
	}
}

../jforum2-code/src/main/java/net/jforum/entities/UserSession.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 30/12/2003 / 21:40:54
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.entities;

import java.awt.image.BufferedImage;
import java.io.Serializable;
import java.util.Date;
import java.util.Locale;
import java.util.List;
import java.util.Objects;
import java.util.Set;
import java.util.function.Consumer;
import java.util.stream.Collectors;

import com.octo.captcha.image.ImageCaptcha;

import net.jforum.ControllerUtils;
import net.jforum.JForumExecutionContext;
import net.jforum.SessionFacade;
import net.jforum.repository.SecurityRepository;
import net.jforum.security.PermissionControl;
import net.jforum.security.SecurityConstants;
import net.jforum.util.Captcha;
import net.jforum.util.I18n;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;

/**
 * Stores information about user's session.
 * 
 * @author Rafael Steil
 */
public class UserSession implements Serializable
{
    private static final long serialVersionUID = 0;
	
	private long sessionTime;
	
	private int userId;
	private int privateMessages;
	
	private Date startTime;
	private Date lastVisit;
	
	private String sessionId;
	private String username;
	private String lang;
	private String ip;

	private boolean autoLogin;
	
	private transient ImageCaptcha imageCaptcha = null;

	public UserSession() {
		// Empty Constructor
	}

	public UserSession(final UserSession userSession)
	{
		if (userSession.getStartTime() != null) {
			this.startTime = new Date(userSession.getStartTime().getTime());
		}

		if (userSession.getLastVisit() != null) {
			this.lastVisit = new Date(userSession.getLastVisit().getTime());
		}
		
		this.sessionTime = userSession.getSessionTime();
		this.userId = userSession.getUserId();
		this.sessionId = userSession.getSessionId();
		this.username = userSession.getUsername();
		this.autoLogin = userSession.isAutoLogin();
		this.lang = userSession.getLang();
		this.privateMessages = userSession.getPrivateMessages();
		this.imageCaptcha = userSession.imageCaptcha;
		this.ip = userSession.getIp();
	}
	
	public Date sessionLastUpdate()
	{
		return new Date(this.startTime.getTime() + this.sessionTime);
	}
	
	public void setIp(final String ip)
	{
		this.ip = ip;
	}
	
	public String getIp()
	{
		return this.ip;
	}

	/**
	 * Set session's start time.
	 * 
	 * @param startTime  Start time in milliseconds
	 */
	public void setStartTime(final Date startTime)
	{
		this.startTime = startTime;
	}

	/**
	 * @return Returns the privateMessages.
	 */
	public int getPrivateMessages()
	{
		return this.privateMessages;
	}

	/**
	 * @param privateMessages The privateMessages to set.
	 */
	public void setPrivateMessages(final int privateMessages)
	{
		//LOGGER.info("userId="+userId+", PM before="+this.privateMessages+", PM now="+privateMessages+", sessionId="+sessionId);
		this.privateMessages = privateMessages;
	}

	/**
	 * Set session last visit time.
	 * 
	 * @param lastVisit Time in milliseconds
	 */
	public void setLastVisit(final Date lastVisit)
	{
		this.lastVisit = lastVisit;
	}

	/**
	 * Set user's id
	 */
	public void setUserId(final int userId)
	{
		this.userId = userId;
	}

	/**
	 * Set user's name
	 */
	public void setUsername(final String username)
	{
		this.username = username;
	}

	public void setSessionId(final String sessionId)
	{
		this.sessionId = sessionId;
	}

	public void setSessionTime(final long sessionTime)
	{
		this.sessionTime = sessionTime;
	}

	public void setLang(final String lang)
	{
		this.lang = lang;
	}

	/**
	 * Update the session time.
	 */
	public void updateSessionTime()
	{
		this.sessionTime = System.currentTimeMillis() - this.startTime.getTime();
	}

	/**
	 * Enable or disable auto-login.
	 * 
	 * @param autoLogin  <code>true</code> or <code>false</code> to represent auto-login status
	 */
	public void setAutoLogin(boolean autoLogin)
	{
		this.autoLogin = autoLogin;
	}

	/**
	 * Gets user's session start time
	 * 
	 * @return Start time in milliseconds
	 */
	public Date getStartTime()
	{
		return this.startTime;
	}

	public String getLang()
	{
		return this.lang;
	}

	/**
	 * Gets user's last visit time
	 * 
	 * @return Time in milliseconds
	 */
	public Date getLastVisit()
	{
		return this.lastVisit;
	}

	/**
	 * Gets the session time.
	 * 
	 * @return The session time
	 */
	public long getSessionTime()
	{
		return this.sessionTime;
	}

	/**
	 * Gets user's id
	 */
	public int getUserId()
	{
		return this.userId;
	}

	/**
	 * Gets the username
	 */
	public String getUsername()
	{
		if (this.username == null && this.userId == SystemGlobals.getIntValue(ConfigKeys.ANONYMOUS_USER_ID)) {
			this.username = I18n.getMessage("Guest");
		}
		
		return this.username;
	}

	/**
	 * Gets auto-login status
	 * 
	 * @return <code>true</code> if auto-login is enabled, or <code>false</code> if disabled.
	 */
	public boolean isAutoLogin()
	{
		return this.autoLogin;
	}

	/**
	 * Gets the session id related to this user session
	 */
	public String getSessionId()
	{
		return this.sessionId;
	}

	/**
	 * Checks if the user is an administrator
	 * 
	 * @return <code>true</code> if the user is an administrator
	 */
	public boolean isAdmin()
	{
		return SecurityRepository.canAccess(this.userId, SecurityConstants.PERM_ADMINISTRATION);
	}

	/**
	 * Checks if the user is a moderator
	 * 
	 * @return <code>true</code> if the user has moderations rights
	 */
	public boolean isModerator()
	{
		return SecurityRepository.canAccess(this.userId, SecurityConstants.PERM_MODERATION);
	}
	
	/**
	 * Checks if the user can moderate a forum
	 * 
	 * @param forumId the forum's id to check for moderation rights
	 * @return <code>true</code> if the user has moderations rights
	 */
	public boolean isModerator(int forumId)
	{
		final PermissionControl permissionControl = SecurityRepository.get(this.userId);
		
		return (permissionControl.canAccess(SecurityConstants.PERM_MODERATION))
			&& (permissionControl.canAccess(SecurityConstants.PERM_MODERATION_FORUMS, 
				Integer.toString(forumId)));
	}

	/**
	 * Makes the user's session "anonymous" - eg, the user. This method sets the session's start and
	 * last visit time to the current datetime, the user id to the return of a call to
	 * <code>SystemGlobals.getIntValue(ConfigKeys.ANONYMOUS_USER_ID)</code> and finally sets
	 * session attribute named "logged" to "0" will be considered a non-authenticated / anonymous user
	 */
	public void makeAnonymous()
	{
		this.registerBasicInfo();
		
		ControllerUtils.addCookie(SystemGlobals.getValue(ConfigKeys.COOKIE_AUTO_LOGIN), null);
		ControllerUtils.addCookie(SystemGlobals.getValue(ConfigKeys.COOKIE_NAME_DATA),
			SystemGlobals.getValue(ConfigKeys.ANONYMOUS_USER_ID));

		SessionFacade.makeUnlogged();
	}

	/**
	 * Sets the startup and last visit time to now, as well set the
	 * user id to Anonymous. This method is usually called when the
	 * user hits the forum for the first time. 
	 */
	public void registerBasicInfo()
	{
		this.setStartTime(new Date(System.currentTimeMillis()));
		this.setLastVisit(new Date(System.currentTimeMillis()));
		this.setUserId(SystemGlobals.getIntValue(ConfigKeys.ANONYMOUS_USER_ID));
		this.setUsername(I18n.getMessage("Guest"));
	}

	/**
	 * Sets a new user session information using information from a <code>User</code> instance.
	 * This method sets the user id, username, the number of private messages, the session's start
	 * time ( set to the current date and time ) and the language.
	 * 
	 * @param user The <code>User</code> instance to get data from
	 */
	public void dataToUser(User user)
	{
		this.setUserId(user.getId());
		this.setUsername(user.getUsername());
		this.setPrivateMessages(user.getPrivateMessagesCount());
		this.setStartTime(new Date(System.currentTimeMillis()));
		this.setLang(user.getLang());
	}

	/**
	 * Get the captcha image to challenge the user
	 * 
	 * @return BufferedImage the captcha image to challenge the user
	 */
	public BufferedImage getCaptchaImage()
	{
		if (this.imageCaptcha == null) {
			return null;
		}
		
		return this.imageCaptcha.getImageChallenge();
	}

	/**
	 * Validate the captcha response of user
	 * 
	 * @param origUserResponse String the captcha response from user
	 * @return boolean true if the answer is valid, otherwise return false
	 */
	public boolean validateCaptchaResponse (String origUserResponse)
	{
		String userResponse = origUserResponse;
		if (this.imageCaptcha != null) {

			if (SystemGlobals.getBoolValue(ConfigKeys.CAPTCHA_IGNORE_CASE)) {
				userResponse = userResponse.toLowerCase(Locale.US);
			}

			final boolean result =  this.imageCaptcha.validateResponse(userResponse).booleanValue();
			this.destroyCaptcha();
			return result;
		}

		return false;
	}

	/**
	 * create a new image captcha
	 */
	public void createNewCaptcha()
	{
		this.destroyCaptcha();
		this.imageCaptcha = Captcha.getInstance().getNextImageCaptcha();
	}

	/**
	 * Destroy the current captcha validation is done
	 * 
	 */
	public void destroyCaptcha()
	{
		if (this.imageCaptcha != null) {
			this.imageCaptcha.disposeChallenge();
		}
	}
	
	/**
	 * Checks if it's a bot
     * use JForumExecutionContext.getForumContext().isBot() instead
     *
	 * @return <code>true</code> if this user session is from any robot
	 */
	public boolean isBot()
	{
        return JForumExecutionContext.getForumContext().isBot();
    }
	
	/**
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override public boolean equals(final Object obj)
	{
		if (!(obj instanceof UserSession)) {
			return false;
		}
		
		return this.sessionId.equals(((UserSession)obj).getSessionId());
	}
	
	/**
	 * @see java.lang.Object#hashCode()
	 */
	@Override public int hashCode()
	{
		return this.sessionId.hashCode();
	}
    
    public static boolean changeOnUser (User user, Consumer<UserSession> consumer) {
        return changeOnUser(user.getId(), consumer);
    }

    public static boolean changeOnUser (final int userId, Consumer<UserSession> consumer) {
        if (userId < 1) return false; // exclude guest and non-real users

        Set<String> sessionIds = SessionFacade.findSessionIdsOfUser(userId);

        List<UserSession> sessions = sessionIds.stream()
            .map(SessionFacade::getUserSession) // obtain UserSession object
            .filter(Objects::nonNull) // filter out null sessions
            .collect(Collectors.toList());

        sessions.forEach(consumer);

        return !sessions.isEmpty();
    }
}

../jforum2-code/src/main/java/net/jforum/entities/ModerationLog.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 08/07/2007 11:25:54
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.entities;

import java.util.Date;

/**
 * @author Rafael Steil
 */
public class ModerationLog
{
	private int id;
	private int postId;
	private int topicId;
	private User user;
	private User posterUser = new User();
	private String description;
	private String originalMessage;
	private Date date;
	private int type;
	/**
	 * @return the id
	 */
	public int getId()
	{
		return this.id;
	}
	
	/**
	 * @return the userId
	 */
	public User getUser()
	{
		return this.user;
	}
	
	/**
	 * @return the description
	 */
	public String getDescription()
	{
		return this.description;
	}
	
	/**
	 * @return the originalMessage
	 */
	public String getOriginalMessage()
	{
		return this.originalMessage;
	}
	
	/**
	 * @return the date
	 */
	public Date getDate()
	{
		return this.date;
	}
	
	/**
	 * @return the type
	 */
	public int getType()
	{
		return this.type;
	}
	
	/**
	 * @param id the id to set
	 */
	public void setId(final int id)
	{
		this.id = id;
	}
	
	/**
	 * @param user the user to set
	 */
	public void setUser(final User user)
	{
		this.user = user;
	}
	
	/**
	 * @param description the description to set
	 */
	public void setDescription(final String description)
	{
		this.description = description;
	}
	
	/**
	 * @param originalMessage the originalMessage to set
	 */
	public void setOriginalMessage(final String originalMessage)
	{
		this.originalMessage = originalMessage;
	}
	
	/**
	 * @param date the date to set
	 */
	public void setDate(final Date date)
	{
		this.date = date;
	}
	
	/**
	 * @param type the type to set
	 * 0 = moved
	 * 1 = deleted
	 * 2 = edited
	 * 3 = topic locked/unlocked
	 * 4 = composted
	 * 5 = post rejected
	 * 6 = user locked/unlocked
	 */
	public void setType(final int type)
	{
		this.type = type;
	}

	/**
	 * @return the postId
	 */
	public int getPostId()
	{
		return this.postId;
	}

	/**
	 * @return the topicId
	 */
	public int getTopicId()
	{
		return this.topicId;
	}

	/**
	 * @param postId the postId to set
	 */
	public void setPostId(final int postId)
	{
		this.postId = postId;
	}

	/**
	 * @param topicId the topicId to set
	 */
	public void setTopicId(final int topicId)
	{
		this.topicId = topicId;
	}

	/**
	 * @return the posterUser
	 */
	public User getPosterUser()
	{
		return this.posterUser;
	}

	/**
	 * @param posterUser the posterUser to set
	 */
	public void setPosterUser(final User posterUser)
	{
		this.posterUser = posterUser;
	}
}

../jforum2-code/src/main/java/net/jforum/entities/PrivateMessage.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.

 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:

 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 20/05/2004 - 15:24:07
 * net.jforum.entities.PrivateMessage.java
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.entities;

import java.util.Date;

import net.jforum.view.forum.common.ViewCommon;

/**
 * @author Rafael Steil
 */
public class PrivateMessage 
{
	private int id;
	private int type;
	private User fromUser;
	private User toUser;
	private Post post;
	private Date postDate;

	public PrivateMessage() {
		// Empty Constructor
	}

	public PrivateMessage(final int id) {
		this.id = id;
	}

	/**
	 * @return Returns the fromUser.
	 */
	public User getFromUser()
	{
		return fromUser;
	}

	/**
	 * @param fromUser The fromUser to set.
	 */
	public void setFromUser(final User fromUser)
	{
		this.fromUser = fromUser;
	}

	/**
	 * @return Returns the toUser.
	 */
	public User getToUser()
	{
		return toUser;
	}

	/**
	 * @param toUser The toUser to set.
	 */
	public void setToUser(final User toUser)
	{
		this.toUser = toUser;
	}

	/**
	 * @return Returns the type.
	 */
	public int getType()
	{
		return type;
	}

	/**
	 * @param type The type to set.
	 */
	public void setType(final int type)
	{
		this.type = type;
	}

	/**
	 * @return Returns the id.
	 */
	public int getId()
	{
		return id;
	}

	/**
	 * @param id The id to set.
	 */
	public void setId(final int id)
	{
		this.id = id;
	}

	/**
	 * @return Returns the post.
	 */
	public Post getPost()
	{
		return post;
	}

	/**
	 * @param post The post to set.
	 */
	public void setPost(final Post post)
	{
		this.post = post;
	}
	
	/**
	 * @return Returns the postDate.
	 */
	public Date getPostDate() {
		return postDate;
	}

	/**
	 * @param postDate The post date to set.
	 */
	public void setPostDate(final Date postDate)
	{
		this.postDate = postDate;
	}

	/**
	 * @return Returns the formattedDate.
	 */
	public String getFormattedDate() {
        return ViewCommon.formatDate(postDate);
	}

}

../jforum2-code/src/main/java/net/jforum/entities/LastPostInfo.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 12/11/2004 18:10:57
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.entities;

import java.io.Serializable;
import java.util.Date;

import net.jforum.view.forum.common.ViewCommon;

/**
 * @author Rafael Steil
 */
public class LastPostInfo implements Serializable
{
	private static final long serialVersionUID = -472556606758547155L;
	private long postTimeMillis;
	private int topicId;
	private int postId;
	private int userId;
	private int topicReplies;
	private String username;
	private Date postDate;
	private String topicTitle;
	private boolean hasInfo;

	public void setHasInfo(final boolean value) {
		this.hasInfo = value;
	}

	public boolean hasInfo() {
		return this.hasInfo;
	}

	/**
	 * @return Returns the postDate.
	 */
	public String getPostDate() {
		return this.postDate == null ? null : ViewCommon.formatDate(this.postDate);
	}

	/**
	 * @param postDate The postDate to set.
	 */
	public void setPostDate(final Date postDate) {
		this.postDate = postDate;
	}

	/**
	 * @return Returns the postId.
	 */
	public int getPostId() {
		return this.postId;
	}

	/**
	 * @param postId The postId to set.
	 */
	public void setPostId(final int postId) {
		this.postId = postId;
	}

	/**
	 * @return Returns the postTimeMillis.
	 */
	public long getPostTimeMillis() {
		return this.postTimeMillis;
	}

	/**
	 * @param postTimeMillis The postTimeMillis to set.
	 */
	public void setPostTimeMillis(final long postTimeMillis) {
		this.postTimeMillis = postTimeMillis;
	}

	/**
	 * @return Returns the topicId.
	 */
	public int getTopicId() {
		return this.topicId;
	}

	/**
	 * @param topicId The topicId to set.
	 */
	public void setTopicId(final int topicId) {
		this.topicId = topicId;
	}

	/**
	 * @return Returns the topicReplies.
	 */
	public int getTopicReplies() {
		return this.topicReplies;
	}

	/**
	 * @param topicReplies The topicReplies to set.
	 */
	public void setTopicReplies(final int topicReplies) {
		this.topicReplies = topicReplies;
	}

	/**
	 * @return Returns the userId.
	 */
	public int getUserId() {
		return this.userId;
	}

	/**
	 * @param userId The userId to set.
	 */
	public void setUserId(final int userId) {
		this.userId = userId;
	}

	/**
	 * @return Returns the username.
	 */
	public String getUsername() {
		return this.username;
	}

	/**
	 * @param username The username to set.
	 */
	public void setUsername(final String username) {
		this.username = username;
	}

	/**
	 * @return Returns the title.
	 */
	public String getTitle() {
		return this.topicTitle;
	}

	/**
	 * @param title The title to set.
	 */
	public void setTitle(final String title) {
		this.topicTitle = title;
	}
}

../jforum2-code/src/main/java/net/jforum/entities/MailIntegration.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 21/08/2006 21:23:29
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.entities;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public class MailIntegration
{
	private int forumId;
	private int popPort;
	private boolean ssl;
	private String forumEmail;
	private String popHost;
	private String popUsername;
	private String popPassword;
	
	/**
	 * @return the forumId
	 */
	public int getForumId()
	{
		return this.forumId;
	}
	
	/**
	 * @return the popHost
	 */
	public String getPopHost()
	{
		return this.popHost;
	}
	
	/**
	 * @return the popPassword
	 */
	public String getPopPassword()
	{
		return this.popPassword;
	}
	
	/**
	 * @return the popPort
	 */
	public int getPopPort()
	{
		return this.popPort;
	}
	
	/**
	 * @return the popUsername
	 */
	public String getPopUsername()
	{
		return this.popUsername;
	}
	
	/**
	 * @param forumId the forumId to set
	 */
	public void setForumId(final int forumId)
	{
		this.forumId = forumId;
	}
	
	/**
	 * @param popHost the popHost to set
	 */
	public void setPopHost(final String popHost)
	{
		this.popHost = popHost;
	}
	
	/**
	 * @param popPassword the popPassword to set
	 */
	public void setPopPassword(final String popPassword)
	{
		this.popPassword = popPassword;
	}
	
	/**
	 * @param popPort the popPort to set
	 */
	public void setPopPort(final int popPort)
	{
		this.popPort = popPort;
	}
	
	/**
	 * @param popUsername the popUsername to set
	 */
	public void setPopUsername(final String popUsername)
	{
		this.popUsername = popUsername;
	}

	/**
	 * @return the forumEmail
	 */
	public String getForumEmail()
	{
		return this.forumEmail;
	}

	/**
	 * @param forumEmail the forumEmail to set
	 */
	public void setForumEmail(final String forumEmail)
	{
		this.forumEmail = forumEmail;
	}
	
	public void setSsl(final boolean ssl)
	{
		this.ssl = ssl;
	}
	
	public boolean isSsl()
	{
		return this.ssl;
	}
	
	/**
	 * @see java.lang.Object#toString()
	 */
	@Override public String toString()
	{
		return new StringBuilder()
			.append('[')
			.append("email=").append(this.forumEmail)
			.append(", host=").append(this.popHost)
			.append(", port=").append(this.popPort)
			.append(", ssl=").append(this.ssl)
			.append(']')
			.toString();
	}
}

../jforum2-code/src/main/java/net/jforum/entities/Group.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.

 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:

 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Feb 17, 2003 / 8:50:57 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.entities;

import java.io.Serializable;

/**
 * Represents a group in the system. 
 * 
 * @author Rafael Steil
 * @version $Id$
 */
public class Group implements Serializable
{
	private static final long serialVersionUID = 2605949396973145726L;
	private int id;
	private int parentId;
	private String name;
	private String description;
	
	/**
	 * Default constructor	 
	 * **/
	public Group() {
		// Empty Constructor
	}
	
	/**
	 * Create a new <code>Group</code> object.
	 *  
	 * @param id The Group ID
	 * @param parentId The parent ID for the group
	 * @param name The Group Name
	 * @param description The Group Description
 	 **/
	public Group(final int id, final int parentId, final String name, final String description) 
	{
		this.name = name;
		this.id = id;
		this.parentId = parentId;
		this.description = description;		
	}
	
	/**
	 * @return String
	 */
	public String getDescription() {
		return this.description;
	}

	/**
	 * @return int
	 */
	public int getId() {
		return this.id;
	}
	
	/**
	 * @return int
	 */
	public int getParentId() {
		return this.parentId;
	}

	/**
	 * @return String
	 */
	public String getName() {
		return this.name;
	}

	/**
	 * Sets the description.
	 * @param description The description to set
	 */
	public void setDescription(final String description) {
		this.description = description;
	}

	/**
	 * Sets the id.
	 * @param id The id to set
	 */
	public void setId(final int id) {
		this.id = id;
	}

	/**
	 * Sets the parent id.
	 * @param parentId The parent id to set
	 */
	public void setParentId(final int parentId) {
		this.parentId = parentId;
	}

	/**
	 * Sets the name.
	 * @param name The name to set
	 */
	public void setName(final String name) {
		this.name = name;
	}

	/* 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override public boolean equals(final Object obj) 
	{
		if (!(obj instanceof Group)) {
			return false;
		}
		
		return ((Group)obj).getId() == this.id;
	}

	/* 
	 * @see java.lang.Object#hashCode()
	 */
	@Override public int hashCode() 
	{
		return this.id;
	}

	/* 
	 * @see java.lang.Object#toString()
	 */
	@Override public String toString() 
	{
		return this.name +" - "+ this.id;
	}

}

../jforum2-code/src/main/java/net/jforum/entities/Bookmark.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 *
 * Created on Jan 16, 2005 12:22:12 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.entities;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public class Bookmark
{
	private int id;
	private int userId;
	private int relationId;
	private int relationType;
	private boolean publicVisible;
	private String title;
	private String description;

	// only used when displaying
	private int forumId;

	/**
	 * @return Returns the id.
	 */
	public int getId()
	{
		return this.id;
	}
	
	/**
	 * @param id The id to set.
	 */
	public void setId(final int id)
	{
		this.id = id;
	}
	
	/**
	 * @return Returns the publicVisible.
	 */
	public boolean isPublicVisible()
	{
		return this.publicVisible;
	}
	
	/**
	 * @param publicVisible The publicVisible to set.
	 */
	public void setPublicVisible(final boolean publicVisible)
	{
		this.publicVisible = publicVisible;
	}
	
	/**
	 * @return Returns the relationId.
	 */
	public int getRelationId()
	{
		return this.relationId;
	}
	
	/**
	 * @param relationId The relationId to set.
	 */
	public void setRelationId(final int relationId)
	{
		this.relationId = relationId;
	}
	
	/**
	 * @return Returns the relationType.
	 */
	public int getRelationType()
	{
		return this.relationType;
	}
	
	/**
	 * @param relationType The relationType to set.
	 */
	public void setRelationType(final int relationType)
	{
		this.relationType = relationType;
	}
	
	/**
	 * @return Returns the userId.
	 */
	public int getUserId()
	{
		return this.userId;
	}
	
	/**
	 * @param userId The userId to set.
	 */
	public void setUserId(final int userId)
	{
		this.userId = userId;
	}
	
	/**
	 * @return Returns the description.
	 */
	public String getDescription()
	{
		return this.description;
	}
	
	/**
	 * @param description The description to set.
	 */
	public void setDescription(final String description)
	{
		this.description = description;
	}
	
	/**
	 * @return Returns the title.
	 */
	public String getTitle()
	{
		return this.title;
	}
	
	/**
	 * @param title The title to set.
	 */
	public void setTitle(final String title)
	{
		this.title = title;
	}

	public int getForumId() {
		return forumId;
	}

	public void setForumId(final int forumId) {
		this.forumId = forumId;
	}
}

../jforum2-code/src/main/java/net/jforum/entities/Banlist.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 *
 * Created on 07/12/2006 20:59:12
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.entities;

import java.io.Serializable;
import java.util.StringTokenizer;

import org.apache.commons.lang3.StringUtils;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public class Banlist implements Serializable
{
	private static final long serialVersionUID = -6113818249249033658L;
	private int id;
	private int userId;
	private String ip;
	private String email;
	
	/**
	 * @return the id
	 */
	public int getId()
	{
		return this.id;
	}
	
	/**
	 * @return the userId
	 */
	public int getUserId()
	{
		return this.userId;
	}
	
	/**
	 * @return the ip
	 */
	public String getIp()
	{
		return this.ip;
	}
	
	/**
	 * @return the email
	 */
	public String getEmail()
	{
		return this.email;
	}
	
	/**
	 * @param id the id to set
	 */
	public void setId(int id)
	{
		this.id = id;
	}
	
	/**
	 * @param userId the userId to set
	 */
	public void setUserId(int userId)
	{
		this.userId = userId;
	}
	
	/**
	 * @param ip the ip to set
	 */
	public void setIp(String ip)
	{
		this.ip = ip;
	}
	
	/**
	 * @param email the email to set
	 */
	public void setEmail(String email)
	{
		this.email = email;
	}
	
	public boolean matches(Banlist b)
	{
		boolean status = false;
		
		if (this.matchesUserId(b) || this.matchesEmail(b)) {
			status = true;
		}
		else if (StringUtils.isNotEmpty(b.getIp()) && StringUtils.isNotEmpty(this.getIp()))  {
			if (b.getIp().equalsIgnoreCase(this.getIp())) {
				status = true;
			}
			else {
				status = this.matchIp(b);
			}
		}
		
		return status;
	}

	private boolean matchesEmail(Banlist b)
	{
		return (StringUtils.isNotEmpty(b.getEmail()) && b.getEmail().equals(this.getEmail()));
	}

	private boolean matchesUserId(Banlist b)
	{
		return b.getUserId() > 0 && this.getUserId() > 0 && b.getUserId() == this.getUserId();
	}

	private boolean matchIp(Banlist b)
	{
		boolean status = false;
		
		StringTokenizer userToken = new StringTokenizer(b.getIp(), ".");
		StringTokenizer thisToken = new StringTokenizer(this.getIp(), ".");
		
		if (userToken.countTokens() == thisToken.countTokens()) {
			String[] userValues = this.tokenizerAsArray(userToken);
			String[] thisValues = this.tokenizerAsArray(thisToken);
			
			status = this.compareIpValues(userValues, thisValues);
		}
		return status;
	}

	private boolean compareIpValues(String[] userValues, String[] thisValues)
	{
		boolean helperStatus = true;
		boolean onlyStars = true;
		
		for (int i = 0; i < thisValues.length; i++) {
			if (thisValues[i].charAt(0) != '*') {
				onlyStars = false;
				
				if (!thisValues[i].equals(userValues[i])) {
					helperStatus = false;
				}
			}
		}
		
		return helperStatus && !onlyStars;
	}

	private String[] tokenizerAsArray(StringTokenizer token)
	{
		String[] values = new String[token.countTokens()];
		
		for (int i = 0; token.hasMoreTokens(); i++) {
			values[i] = token.nextToken();
		}
		
		return values;
	}
}

../jforum2-code/src/main/java/net/jforum/entities/ForumModerationInfo.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Jan 30, 2005 11:54:42 AM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.entities;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public class ForumModerationInfo
{
	private final int forumId;
	private final String forumName;
	private final int postsToModerate;
	
	public ForumModerationInfo(final String forumName, final int forumId, 
			final int postsToModerate)
	{
		this.forumName = forumName;
		this.forumId = forumId;
		this.postsToModerate = postsToModerate;
	}
	
	/**
	 * @return Returns the forumId.
	 */
	public int getForumId()
	{
		return this.forumId;
	}

	/**
	 * @return Returns the forumName.
	 */
	public String getForumName()
	{
		return this.forumName;
	}
	
	/**
	 * @return Returns the postsToModerate.
	 */
	public int getPostsToModerate()
	{
		return this.postsToModerate;
	}
}

../jforum2-code/src/main/java/net/jforum/entities/AttachmentExtension.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 *
 * Created on Jan 17, 2005 8:21:32 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.entities;

import java.util.Locale;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public class AttachmentExtension
{	
	private int id;
	private int extensionGroupId;
	
	private boolean allow;
	private boolean unknown;
	
	private String comment;
	private String extension;
	private String uploadIcon;
	
	/**
	 * @return Returns the allow.
	 */
	public boolean isAllow()
	{
		return this.allow;
	}
	
	/**
	 * @param allow The allow to set.
	 */
	public void setAllow(final boolean allow)
	{
		this.allow = allow;
	}
	
	/**
	 * @return Returns the comment.
	 */
	public String getComment()
	{
		return this.comment;
	}
	
	/**
	 * @param comment The comment to set.
	 */
	public void setComment(final String comment)
	{
		this.comment = comment;
	}
	
	/**
	 * @return Returns the extension.
	 */
	public String getExtension()
	{
		return this.extension;
	}
	
	/**
	 * @param extension The extension to set.
	 */
	public void setExtension(final String extension)
	{
		if (extension != null) {
			this.extension = extension.toLowerCase(Locale.US);
		}
	}
	
	/**
	 * @return Returns the extensionGroupId.
	 */
	public int getExtensionGroupId()
	{
		return this.extensionGroupId;
	}
	
	/**
	 * @param extensionGroupId The extensionGroupId to set.
	 */
	public void setExtensionGroupId(final int extensionGroupId)
	{
		this.extensionGroupId = extensionGroupId;
	}
	
	/**
	 * @return Returns the id.
	 */
	public int getId()
	{
		return this.id;
	}
	/**
	 * @param id The id to set.
	 */
	public void setId(final int id)
	{
		this.id = id;
	}
	
	/**
	 * @return Returns the upload_icon.
	 */
	public String getUploadIcon()
	{
		return this.uploadIcon;
	}
	
	/**
	 * @param uploadIcon The upload_icon to set.
	 */
	public void setUploadIcon(final String uploadIcon)
	{
		this.uploadIcon = uploadIcon;
	}
	
	/**
	 * @return Returns the unknown.
	 */
	public boolean isUnknown()
	{
		return this.unknown;
	}
	
	/**
	 * @param unknown The unknown to set.
	 */
	public void setUnknown(final boolean unknown)
	{
		this.unknown = unknown;
	}
}

../jforum2-code/src/main/java/net/jforum/entities/Category.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Feb 17, 2003 / 10:47:29 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.entities;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import java.util.concurrent.ConcurrentHashMap;

import org.apache.log4j.Logger;

import net.jforum.SessionFacade;
import net.jforum.exceptions.ForumOrderChangedException;
import net.jforum.repository.SecurityRepository;
import net.jforum.security.PermissionControl;
import net.jforum.security.SecurityConstants;
import net.jforum.util.ForumOrderComparator;

/**
 * Represents a category in the System.
 * Each category holds a reference to all its forums, which 
 * can be retrieved by calling either @link #getForums(), 
 * @link #getForum(int) and related methods. 
 * <br />
 * This class also controls the access to its forums, so a call
 * to @link #getForums() will only return the forums accessible
 * to the user who make the call tho the method. 
 * 
 * @author Rafael Steil
 */
public class Category implements Serializable, Comparable<Category>
{
	private static final Logger LOGGER = Logger.getLogger(Category.class);
	private static final long serialVersionUID = -4894230707020588049L;
	private int id;
	private int order;
	private boolean moderated;
	private String name;
	private Map<Integer, Forum> forumsIdMap = new ConcurrentHashMap<>();
	private Set<Forum> forums = new TreeSet<>(new ForumOrderComparator());

	public Category() {}

	public Category(int id) {
		this.id = id;
	}

	public Category(String name, int id) {
		this.name = name;
		this.id = id;
	}

	public Category(Category category) {
		this.name = category.getName();
		this.id = category.getId();
		this.order = category.getOrder();
		this.moderated = category.isModerated();

		for (Iterator<Forum> iter = category.getForums().iterator(); iter.hasNext(); ) {
			Forum forum = new Forum(iter.next());
			this.forumsIdMap.put(Integer.valueOf(forum.getId()), forum);
			this.forums.add(forum);
		}
	}

	public void setModerated(boolean status)
	{
		this.moderated = status;
	}

	public boolean isModerated() 
	{
		return this.moderated;
	}

	/**
	 * @return int
	 */
	public int getId() {
		return this.id;
	}

	/**
	 * @return String
	 */
	public String getName() {
		return this.name;
	}

	/**
	 * @return int
	 */
	public int getOrder() {
		return this.order;
	}

	/**
	 * Sets the id.
	 * @param id The id to set
	 */
	public void setId(int id) {
		this.id = id;
	}

	/**
	 * Sets the name.
	 * @param name The name to set
	 */
	public void setName(String name) {
		this.name = name;
	}

	/**
	 * Sets the order.
	 * @param order The order to set
	 */
	public void setOrder(int order) {
		this.order = order;
	}

	/**
	 * Adds a forum to this category
	 * 
	 * @param forum Forum
	 */
	public void addForum(Forum forum) {
		this.forumsIdMap.put(Integer.valueOf(forum.getId()), forum);
		this.forums.add(forum);
	}

	/**
	 * Reloads a forum.
	 * The forum should already be in the cache and <b>SHOULD NOT</b>
	 * have its order changed. If the forum's order was changed, then you
	 * <b>MUST CALL</b> @link #changeForumOrder(Forum) <b>BEFORE</b> calling this method.
	 * 
	 * @param forum The forum to reload its information
	 * @see #changeForumOrder(Forum)
	 */
	public void reloadForum(Forum forum) {
		Forum currentForum = this.getForum(forum.getId());

		if (forum.getOrder() != currentForum.getOrder()) {
			throw new ForumOrderChangedException("Forum #" + forum.getId() + " cannot be reloaded, since its "
					+ "display order was changed. You must call Category#changeForumOrder(Forum) first");
		}

		Set<Forum> tmpSet = new TreeSet<>(new ForumOrderComparator());
		tmpSet.addAll(this.forums);
		tmpSet.remove(currentForum);
		tmpSet.add(forum);
		this.forumsIdMap.put(Integer.valueOf(forum.getId()), forum);

		this.forums = tmpSet;
	}

	/**
	 * Changes a forum's display order. 
	 * This method changes the position of the forum in the current
	 * display order of the forum instance passed as argument, if applicable.
	 * 
	 * @param forum The forum to change
	 */
	public void changeForumOrder(Forum forum)
	{
		Forum current = this.getForum(forum.getId());
		Forum currentAtOrder = this.findByOrder(forum.getOrder());

		Set<Forum> tmpSet = new TreeSet<>(new ForumOrderComparator());
		tmpSet.addAll(this.forums);

		// Remove the forum in the current order
		// where the changed forum will need to be
		if (currentAtOrder != null) {
			tmpSet.remove(currentAtOrder);
		}

		tmpSet.add(forum);
		this.forumsIdMap.put(Integer.valueOf(forum.getId()), forum);

		// Remove the forum in the position occupied
		// by the changed forum before its modification,
		// so then we can add the another forum into its position
		if (currentAtOrder != null) {
			tmpSet.remove(current);
			currentAtOrder.setOrder(current.getOrder());
			tmpSet.add(currentAtOrder);

			this.forumsIdMap.put(Integer.valueOf(currentAtOrder.getId()), currentAtOrder);
		}

		this.forums = tmpSet;
	}

	private Forum findByOrder(int order)
	{
		for (Iterator<Forum> iter = this.forums.iterator(); iter.hasNext(); ) {
			Forum forum = iter.next();
			if (forum.getOrder() == order) {
				return forum;
			}
		}

		return null;
	}

	/**
	 * Removes a forum from the list.
	 * @param forumId int
	 */
	public void removeForum(int forumId) {
		this.forums.remove(this.getForum(forumId));
		this.forumsIdMap.remove(Integer.valueOf(forumId));
	}

	/**
	 * Gets a forum.
	 * 
	 * @param userId The user's id who is trying to see the forum
	 * @param forumId The id of the forum to get
	 * @return The <code>Forum</code> instance if found, or <code>null</code> otherwise.
	 * @see #getForum(int)
	 */
	public Forum getForum(int userId, int forumId)
	{
		PermissionControl pc = SecurityRepository.get(userId);
		if (pc.canAccess(SecurityConstants.PERM_FORUM, Integer.toString(forumId))) {
			return this.forumsIdMap.get(Integer.valueOf(forumId));
		}
		LOGGER.debug("User with userId " + userId + " failed to access forum with forumId " + forumId);
		return null;
	}

	/**
	 * Gets a forum.
	 * 
	 * @param forumId The forum's id 
	 * @return The requested forum, if found, or <code>null</code> if
	 * the forum does not exists or access to it is denied.
	 * @see #getForum(int, int)
	 */
	public Forum getForum(int forumId)
	{
		return this.getForum(SessionFacade.getUserSession().getUserId(), forumId);
	}

	/**
	 * Get all forums from this category.
	 * 
	 * @return All forums, regardless it is accessible to the user or not.
	 */
	public Collection<Forum> getForums()
	{
		if (this.forums.size() == 0) {
			return this.forums;
		}

		return this.getForums(SessionFacade.getUserSession().getUserId());
	}

	/**
	 * Gets all forums from this category.
	 * 
	 * @return The forums available to the user who make the call
	 * @see #getForums()
     * @param userId int
	 */
	public Collection<Forum> getForums(int userId) 
	{
		PermissionControl pc = SecurityRepository.get(userId);
		List<Forum> forums = new ArrayList<>();

		for (Iterator<Forum> iter = this.forums.iterator(); iter.hasNext(); ) {
			Forum forum = iter.next();
			if (pc.canAccess(SecurityConstants.PERM_FORUM, Integer.toString(forum.getId()))) {
				forums.add(forum);
			}
		}

		return forums;
	}

	@Override public int hashCode() 
	{
		return this.id;
	}

	@Override public boolean equals(Object o) 
	{
		return ((o instanceof Category) && (((Category)o).getId() == this.id));
	}

	@Override public String toString() {
		return "[" + this.name + ", id=" + this.id + ", order=" + this.order + "]"; 
	}

	@Override public int compareTo(Category o) {
		return this.getOrder() - o.getOrder();
	}
}

../jforum2-code/src/main/java/net/jforum/entities/PollChanges.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 *
 * 
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.entities;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import net.jforum.view.forum.common.PostCommon;

/**
 * A helper class that holds changes made to the pool.
 * 
 * @author Rafael Steil
 */
public class PollChanges {
	private List<PollOption> deletedOptions = new ArrayList<>();
	private List<PollOption> newOptions = new ArrayList<>();
	private List<PollOption> changedOptions = new ArrayList<>();
	
	private boolean hasChanges;
	
	private Poll first;
	private Poll second;
	
	/**
	 * @param first The "complete", most recent poll version. Usually the one
	 * that's in the database. 
	 * @param second The poll to compare with. It usually will be a poll filled
	 * by {@link PostCommon#fillPostFromRequest()}, so matches will be done againts the 
	 * existing poll and the data comming from the server. 
	 */
	public PollChanges(Poll first, Poll second) {
		this.first = first;
		this.second = second;
	}
	
	public void addChangedOption(PollOption option) {
		this.changedOptions.add(option);
		this.hasChanges = true;
	}
	
	public List<PollOption> getChangedOptions() {
		return this.changedOptions;
	}
	
	public void addDeletedOption(PollOption option) {
		this.deletedOptions.add(option);
		this.hasChanges = true;
	}

	public List<PollOption> getDeletedOptions() {
		return this.deletedOptions;
	}
	
	public void addNewOption(PollOption option) {
		this.newOptions.add(option);
		this.hasChanges = true;
	}

	public List<PollOption> getNewOptions() {
		return this.newOptions;
	}
	
	public boolean hasChanges() {
		this.searchForChanges();
		return this.hasChanges;
	}
	
	private void searchForChanges() {
		if (first == null || second == null) {
			return;
		}
		
		boolean isSame = first.getLabel().equals(second.getLabel());
		isSame &= first.getLength() == second.getLength();
		
		this.hasChanges = !isSame;
		
		List<PollOption> firstOptions = first.getOptions();
		List<PollOption> secondOptions = second.getOptions();
		
		// Search for changes in existing options
		for (Iterator<PollOption> iter = firstOptions.iterator(); iter.hasNext(); ) {
			PollOption option = iter.next();
			PollOption changed = this.findOptionById(option.getId(), secondOptions);
			
			if (changed != null && !option.getText().equals(changed.getText())) {
				this.addChangedOption(changed);
			}
			else if (changed == null) {
				this.addDeletedOption(option);
			}
		}

		// Check if the incoming poll added options
		for (Iterator<PollOption> iter = secondOptions.iterator(); iter.hasNext(); ) {
			PollOption option = iter.next();
			
			if (this.findOptionById(option.getId(), firstOptions) == null) {
				this.addNewOption(option);
			}
		}
	}
	
	private PollOption findOptionById(int id, List<PollOption> options) {
		for (Iterator<PollOption> iter = options.iterator(); iter.hasNext(); ) {
			PollOption o = iter.next();
			
			if (o.getId() == id) {
				return o;
			}
		}
		
		return null;
	}
}

../jforum2-code/src/main/java/net/jforum/entities/QuotaLimit.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Jan 17, 2005 4:22:27 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.entities;

/**
 * @author Rafael Steil
 */
public class QuotaLimit
{
	public static final int KB = 1;
	public static final int MB = 2;
	
	private int id;
	private String description;
	private int size;
	private int type;
	
	/**
	 * Checks if the size passed as argument
	 * is greater than the quota's limit.
	 * 
	 * @param size The size to check
	 * @return <code>true</code> if the size is greater than
	 * quota's limit. 
	 */
	public boolean exceedsQuota(final long size)
	{
		if (this.type == QuotaLimit.KB) {
			return (size > this.size * 1024L);
		}
		
		return (size > this.size * 1024L * 1024);
	}
	
	public int getSizeInBytes()
	{
		if (this.type == QuotaLimit.KB) {
			return (this.size * 1024);
		}
		
		return (this.size * 1024 * 1024);
	}
	
	/**
	 * @return Returns the description.
	 */
	public String getDescription()
	{
		return this.description;
	}
	
	/**
	 * @param description The description to set.
	 */
	public void setDescription(final String description)
	{
		this.description = description;
	}
	
	/**
	 * @return Returns the id.
	 */
	public int getId()
	{
		return this.id;
	}
	
	/**
	 * @param id The id to set.
	 */
	public void setId(final int id)
	{
		this.id = id;
	}
	
	/**
	 * @return Returns the size.
	 */
	public int getSize()
	{
		return this.size;
	}
	
	/**
	 * @param size The size to set.
	 */
	public void setSize(final int size)
	{
		this.size = size;
	}
	
	/**
	 * @return Returns the type.
	 */
	public int getType()
	{
		return this.type;
	}
	
	/**
	 * @param type The type to set.
	 */
	public void setType(final int type)
	{
		this.type = type;
	}
}

../jforum2-code/src/main/java/net/jforum/entities/Poll.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 *
 * Created on 21/05/2004 - 14:22:16
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.entities;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

/**
 * @author David Almilli
 */
public class Poll implements Serializable {

	private static final long serialVersionUID = 2122684964469674035L;
	private int id;
	private int topicId;
	private int length;
	private String label;
	private Date startTime;
	private transient PollChanges pollChanges;
	private List<PollOption> options = new ArrayList<>();

	public int getId() {
		return id;
	}
	public void setId(int id) {
		this.id = id;
	}
	public int getTopicId() {
		return topicId;
	}
	public void setTopicId(int topicId) {
		this.topicId = topicId;
	}
	public int getLength() {
		return length;
	}
	public void setLength(int length) {
		this.length = length;
	}
	public String getLabel() {
		return label;
	}
	public void setLabel(String label) {
		this.label = label;
	}
	public Date getStartTime() {
		return startTime;
	}
	public void setStartTime(Date startTime) {
		this.startTime = startTime;
	}
	public void addOption(PollOption option) {
		options.add(option);
		option.setPoll(this);
	}
	public void removeOption(PollOption option) {
		if (options.remove(option)) {
			option.setPoll(null);
		}
	}
	public List<PollOption> getOptions() {
		return options;
	}
	
	public void setChanges(PollChanges changes) {
		this.pollChanges = changes;
	}
	
	public PollChanges getChanges() {
		return this.pollChanges;
	}
	
	public int getTotalVotes() {
		int votes = 0;
		Iterator<PollOption> iter = options.iterator();
		while (iter.hasNext()) {
			PollOption option = iter.next();
			votes += option.getVoteCount();
		}
		return votes;
	}
	
	public boolean isOpen() {
		if (length == 0) {
			return true;
		}
		Calendar endTime = Calendar.getInstance();
		endTime.setTime(startTime);
		endTime.add(Calendar.DAY_OF_YEAR, length);
		return System.currentTimeMillis() < endTime.getTimeInMillis();
	}
}

../jforum2-code/src/main/java/net/jforum/entities/Post.java
/*
 * Copyright (c)Rafael Steil
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Feb 23, 2003 / 1:02:01 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.entities;

import java.io.Serializable;
import java.util.Date;

import net.jforum.view.forum.common.ViewCommon;

/**
 * Represents every message post in the system.
 * 
 * @author Rafael Steil
 */
public class Post implements Serializable 
{
	private static final long serialVersionUID = -6067049478602005132L;
	private int id;
	private int topicId;
	private int forumId;
	private int userId;
	private Date time;
	private String text;
	private String subject;
	private String postUsername;
	private boolean bbCodeEnabled = true;
	private boolean htmlEnabled = true;
	private boolean smiliesEnabled = true;
	private boolean signatureEnabled = true;
	private Date editTime;
	private int editCount;
	private String userIp;
	private boolean canEdit;
	private KarmaStatus karma;
	private boolean hasAttachments;
	private boolean moderate;
	private int topicType;

	public Post() { }
	
	public Post(int postId)
	{
		this.id = postId;
	}
	
	/**
	 * Copy constructor
	 * 
	 * @param post The Post to make a copy from
	 */
	public Post(Post post)
	{
		this.bbCodeEnabled = post.isBbCodeEnabled();
		this.canEdit = post.isCanEdit();
		this.editCount = post.getEditCount();
		this.editTime = post.getEditTime();
		this.forumId = post.getForumId();
		this.htmlEnabled = post.isHtmlEnabled();
		this.id = post.getId();
		this.postUsername = post.getPostUsername();
		this.signatureEnabled = post.isSignatureEnabled();
		this.smiliesEnabled = post.isSmiliesEnabled();
		this.subject = post.getSubject();
		this.text = post.getText();
		this.time = post.getTime();
		this.topicId = post.getTopicId();
		this.userId = post.getUserId();
		this.userIp = post.getUserIp();
		this.karma = (new KarmaStatus(post.getKarma()));
		this.moderate = post.isModerationNeeded();
		this.hasAttachments = post.hasAttachments();
	}
	
	public void setModerate(boolean status)
	{
		this.moderate = status;
	}
	
	public boolean isModerate()
	{
		return this.isModerationNeeded();
	}
	
	public boolean isModerationNeeded()
	{
		return this.moderate;
	}
	
	public KarmaStatus getKarma()
	{
		return this.karma;
	}
	
	public void setKarma(KarmaStatus karma)
	{
		this.karma = karma;
	}
	
	/**
	 * Checks if the BB code is enabled
	 * 
	 * @return boolean value representing the result
	 */
	public boolean isBbCodeEnabled() {
		return this.bbCodeEnabled;
	}

	/**
	 * Gets the total number of times the post was edited
	 * 
	 * @return int value with the total number of times the post was edited
	 */
	public int getEditCount() {
		return this.editCount;
	}

	/**
	 * Gets the edit time of the post
	 * 
	 * @return long value representing the time
	 */
	public Date getEditTime() {
		return this.editTime;
	}

	/**
	* Gets formated formatted post edit time
	* 
	* @return String value representing the time
	*/
	public String getFormattedEditTime() {
		String result = "";
		if (this.editTime != null) {
			result = ViewCommon.formatDate(this.editTime);
		}
		return result;
	}

	/**
	 * Gets the forum's id the post is associated
	 * 
	 * @return int value with the id of the forum
	 */
	public int getForumId() {
		return this.forumId;
	}

	/**
	 * Checks if HTML is enabled in the topic
	 * 
	 * @return boolean value representing the result
	 */
	public boolean isHtmlEnabled() {
		return this.htmlEnabled;
	}

	/**
	 * Gets the ID of the post
	 * 
	 * @return int value with the ID
	 */
	public int getId() {
		return this.id;
	}

	/**
	 * Gets the username of the user ( an anonymous user ) that have posted the message
	 * 
	 * @return String with the username
	 */
	public String getPostUsername() {
		return this.postUsername;
	}

	/**
	 * Checks if signature is allowed in the message
	 * 
	 * @return boolean representing the result
	 */
	public boolean isSignatureEnabled() {
		return this.signatureEnabled;
	}

	/**
	 * Checks if smart Smilies are enabled :)
	 * 
	 * @return boolean representing the result
	 */
	public boolean isSmiliesEnabled() {
		return this.smiliesEnabled;
	}

	/**
	 * Gets the time, represented as long, of the message post
	 * 
	 * @return long representing the post time
	 */
	public Date getTime() {
		return this.time;
	}

	/**
	* Gets formated formatted post time
	* 
	* @return String value representing the time
	*/
	public String getFormattedTime() {
		String result = "";
		if (this.time != null) {
			result = ViewCommon.formatDate(this.time);
		}
		return result;
	}

	/**
	 * Gets the id of the topic this message is associated
	 * 
	 * @return int value with the topic id
	 */
	public int getTopicId() {
		return this.topicId;
	}

	/**
	 * Gets the ID of the user that have posted the message
	 * 
	 * @return int value with the user id
	 */
	public int getUserId() {
		return this.userId;
	}

	public int getTopicType() {
		return this.topicType;
	}

	/**
	 * Gets the IP of the user who have posted the message
	 * 
	 * @return String value with the user IP
	 */
	public String getUserIp() {
		return this.userIp;
	}
	/**
	 * Sets the status for BB code in the message
	 * 
	 * @param bbCodeEnabled <code>true</code> or <code>false</code>, depending the intention
	 */
	public void setBbCodeEnabled(boolean bbCodeEnabled) {
		this.bbCodeEnabled = bbCodeEnabled;
	}

	/**
	 * Sets the count times the message was edited
	 * 
	 * @param editCount The count time
	 */
	public void setEditCount(int editCount) {
		this.editCount = editCount;
	}

	/**
	 * Sets the edit time the message was last edited
	 * 
	 * @param editTime long value representing the time
	 */
	public void setEditTime(Date editTime) {
		this.editTime = editTime;
	}

	/**
	 * Sets the id of the forum this message belongs to
	 * 
	 * @param forumId The forum's id
	 */
	public void setForumId(int forumId) {
		this.forumId = forumId;
	}

	/**
	 * Sets the status for HTML code in the message
	 * 
	 * @param htmlEnabled <code>true</code> or <code>false</code>, depending the intention
	 */
	public void setHtmlEnabled(boolean htmlEnabled) {
		this.htmlEnabled = htmlEnabled;
	}

	/**
	 * Sets the id for the message
	 * 
	 * @param id The id
	 */
	public void setId(int id) {
		this.id = id;
	}

	/**
	 * Sets the username of the anonymous user that have sent the message
	 * 
	 * @param postUsername String with the username
	 */
	public void setPostUsername(String postUsername) {
		this.postUsername = postUsername;
	}

	/**
	 * Sets the status for signatures in the message
	 * 
	 * @param signatureEnabled <code>true</code> or <code>false</code>, depending the intention
	 */
	public void setSignatureEnabled(boolean signatureEnabled) {
		this.signatureEnabled = signatureEnabled;
	}

	/**
	 * Sets the status for smilies in the message
	 * 
	 * @param smiliesEnabled <code>true</code> or <code>false</code>, depending the intention
	 */
	public void setSmiliesEnabled(boolean smiliesEnabled) {
		this.smiliesEnabled = smiliesEnabled;
	}

	/**
	 * Sets the time the message was sent
	 * 
	 * @param time The time 
	 */
	public void setTime(Date time) {
		this.time = time;
	}

	/**
	 * Sets the id of the topic that the message belongs to
	 * 
	 * @param topicId The id of the topic
	 */
	public void setTopicId(int topicId) {
		this.topicId = topicId;
	}

	/**
	 * Sets the id of the user that sent the message
	 * 
	 * @param userId The user Id
	 */
	public void setUserId(int userId) {
		this.userId = userId;
	}

	public void setTopicType(int topicType) {
		this.topicType = topicType;
	}
	
	/**
	 * Gets the message of the post
	 * 
	 * @return String containing the text
	 */
	public String getText() {
		return this.text;
	}

    /**
     * Post processing for HTML differences in mobile view. In particular, if
     * the post starts/ends with a quote, the mobile view needs a space to display the background.
     *
     * @return processed HTML string
     */
    public String getMobileText() {
        String result = getText();
        result = result.replaceFirst("^\\s*<blockquote", "&nbsp;<blockquote");
        result = result.replaceFirst("</blockquote>$", "</blockquote>&nbsp;");
        return result;
    }

	/**
	 * Sets the text of the post
	 * 
	 * @param text The text to set
	 */
	public void setText(String text) {
		this.text = text;
	}
	
	/**
	 * Gets the subject of the post 
	 * 
	 * @return String with the subject
	 */
	public String getSubject() {
		return this.subject;
	}

	/**
	 * Sets the subject for the message
	 * 
	 * @param subject The subject to set
	 */
	public void setSubject(String subject) {
		this.subject = subject;
	}

	/**
	 * Sets the IP of the user
	 * 
	 * @param userIp The IP address of the user
	 */
	public void setUserIp(String userIp) {
		this.userIp = userIp;
	}
	public boolean isCanEdit() {
		return this.canEdit;
	}
	
	public void setCanEdit(boolean canEdit) {
		this.canEdit = canEdit;
	}
	
	/**
	 * @return Returns the hasAttachments.
	 */
	public boolean hasAttachments()
	{
		return this.hasAttachments;
	}
	
	/**
	 * @param hasAttachments The hasAttachments to set.
	 */
	public void hasAttachments(boolean hasAttachments)
	{
		this.hasAttachments = hasAttachments;
	}
	
	/**
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override public boolean equals(Object o)
	{
		if (!(o instanceof Post)) {
			return false;
		}
		
		return ((Post)o).getId() == this.id;
	}
	
	/**
	 * @see java.lang.Object#hashCode()
	 */
	@Override public int hashCode()
	{
		return this.id;
	}
}

../jforum2-code/src/main/java/net/jforum/entities/Forum.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Feb 23, 2003 / 12:25:04 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.entities;

import java.io.Serializable;
import java.util.List;

import net.jforum.repository.ForumRepository;

/**
 * Represents a specific forum.
 * 
 * @author Rafael Steil
 * @version $Id$
 */
public class Forum implements Serializable
{
	private static final long serialVersionUID = -7821349315557704675L;
	private int id;
	private int idCategories;
	private String name;
	private String description;
	private int order;
	private int totalTopics;
	private int totalPosts;
	private int lastPostId;
	private boolean moderated;
	private boolean unread;
	private LastPostInfo lpi;

	public Forum() { 
		// Empty Constructor
	}
	
	public Forum(final int forumId) {
		this.id = forumId;
	}
	
	public Forum(final Forum forum)
	{
		this.description = forum.getDescription();
		this.id = forum.getId();
		this.idCategories = forum.getCategoryId();
		this.lastPostId = forum.getLastPostId();
		this.moderated = forum.isModerated();
		this.name = forum.getName();
		this.order = forum.getOrder();
		this.totalPosts = forum.getTotalPosts();
		this.totalTopics = forum.getTotalTopics();
		this.unread = forum.isUnread();
		this.lpi = forum.getLastPostInfo();
	}
	
	public void setLastPostInfo(final LastPostInfo lpi) {
		this.lpi = lpi;
	}
	
	public LastPostInfo getLastPostInfo() {
		return this.lpi;
	}
	
	public List<ModeratorInfo> getModeratorList() 
	{
		return ForumRepository.getModeratorList(this.id);
	}
	
	/**
	 * Gets the forum's description
	 * 
	 * @return String with the description
	 */
	public String getDescription() {
		return this.description;
	}

	/**
	 * Gets the forum's ID
	 * 
	 * @return int value representing the ID
	 */
	public int getId() {
		return this.id;
	}

	/**
	 * Gets the category which the forum belongs to
	 * 
	 * @return int value representing the ID of the category 
	 */
	public int getCategoryId() {
		return this.idCategories;
	}

	/**
	 * Gets the ID of the last post
	 * 
	 * @return int value representing the ID of the post
	 */
	public int getLastPostId() {
		return this.lastPostId;
	}

	/**
	 * Checks if is a moderated forum
	 * 
	 * @return boolean value. <code>true</code> if the forum is moderated, <code>false</code> if not.
	 */
	public boolean isModerated() {
		return this.moderated;
	}

	/**
	 * Gets the name of the forum
	 * 
	 * @return String with the name
	 */
	public String getName() {
		return this.name;
	}

	/**
	 * Gets the order
	 * 
	 * @return int value representing the order of the forum
	 */
	public int getOrder() {
		return this.order;
	}

	/**
	 * Gets the total number of topics posted in the forum
	 * 
	 * @return int value with the total number of the topics
	 */
	public int getTotalTopics() {
		return this.totalTopics;
	}
	
	public boolean isUnread() {
		return this.unread;
	}

	/**
	 * Sets the description.
	 * 
	 * @param description The description to set
	 */
	public void setDescription(final String description) {
		this.description = description;
	}

	/**
	 * Sets the id.
	 * 
	 * @param id The id to set
	 */
	public void setId(final int id) {
		this.id = id;
	}

	/**
	 * Sets the category id
	 * 
	 * @param idCategories The ID of the category  to set to the forum
	 */
	public void setIdCategories(final int idCategories) {
		this.idCategories = idCategories;
	}

	/**
	 * Sets the ID of the last post
	 * 
	 * @param lastPostId The post id
	 */
	public void setLastPostId(final int lastPostId) {
		this.lastPostId = lastPostId;
	}

	/**
	 * Sets the moderated flag to the forum
	 * 
	 * @param moderated <code>true</code> or <code>false</code>
	 */
	public void setModerated(final boolean moderated) {
		this.moderated = moderated;
	}

	/**
	 * Sets the name of the forum
	 * 
	 * @param name The name to set
	 */
	public void setName(final String name) {
		this.name = name;
	}

	/**
	 * Sets the order.
	 * 
	 * @param order The order to set
	 */
	public void setOrder(final int order) {
		this.order = order;
	}
	
	public void setUnread(final boolean status) {
		this.unread = status;
	}

	/**
	 * Sets the total number of topics
	 * 
	 * @param totalTopics int value with the total number of topics
	 */
	public void setTotalTopics(final int totalTopics) {
		this.totalTopics = totalTopics;
	}
	
	public int getTotalPosts() {
		return this.totalPosts;
	}
	
	public void setTotalPosts(final int totalPosts) {
		this.totalPosts = totalPosts;
	}
	
	/** 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override public boolean equals(final Object obj) 
	{
		return ((obj instanceof Forum) && (((Forum)obj).getId() == this.id));
	}

	/** 
	 * @see java.lang.Object#hashCode()
	 */
	@Override public int hashCode() 
	{
		return this.id;
	}
	
	/** 
	 * @see java.lang.Object#toString()
	 */
	@Override public String toString() {
		return "[" + this.name + ", id=" + this.id + ", order=" + this.order + "]";
	}
}

../jforum2-code/src/main/java/net/jforum/entities/AttachmentInfo.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Jan 18, 2005 2:59:54 PM
  * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.entities;

import java.util.Date;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public class AttachmentInfo
{
	private int id;
	private int attachId;
	private int downloadCount;
	
	private String physicalFilename;
	private String realFilename;
	private String comment;
	private String mimetype;
	
	private long uploadTimeInMillis;
	private long filesize;
	
	private boolean hasThumb;

	private Date uploadTime;
	private AttachmentExtension extension;
	
	/**
	 * @return Returns the attachId.
	 */
	public int getAttachId()
	{
		return this.attachId;
	}
	
	/**
	 * @param attachId The attachId to set.
	 */
	public void setAttachId(final int attachId)
	{
		this.attachId = attachId;
	}
	
	/**
	 * @return Returns the comment.
	 */
	public String getComment()
	{
		return this.comment;
	}
	
	/**
	 * @param comment The comment to set.
	 */
	public void setComment(final String comment)
	{
		this.comment = comment;
	}
	
	/**
	 * @return Returns the downloadCount.
	 */
	public int getDownloadCount()
	{
		return this.downloadCount;
	}
	
	/**
	 * @param downloadCount The downloadCount to set.
	 */
	public void setDownloadCount(final int downloadCount)
	{
		this.downloadCount = downloadCount;
	}
	
	/**
	 * @return Returns the extension.
	 */
	public AttachmentExtension getExtension()
	{
		return this.extension;
	}
	
	/**
	 * @param extension The extension to set.
	 */
	public void setExtension(final AttachmentExtension extension)
	{
		this.extension = extension;
	}
	
	/**
	 * @return Returns the filesize.
	 */
	public long getFilesize()
	{
		return this.filesize;
	}
	
	/**
	 * @param filesize The filesize to set.
	 */
	public void setFilesize(final long filesize)
	{
		this.filesize = filesize;
	}
	
	/**
	 * @return Returns the hasThumb.
	 */
	public boolean isHasThumb()
	{
		return this.hasThumb;
	}
	
	/**
	 * @param hasThumb The hasThumb to set.
	 */
	public void setHasThumb(final boolean hasThumb)
	{
		this.hasThumb = hasThumb;
	}
	
	/**
	 * @return Returns the id.
	 */
	public int getId()
	{
		return this.id;
	}
	
	/**
	 * @param id The id to set.
	 */
	public void setId(final int id)
	{
		this.id = id;
	}
	
	/**
	 * @return Returns the mimetype.
	 */
	public String getMimetype()
	{
		return this.mimetype;
	}
	
	/**
	 * @param mimetype The mimetype to set.
	 */
	public void setMimetype(final String mimetype)
	{
		this.mimetype = mimetype;
	}
	
	/**
	 * @return Returns the physicalFilename.
	 */
	public String getPhysicalFilename()
	{
		return this.physicalFilename;
	}
	
	/**
	 * @param physicalFilename The physicalFilename to set.
	 */
	public void setPhysicalFilename(final String physicalFilename)
	{
		this.physicalFilename = physicalFilename;
	}
	
	/**
	 * @return Returns the realFilename.
	 */
	public String getRealFilename()
	{
		return this.realFilename;
	}
	
	/**
	 * @param realFilename The realFilename to set.
	 */
	public void setRealFilename(final String realFilename)
	{
		this.realFilename = realFilename;
	}
	
	/**
	 * @return Returns the uploadTime.
	 */
	public Date getUploadTime()
	{
		return this.uploadTime;
	}
	
	/**
	 * @param uploadTime The uploadTime to set.
	 */
	public void setUploadTime(final Date uploadTime)
	{
		this.uploadTime = uploadTime;
	}
	
	/**
	 * @return Returns the uploadTimeInMillis.
	 */
	public long getUploadTimeInMillis()
	{
		return this.uploadTimeInMillis;
	}
	
	/**
	 * @param uploadTimeInMillis The uploadTimeInMillis to set.
	 */
	public void setUploadTimeInMillis(final long uploadTimeInMillis)
	{
		this.uploadTimeInMillis = uploadTimeInMillis;
	}
}

../jforum2-code/src/main/java/net/jforum/entities/TopDownloadInfo.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Sept 15, 2010 12:57:13 AM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.entities;

import java.io.Serializable;

/**
 * @author Andowson
 * @version $Id$
 */
public class TopDownloadInfo implements Serializable
{
	private static final long serialVersionUID = 455195420067276709L;
	private int forumId;
	private String forumName;
	private int topicId;
	private String topicTitle;
	private int attachId;
	private int downloadCount;
	private long filesize;
	private String realFilename;
	/**
	 * @return the forumId
	 */
	public int getForumId() {
		return forumId;
	}
	/**
	 * @param forumId the forumId to set
	 */
	public void setForumId(final int forumId) {
		this.forumId = forumId;
	}
	/**
	 * @return the forumName
	 */
	public String getForumName() {
		return forumName;
	}
	/**
	 * @param forumName the forumName to set
	 */
	public void setForumName(final String forumName) {
		this.forumName = forumName;
	}
	/**
	 * @return the topicId
	 */
	public int getTopicId() {
		return topicId;
	}
	/**
	 * @param topicId the topicId to set
	 */
	public void setTopicId(final int topicId) {
		this.topicId = topicId;
	}
	/**
	 * @return the topicTitle
	 */
	public String getTopicTitle() {
		return topicTitle;
	}
	/**
	 * @param topicTitle the topicTitle to set
	 */
	public void setTopicTitle(final String topicTitle) {
		this.topicTitle = topicTitle;
	}
	/**
	 * @return the attachId
	 */
	public int getAttachId() {
		return attachId;
	}
	/**
	 * @param attachId the attachId to set
	 */
	public void setAttachId(final int attachId) {
		this.attachId = attachId;
	}
	/**
	 * @return the downloadCount
	 */
	public int getDownloadCount() {
		return downloadCount;
	}
	/**
	 * @param downloadCount the downloadCount to set
	 */
	public void setDownloadCount(final int downloadCount) {
		this.downloadCount = downloadCount;
	}
	/**
	 * @return the filesize
	 */
	public long getFilesize() {
		return filesize;
	}
	/**
	 * @param filesize the filesize to set
	 */
	public void setFilesize(final long filesize) {
		this.filesize = filesize;
	}
	/**
	 * @return the realFilename
	 */
	public String getRealFilename() {
		return realFilename;
	}
	/**
	 * @param realFilename the realFilename to set
	 */
	public void setRealFilename(final String realFilename) {
		this.realFilename = realFilename;
	}
}

../jforum2-code/src/main/java/net/jforum/entities/BookmarkType.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Jan 16, 2005 12:24:05 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.entities;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public final class BookmarkType
{
	public static final int FORUM = 1;
	public static final int TOPIC = 2;
	public static final int USER = 3;
	
	private BookmarkType() {}
}

../jforum2-code/src/main/java/net/jforum/entities/KarmaStatus.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Jan 11, 2005 11:05:57 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.entities;

import java.io.Serializable;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public class KarmaStatus implements Serializable
{
	private static final long serialVersionUID = 1264900966219953310L;

	private int id;
	
	/**
	 * Karma average. Total points received / number of votes.
	 */
	private double karmaPoints;
	
	/**
	 * Sum of all votes received.
	 */
	private int totalPoints;
	
	/**
	 * Number of votes received.
	 */
	private int votesReceived;
	
	/**
	 * Number of votes given to other users.
	 */
	private int votesGiven;
	
	
	public KarmaStatus() {
		// Empty Constructor
	}
	
	public KarmaStatus(final KarmaStatus karma)
	{
		if (karma != null) {
			this.id = karma.getId();
			this.karmaPoints = karma.getKarmaPoints();
		}
	}
	
	public KarmaStatus(final int id, final double points)
	{
		this.id = id;
		this.karmaPoints = points;
	}
	
	/**
	 * @return Returns the karmaPoints.
	 */
	public double getKarmaPoints()
	{
		return this.karmaPoints;
	}
	
	public void setKarmaPoints(final double points)
	{
		this.karmaPoints = points;
	}
	
	/**
	 * @return Returns the userId.
	 */
	public int getId()
	{
		return this.id;
	}
	
	/**
	 * @param userId The userId to set.
	 */
	public void setId(final int userId)
	{
		this.id = userId;
	}
	
    public int getVotesReceived()
    {
        return votesReceived;
    }
    
    public void setVotesReceived(final int votesReceived)
    {
        this.votesReceived = votesReceived;
    }
    
    public int getTotalPoints()
    {
        return totalPoints;
    }
    
    public void setTotalPoints(final int totalPoints)
    {
        this.totalPoints = totalPoints;
    }
    
    public int getVotesGiven()
    {
        return votesGiven;
    }
    public void setVotesGiven(final int votesGiven)
    {
        this.votesGiven = votesGiven;
    }
}

../jforum2-code/src/main/java/net/jforum/entities/User.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Feb 17, 2003 / 10:25:04 PM
 * The JForum Project
 * http://www.jforum.net 
 */
package net.jforum.entities;

import java.io.Serializable;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;

import net.jforum.SessionFacade;
import net.jforum.repository.SecurityRepository;
import net.jforum.security.PermissionControl;
import net.jforum.security.SecurityConstants;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;

/**
 * Represents a single user in the system.
 * a user is every person which uses the forum. Well,
 * every registered user. Anonymous users does not have
 * a specific ID, for example. This class contains all information
 * about some user configuration options and preferences.
 * 
 * @author Rafael Steil
 */
public class User implements Serializable
{
	private static final long serialVersionUID = -2945794235180674465L;
	private int id;
	private int level;
	private int totalPosts;
	private boolean attachSignatureEnabled = true;
	private int rankId;
	private boolean htmlEnabled = true;
	private boolean bbCodeEnabled = true;
	private boolean smiliesEnabled = true;
	private boolean avatarEnabled = true;
	private boolean privateMessagesEnabled = true;
	private boolean notifyPrivateMessagesEnabled = true;
	private boolean notifyOnMessagesEnabled = true;
	private boolean notifyAlways;
	private boolean notifyText;
	private String username;
	private String password;
	private Date lastVisit;
	private Date registrationDate;
	private String avatar;
	private boolean isExternalAvatar;
	private String email;
	private String icq;
	private String twitter;
	private String webSite;
	private String from;
	private String signature;
	private String skype; 
	private String occupation;
	private String interests;
	private String biography;
	private String lang;
	private String dateFormat;
	private boolean viewEmailEnabled = true;
	private List<Group> groupsList;
	private int privateMessagesCount;
	private KarmaStatus karma;
	private int active;
	private String activationKey;
	private int deleted;
	private Map<String, Object> extra = new ConcurrentHashMap<>();
	
	public User(int userId)
	{
		this.id = userId;
	}
	
	/**
	 * Default Constructor
	 */
	public User() 
	{
		this.groupsList = new ArrayList<>(); 
	}
	
	public void addExtra(String name, Object value)
	{
		this.extra.put(name, value);
	}
	
	public Object getExtra(String name)
	{
		return this.extra.get(name);
	}

	public boolean isDeleted() {
		return this.deleted == 1;
	}	
	
	public void setDeleted(int deleted){
		this.deleted = deleted;
	}	

	/**
	 * Gets the avatar of the user
	 * 
	 * @return String with the avatar
	 */
	public String getAvatar() {
		return this.avatar;
	}

	/**
	 * Checks if avatar is enabled
	 * 
	 * @return boolean value
	 */
	public boolean isAvatarEnabled() {
		return this.avatarEnabled;
	}

	/**
	 * Checks if BB code is enabled
	 * 
	 * @return boolean value
	 */
	public boolean isBbCodeEnabled() {
		return this.bbCodeEnabled;
	}

	/**
	 * Gets the format to represent dates and time
	 * 
	 * @return String with the format
	 */
	public String getDateFormat() {
		return this.dateFormat;
	}

	/**
	 * Gets the user email
	 * 
	 * @return String with the email
	 */
	public String getEmail() {
		return this.email;
	}

	/**
	 * Gets the user location ( where he lives )
	 * 
	 * @return String with the location
	 */
	public String getFrom() {
		return this.from;
	}

	/**
	 * Checks if HTML code is enabled by default in user messages
	 * 
	 * @return boolean value
	 */
	public boolean isHtmlEnabled() {
		return this.htmlEnabled;
	}

	/**
	 * Gets the ICQ UIM
	 * 
	 * @return String with the UIN
	 */
	public String getIcq() {
		return this.icq;
	}

	public String getTwitter() {
		return this.twitter;
	}

	/**
	 * Gets the user id
	 * 
	 * @return int value with the id
	 */
	public int getId() {
		return this.id;
	}

	/**
	 * Gets the user interests
	 * 
	 * @return String literal
	 */
	public String getInterests() {
		return this.interests;
	}

	/**
	 * Gets the user language
	 * 
	 * @return String value with the language chosen
	 */
	public String getLang() {
		return this.lang;
	}

	/**
	 * Gets the last visit time the user was in the forum
	 * 
	 * @return long value representing the time
	 */
	public Date getLastVisit() {
		return this.lastVisit;
	}

	/**
	 * Gets the user level
	 * 
	 * @return int value with the level
	 */
	public int getLevel() {
		return this.level;
	}

	/**
	 * Checks if notification of new private messages is enabled
	 * 
	 * @return boolean value
	 */
	public boolean isNotifyPrivateMessagesEnabled() {
		return this.notifyPrivateMessagesEnabled;
	}

	/**
	 * Gets the OCC 
	 * 
	 * @return String
	 */
	public String getOccupation() {
		return this.occupation;
	}

	/**
	 * Gets the user password
	 * 
	 * @return String with the password ( in plain/text )
	 */
	public String getPassword() {
		return this.password;
	}

	/**
	 * Checks if user permits other people to sent private messages to him
	 * 
	 * @return boolean value
	 */
	public boolean isPrivateMessagesEnabled() {
		return this.privateMessagesEnabled;
	}

	/**
	 * Gets the ranking ID of the user
	 * 
	 * @return int
	 */
	public int getRankId() {
		return this.rankId;
	}

	/**
	 * Gets the registration date of the user
	 * 
	 * @return String value with the registration date
	 */
	public String getRegistrationDate() 
	{
		Locale loc = Locale.getDefault();
		if (SessionFacade.getUserSession() != null) {
			String lang = SessionFacade.getUserSession().getLang();
			if (lang!=null && lang.contains("_"))
				loc = new Locale(SessionFacade.getUserSession().getLang().substring(0,2));
		}
		SimpleDateFormat df = new SimpleDateFormat(SystemGlobals.getValue(ConfigKeys.DATE_TIME_FORMAT), loc);
		return df.format(this.registrationDate);
	}

	/**
	 * Gets the registration day of the user. For use in posts where space is at a premium.
	 * 
	 * @return String value with the registration day
	 */
	public String getRegistrationDay() 
	{
		Locale loc = Locale.getDefault();
		if (SessionFacade.getUserSession() != null) {
			String lang = SessionFacade.getUserSession().getLang();
			if (lang!=null && lang.contains("_"))
				loc = new Locale(lang.substring(0,2));
		}
		DateFormat df = DateFormat.getDateInstance(DateFormat.MEDIUM, loc);
		return df.format(this.registrationDate);
	}

	/**
	 * Gets the user signature
	 * 
	 * @return String literal with the signature
	 */
	public String getSignature() {
		return this.signature;
	}

	/**
	 * Checks if smilies are enabled
	 * 
	 * @return boolean value
	 */
	public boolean isSmiliesEnabled() {
		return this.smiliesEnabled;
	}

	/**
	 * Gets the total number of messages posted by the user
	 * 
	 * @return int value with the total of messages
	 */
	public int getTotalPosts() {
		return this.totalPosts;
	}

	/**
	 * Gets the username
	 * 
	 * @return String with the username
	 */
	public String getUsername() {
		return this.username;
	}

	/**
	 * Gets the user website address
	 * 
	 * @return String with the URL
	 */
	public String getWebSite() {
		return this.webSite;
	}

	/**
	 * Is the user's email authenticated?
	 * 
	 * @return integer 1 if true
	 */	
	public boolean isActive(){
		return this.active == 1;
	}
	
	/**
	 * Gets the Yahoo messenger ID
	 * 
	 * @return String with the activation key that is created during user registration
	 */	
	public String getActivationKey(){
		return this.activationKey;
	}

	/**
	 * Sets the avatar.
	 * 
	 * @param avatar The avatar to set
	 */
	public void setAvatar(String avatar) {
		this.avatar = avatar;
		
		if (avatar != null && (avatar.toLowerCase().startsWith("http://") || avatar.toLowerCase().startsWith("https://"))) {
			this.isExternalAvatar = true;
		}
	}

	/**
	 * Indicates if the avatar points to an external URL
	 * @return <code>true</code> if the avatar is some external image
	 */
	public boolean isExternalAvatar() {
		return this.isExternalAvatar;
	}

	/**
	 * Sets avatar status
	 * 
	 * @param avatarEnabled <code>true</code> or <code>false</code>
	 */
	public void setAvatarEnabled(boolean avatarEnabled) {
		this.avatarEnabled = avatarEnabled;
	}

	/**
	 * Sets the status for BB codes
	 * 
	 * @param bbCodeEnabled <code>true</code> or <code>false</code>
	 */
	public void setBbCodeEnabled(boolean bbCodeEnabled) {
		this.bbCodeEnabled = bbCodeEnabled;
	}

	/**
	 * Sets the date format.
	 * 
	 * @param dateFormat The date format to set
	 */
	public void setDateFormat(String dateFormat) {
		this.dateFormat = dateFormat;
	}

	/**
	 * Sets the email.
	 * 
	 * @param email The email to set
	 */
	public void setEmail(String email) {
		this.email = email;
	}

	/**
	 * Sets the user location ( where he lives )
	 * 
	 * @param from The location
	 */
	public void setFrom(String from) {
		this.from = from;
	}

	/**
	 * Enable or not HTML code into the messages
	 * 
	 * @param htmlEnabled <code>true</code> or <code>false</code>
	 */
	public void setHtmlEnabled(boolean htmlEnabled) {
		this.htmlEnabled = htmlEnabled;
	}

	/**
	 * Sets the icq UIN
	 * 
	 * @param icq The icq to set
	 */
	public void setIcq(String icq) {
		this.icq = icq;
	}

	public void setTwitter (String twitter) {
		this.twitter = twitter;
	}

	/**
	 * Sets the user id.
	 * 
	 * @param id The user id to set
	 */
	public void setId(int id) {
		this.id = id;
	}

	/**
	 * Sets the interests.
	 * 
	 * @param interests The interests to set
	 */
	public void setInterests(String interests) {
		this.interests = interests;
	}

	/**
	 * Sets the language.
	 * 
	 * @param lang The lang to set
	 */
	public void setLang(String lang) {
		this.lang = lang;
	}

	/**
	 * Sets the last visit time
	 * 
	 * @param lastVisit Last visit time, represented as a long value
	 */
	public void setLastVisit(Date lastVisit) {
		this.lastVisit = lastVisit;
	}

	/**
	 * Sets the level.
	 * 
	 * @param level The level to set
	 */
	public void setLevel(int level) {
		this.level = level;
	}

	/**
	 * Sets the status for notification of new private messages
	 * 
	 * @param notifyPrivateMessagesEnabled <code>true</code> or <code>false</code>
	 */
	public void setNotifyPrivateMessagesEnabled(boolean notifyPrivateMessagesEnabled) {
		this.notifyPrivateMessagesEnabled = notifyPrivateMessagesEnabled;
	}

	/**
	 * Sets the occupation.
	 * 
	 * @param occupation The occupation to set
	 */
	public void setOccupation(String occupation) {
		this.occupation = occupation;
	}

	/**
	 * Sets the password.
	 * 
	 * @param password The password to set
	 */
	public void setPassword(String password) {
		this.password = password;
	}

	/**
	 * Enable or not private messages to the user
	 * 
	 * @param privateMessagesEnabled <code>true</code> or <code>false</code>
	 */
	public void setPrivateMessagesEnabled(boolean privateMessagesEnabled) {
		this.privateMessagesEnabled = privateMessagesEnabled;
	}

	/**
	 * Sets the ranking id
	 * 
	 * @param rankId The id of the ranking
	 */
	public void setRankId(int rankId) {
		this.rankId = rankId;
	}

	/**
	 * Sets the registration date.
	 * 
	 * @param registrationDate The registration date to set
	 */
	public void setRegistrationDate(Date registrationDate) {
		this.registrationDate = registrationDate;
	}

	/**
	 * Sets the signature.
	 * 
	 * @param signature The signature to set
	 */
	public void setSignature(String signature) {
		this.signature = signature;
	}

	/**
	 * Enable or not smilies in messages
	 * 
	 * @param smilesEnabled <code>true</code> or <code>false</code>
	 */
	public void setSmiliesEnabled(boolean smilesEnabled) {
		this.smiliesEnabled = smilesEnabled;
	}

	/**
	 * Sets the total number of posts by the user
	 * 
	 * @param totalPosts int value with the total of messages posted by the user
	 */
	public void setTotalPosts(int totalPosts) {
		this.totalPosts = totalPosts;
	}

	/**
	 * Sets the username.
	 * 
	 * @param username The username to set
	 */
	public void setUsername(String username) {
		this.username = username;
	}

	/**
	 * Sets the webSite.
	 * 
	 * @param webSite The webSite to set
	 */
	public void setWebSite(String webSite) {
		this.webSite = webSite;
	}

	/**
	 * @return the Skype ID
	 */
	public String getSkype() {
		return this.skype;
	}

	/**
	 * @param string
	 */
	public void setSkype(String string) {
		this.skype = string;
	}

	/**
	 * @return true if notifyOnMessagesEnabled is enabled, false otherwise.
	 */
	public boolean isNotifyOnMessagesEnabled() {
		return this.notifyOnMessagesEnabled;
	}

	/**
	 * @param b
	 */
	public void setNotifyOnMessagesEnabled(boolean b) {
		this.notifyOnMessagesEnabled = b;
	}

	/**
	 * @return true if viewEmailEnabled is enabled, false otherwise.
	 */
	public boolean isViewEmailEnabled() {
		return this.viewEmailEnabled;
	}

	/**
	 * @param b
	 */
	public void setViewEmailEnabled(boolean b) {
		this.viewEmailEnabled = b;
	}

	/**
	 * @return true if attachSignatureEnabled is enabled, false otherwise.
	 */
	public boolean isAttachSignatureEnabled() {
		return this.attachSignatureEnabled;
	}

	/**
	 * @param b
	 */
	public void setAttachSignatureEnabled(boolean b) {
		this.attachSignatureEnabled = b;
	}

	/**
	 * @return the groupList
	 */
	public List<Group> getGroupsList() {
		return this.groupsList;
	}

	/**
	 * @return Returns the privateMessagesCount.
	 */
	public int getPrivateMessagesCount()
	{
		return this.privateMessagesCount;
	}
	/**
	 * @param privateMessagesCount The privateMessagesCount to set.
	 */
	public void setPrivateMessagesCount(int privateMessagesCount)
	{
		this.privateMessagesCount = privateMessagesCount;
	}
	/**
	 * @return true if privateMessagesCount > 0, false otherwise.
	 */
	public boolean hasPrivateMessages()
	{
		return this.privateMessagesCount > 0;
	}
	
	/**
	 * Set when user authenticates his email after user registration
	*/
	public void setActive(int active){
		this.active = active;
	}
	
	public void setActivationKey(String activationKey){
		this.activationKey = activationKey;
	}
	
	public void setKarma(KarmaStatus karma)
	{
		this.karma = karma;
	}
	
	public KarmaStatus getKarma()
	{
		return this.karma;
	}
	
	/**
	 * Is the user online?
	 * 
	 * @return true if user is in Session
	 */	
	public boolean isOnline()
	{
	    Set<String> st = SessionFacade.findSessionIdsOfUser(this.id);
		return !st.isEmpty();
	}

	/**
	 * Gets the user's biography
	 * @return the user biography
	 */
	public String getBiography() {
		return biography;
	}

	/**
	 * Sets the user's biography
	 * @param biography the user's biography
	 */
	public void setBiography(String biography) {
		this.biography = biography;
	}

	/**
	 * @return the notifyAlways
	 */
	public boolean notifyAlways()
	{
		return this.notifyAlways;
	}

	/**
	 * @return the notifyText
	 */
	public boolean notifyText()
	{
		return this.notifyText;
	}

	/**
	 * @param notifyAlways the notifyAlways to set
	 */
	public void setNotifyAlways(boolean notifyAlways)
	{
		this.notifyAlways = notifyAlways;
	}

	/**
	 * @param notifyText the notifyText to set
	 */
	public void setNotifyText(boolean notifyText)
	{
		this.notifyText = notifyText;
	}
	
	/**
	 * Checks if the user is an administrator
	 * 
	 * @return <code>true</code> if the user is an administrator
	 */
	public boolean isAdmin()
	{
		return SecurityRepository.canAccess(this.id, SecurityConstants.PERM_ADMINISTRATION);
	}

	/**
	 * Checks if the user is a moderator
	 * 
	 * @return <code>true</code> if the user has moderations rights
	 */
	public boolean isModerator()
	{
		return SecurityRepository.canAccess(this.id, SecurityConstants.PERM_MODERATION);
	}
	
	/**
	 * Checks if the user can moderate a forum
	 * 
	 * @param forumId the forum's id to check for moderation rights
	 * @return <code>true</code> if the user has moderations rights
	 */
	public boolean isModerator(int forumId)
	{
		final PermissionControl permissionControl = SecurityRepository.get(this.id);
		
		return (permissionControl.canAccess(SecurityConstants.PERM_MODERATION))
			&& (permissionControl.canAccess(SecurityConstants.PERM_MODERATION_FORUMS, 
				Integer.toString(forumId)));
	}

	/**
	 * Checks if the user needs to have captcha displayed.
	 *
	 * @return
	 */
	public static boolean needsCaptcha(int userId) {
		final PermissionControl permissionControl = SecurityRepository.get(userId);

		boolean showCaptchaForPosts = SystemGlobals.getBoolValue(ConfigKeys.CAPTCHA_POSTS);

		// If captcha is not used, then user doesn't need it.
		if (!showCaptchaForPosts) {
			return false;
		}

		if (permissionControl.canAccess(SecurityConstants.PERM_ADMINISTRATION)
				|| permissionControl.canAccess(SecurityConstants.PERM_MODERATION)) {
			// If user is Admin or Moderator -> well, do we have captcha for them also ?
			return SystemGlobals.getBoolValue(ConfigKeys.CAPTCHA_ADMIN_MODERATORS);
		}

		return true; // or showCaptchaForPosts, but here showCaptchaForPosts is true anyway.
	}
}

../jforum2-code/src/main/java/net/jforum/entities/Topic.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Feb 23, 2003 / 12:40:13 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.entities;

import java.io.Serializable;
import java.util.Date;

import net.jforum.view.forum.common.ViewCommon;

/**
 * Represents every topic in the forum.
 * 
 * @author Rafael Steil
 */
public class Topic implements Serializable
{
	private static final long serialVersionUID = -5343915039698311508L;
	public static final int TYPE_NORMAL = 0;
	public static final int TYPE_STICKY = 1;
	public static final int TYPE_ANNOUNCE = 2;
	public static final int TYPE_WIKI = 3;

	public static final int STATUS_UNLOCKED = 0;
	public static final int STATUS_LOCKED = 1;

	private int id;
	private int forumId;
	private int totalViews;
	private int totalReplies;
	private int status;
	private int type;
	private int firstPostId;
	private int lastPostId;
	private int voteId;
	private int movedId;

	private boolean read = true;
	private boolean moderated;
	private boolean hasAttach;
	private boolean paginate;

	private Date firstPostTime;
	private Date lastPostTime;
	private Date lastEditTime; // for Wiki pages only
	private String title;

	private Date time;
	private Date lastPostDate;

	private Double totalPages;

	private User postedBy;
	private User lastPostBy;

	public Topic() {}

	/**
	 * 
	 * @param topicId
	 */
	public Topic(int topicId)
	{
		this.id = topicId;
	}

	/**
	 * Returns the ID of the firts topic
	 * 
	 * @return int value with the ID
	 */
	public int getFirstPostId() {
		return this.firstPostId;
	}

	/**
	 * Returns the ID of the topic
	 * 
	 * @return int value with the ID
	 */
	public int getId() {
		return this.id;
	}

	/**
	 * Returns the ID of the forum this topic belongs to
	 * 
	 * @return int value with the ID
	 */
	public int getForumId() {
		return this.forumId;
	}

	/**
	 * Teturns the ID of the last post in the topic
	 * 
	 * @return int value with the ID
	 */
	public int getLastPostId() {
		return this.lastPostId;
	}

	/**
	 * Returns the status 
	 * 
	 * @return int value with the status
	 */
	public int getStatus() {
		return this.status;
	}

	/**
	 * Returns the time the topic was posted
	 * 
	 * @return int value representing the time
	 */
	public Date getTime() {
		return this.time;
	}

	public void setFirstPostTime(Date d) {
		this.firstPostTime = d;
	}

	public void setLastPostTime(Date d) {
		this.lastPostTime = d;
	}

	public void setLastEditTime(Date d) {
		this.lastEditTime = d;
	}

	/**
	 * Returns the title of the topci
	 * 
	 * @return String with the topic title
	 */
	public String getTitle() {
		return (this.title == null ? "" : this.title);
	}

	/**
	 * Returns the total number of replies
	 * 
	 * @return int value with the total
	 */
	public int getTotalReplies() {
		return this.totalReplies;
	}

	/**
	 * Returns the total number of views
	 * 
	 * @return int value with the total number of views
	 */
	public int getTotalViews() {
		return this.totalViews;
	}

	/**
	 * Returns the post user
	 * 
	 * @return the postedBy
	 */
	public User getPostedBy() {
		return this.postedBy;
	}

	/**
	 * Returns the last post user
	 * 
	 * @return the lastPostBy
	 */
	public User getLastPostBy() {
		return this.lastPostBy;
	}

	/**
	 * Returns the type
	 * 
	 * @return int value representing the type
	 */
	public int getType() {
		return this.type;
	}

	/**
	 * Is a vote topic?
	 * 
	 * @return boolean value
	 */
	public boolean isVote() {
		return this.voteId != 0;
	}

	/**
	 * Is a vote topic? If so, this is the vote Id
	 * 
	 * @return boolean value
	 */
	public int getVoteId() {
		return this.voteId;
	}

	/**
	 * Sets the id of the first post in the topic
	 * 
	 * @param firstPostId The post id 
	 */
	public void setFirstPostId(int firstPostId) {
		this.firstPostId = firstPostId;
	}

	/**
	 * Sets the id to the topic
	 * 
	 * @param id The id to set
	 */
	public void setId(int id) {
		this.id = id;
	}

	/**
	 * Sets the id of the forum associated with this topic
	 * 
	 * @param idForum The id of the forum to set
	 */
	public void setForumId(int idForum) {
		this.forumId = idForum;
	}

	/**
	 * Sets the id of the last post in the topic
	 * 
	 * @param lastPostId The post id
	 */
	public void setLastPostId(int lastPostId) {
		this.lastPostId = lastPostId;
	}

	/**
	 * Sets the status.
	 * 
	 * @param status The status to set
	 */
	public void setStatus(int status) {
		this.status = status;
	}

	/**
	 * Sets the time.
	 * 
	 * @param time The time to set
	 */
	public void setTime(Date time) {
		this.time = time;
	}

	/**
	 * Sets the title.
	 * 
	 * @param title The title to set
	 */
	public void setTitle(String title) {
		this.title = title;
	}

	/**
	 * Sets the totalReplies.
	 * 
	 * @param totalReplies The totalReplies to set
	 */
	public void setTotalReplies(int totalReplies) {
		this.totalReplies = totalReplies;
	}

	/**
	 * Sets the totalViews.
	 * 
	 * @param totalViews The totalViews to set
	 */
	public void setTotalViews(int totalViews) {
		this.totalViews = totalViews;
	}

	/**
	 * Sets the type.
	 * 
	 * @param type The type to set
	 */
	public void setType(int type) {
		this.type = type;
	}

	/**
	 * Sets the voteId.
	 * 
	 * @param voteId The voteId to set
	 */
	public void setVoteId(int voteId) {
		this.voteId = voteId;
	}

	/**
	 * @return the moderated
	 */
	public boolean isModerated() {
		return this.moderated;
	}

	/**
	 * @param b
	 */
	public void setModerated(boolean b) {
		this.moderated = b;
	}

	/**
	 * 
	 * @param user
	 */
	public void setPostedBy(User user) {
		this.postedBy = user;
	}

	/**
	 * @param user
	 */
	public void setLastPostBy(User user) {
		this.lastPostBy = user;
	}

	/**
	 * @return the firstPostTime
	 */
	public String getFirstPostTime() {
        return ViewCommon.formatDate(firstPostTime);
	}

	/**
	 * @return the lastPostTime
	 */
	public String getLastPostTime() {
        return ViewCommon.formatDate(lastPostTime);
	}

	/**
	 * @return the lastEditTime
	 */
	public Date getLastEditTime() {
        return lastEditTime;
	}

	/**
	 * @return the lastEditTime as formatted string
	 */
	public String getLastEditTimeStr() {
		if (lastEditTime == null) {
			return ViewCommon.formatDate(lastPostTime);
		} else {
			return ViewCommon.formatDate(lastEditTime);
		}
	}

	/**
	 * @param read
	 */
	public void setRead(boolean read) {
		this.read = read;
	}

	/**
	 * @return the read
	 */
	public boolean isRead() {
		return this.read;
	}

	/**
	 * @param t
	 */
	public void setLastPostDate(Date t) {
		this.lastPostDate = t;
	}

	/**
	 * @return the lastPostDate
	 */
	public Date getLastPostDate() {
		return this.lastPostDate;
	}

	/**
	 * @param paginate
	 */
	public void setPaginate(boolean paginate) {
		this.paginate = paginate;
	}

	/**
	 * @return the paginate
	 */
	public boolean isPaginate() {
		return this.paginate;
	}

	/**
	 * @param total
	 */
	public void setTotalPages(Double total) {
		this.totalPages = total;
	}

	/**
	 * @return the totalPages
	 */
	public Double getTotalPages() {
		return this.totalPages;
	}

	/**
	 * @param b
	 */
	public void setHasAttach(boolean b)
	{
		this.hasAttach = b;
	}

	/**
	 * @return the hasAttach
	 */
	public boolean hasAttach()
	{
		return this.hasAttach;
	}

	/** 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override public boolean equals(Object o)
	{
		if (!(o instanceof Topic)) {
			return false;
		}

		return (((Topic)o).getId() == this.id);
	}
	/** 
	 * @see java.lang.Object#hashCode()
	 */
	@Override public int hashCode()
	{
		return this.id;
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	@Override public String toString()
	{
		return "[" + this.id + ", " + this.title + "]";
	}

	/**
	 * @return the movedId
	 */
	public int getMovedId()
	{
		return this.movedId;
	}

	/**
	 * @param movedId the movedId to set
	 */
	public void setMovedId(int movedId)
	{
		this.movedId = movedId;
	}
}

../jforum2-code/src/main/java/net/jforum/entities/Banner.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms,
 * with or without modification, are permitted provided
 * that the following conditions are met:
 *
 * 1) Redistributions of source code must retain the above
 * copyright notice, this list of conditions and the
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the
 * above copyright notice, this list of conditions and
 * the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor
 * the names of its contributors may be used to endorse
 * or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
 * IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 *
 * Created on Feb 17, 2003 / 10:47:29 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.entities;

import java.io.Serializable;

/**
 * Represents a banner in the System.
 *
 * @author Samuel Yung
 * @version $Id$
 */
public class Banner implements Serializable
{
	private static final long serialVersionUID = 665553787652802338L;
	private int id;
	private String comment;
	private boolean active;
	private int type;
	private String name;
	private String description;
	private int width;
	private int height;
	private int views;
	private int clicks;
	private String url;
	private int placement;
	private int weight;

	public Banner()
	{}

	public Banner(int id)
	{
		this.id = id;
	}

	public Banner(Banner c)
	{
		this.id = c.getId();
		this.comment = c.getComment();
		this.active = c.isActive();
		this.type = c.getType();
		this.name = c.getName();
		this.description = c.getDescription();
		this.width = c.getWeight();
		this.height = c.getHeight();
		this.views = c.getViews();
		this.clicks = c.getClicks();
		this.url = c.getUrl();
		this.placement = c.getPlacement();
		this.weight = c.getWeight();
	}

	/**
	 * @return int
	 */
	public int getId()
	{
		return this.id;
	}

	public String getComment()
	{
		return comment;
	}

	public boolean isActive()
	{
		return active;
	}

	public int getType()
	{
		return type;
	}

	public String getName()
	{
		return name;
	}

	public String getDescription()
	{
		return description;
	}

	public int getWidth()
	{
		return width;
	}

	public int getHeight()
	{
		return height;
	}

	public int getViews()
	{
		return views;
	}

	public int getClicks()
	{
		return clicks;
	}

	public String getUrl()
	{
		return url;
	}

	public int getPlacement()
	{
		return placement;
	}

	public int getWeight()
	{
		return weight;
	}

	/**
	 * Sets the id.
	 * @param id The id to set
	 */
	public void setId(int id)
	{
		this.id = id;
	}

	public void setComment(String comment)
	{
		this.comment = comment;
	}

	public void setActive(boolean active)
	{
		this.active = active;
	}

	public void setType(int type)
	{
		this.type = type;
	}

	public void setName(String name)
	{
		this.name = name;
	}

	public void setDescription(String description)
	{
		this.description = description;
	}

	public void setWidth(int width)
	{
		this.width = width;
	}

	public void setHeight(int height)
	{
		this.height = height;
	}

	public void setViews(int views)
	{
		this.views = views;
	}

	public void setClicks(int clicks)
	{
		this.clicks = clicks;
	}

	public void setUrl(String url)
	{
		this.url = url;
	}

	public void setPlacement(int placement)
	{
		this.placement = placement;
	}

	public void setWeight(int weight)
	{
		this.weight = weight;
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	@Override public int hashCode()
	{
		return this.id;
	}

	/**
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override public boolean equals(Object o)
	{
		return((o instanceof Banner) && (((Banner)o).getId() == this.id));
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	@Override public String toString()
	{
		return "[comment=" + this.comment + ", id=" + this.id +
			", type=" + this.type + ", name=" + this.name +
			", description=" + this.description + ", active=" +
			this.active + "]";
	}

}

../jforum2-code/src/main/java/net/jforum/entities/Ranking.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.

 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:

 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Feb 17, 2003 / 10:45:42 PM
 * The JForum Project 
 * http://www.jforum.net
 */
package net.jforum.entities;

import java.io.Serializable;

/**
 * Represents a user ranking in the System.
 * a user ranking is just a given "status" which some user have
 * based on the number of messages posted by them.  
 *  
 * @author Rafael Steil
 * @version $Id$
 */
public class Ranking implements Serializable
{
	private static final long serialVersionUID = -4538023767125463394L;
	private int id;
	private String title;
	private boolean special;
	private String image;
	private int min;

	/**
	 * @return the id
	 */
	public int getId() {
		return this.id;
	}

	/**
	 * @return the image
	 */
	public String getImage() {
		return this.image;
	}

	/**
	 * @return the special
	 */
	public boolean isSpecial() {
		return this.special;
	}

	/**
	 * @return the title
	 */
	public String getTitle() 
	{
		return (this.title == null ? "" : this.title);
	}

	/**
	 * Sets the id.
	 * @param id The id to set
	 */
	public void setId(final int id) {
		this.id = id;
	}

	/**
	 * Sets the image.
	 * @param image The image to set
	 */
	public void setImage(final String image) {
		this.image = image;
	}

	/**
	 * Sets the special.
	 * @param special The special to set
	 */
	public void setSpecial(final boolean special) {
		this.special = special;
	}

	/**
	 * Sets the title.
	 * @param title The title to set
	 */
	public void setTitle(final String title) {
		this.title = title;
	}

	/**
	 * @return the min
	 */
	public int getMin() {
		return this.min;
	}

	/**
	 * @param i
	 */
	public void setMin(final int i) {
		this.min = i;
	}

	@Override public boolean equals(final Object o)
	{
		if (o == this) {
			return true;
		}
		
		if (!(o instanceof Ranking)) {
			return false;
		}
		
		return ((Ranking)o).getId() == this.getId();
	}

	/**
	 * @return the id as hasCode
	 */
	@Override public int hashCode()
	{
		return this.getId();
	}
}

../jforum2-code/src/main/java/net/jforum/entities/PrivateMessageType.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 20/05/2004 - 15:34:10
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.entities;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public final class PrivateMessageType
{	
	public static final int READ = 0;
	public static final int NEW = 1;
	public static final int SENT = 2;
	public static final int SAVED_IN = 3;
	public static final int SAVED_OUT = 4;
	public static final int UNREAD = 5;
	
	private PrivateMessageType() {}
}
../jforum2-code/src/main/java/net/jforum/entities/AttachmentExtensionGroup.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Jan 17, 2005 5:51:04 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.entities;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public class AttachmentExtensionGroup
{
	public static final int DOWNLOAD_INLINE = 1;
	public static final int DOWNLOAD_PHYSICAL = 2;
	
	private int id;
	private String name;
	private boolean allow;
	private String uploadIcon;
	private int downloadMode;
	
	/**
	 * @return Returns the downloadMode.
	 */
	public int getDownloadMode()
	{
		return this.downloadMode;
	}
	
	/**
	 * @param downloadMode The downloadMode to set.
	 */
	public void setDownloadMode(final int downloadMode)
	{
		this.downloadMode = downloadMode;
	}
	
	/**
	 * @return Returns the allow.
	 */
	public boolean isAllow()
	{
		return this.allow;
	}
	
	/**
	 * @param allow The allow to set.
	 */
	public void setAllow(final boolean allow)
	{
		this.allow = allow;
	}
	
	/**
	 * @return Returns the id.
	 */
	public int getId()
	{
		return this.id;
	}
	
	/**
	 * @param id The id to set.
	 */
	public void setId(final int id)
	{
		this.id = id;
	}
	
	/**
	 * @return Returns the name.
	 */
	public String getName()
	{
		return this.name;
	}
	
	/**
	 * @param name The name to set.
	 */
	public void setName(final String name)
	{
		this.name = name;
	}
	
	/**
	 * @return Returns the uploadIcon.
	 */
	public String getUploadIcon()
	{
		return this.uploadIcon;
	}
	
	/**
	 * @param uploadIcon The uploadIcon to set.
	 */
	public void setUploadIcon(final String uploadIcon)
	{
		this.uploadIcon = uploadIcon;
	}
}

../jforum2-code/src/main/java/net/jforum/entities/Karma.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Jan 11, 2005 10:57:13 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.entities;

import java.util.Date;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public class Karma
{
	private int id;
	private int postId;
	private int topicId;
	private int postUserId;
	private int fromUserId;
	private int points;
	private Date rateDate;
	
	/**
	 * @return Returns the topicId.
	 */
	public int getTopicId()
	{
		return this.topicId;
	}
	
	/**
	 * @param topicId The topicId to set.
	 */
	public void setTopicId(final int topicId)
	{
		this.topicId = topicId;
	}
	
	/**
	 * @return Returns the fromUserId.
	 */
	public int getFromUserId()
	{
		return this.fromUserId;
	}
	
	/**
	 * @param fromUserId The fromUserId to set.
	 */
	public void setFromUserId(final int fromUserId)
	{
		this.fromUserId = fromUserId;
	}
	
	/**
	 * @return Returns the id.
	 */
	public int getId()
	{
		return this.id;
	}
	
	/**
	 * @param id The id to set.
	 */
	public void setId(final int id)
	{
		this.id = id;
	}
	
	/**
	 * @return Returns the userId.
	 */
	public int getPostUserId()
	{
		return this.postUserId;
	}
	
	/**
	 * @param userId The userId to set.
	 */
	public void setPostUserId(final int userId)
	{
		this.postUserId = userId;
	}
	
	/**
	 * @return Returns the points.
	 */
	public int getPoints()
	{
		return this.points;
	}
	
	/**
	 * @param points The points to set.
	 */
	public void setPoints(final int points)
	{
		this.points = points;
	}
	
	/**
	 * @return Returns the postId.
	 */
	public int getPostId()
	{
		return this.postId;
	}
	
	/**
	 * @param postId The postId to set.
	 */
	public void setPostId(final int postId)
	{
		this.postId = postId;
	}
	
	/**
	 * @return Returns the date of the vote.
	 */
    public Date getRateDate() 
    {
        return rateDate;
    }
    
    /**
	 * @param rateDate The date of the vote.
	 */
    public void setRateDate(final Date rateDate) 
    {
        this.rateDate = rateDate;
    }
}

../jforum2-code/src/main/java/net/jforum/entities/ForumStats.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 03/12/2005 21:31:00
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.entities;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public class ForumStats
{
	private int users;
	private int posts;
	private int topics;
	private double postsPerDay;
	private double topicsPerDay;
	private double usersPerDay;
	
	/**
	 * @return Returns the posts.
	 */
	public int getPosts()
	{
		return this.posts;
	}
	
	/**
	 * @param posts The posts to set.
	 */
	public void setPosts(final int posts)
	{
		this.posts = posts;
	}
	
	/**
	 * @return Returns the postsPerDay.
	 */
	public double getPostsPerDay()
	{
		return this.postsPerDay;
	}
	
	/**
	 * @param postsPerDay The postsPerDay to set.
	 */
	public void setPostsPerDay(final double postsPerDay)
	{
		this.postsPerDay = postsPerDay;
	}
	
	/**
	 * @return Returns the topics.
	 */
	public int getTopics()
	{
		return this.topics;
	}
	
	/**
	 * @param topics The topics to set.
	 */
	public void setTopics(final int topics)
	{
		this.topics = topics;
	}
	
	/**
	 * @return Returns the topicsPerDay.
	 */
	public double getTopicsPerDay()
	{
		return this.topicsPerDay;
	}
	
	/**
	 * @param topicsPerDay The topicsPerDay to set.
	 */
	public void setTopicsPerDay(final double topicsPerDay)
	{
		this.topicsPerDay = topicsPerDay;
	}
	
	/**
	 * @return Returns the users.
	 */
	public int getUsers()
	{
		return this.users;
	}
	
	/**
	 * @param users The users to set.
	 */
	public void setUsers(final int users)
	{
		this.users = users;
	}
	
	/**
	 * @return Returns the usersPerDay.
	 */
	public double getUsersPerDay()
	{
		return this.usersPerDay;
	}
	
	/**
	 * @param usersPerDay The usersPerDay to set.
	 */
	public void setUsersPerDay(final double usersPerDay)
	{
		this.usersPerDay = usersPerDay;
	}
}

../jforum2-code/src/main/java/net/jforum/entities/Smilie.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.

 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:

 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 13/01/2004 / 11:55:00
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.entities;

import java.io.Serializable;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public class Smilie implements Serializable
{
	private static final long serialVersionUID = -8510503201609223361L;
	private int id;
	private String code;
	private String url;
	private String diskName;
	
	/**
	 * @return the code
	 */
	public String getCode() {
		return this.code;
	}

	/**
	 * @param code
	 */
	public void setCode(final String code) {
		this.code = code;
	}
	
	/**
	 * @param diskName
	 */
	public void setDiskName(final String diskName) {
		this.diskName = diskName;
	}

	/**
	 * @return the id
	 */
	public int getId() {
		return this.id;
	}

	/**
	 * @param id
	 */
	public void setId(final int id) {
		this.id = id;
	}

	/**
	 * @return the url
	 */
	public String getUrl() {
		return this.url;
	}

	/**
	 * @param url
	 */
	public void setUrl(final String url) {
		this.url = url;
	}

	/**
	 * @return the diskName
	 */
	public String getDiskName() {
		return this.diskName;
	}
}

../jforum2-code/src/main/java/net/jforum/entities/Config.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 15/08/2003 / 21:04:47
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.entities;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public class Config 
{
	private int id;
	private String name;
	private String value;
	
	/**
	 * Gets the entry name
	 * @return The Entry name
	 */
	public String getName() {
		return this.name;
	}

	/**
	 * Gets the entry value
	 * @return The Entry value
	 */
	public String getValue() {
		return this.value;
	}
	
	public int getId() {
		return this.id;
	}

	/**
	 * Sets the entry name
	 * 
	 * @param string The entry name to set
	 */
	public void setName(final String string) {
		this.name = string;
	}

	/**
	 * Sets the entry value
	 * 
	 * @param string The entry value to set
	 */
	public void setValue(final String string) {
		this.value = string;
	}
	
	public void setId(final int id) {
		this.id = id;
	}
}

../jforum2-code/src/main/java/net/jforum/entities/ModeratorInfo.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 01/09/2005 20:58:39
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.entities;

import java.io.Serializable;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public class ModeratorInfo implements Serializable
{
	private static final long serialVersionUID = 1L;
	
	private int id;
	private String name;
	
	/**
	 * @return Returns the id.
	 */
	public int getId()
	{
		return this.id;
	}
	/**
	 * @param id The id to set.
	 */
	public void setId(final int id)
	{
		this.id = id;
	}
	/**
	 * @return Returns the name.
	 */
	public String getName()
	{
		return this.name;
	}
	/**
	 * @param name The name to set.
	 */
	public void setName(final String name)
	{
		this.name = name;
	}
}

../jforum2-code/src/main/java/net/jforum/repository/TopicRepository.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 05/04/2004 - 20:11:44
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.repository;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import net.jforum.cache.CacheEngine;
import net.jforum.cache.Cacheable;
import net.jforum.dao.DataAccessDriver;
import net.jforum.dao.TopicDAO;
import net.jforum.entities.Topic;
import net.jforum.util.TopicTypeComparator;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;

/**
 * Repository for the last n topics for each forum.
 * 
 * @author Rafael Steil
 * @author James Yong
 */
public class TopicRepository implements Cacheable {
	private static final String FQN = "topics";
	private static final String RECENT = "recent";
	private static final String FQN_FORUM = FQN + "/byforum";
	private static final String RELATION = "relation";
	private static final String FQN_LOADED = FQN + "/loaded";
	private static final Comparator<Topic> TYPE_COMPARATOR = new TopicTypeComparator();

	private static CacheEngine cache;

	private static final Object MUTEX_RECENT = new Object();
	private static final Object MUTEX_FQN_FORUM = new Object();

	private static int maxRecentTopics = SystemGlobals.getIntValue(ConfigKeys.TOPICS_PER_PAGE);

	/**
	 * @see net.jforum.cache.Cacheable#setCacheEngine(net.jforum.cache.CacheEngine)
	 */
	@Override public void setCacheEngine(CacheEngine engine) {
		TopicRepository.setEngine(engine);
	}

	private static void setEngine(CacheEngine engine) {
		cache = engine;
	}

	public static boolean isLoaded(int forumId) {
		return "1".equals(cache.get(FQN_LOADED, Integer.toString(forumId)));
	}

	/**
	 * Add topic to the FIFO stack
	 * 
	 * @param topic The topic to add to stack
	 */
	public static void pushTopic(Topic topic) {
		if (SystemGlobals.getBoolValue(ConfigKeys.TOPIC_CACHE_ENABLED)) {
			int limit = SystemGlobals.getIntValue(ConfigKeys.TOPICS_PER_PAGE);

			LinkedList<Topic> latestList = (LinkedList<Topic>) cache.get(FQN, RECENT);
			if (latestList == null || latestList.isEmpty()) {
				latestList = new LinkedList<>(loadMostRecentTopics());
			}

			latestList.remove(topic);
			latestList.addFirst(topic);

			while (latestList.size() > limit) {
				latestList.removeLast();
			}
			synchronized (MUTEX_RECENT) {
				cache.add(FQN, RECENT, latestList);
			}
		}
	}

	/**
	 * Get all cached recent topics.
	 */
	public static List<Topic> getRecentTopics() {
		int limit = SystemGlobals.getIntValue(ConfigKeys.TOPICS_PER_PAGE);		
		return getRecentTopics(0, limit);
	}

	/**
	 * Get all cached recent topics.
	 */
	public static List<Topic> getRecentTopics (int start, int limit) {
		if (start == 0) {
			List<Topic> latestList = (List<Topic>) cache.get(FQN, RECENT);

			if (limit != maxRecentTopics || latestList == null || latestList.isEmpty()
					|| !SystemGlobals.getBoolValue(ConfigKeys.TOPIC_CACHE_ENABLED)) {
				latestList = loadMostRecentTopics();
				maxRecentTopics = limit;
			}

			return new ArrayList<>(latestList);
		} else {
			return loadMostRecentTopics(start, limit);
		}
	}

	/**
	 * Add recent topics to the cache
	 */
	public static List<Topic> loadMostRecentTopics() {
		TopicDAO tm = DataAccessDriver.getInstance().newTopicDAO();
		int limit = SystemGlobals.getIntValue(ConfigKeys.TOPICS_PER_PAGE);

		List<Topic> latestList = tm.selectRecentTopics(limit);
		synchronized (MUTEX_RECENT) {
			cache.add(FQN, RECENT, new LinkedList<>(latestList));
		}

		return latestList;
	}

	/**
	 * Add recent topics to the cache
	 */
	public static List<Topic> loadMostRecentTopics (int start, int limit) {
		TopicDAO tm = DataAccessDriver.getInstance().newTopicDAO();

		return tm.selectRecentTopics(start, limit);
	}

	/**
	 * Add hottest topics to the cache
	 */
	public static List<Topic> loadHottestTopics() {
		TopicDAO tm = DataAccessDriver.getInstance().newTopicDAO();
		int limit = SystemGlobals.getIntValue(ConfigKeys.HOTTEST_TOPICS);

		return tm.selectHottestTopics(limit);
	}

	/**
	 * Add topics to the cache
	 * 
	 * @param forumId The forum id to which the topics are related
	 * @param topics The topics to add
	 */
	public static void addAll(int forumId, List<Topic> topics) {
		if (SystemGlobals.getBoolValue(ConfigKeys.TOPIC_CACHE_ENABLED)) {
			synchronized (MUTEX_FQN_FORUM) {
				cache.add(FQN_FORUM, Integer.toString(forumId), new LinkedList<>(topics));

				Map<Integer, Integer> m = (Map<Integer, Integer>) cache.get(FQN, RELATION);

				if (m == null) {
					m = new ConcurrentHashMap<>();
				}

				Integer fId = Integer.valueOf(forumId);

				for (Iterator<Topic> iter = topics.iterator(); iter.hasNext();) {
					Topic topic = iter.next();

					m.put(Integer.valueOf(topic.getId()), fId);
				}

				cache.add(FQN, RELATION, m);
				cache.add(FQN_LOADED, Integer.toString(forumId), "1");
			}
		}
	}

	/**
	 * Clears the cache
	 * 
	 * @param forumId The forum id to clear the cache
	 */
	public static void clearCache(int forumId) {
		synchronized (MUTEX_FQN_FORUM) {
			cache.add(FQN_FORUM, Integer.toString(forumId), new LinkedList<>());
			cache.remove(FQN, RELATION); 
			// TODO: is the next line necessary or not? https://coderanch.com/t/425011#1887278
			// cache.remove(FQN_LOADED, Integer.toString(forumId));
		}
	}

	/**
	 * Adds a new topic to the cache
	 * 
	 * @param topic The topic to add
	 */
	public static void addTopic(Topic topic) {
		if (!SystemGlobals.getBoolValue(ConfigKeys.TOPIC_CACHE_ENABLED)) {
			return;
		}

		synchronized (MUTEX_FQN_FORUM) {
			String forumId = Integer.toString(topic.getForumId());
			LinkedList<Topic> forumTopicsList = (LinkedList<Topic>) cache.get(FQN_FORUM, forumId);

			if (forumTopicsList == null) {
				forumTopicsList = new LinkedList<>();
				forumTopicsList.add(topic);
			} else {
				boolean contains = forumTopicsList.contains(topic);

				// If the cache is full, remove the eldest element
				int topicCacheSize = SystemGlobals.getIntValue(ConfigKeys.TOPIC_CACHE_SIZE);
				if (!contains && forumTopicsList.size() + 1 > topicCacheSize) {
					forumTopicsList.removeLast();
				} else if (contains) {
					forumTopicsList.remove(topic);
				}

				forumTopicsList.add(topic);
				forumTopicsList.sort(TYPE_COMPARATOR);
			}

			cache.add(FQN_FORUM, forumId, forumTopicsList);

			Map<Integer, Integer> m = (Map<Integer, Integer>) cache.get(FQN, RELATION);

			if (m == null) {
				m = new ConcurrentHashMap<>();
			}

			m.put(Integer.valueOf(topic.getId()), Integer.valueOf(forumId));

			cache.add(FQN, RELATION, m);
		}
	}

	/**
	 * Updates a cached topic
	 * 
	 * @param topic The topic to update
	 */
	public static void updateTopic(Topic topic) {
		if (SystemGlobals.getBoolValue(ConfigKeys.TOPIC_CACHE_ENABLED)) {
			synchronized (MUTEX_FQN_FORUM) {
				String forumId = Integer.toString(topic.getForumId());
				List<Topic> forumTopicsList = (List<Topic>) cache.get(FQN_FORUM, forumId);

				if (forumTopicsList != null) {
					int index = forumTopicsList.indexOf(topic);

					if (index > -1) {
						forumTopicsList.set(index, topic);
						cache.add(FQN_FORUM, forumId, forumTopicsList);
					}
				}
			}

			synchronized (MUTEX_RECENT) {
				List<Topic> latestList = (List<Topic>) cache.get(FQN, RECENT);

				if (latestList != null) {
					int index = latestList.indexOf(topic);

					if (index > -1) {
						latestList.set(index, topic);
						cache.add(FQN, RECENT, latestList);
					}
				}
			}
		}
	}

	/**
	 * Gets a cached topic.
	 * 
	 * @param topic
	 *            The topic to try to get from the cache. The instance passed as
	 *            argument should have at least the topicId and forumId set
	 * @return The topic instance, if found, or <code>null</code> otherwise.
	 */
	public static Topic getTopic(Topic topic) {
		if (!SystemGlobals.getBoolValue(ConfigKeys.TOPIC_CACHE_ENABLED)) {
			return null;
		}

		if (topic.getForumId() == 0) {
			Map<Integer, Integer> m = (Map<Integer, Integer>) cache.get(FQN, RELATION);

			if (m != null) {
				Integer forumId = m.get(Integer.valueOf(topic.getId()));

				if (forumId != null) {
					topic.setForumId(forumId.intValue());
				}
			}

			if (topic.getForumId() == 0) {
				return null;
			}
		}

		List<Topic> l = (List<Topic>) cache.get(FQN_FORUM, Integer.toString(topic.getForumId()));

		int index = -1;

		if (l != null) {
			index = l.indexOf(topic);
		}

		return (index == -1 ? null : l.get(index));
	}

	/**
	 * Checks if a topic is cached
	 * 
	 * @param topic The topic to verify
	 * @return <code>true</code> if the topic is cached, or <code>false</code> if not.
	 */
	public static boolean isTopicCached(Topic topic) {
		if (!SystemGlobals.getBoolValue(ConfigKeys.TOPIC_CACHE_ENABLED)) {
			return false;
		}

		String forumId = Integer.toString(topic.getForumId());
		List<Topic> list = (List<Topic>) cache.get(FQN_FORUM, forumId);

		return list == null ? false : list.contains(topic);
	}

	/**
	 * Get all cached topics related to a forum.
	 * 
	 * @param forumid The forum id
	 * @return <code>ArrayList</code> with the topics.
	 */
	public static List<Topic> getTopics(int forumid) {
		List<Topic> returnList = null;
		if (SystemGlobals.getBoolValue(ConfigKeys.TOPIC_CACHE_ENABLED)) {
			synchronized (MUTEX_FQN_FORUM) {
				returnList = (List<Topic>) cache.get(FQN_FORUM,	Integer.toString(forumid));				
			}
		}

		if (returnList == null) {
			return new ArrayList<>();
		} else {
			return new ArrayList<>(returnList);
		}
	}
}

../jforum2-code/src/main/java/net/jforum/repository/PostRepository.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 07/02/2005 - 10:29:14
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.repository;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import net.jforum.cache.CacheEngine;
import net.jforum.cache.Cacheable;
import net.jforum.dao.DataAccessDriver;
import net.jforum.dao.PostDAO;
import net.jforum.entities.Post;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;
import net.jforum.view.forum.common.PostCommon;

/**
 * Repository for the post in the top n topics for each forum.
 * 
 * @author Sean Mitchell
 * @author Rafael Steil
 */
public class PostRepository implements Cacheable
{
	private static final String FQN = "posts";
	private static CacheEngine cache;

	private static final Object MUTEX_FQN = new Object();	
	
	/**
	 * @see net.jforum.cache.Cacheable#setCacheEngine(net.jforum.cache.CacheEngine)
	 */
	@Override public void setCacheEngine(CacheEngine engine)
	{
		PostRepository.setEngine(engine);
	}
	
	private static void setEngine(CacheEngine engine) 
	{
		cache = engine;
	}
	
	public static int size()
	{
		Map<String, List<Post>> map = (Map<String, List<Post>>)cache.get(FQN);
		return (map != null ? map.size() : 0);
	}
	
	public static int size(int topicId)
	{
		List<Post> posts = (List<Post>)cache.get(FQN, Integer.toString(topicId));
		return (posts == null ? 0 : posts.size());
	}
	
	public static Collection<String> cachedTopics()
	{
		Map<String, List<Post>> map = (Map<String, List<Post>>)cache.get(FQN);
		if (map == null) {
			return new ArrayList<>();
		}
		
		return map.keySet();
	}
		
	public static List<Post> selectAllByTopicByLimit(int topicId, int start, int count)  
	{
		String tid = Integer.toString(topicId);
		
		List<Post> posts = (List<Post>)cache.get(FQN, tid);
		if (posts == null || posts.isEmpty()) {
			PostDAO pm = DataAccessDriver.getInstance().newPostDAO();
			posts = pm.selectAllByTopic(topicId);
			
			for (Iterator<Post> iter = posts.iterator(); iter.hasNext(); ) {
				PostCommon.preparePostForDisplay(iter.next());
			}
	
			Map<String, List<Post>> topics = (Map<String, List<Post>>)cache.get(FQN);
			final int CACHE_SIZE = SystemGlobals.getIntValue(ConfigKeys.POSTS_CACHE_SIZE);
			if (topics == null || topics.isEmpty() || topics.size() < CACHE_SIZE) {								
				cache.add(FQN, tid, posts);
			}
			else {
				if (!(topics instanceof LinkedHashMap<?, ?>)) {
					topics = new LinkedHashMap<String, List<Post>>(topics) {
						private static final long serialVersionUID = -4868402767486935543L;

						@Override protected boolean removeEldestEntry(java.util.Map.Entry<String, List<Post>> eldest) {
							return this.size() > CACHE_SIZE;
						}
					};
				}
				
				topics.put(tid, posts);
				cache.add(FQN, topics);
			}
		}
		
		int size = posts.size();
		
		while (size < start) {
			start -= count;
		}
		if (start < 0) {
			start = 0;
		}
		
		return posts.subList(start, (size < start + count) ? size : start + count);
   }
	
	public static void remove(int topicId, Post post)
	{
		synchronized (MUTEX_FQN) {
			String tid = Integer.toString(topicId);			
			List<Post> posts = (List<Post>)cache.get(FQN, tid);			
			if (posts != null) {
				posts.remove(post);				
				cache.add(FQN, tid, posts);
			}
		}
	}
	
	public static void update(int topicId, Post post)
	{
		synchronized (MUTEX_FQN) {
			String tid = Integer.toString(topicId);
			List<Post> posts = (List<Post>)cache.get(FQN, tid);
			if (posts != null && posts.contains(post)) {
				posts.set(posts.indexOf(post), post);
				cache.add(FQN, tid, posts);
			}
		}
	}
	
	public static void append(int topicId, Post post)
	{
		synchronized (MUTEX_FQN) {
			String tid = Integer.toString(topicId);
			List<Post> posts = (List<Post>)cache.get(FQN, tid);
			if (posts != null && !posts.contains(post)) {
				posts.add(post);
				cache.add(FQN, tid, posts);
			}
		}
	}
	
	public static void clearCache(int topicId)
	{
		cache.remove(FQN, Integer.toString(topicId));
	}
}


../jforum2-code/src/main/java/net/jforum/repository/ForumRepository.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Apr 23, 2003 / 10:46:05 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.repository;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import java.util.concurrent.ConcurrentHashMap;

import org.apache.log4j.Logger;

import net.jforum.ForumStartup;
import net.jforum.SessionFacade;
import net.jforum.cache.CacheEngine;
import net.jforum.cache.Cacheable;
import net.jforum.dao.CategoryDAO;
import net.jforum.dao.ConfigDAO;
import net.jforum.dao.DataAccessDriver;
import net.jforum.dao.ForumDAO;
import net.jforum.dao.UserDAO;
import net.jforum.entities.Category;
import net.jforum.entities.Forum;
import net.jforum.entities.LastPostInfo;
import net.jforum.entities.ModeratorInfo;
import net.jforum.entities.Post;
import net.jforum.entities.Topic;
import net.jforum.entities.User;
import net.jforum.exceptions.CategoryNotFoundException;
import net.jforum.exceptions.DatabaseException;
import net.jforum.security.PermissionControl;
import net.jforum.security.SecurityConstants;
import net.jforum.util.CategoryOrderComparator;

/**
 * Repository for the forums of the System.
 * This repository acts like a cache system, to avoid repetitive and unnecessary SQL queries
 * every time we need some info about the forums. 
 * To start the repository, call the method <code>start(ForumModel, CategoryModel)</code>
 * 
 * @author Rafael Steil
 */
public class ForumRepository implements Cacheable
{
	private static final Logger LOGGER = Logger.getLogger(ForumRepository.class);
	private static CacheEngine cache;
	private static ForumRepository instance;
	private static final String FQN = "forumRepository";
	private static final String CATEGORIES_SET = "categoriesSet";
	private static final String RELATION = "relationForums";
	private static final String FQN_MODERATORS = FQN + "/moderators";
	private static final String TOTAL_MESSAGES = "totalMessages";
	private static final String LOADED = "loaded";
	private static final String LAST_USER = "lastUser";
	private static final String TOTAL_USERS = "totalUsers";

	private static final Object MUTEX_FQN_MODERATORS = new Object();

	/**
	 * @see net.jforum.cache.Cacheable#setCacheEngine(net.jforum.cache.CacheEngine)
	 */
	@Override public void setCacheEngine(final CacheEngine engine)
	{
		ForumRepository.setEngine(engine);
	}

	private static void setEngine(final CacheEngine engine) 
	{
		cache = engine;
	}

	/**
	 * Starts the repository.
	 * 
	 * @param forumDAO The <code>ForumDAO</code> instance which will be
	 * used to retrieve information about the forums.
	 * @param categoryDAO The <code>CategoryDAO</code> instance which will
	 * be used to retrieve information about the categories.
     * @param  configModel ConfigDAO
	 */
	public static synchronized void start(final ForumDAO forumDAO, final CategoryDAO categoryDAO, final ConfigDAO configModel)
	{
		instance = new ForumRepository();

		if (cache.get(FQN, LOADED) == null) {
			instance.loadCategories(categoryDAO);
			instance.loadForums(forumDAO);
			instance.loadUsersInfo();
			cache.add(FQN, LOADED, "1");
		}
	}

	/**
	 * Gets a category by its id.
	 * A call to @link #getCategory(int, int) is made, using the return of
	 * <code>SessionFacade.getUserSession().getUserId()</code> as argument for the "userId" parameter.
	 * 
	 * @param categoryId The id of the category to check
	 * @return <code>null</code> if the category is either not found or access is denied.
	 * @see #getCategory(int, int)
	 */
	public static Category getCategory(final int categoryId)
	{
		return getCategory(SessionFacade.getUserSession().getUserId(), categoryId);
	}

	/**
	 * Gets a category by its id.
	 *  
	 * @param userId The user id who is requesting the category
	 * @param categoryId The id of the category to get
	 * @return <code>null</code> if the category is either not found or access is denied.
	 * @see #getCategory(int)
	 */
	public static Category getCategory(final int userId, final int categoryId)
	{
		if (!isCategoryAccessible(userId, categoryId)) {
			return null;
		}
		if (cache.get(FQN, Integer.toString(categoryId)) == null) {
            ForumStartup.startForumRepository(); // re-cache these, they were flushed out of cache for some reason
        }
		return (Category)cache.get(FQN, Integer.toString(categoryId));
	}

	public static Category getCategory(final PermissionControl permissonControl, final int categoryId)
	{
		if (!isCategoryAccessible(permissonControl, categoryId)) {
			return null;
		}
		if (cache.get(FQN, Integer.toString(categoryId)) == null) {
            ForumStartup.startForumRepository(); // re-cache these, they were flushed out of cache for some reason
        }
		return (Category)cache.get(FQN, Integer.toString(categoryId)); 
	}

	public static Category retrieveCategory(final int categoryId)
	{
        if (cache.get(FQN, Integer.toString(categoryId)) == null) {
            ForumStartup.startForumRepository(); // re-cache these, they were flushed out of cache for some reason
        }
		return (Category)cache.get(FQN, Integer.toString(categoryId));
	}

	/**
	 * Check is some category is accessible.
	 * 
	 * @param userId The user's id who is trying to get the category
	 * @param categoryId The category's id to check for access rights
	 * @return <code>true</code> if access to the category is allowed.
	 */
	public static boolean isCategoryAccessible(final int userId, final int categoryId)
	{
		return isCategoryAccessible(SecurityRepository.get(userId), categoryId);
	}

	/**
	 * Check if some category is accessible.
	 * A call to @link #isCategoryAccessible(int, int) is made, using the return of
	 * <code>SessionFacade.getUserSession().getUserId()</code> as argument for the "userId" parameter.
	 * 
	 * @param categoryId The category id to check for access rights
	 * @return <code>true</code> if access to the category is allowed.
	 */
	public static boolean isCategoryAccessible(final int categoryId)
	{
		return isCategoryAccessible(SessionFacade.getUserSession().getUserId(), categoryId);
	}

	/**
	 * Check is some category is accessible.
	 * 
	 * @param permissionControl The <code>PermissionControl</code> instance containing
	 * all security info related to the user.
	 * @param categoryId the category's id to check for access rights
	 * @return <code>true</code> if access to the category is allowed.
	 */
	public static boolean isCategoryAccessible(final PermissionControl permissionControl, final int categoryId)
	{
		return permissionControl.canAccess(SecurityConstants.PERM_CATEGORY, Integer.toString(categoryId));
	}

	/**
	 * Gets all categories from the cache. 
	 *
     * @param userId int
	 * @return <code>List</code> with the categories. Each entry is a <code>Category</code> object.
	 */
	public static List<Category> getAllCategories(int userId)
	{
		final PermissionControl permissionControl = SecurityRepository.get(userId);
		final List<Category> list = new ArrayList<>();

        if (cache.get(FQN, CATEGORIES_SET) == null) {
           ForumStartup.startForumRepository(); // re-cache these, they were flushed out of cache for some reason
        }
		Set<Category> categoriesSet = (Set<Category>)cache.get(FQN, CATEGORIES_SET);

		if (categoriesSet == null) {
			synchronized (ForumRepository.instance) {
				LOGGER.warn("Categories set returned null from the cache. Trying to reload");

				try {
					ForumRepository.instance.loadCategories(DataAccessDriver.getInstance().newCategoryDAO());
					ForumRepository.instance.loadForums(DataAccessDriver.getInstance().newForumDAO());
				}
				catch (Exception e) {
					throw new CategoryNotFoundException("Failed to get the category", e);
				}

				categoriesSet = (Set<Category>)cache.get(FQN, CATEGORIES_SET);

				if (categoriesSet == null) {
					throw new CategoryNotFoundException("Could not find all categories. There must be a problem with the cache");
				}
			}
		}

		for (final Iterator<Category> iter = ((Set<Category>)cache.get(FQN, CATEGORIES_SET)).iterator(); iter.hasNext(); ) {
			final Category category = getCategory(permissionControl, iter.next().getId());

			if (category != null) {
				list.add(category);
			}
		}

		return list;
	}

	/**
	 * Get all categories.
	 * A call to @link #getAllCategories(int) is made, passing the return of
	 * <code>SessionFacade.getUserSession().getUserId()</code> as the value for the "userId" argument.
	 * 
	 * @return <code>List</code> with the categories. Each entry is a <code>Category</code> object.
	 * @see #getAllCategories(int)
	 */
	public static List<Category> getAllCategories()
	{
		return getAllCategories(SessionFacade.getUserSession().getUserId());
	}

	private static Category findCategoryByOrder(final int order)
	{
		Category category = null;
		for (final Iterator<Category> iter = ((Set<Category>)cache.get(FQN, CATEGORIES_SET)).iterator(); iter.hasNext(); ) {
			category = iter.next();
			if (category.getOrder() == order) {
				break;
			}
		}

		return category;
	}

	/**
	 * Updates some category.
	 * This method only updated the "name" and "order" fields. 
	 *  
	 * @param category The category to update. The method will search for a category
	 * with the same id and update its data.
	 */
	public static synchronized void reloadCategory(final Category category)
	{
		final Category current = (Category)cache.get(FQN, Integer.toString(category.getId()));
		final Category currentAtOrder = findCategoryByOrder(category.getOrder());

		final Set<Category> tmpSet = new TreeSet<>(new CategoryOrderComparator());
		tmpSet.addAll((Set<Category>)cache.get(FQN, CATEGORIES_SET));

		if (currentAtOrder != null) {
			tmpSet.remove(currentAtOrder);
			cache.remove(FQN, Integer.toString(currentAtOrder.getId()));
		}

		tmpSet.add(category);
		cache.add(FQN, Integer.toString(category.getId()), category);

		if (currentAtOrder != null && category.getId() != currentAtOrder.getId()) {
			tmpSet.remove(current);
			currentAtOrder.setOrder(current.getOrder());
			tmpSet.add(currentAtOrder);

			cache.add(FQN, Integer.toString(currentAtOrder.getId()), currentAtOrder);
		}

		cache.add(FQN, CATEGORIES_SET, tmpSet);
	}

	/**
	 * Refreshes a category entry in the cache.
	 * 
	 * @param category The category to refresh
	 */
	public static synchronized void refreshCategory(Category category)
	{
		cache.add(FQN, Integer.toString(category.getId()), category);
		final Set<Category> set = (Set<Category>)cache.get(FQN, CATEGORIES_SET);
		set.remove(category);
		set.add(category);
		cache.add(FQN, CATEGORIES_SET, set);
	}

	public static synchronized void refreshForum(final Forum forum)
	{
		final Category category = retrieveCategory(forum.getCategoryId());
		category.addForum(forum);
		refreshCategory(category);
	}

	/**
	 * Remove a category from the cache
	 * @param category The category to remove. The instance should have the category id at least
	 */
	public static synchronized void removeCategory(Category category)
	{
		cache.remove(FQN, Integer.toString(category.getId()));

		final Set<Category> set = (Set<Category>)cache.get(FQN, CATEGORIES_SET);
		set.remove(category);
		cache.add(FQN, CATEGORIES_SET, set);

		final Map<String, String> map = (Map<String, String>)cache.get(FQN, RELATION);
		for (final Iterator<String> iter = map.values().iterator(); iter.hasNext(); ) {
			if (Integer.parseInt(iter.next()) == category.getId()) {
				iter.remove();
			}
		}

		cache.add(FQN, RELATION, map);
	}

	/**
	 * Adds a new category to the cache.
	 * @param category The category instance to insert in the cache.
	 */
	public static synchronized void addCategory(final Category category)
	{
		final String categoryId = Integer.toString(category.getId());
		cache.add(FQN, categoryId, category);

		Set<Category> set = (Set<Category>)cache.get(FQN, CATEGORIES_SET);

		if (set == null) {
			set = new TreeSet<>(new CategoryOrderComparator());
		}

		set.add(category);
		cache.add(FQN, CATEGORIES_SET, set);

		Map<String, String> relation = (Map<String, String>)cache.get(FQN, RELATION);
		if (relation == null) {
			relation = new ConcurrentHashMap<>();
		}

		for (final Iterator<Forum> iter = category.getForums().iterator(); iter.hasNext(); ) {
			final Forum forum = iter.next();
			relation.put(Integer.toString(forum.getId()), categoryId);
		}

		cache.add(FQN, RELATION, relation);
	}

	/**
	 * Gets a specific forum from the cache.	 
	 * 
	 * @param forumId The forum's ID to get
	 * @return <code>net.jforum.Forum</code> object instance or <code>null</code>
	 * if the forum was not found or is not accessible to the user.
	 */
	public static Forum getForum(int forumId)
	{
        Object cachedCategoryMap = cache.get(FQN, RELATION);
        String categoryId = null;

        if (cachedCategoryMap != null) {
           categoryId = ((Map<String, String>)cache.get(FQN, RELATION)).get(Integer.toString(forumId));
        } else {
            ForumStartup.startForumRepository(); // re-cache these, they were flushed out of cache for some reason
            cachedCategoryMap = cache.get(FQN, RELATION);
            if (cachedCategoryMap != null) {
                categoryId = ((Map<String, String>)cache.get(FQN, RELATION)).get(Integer.toString(forumId));
            } else {
                LOGGER.error("Give up! Something is wrong with cache.  Please check configuration.");
            }
        }

		if (categoryId != null) {
			Category category = (Category)cache.get(FQN, categoryId);

			if (isCategoryAccessible(category.getId())) {
				return category.getForum(forumId);
			}
		}

		return null;
	}

	public static boolean isForumAccessible(int forumId)
	{
		return isForumAccessible(SessionFacade.getUserSession().getUserId(), forumId);
	}

	public static boolean isForumAccessible(int userId, int forumId)
	{
		// avoiding spurious NPEs
		try {
			int categoryId = Integer.parseInt(((Map<String, String>)cache.get(FQN, RELATION)).get(Integer.toString(forumId)));
			return isForumAccessible(userId, categoryId, forumId);
		} catch (RuntimeException rtex) {
			return false;
		}
	}

	public static boolean isForumAccessible(int userId, int categoryId, int forumId)
	{
        if (cache.get(FQN, Integer.toString(categoryId)) == null) {
            ForumStartup.startForumRepository(); // re-cache these, they were flushed out of cache for some reason
        }
		return ((Category)cache.get(FQN, Integer.toString(categoryId))).getForum(userId, forumId) != null;
	}

	/**
	 * Adds a new forum to the cache repository.	 
	 * 
	 * @param forum The forum to add
	 */
	public static synchronized void addForum(Forum forum)
	{
		String categoryId = Integer.toString(forum.getCategoryId());

        if (cache.get(FQN, categoryId) == null) {
            ForumStartup.startForumRepository(); // re-cache these, they were flushed out of cache for some reason
        }

        Category category = (Category)cache.get(FQN, categoryId);
        category.addForum(forum);
		cache.add(FQN, categoryId, category);

		Map<String, String> map = (Map<String, String>)cache.get(FQN, RELATION);
		map.put(Integer.toString(forum.getId()), categoryId);
		cache.add(FQN, RELATION, map);

		Set<Category> set = (Set<Category>)cache.get(FQN, CATEGORIES_SET);
		cache.add(FQN, CATEGORIES_SET, set);
	}

	/**
	 * Removes a forum from the cache.
	 * 
	 * @param forum The forum instance to remove.
	 */
	public static synchronized void removeForum(final Forum forum)
	{
		String id = Integer.toString(forum.getId());
        if (cache.get(FQN, RELATION) == null) {
            ForumStartup.startForumRepository(); // re-cache these, they were flushed out of cache for some reason
        }
		Map<String, String> map = (Map<String, String>)cache.get(FQN, RELATION);
		map.remove(id);
		cache.add(FQN, RELATION, map);

		id = Integer.toString(forum.getCategoryId());

		Category category = (Category)cache.get(FQN, id);
		category.removeForum(forum.getId());
		cache.add(FQN, id, category);

		Set<Category> set = (Set<Category>)cache.get(FQN, CATEGORIES_SET);
		cache.add(FQN, CATEGORIES_SET, set);
	}

	/**
	 * Reloads a forum.
	 * The forum should already be in the cache and <b>SHOULD NOT</b>
	 * have its order changed. If the forum's order was changed, then you
	 * <b>MUST CALL</b> @link Category#changeForumOrder(Forum) <b>BEFORE</b> calling this method.
	 * 
	 * @param forumId int The forum to reload its information
	 */
	public static synchronized void reloadForum(int forumId)
	{
		Forum forum = DataAccessDriver.getInstance().newForumDAO().selectById(forumId);

		if (((Map<String, String>)cache.get(FQN, RELATION)).containsKey(Integer.toString(forumId))) {
			String id = Integer.toString(forum.getCategoryId());
			Category category = (Category)cache.get(FQN, id);

			forum.setLastPostInfo(null);
			forum.setLastPostInfo(ForumRepository.getLastPostInfo(forum));
			category.reloadForum(forum);

			cache.add(FQN, id, category);
			Set<Category> set = (Set<Category>)cache.get(FQN, CATEGORIES_SET);
			cache.add(FQN, CATEGORIES_SET, set);
		}

		getTotalMessages(true);
	}

	public static synchronized void updateForumStats(Topic topic, User user, Post post)
	{
		String forumId = Integer.toString(topic.getForumId());

		if (((Map<String, String>)cache.get(FQN, RELATION)).containsKey(forumId)) {
			Forum forum = getForum(topic.getForumId());

			LastPostInfo lpi = forum.getLastPostInfo();

			if (lpi == null) {
				lpi = new LastPostInfo();
			}

			lpi.setPostId(post.getId());
			lpi.setPostDate(post.getTime());
			lpi.setPostTimeMillis(post.getTime().getTime());
			lpi.setTopicId(topic.getId());
			lpi.setTopicReplies(topic.getTotalReplies());
			lpi.setUserId(user.getId());
			lpi.setUsername(user.getUsername());

			forum.setLastPostInfo(lpi);

			if (topic.getTotalReplies() == 0) {
				forum.setTotalTopics(forum.getTotalTopics() + 1);
			}

			forum.setTotalPosts(forum.getTotalPosts() + 1);

			Category category = retrieveCategory(forum.getCategoryId());
			category.reloadForum(forum);

			refreshCategory(category);
		}
	}

	/**
	 * Gets information about the last message posted in some forum.
	 * @param forum The forum to retrieve information
	 * @return LastPostInfo
	 */
	public static LastPostInfo getLastPostInfo(Forum forum)
	{
		LastPostInfo lpi = forum.getLastPostInfo();

		if (lpi == null || !forum.getLastPostInfo().hasInfo()) {
			lpi = DataAccessDriver.getInstance().newForumDAO().getLastPostInfo(forum.getId());
			forum.setLastPostInfo(lpi);
		}

		return lpi;
	}

	/**
	 * Gets information about the last message posted in some forum.
	 * 
	 * @param forumId The forum's id to retrieve information
	 * @return LastPostInfo
	 */
	public static LastPostInfo getLastPostInfo(int forumId)
	{
		return getLastPostInfo(getForum(forumId));
	}

	/**
	 * Gets information about the moderators of some forum.
	 * @param forumId The forum to retrieve information
	 * @return List
	 */
	public static List<ModeratorInfo> getModeratorList(final int forumId)
	{
		List<ModeratorInfo> list = (List<ModeratorInfo>)cache.get(FQN_MODERATORS, Integer.toString(forumId));

		if (list == null) {
			synchronized (MUTEX_FQN_MODERATORS) {
				try {
					list = DataAccessDriver.getInstance().newForumDAO().getModeratorList(forumId);
					cache.add(FQN_MODERATORS, Integer.toString(forumId), list);
				} catch (Exception e) {
					throw new DatabaseException(e);
				}
			}
		}

		return list;
	}

	public static void clearModeratorList()
	{
		cache.remove(FQN_MODERATORS);
	}

	public static User lastRegisteredUser()
	{
		User user = (User)cache.get(FQN, LAST_USER);
		if (user == null) {
			user = DataAccessDriver.getInstance().newUserDAO().getLastUserInfo();
			setLastRegisteredUser(user);
		}
		return user;
	}

	public static void setLastRegisteredUser(User user)
	{
		cache.add(FQN, LAST_USER, user);
	}

	public static Integer totalUsers()
	{
		Integer i = (Integer)cache.get(FQN, TOTAL_USERS);

		if (i == null) {
			i = DataAccessDriver.getInstance().newUserDAO().getTotalUsers();
			cache.add(FQN, TOTAL_USERS, i);
		}
		return i;
	}

	public static void incrementTotalUsers()
	{
		Integer i = totalUsers();

		cache.add(FQN, TOTAL_USERS, Integer.valueOf(i.intValue() + 1));
	}

	/**
	 * Gets the number of messages in the entire board.
	 * @return int
	 * @see #getTotalMessages(boolean)
	 */
	public static int getTotalMessages()
	{
		return getTotalMessages(false);
	}

	/**
	 * Gets the number of messages in the entire board.
	 * 
	 * @param fromDb If <code>true</code>, a query to the database will
	 * be made, to retrieve the desired information. If <code>false</code>, the
	 * data will be fetched from the cache.
	 * @return The number of messages posted in the board.
	 * @see #getTotalMessages()
	 */
	public static int getTotalMessages(boolean fromDb) 
	{
		Integer i = (Integer)cache.get(FQN, TOTAL_MESSAGES);

		int total = i != null ? i.intValue() : 0;

		if (fromDb || total == 0) {
			total = DataAccessDriver.getInstance().newForumDAO().getTotalMessages();
			cache.add(FQN, TOTAL_MESSAGES, Integer.valueOf(total));
		}

		return total;
	}

	public static synchronized void incrementTotalMessages()
	{
		int total = getTotalMessages(false);
		cache.add(FQN, TOTAL_MESSAGES, Integer.valueOf(total + 1));
	}

	/**
	 * Loads all forums.
     * @param fm ForumDAO
     */
	private void loadForums(ForumDAO fm)
	{
		List<Forum> list = fm.selectAll();

		Map<String, String> m = (Map<String, String>)cache.get(FQN, RELATION);
		if (m == null) {
			m = new ConcurrentHashMap<>();
		}

		int lastId = 0;
		Category category = null;
		String catId = null;

		for (Iterator<Forum> iter = list.iterator(); iter.hasNext(); ) {
			Forum forum = iter.next();

			if (forum.getCategoryId() != lastId) {
				if (category != null) {
					cache.add(FQN, catId, category);
				}

				lastId = forum.getCategoryId();
				catId = Integer.toString(forum.getCategoryId());
				category = (Category)cache.get(FQN, catId);
			}

			if (category == null) {
				throw new CategoryNotFoundException("Category for forum #" + forum.getId() + " not found");
			}

			String forumId = Integer.toString(forum.getId());
			category.addForum(forum);
			m.put(forumId, catId);
		}

		if (category != null) {
			cache.add(FQN, catId, category);
		}

		cache.add(FQN, RELATION, m);
	}

	private void loadUsersInfo()
	{
		UserDAO udao = DataAccessDriver.getInstance().newUserDAO();
		cache.add(FQN, LAST_USER, udao.getLastUserInfo());
		cache.add(FQN, TOTAL_USERS, Integer.valueOf(udao.getTotalUsers()));
	}

	/**
	 * Loads all categories.
     * @param cm CategoryDAO
     */
	private void loadCategories(CategoryDAO cm)
	{
		List<Category> categories = cm.selectAll();
		Set<Category> categoriesSet = new TreeSet<>(new CategoryOrderComparator());

		for (Iterator<Category> iter = categories.iterator(); iter.hasNext(); ) {
			Category category = iter.next();

			cache.add(FQN, Integer.toString(category.getId()), category);
			categoriesSet.add(category);
		}

		cache.add(FQN, CATEGORIES_SET, categoriesSet);
	}

	public static String getListAllowedForums() 
	{
		int n = 0;
		StringBuilder buf = new StringBuilder();

		List<Category> allCategories = ForumRepository.getAllCategories();

		for (Iterator<Category> iter = allCategories.iterator(); iter.hasNext(); ) {
			Collection<Forum> forums = iter.next().getForums();

			for (Iterator<Forum> tmpIterator = forums.iterator(); tmpIterator.hasNext(); ) {
				Forum forum = tmpIterator.next();

				if (ForumRepository.isForumAccessible(forum.getId())) {
					if(n++ > 0) {
						buf.append(',');
					}

					buf.append(forum.getId());
				}
			}
		}

		return (n <= 0) ? "-1" : buf.toString();
	}
}

../jforum2-code/src/main/java/net/jforum/repository/ModulesRepository.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 29/11/2004 22:53:28
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.repository;

import java.io.IOException;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.ConcurrentHashMap;

import org.apache.log4j.Logger;

import net.jforum.ConfigLoader;
import net.jforum.JForumExecutionContext;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;

/**
 * @author Rafael Steil
 */
public class ModulesRepository
{
	private static final Logger LOGGER = Logger.getLogger(ModulesRepository.class);
	
	private static Map<String, Properties> cache = new ConcurrentHashMap<>();
	private static final String ENTRIES = "entries";

	/**
	 * Loads all modules mapping.
	 * 
	 * @param baseDir The directory where the file "modulesMapping.properties" is placed.
	 * @throws IOException
	 */
	public static void init(final String baseDir)
	{
		cache.put(ENTRIES, ConfigLoader.loadModulesMapping(baseDir));
	}
	
	public static int size()
	{
		return cache.size();
	}
	
	/**
	 * Gets the fully qualified name of some given module name.
	 * 
	 * @param moduleName The module's name to get its class name
	 * @return The class name associated to the module name passed
	 * as argument, or <code>null</code> if not found.
	 */
	public static String getModuleClass(final String moduleName) {
		Properties properties = cache.get(ENTRIES);

		if (properties == null) {
            ModulesRepository.init(SystemGlobals.getValue(ConfigKeys.CONFIG_DIR));
            properties = cache.get(ENTRIES);
            if (properties == null) {
                LOGGER.error("Null modules. Askes moduleName: " + moduleName
                        + ", url=" + JForumExecutionContext.getRequest().getQueryString());
            }
		}
		
		return properties == null ? null : properties.getProperty(moduleName);
	}
}

../jforum2-code/src/main/java/net/jforum/repository/BanlistRepository.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 10/12/2006 19:12:49
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.repository;

import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import org.apache.log4j.Logger;

import net.jforum.cache.CacheEngine;
import net.jforum.cache.Cacheable;
import net.jforum.dao.BanlistDAO;
import net.jforum.dao.DataAccessDriver;
import net.jforum.entities.Banlist;

/**
 * @author Rafael Steil
 */
public class BanlistRepository implements Cacheable
{
	private static final Logger LOGGER = Logger.getLogger(BanlistRepository.class);
	private static CacheEngine cache;
	private static final String FQN = "banlist";
	private static final String BANLIST = "banlistCollection";
	private static boolean empty = false;
	
	/**
	 * @see net.jforum.cache.Cacheable#setCacheEngine(net.jforum.cache.CacheEngine)
	 */
	@Override public void setCacheEngine(CacheEngine engine)
	{
		BanlistRepository.setEngine(engine);
	}
	
	private static void setEngine(CacheEngine engine) 
	{
		cache = engine;
	}
	
	public static boolean shouldBan(Banlist ban) {
		boolean status = false;
				
		Map<Integer, Banlist> map = banlist();
		if (map.isEmpty() && !empty) {
			loadBanlist();
			map = banlist();
		}
		for (Banlist current: map.values()) {			
			if (current.matches(ban)) {
				status = true;
				break;
			}
		}
		
		return status;
	}

	public static void add(Banlist ban)
	{
		Map<Integer, Banlist> map = banlist();
		map.put(Integer.valueOf(ban.getId()), ban);
		
		cache.add(FQN, BANLIST, map);
		if (empty) {
			empty = false;
		}
	}
	
	public static void remove(int banlistId)
	{
		Map<Integer, Banlist> map = banlist();
		
		Integer key = Integer.valueOf(banlistId);
		
		if (map.containsKey(key)) {
			map.remove(key);
		}
		
		cache.add(FQN, BANLIST, map);
		if (map.isEmpty()) {
			empty = true;
		}
	}
	
	private static Map<Integer, Banlist> banlist()
	{
		Map<Integer, Banlist> map = (Map<Integer, Banlist>)cache.get(FQN, BANLIST);
        
		if (map == null) {
			map = new ConcurrentHashMap<>();
		}
		
		return map;
	}
	
	public static void loadBanlist() 
	{
		BanlistDAO dao = DataAccessDriver.getInstance().newBanlistDAO();
		List<Banlist> list = dao.selectAll();
		
		if (list.size() == 0) {
			empty = true;
		} else {
			for (Banlist ban: list) {
				BanlistRepository.add(ban);			
			}
		}
		LOGGER.debug("Loading banlist from DAO");
	}
}

../jforum2-code/src/main/java/net/jforum/repository/RegEmailRepository.java
package net.jforum.repository;

import java.util.Map;

import net.jforum.dao.DataAccessDriver;
import net.jforum.dao.RegEmailDAO;
import net.jforum.entities.Group;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;

import org.apache.commons.lang3.StringUtils;

public class RegEmailRepository {

	private static Map<String, Group> cache;

	static {
		load();
	}

	public static void load() {
		try {
		    final RegEmailDAO regEmailDao = DataAccessDriver.getInstance().newRegEmailDAO();
            cache = regEmailDao.selectAll();
		} catch (Exception e) {
			throw new RuntimeException("Error loading reg emails: ", e);
		}
	}

	public static int size() {
		return (cache != null ? cache.size() : 0);
	}

	public static int canRegister (final String email) {
		if (StringUtils.isBlank(email))
			return -1;

		// if ther are no restrictions, allow registration and put user in default group
		if (cache.isEmpty())
			return SystemGlobals.getIntValue(ConfigKeys.DEFAULT_USER_GROUP);

		// if there are restrictions, check each one if it allows registration
		// if so, return the group to put the user in
		for (Map.Entry<String, Group> entry : cache.entrySet()) {
			String domain = entry.getKey();
			if (email.endsWith(domain))
				return entry.getValue().getId();
		}

		// there are restrictions, but the user does not match any of them
		// put in default group IF that has been explicitly allowed
        if (SystemGlobals.getBoolValue(ConfigKeys.REGISTRATION_EMAIL_NOT_MATCHING_ENABLED))
			return SystemGlobals.getIntValue(ConfigKeys.DEFAULT_USER_GROUP);

		// otherwise, disallow registration
		return -1;
	}
}


../jforum2-code/src/main/java/net/jforum/repository/Tpl.java
/*
 * Copyright (c) JForum Team
 * 
 * All rights reserved.
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Mar 14, 2005 3:27:33 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.repository;

import java.io.FileInputStream;
import java.util.Iterator;
import java.util.Properties;

import net.jforum.cache.CacheEngine;
import net.jforum.cache.Cacheable;
import net.jforum.exceptions.ConfigLoadException;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;

/**
 * @author Rafael Steil
 */
public class Tpl implements Cacheable
{
	private static final String FQN = "templates";
	
	private static CacheEngine cache;
	
	/**
	 * @see net.jforum.cache.Cacheable#setCacheEngine(net.jforum.cache.CacheEngine)
	 */
	@Override public void setCacheEngine(final CacheEngine engine)
	{
		Tpl.setEngine(engine);
	}
	
	private static void setEngine(final CacheEngine engine) 
	{
		cache = engine;
	}

	/**
	 * Loads the HTML mappings file. 
	 * 
	 * @param filename The complete path to the file to load
	 * @throws ConfigLoadException if the file is not found or
	 * some other error occurs when loading the file.
	 */
	public static void load (final String filename)
	{
        Properties p = new Properties();
        try (FileInputStream fis = new FileInputStream(filename)) {
            p.load(fis);
            for (Iterator<?> iter = p.keySet().iterator(); iter.hasNext();) {
                String key = (String) iter.next();
                cache.add(FQN, key, p.getProperty(key));
            }
        } catch (Exception e) {
            e.printStackTrace();
            throw new ConfigLoadException("Error while trying to load " + filename + ": " + e);
        }
	}

	/**
	 * Gets a template filename by its configuration's key
	 * 
	 * @param key The Key to load.
	 * @return The html template filename
	 */
	public static String name (final String key)
	{
        String result = (String) cache.get(FQN, key);
		//LOGGER.info("name("+key+")="+result);

        // not all pages have mobile versions, try regular page if can't find a mobile page
        if (result == null) {
            if (key.endsWith("mobile")) {
                final String keyWithoutMobileSuffix = key.replaceFirst("\\.mobile$", "");
                result = name(keyWithoutMobileSuffix);
            }
        }

		if (result == null) {
			// cache was flushed, reload
			Tpl.load(SystemGlobals.getValue(ConfigKeys.TEMPLATES_MAPPING));
			result = name(key);
		}

		return result;
	}
}

../jforum2-code/src/main/java/net/jforum/repository/RolesRepository.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Apr 5, 2005 12:53:14 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.repository;

import net.jforum.cache.CacheEngine;
import net.jforum.cache.Cacheable;
import net.jforum.dao.generic.security.SecurityCommon;
import net.jforum.security.RoleCollection;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public class RolesRepository implements Cacheable
{
	private static final String FQN = "roles";
	private static CacheEngine cache;
	
	/**
	 * @see net.jforum.cache.Cacheable#setCacheEngine(net.jforum.cache.CacheEngine)
	 */
	@Override public void setCacheEngine(final CacheEngine engine)
	{
		RolesRepository.setEngine(engine);
	}
	
	private static void setEngine(final CacheEngine engine) 
	{
		cache = engine;
	}
	
	/**
	 * Gets the group roles.
	 * 
	 * @param groupId The group id
	 * @return The roles, if found, or <code>null</code> otherwise. 
	 */
	public static RoleCollection getGroupRoles(final int groupId)
	{
		return (RoleCollection)cache.get(FQN, Integer.toString(groupId));
	}
	
	/**
	 * Clears the cache
	 */
	public static void clear()
	{
		cache.remove(FQN);
	}
	
	/**
	 * Get merged roles from a set of groups
	 * @param ids The group ids
	 * @return The roles, if found, or <code>null</code> otherwise. 
	 */
	public static RoleCollection getGroupRoles(final int[] ids)
	{
		return (RoleCollection)cache.get(FQN, SecurityCommon.groupIdAsString(ids));
	}
	
	/**
	 * Adds merged roles to the cache.
	 * 
	 * @param groupIds The ids of the groups 
	 * @param roles The merges roles to add 
	 */
	public static void addGroupRoles(final int[] groupIds, final RoleCollection roles)
	{
		cache.add(FQN, SecurityCommon.groupIdAsString(groupIds), roles);
	}
}

../jforum2-code/src/main/java/net/jforum/repository/BBCodeRepository.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 24/01/2004 17:39:21
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.repository;

import net.jforum.cache.CacheEngine;
import net.jforum.cache.Cacheable;
import net.jforum.util.bbcode.BBCode;
import net.jforum.util.bbcode.BBCodeHandler;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public class BBCodeRepository implements Cacheable
{
	private static CacheEngine cache;
	private static final String FQN = "bbcode";
	private static final String BBCOLLECTION = "bbCollection";
	
	/**
	 * @see net.jforum.cache.Cacheable#setCacheEngine(net.jforum.cache.CacheEngine)
	 */
	@Override public void setCacheEngine(final CacheEngine engine)
	{
		BBCodeRepository.setEngine(engine);
	}	
	
	private static void setEngine(final CacheEngine engine) 
	{
		cache = engine;
	}
	
	public static void setBBCollection(final BBCodeHandler bbCollection)
	{
		cache.add(FQN, BBCOLLECTION, bbCollection);
	}
	
	public static BBCodeHandler getBBCollection()
	{
        BBCodeHandler handler = null;
        if (cache.get(FQN, BBCOLLECTION) == null) {
            // cache flushed this, reload
            handler = new BBCodeHandler().parse();
            BBCodeRepository.setBBCollection(handler);
        } else {
            handler = (BBCodeHandler)cache.get(FQN, BBCOLLECTION);
        }

		return handler;
	}
	
	public static BBCode findByName(final String tagName)
	{
		return getBBCollection().findByName(tagName);
	}
}

../jforum2-code/src/main/java/net/jforum/repository/RankingRepository.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.

 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:

 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 03/09/2003 / 23:42:55
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.repository;

import java.util.List;

import org.apache.log4j.Logger;

import net.jforum.cache.CacheEngine;
import net.jforum.cache.Cacheable;
import net.jforum.dao.DataAccessDriver;
import net.jforum.dao.RankingDAO;
import net.jforum.entities.Ranking;
import net.jforum.exceptions.RankingLoadException;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public class RankingRepository implements Cacheable
{
	private static final Logger LOGGER = Logger.getLogger(RankingRepository.class);
	private static CacheEngine cache;
	private static final String FQN = "ranking";
	private static final String ENTRIES = "entries";

	/**
	 * @see net.jforum.cache.Cacheable#setCacheEngine(net.jforum.cache.CacheEngine)
	 */
	@Override public void setCacheEngine(CacheEngine engine)
	{
		RankingRepository.setEngine(engine);
	}
	
	private static void setEngine(CacheEngine engine) 
	{
		cache = engine;
	}
	
	public static void loadRanks()
	{
		try {
			RankingDAO rm = DataAccessDriver.getInstance().newRankingDAO();
			List<Ranking> list = rm.selectAll();
			cache.add(FQN, ENTRIES, list);
			LOGGER.debug("Loading ranks from DAO");
		}
		catch (Exception e) {
			throw new RankingLoadException("Error while loading the rankings: " + e);
		}
	}
	
	/**
	 * Gets the title associated to total of messages the user have
	 * @param total Number of messages the user have. The ranking will be
	 * returned according to the range to which this total belongs to. 
	 * @return String with the ranking title. 
	 */	
	public static String getRankTitle(int rankId, int total) 
	{
		String title = null;
		
		if (rankId > 0) {
			title = getRankTitleById(rankId);
		}
		
		if (title == null) {
			title = getRankTitleByPosts(total);
		}
		
		return title;
	}
	
	private static String getRankTitleByPosts(int total)
	{
		Ranking lastRank = new Ranking();

        if (cache.get(FQN, ENTRIES) == null) {
            RankingRepository.loadRanks();
        }
		List<Ranking> rankList = (List<Ranking>)cache.get(FQN, ENTRIES);
		
		for (Ranking rank: rankList) {
			if (rank.isSpecial()) {
				continue;
			}
			
			if (total >= rank.getMin()) {				
				lastRank = rank;								
			} else {
				break;
			}
		}
		
		return lastRank.getTitle();
	}

	private static String getRankTitleById(int rankId)
	{
		Ranking rank = new Ranking();
		rank.setId(rankId);
		if (cache.get(FQN, ENTRIES) == null) {
            RankingRepository.loadRanks();
        }
		List<Ranking> rankList = (List<Ranking>)cache.get(FQN, ENTRIES);
		int index = rankList.indexOf(rank);
		
		return index > -1
			? rankList.get(index).getTitle()
			: null;
	}
	
	public static int size() {
		List<Ranking> rankList = (List<Ranking>)cache.get(FQN, ENTRIES);
		return (rankList != null ? rankList.size() : 0);
	}
}

../jforum2-code/src/main/java/net/jforum/repository/SmiliesRepository.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 13/01/2004 / 20:23:52
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.repository;

import java.util.Iterator;
import java.util.List;

import net.jforum.cache.CacheEngine;
import net.jforum.cache.Cacheable;
import net.jforum.dao.DataAccessDriver;
import net.jforum.entities.Smilie;
import net.jforum.exceptions.SmiliesLoadException;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public class SmiliesRepository implements Cacheable
{
	private static CacheEngine cache;
	private static final String FQN = "smilies";
	private static final String ENTRIES = "entries";
	private static boolean contexted = false;

	/**
	 * @see net.jforum.cache.Cacheable#setCacheEngine(net.jforum.cache.CacheEngine)
	 */
	@Override public void setCacheEngine(final CacheEngine engine)
	{
		SmiliesRepository.setEngine(engine);
	}
	
	private static void setEngine(final CacheEngine engine) 
	{
		cache = engine;
	}
	
	public static void loadSmilies()
	{
		try {
			cache.add(FQN, ENTRIES, DataAccessDriver.getInstance().newSmilieDAO().selectAll());
			contexted = false;
		}
		catch (Exception e) {
			throw new SmiliesLoadException("Error while loading smilies: " + e);
		}
	}
	
	public static List<Smilie> getSmilies()
	{
		List<Smilie> list = (List<Smilie>)cache.get(FQN, ENTRIES);
        if (list == null) {
           loadSmilies();
           list = (List<Smilie>)cache.get(FQN, ENTRIES);
        }
		if (!contexted) {
			String forumLink = SystemGlobals.getValue(ConfigKeys.FORUM_LINK);
			if (forumLink.endsWith("/")) {
                forumLink = forumLink.substring(0, forumLink.length() -1);
            }
			
			for (final Iterator<Smilie> iter = list.iterator(); iter.hasNext(); ) {
				final Smilie smilie = iter.next();
				smilie.setUrl(smilie.getUrl().replaceAll("#CONTEXT#", forumLink).replaceAll("\\\\", ""));
			}
			
			cache.add(FQN, ENTRIES, list);
			contexted = true;
		}
		
		return list;
	}
}

../jforum2-code/src/main/java/net/jforum/repository/SecurityRepository.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 *
 * Created on 18/11/2003 / 23:09:15
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.repository;

import org.apache.log4j.Logger;

import net.jforum.JForumExecutionContext;
import net.jforum.SessionFacade;
import net.jforum.cache.CacheEngine;
import net.jforum.cache.Cacheable;
import net.jforum.dao.DataAccessDriver;
import net.jforum.dao.GroupSecurityDAO;
import net.jforum.dao.UserDAO;
import net.jforum.entities.User;
import net.jforum.entities.UserSession;
import net.jforum.exceptions.SecurityLoadException;
import net.jforum.security.PermissionControl;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public class SecurityRepository implements Cacheable
{
	private static final Logger LOGGER = Logger.getLogger(SecurityRepository.class);
	private static CacheEngine cache;
	private static final String FQN = "security";

	/**
	 * @see net.jforum.cache.Cacheable#setCacheEngine(net.jforum.cache.CacheEngine)
	 */
	@Override public void setCacheEngine(CacheEngine engine)
	{
		SecurityRepository.setEngine(engine);
	}

	private static void setEngine(CacheEngine engine) 
	{
		cache = engine;
	}
	
	/***
	 * Load user's roles. 
	 * 
	 * @param userId The user's id
	 * @param force If <code>true</code>, forces a reload. If <code>false</code>, the call
	 * will be ignored if the roles are already loaded.
	 * 
	 * @see SecurityRepository#load(int)
	 * @see SecurityRepository#load(User)
	 * @see SecurityRepository#load(User, boolean)
     * @return PermissionControl
	 */
	public static PermissionControl load(int userId, boolean force)
	{
		if (force || cache.get(FQN, Integer.toString(userId)) == null) {
			UserDAO um = DataAccessDriver.getInstance().newUserDAO();
			
			return SecurityRepository.load(um.selectById(userId), force);
		}
		
		return SecurityRepository.get(userId);
	}

	/**
	 * Load user's roles.
	 * 
	 * @param userId The users's id
	 * 
	 * @see SecurityRepository#load(int, boolean)
	 * @see SecurityRepository#load(User)
	 * @see SecurityRepository#load(User, boolean)
     * @return PermissionControl
	 */
	public static PermissionControl load(int userId)
	{
		return SecurityRepository.load(userId, false);
	}
	
	/**
	 * Load user's roles.
	 * 
	 * @param user The <code>User</code> to load.
	 * 
	 * @see SecurityRepository#load(int)
	 * @see SecurityRepository#load(int, boolean) 
	 * @see SecurityRepository#load(User, boolean)
     * @return  PermissionControl
	 */
	public static PermissionControl load(User user)
	{
		return SecurityRepository.load(user, false);
	}

	/**
	 * Load user's roles.
	 * 
	 * @param user The <code>User</code> to load
	 * @param force If <code>true</code>, forces a reload. If <code>false</code>, the call
	 * will be ignored if the roles are already loaded.
	 * 
	 * @see SecurityRepository#load(int)
	 * @see SecurityRepository#load(int, boolean)
	 * @see SecurityRepository#load(User)
     * @return PermissionControl
	 */
	public static PermissionControl load(User user, boolean force)
	{
		String userId = Integer.toString(user.getId());
		
		if (force || cache.get(FQN, userId) == null) {
			PermissionControl pc = new PermissionControl();
			
			// load roles
			GroupSecurityDAO dao = DataAccessDriver.getInstance().newGroupSecurityDAO();
			pc.setRoles(dao.loadRolesByUserGroups(user));
			
			cache.add(FQN, userId, pc);			
			return pc;
		}
		
		return SecurityRepository.get(user.getId());
	}
	
	/**
	 * Check if the logged user has access to the role. 
	 * This method gets user's id from its session.
	 * 
	 * @param roleName The role name to verify
	 * @return <code>true</code> if the user has access to the role, <code>false</code> if access is denied
	 * @throws SecurityLoadException if case of errors while trying
	 * to load the roles
	 * @see #canAccess(String, String)
	 * @see #canAccess(int, String, String)
	 */
	public static boolean canAccess(String roleName)
	{
		return canAccess(roleName, null);
	}
	
	public static boolean canAccess(int userId, String roleName)
	{
		return canAccess(userId, roleName, null);
	}

	/**
	 * Check if the logged user has access to the role. 
	 * This method gets user's id from its session.
	 * 
	 * @param roleName The role name to verify
	 * @param value The value related to the role to verify for access
	 * @return <code>true</code> if the user has access to the role, <code>false</code> if access is denied
	 */
	public static boolean canAccess(String roleName, String value)
	{
		UserSession us = SessionFacade.getUserSession();
		
		if (us == null) {
			LOGGER.warn("Found null userSession. Going anonymous. Session id #" 
				+ JForumExecutionContext.getRequest().getSessionContext().getId());
			us = new UserSession();
			us.makeAnonymous();
		}
		
		return canAccess(us.getUserId(), roleName, value);
	}
	
	public static boolean canAccess(int userId, String roleName, String value)
	{
		PermissionControl pc = SecurityRepository.get(userId);
		
		if (pc == null) {
			throw new SecurityLoadException("Failed to load security roles for userId " + userId + " (null PermissionControl returned). "
				+ "roleName=" + roleName + ", roleValue=" + value);
		}
		
		return (value != null ? pc.canAccess(roleName, value) : pc.canAccess(roleName));
	}

	/**
	 * Gets the permission schema of some specific user.
	 * If the roles of the user aren't loaded yet, a call
	 * to {@link #load(int)} will be made.
	 * 
	 * @param userId The user's id to get the permissions
	 * @return The <code>PermissionControl</code> instance related
	 * to the user id passed as argument
	 * @throws SecurityLoadException if case of errors while trying
	 * to load the roles
	 */
	public static PermissionControl get(int userId)
	{
		PermissionControl pc = (PermissionControl)cache.get(FQN, Integer.toString(userId));
		
		if (pc == null) {			
			try {
				pc = load(userId);
			}
			catch (Exception e) {
				throw new SecurityLoadException(e);
			}
		}
		
		return pc;
	}

	/**
	 * Adds a new permission control schema to the cache
	 * 
	 * @param userId The user's id to associate with the schema
	 * @param pc The <code>PermissionControl</code> instance to add
	 */
	public static synchronized void add(int userId, PermissionControl pc)
	{
		cache.add(FQN, Integer.toString(userId), pc);
	}
	
	/**
	 * Remove the cached roles from a specific user.
	 * 
	 * @param userId The id of the user to remove from the cache
	 */
	public static synchronized void remove(int userId)
	{
		cache.remove(FQN, Integer.toString(userId));
	}
	
	/**
	 * Clear all cached security entries.
	 */
	public static synchronized void clean()
	{
		cache.remove(FQN);
	}
}

../jforum2-code/src/main/java/net/jforum/repository/SpamRepository.java
package net.jforum.repository;

import java.util.List;

import net.jforum.dao.DataAccessDriver;
import net.jforum.dao.SpamDAO;
import net.jforum.util.stats.StatsEvent;

public class SpamRepository {

	private static List<String> cache;

	static {
		load();
	}

	public static void load() {
		try {
		    final SpamDAO spamDao = DataAccessDriver.getInstance().newSpamDAO();
            cache =  spamDao.selectAll();
		} catch (Exception e) {
			throw new RuntimeException("Error loading spam patterns: ", e);
		}
	}

	public static int size() {
		return (cache != null ? cache.size() : 0);
	}

	public static String findSpam (final String text) {
		if (text != null) {
			for (final String pattern : cache) {
				//LOGGER.info("checking text.size="+text.length()+" for "+pattern);
				if (text.matches("(?si).*" + pattern + ".*")) {
					// gather some stats about how pervasive spamming actually is
					new StatsEvent("Spam", pattern).record();
					return pattern;
				}
			}
		}

		return null;
	}
}


../jforum2-code/src/main/java/net/jforum/security/SecurityConstants.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 18/03/2004 - 20:00:56
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.security;

/**
 * @author Rafael Steil
 */
public final class SecurityConstants 
{
	private SecurityConstants() {}
	
	public static final String PERM_ADMINISTRATION = "perm_administration";
	public static final String PERM_CATEGORY = "perm_category";
	public static final String PERM_FORUM = "perm_forum";
	public static final String PERM_ANONYMOUS_POST = "perm_anonymous_post";
	public static final String PERM_MODERATION = "perm_moderation";
	public static final String PERM_REPLY_WITHOUT_MODERATION = "perm_reply_without_moderation";
	public static final String PERM_MODERATION_APPROVE_MESSAGES = "perm_moderation_approve_messages";
	public static final String PERM_MODERATION_FORUMS = "perm_moderation_forums";
	public static final String PERM_MODERATION_POST_REMOVE = "perm_moderation_post_remove";
	public static final String PERM_MODERATION_POST_EDIT = "perm_moderation_post_edit";
	public static final String PERM_MODERATION_TOPIC_MOVE = "perm_moderation_topic_move";
	public static final String PERM_MODERATION_TOPIC_LOCK_UNLOCK = "perm_moderation_topic_lockUnlock";
	public static final String PERM_CREATE_STICKY_ANNOUNCEMENT_TOPICS = "perm_create_sticky_announcement_topics";
	public static final String PERM_CREATE_POLL = "perm_create_poll";
	public static final String PERM_VOTE = "perm_vote";
	public static final String PERM_READ_ONLY_FORUMS = "perm_read_only_forums";
	public static final String PERM_HTML_DISABLED = "perm_html_disabled";
	public static final String PERM_REPLY_ONLY = "perm_reply_only";
	public static final String PERM_KARMA_ENABLED = "perm_karma_enabled";
	public static final String PERM_ATTACHMENTS_ENABLED = "perm_attachments_enabled";
	public static final String PERM_ATTACHMENTS_DOWNLOAD = "perm_attachments_download";
	public static final String PERM_MODERATION_LOG = "perm_moderation_log";
	public static final String PERM_FULL_MODERATION_LOG = "perm_full_moderation_log";
}

../jforum2-code/src/main/java/net/jforum/security/Role.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.

 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:

 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 08/01/2004 / 21:34:57
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.security;

import java.io.Serializable;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public class Role implements Serializable
{
	private static final long serialVersionUID = 6022402482301273719L;
	private int id;
	private String name;
	private transient final RoleValueCollection roleValues = new RoleValueCollection();
	
	public void setId(final int id)
	{
		this.id = id;
	}
	
	public void setName(final String name)
	{
		this.name = name;
	}
	
	public int getId()
	{
		return this.id;
	}
	
	public String getName()
	{
		return this.name;
	}
	
	public RoleValueCollection getValues()
	{
		return this.roleValues;
	}
	
	/** 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override public boolean equals(final Object obj) 
	{
		if (obj == this) {
			return true;
		}
		
		if (!(obj instanceof Role)) {
			return false;
		}
		
		return (((Role)obj).getId() == this.id);
	}

	/** 
	 * @see java.lang.Object#hashCode()
	 */
	@Override public int hashCode() 
	{
		return this.id;
	}
	
	/** 
	 * @see java.lang.Object#toString()
	 */
	@Override public String toString() 
	{
		return "[name=" + this.name + ", values=(" + this.roleValues + ")]";
	}
}

../jforum2-code/src/main/java/net/jforum/security/PermissionControl.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Oct 10, 2003 / 21:46:35 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.security;

import java.io.Serializable;

import net.jforum.dao.GroupSecurityDAO;

/**
 * Methods and properties for all classes that need make use of security actions.
 * 
 * @author Rafael Steil
 * @version $Id$
 */
public class PermissionControl implements Serializable
{
	private static final long serialVersionUID = -7637111886973342962L;

	private RoleCollection roles;

	private transient GroupSecurityDAO smodel;

	public void setRoles(RoleCollection roles)
	{
		this.roles = roles;
	}

	public void setSecurityModel(GroupSecurityDAO smodel)
	{
		this.smodel = smodel;
	}

	public void addRole(int id, Role role)
	{
		this.smodel.addRole(id, role);
	}

	public void addRole(int id, Role role, RoleValueCollection roleValues)
	{
		this.smodel.addRole(id, role, roleValues);
	}

	public void addRoleValue(int id, Role role, RoleValueCollection roleValues)
	{
		this.smodel.addRoleValue(id, role, roleValues);
	}

	public void deleteAllRoles(int id)
	{
		this.smodel.deleteAllRoles(id);
	}

	/**
	 * Gets a role.
	 * 
	 * @param roleName
	 *            The role's name
	 * @return A <code>Role</code> object if the role was found, or <code>null</code> if not
	 *         found.
	 */
	public Role getRole(String roleName)
	{
		return this.roles.get(roleName);
	}

	/**
	 * @see net.jforum.security.PermissionControl#canAccess(java.lang.String)
	 * @param roleName
	 *            String
	 * @return boolean
	 */
	public boolean canAccess(String roleName)
	{
		return this.roles.containsKey(roleName);
	}

	/**
	 * @see net.jforum.security.PermissionControl#canAccess(java.lang.String, java.lang.String)
	 * @return boolean
	 * @param roleName
	 *            String
	 * @param roleValue
	 *            String
	 */
	public boolean canAccess(String roleName, String roleValue)
	{
		Role role = this.roles.get(roleName);

		if (role == null) {
			return false;
		}

		return role.getValues().contains(new RoleValue(roleValue));
	}
}

../jforum2-code/src/main/java/net/jforum/security/RoleCollection.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 08/01/2004 / 22:11:13
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.security;

import java.util.Iterator;
import java.util.LinkedHashMap;

/**
 * @author Rafael Steil
 */
public class RoleCollection extends LinkedHashMap<String, Role> 
{
	private static final long serialVersionUID = 5785913253137782980L;

	public void add(final Role role) 
	{
		super.put(role.getName(), role);
	}

	/**
	 * Gets a role.
	 * 
	 * @param name The role's name
	 * @return <code>Role</code> object if a role with a name equals to the name passed
	 * as argument is found, or <code>null</code> otherwise.
	 */
	public Role get(final String name)
	{
		return super.get(name);
	}

	/** 
	 * @see java.util.AbstractCollection#toString()
	 */
	@Override public String toString() 
	{
		final StringBuilder stringBuffer = new StringBuilder(512);

		for (final Iterator<Role> iter = this.values().iterator(); iter.hasNext(); ) {
			stringBuffer.append(iter.next()).append('\n');
		}

		return stringBuffer.toString();
	}
}

../jforum2-code/src/main/java/net/jforum/security/StopForumSpam.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Oct 16, 2011 / 12:04:35 AM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.security;

import java.io.IOException;

import org.apache.log4j.Logger;
import org.jdom2.Document;
import org.jdom2.Element;
import org.jdom2.JDOMException;
import org.jdom2.input.SAXBuilder;

import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;

/**
 * StopForumSpam 
 * @author Andowson Chang
 *
 */
public class StopForumSpam {
	private static final Logger LOGGER = Logger.getLogger(StopForumSpam.class);
	private static final String BASE_URL = SystemGlobals.getValue(ConfigKeys.STOPFORUMSPAM_API_URL);
	
	public static boolean checkIp(String ip) {		
		String url = BASE_URL + "ip=" + ip;		
		return getResult(url);
	}
	
	public static boolean checkEmail(String email) {
		String url = BASE_URL + "email=" + email;		
		return getResult(url);
	}
	
	private static boolean getResult(String url) {
		Element root = getXmlRootElement(url);
		String appears = (root != null) ? root.getChildTextTrim("appears") : null;
		return "yes".equals(appears);
	}
	
	public static Element getXmlRootElement(String url) {
		try {
			SAXBuilder xparser = new SAXBuilder();
			Document doc = xparser.build(url);
			Element root = doc.getRootElement();
			return root;
		} catch (JDOMException e) {
            // indicates a well-formedness error
			LOGGER.error("The result XML is not well-formed. " + e.getMessage());
			LOGGER.error("url="+url);
		} catch (IOException ioe) {
			LOGGER.error("Oh no!...IOException " + ioe.getMessage());
		}
		return null;
	}
}

../jforum2-code/src/main/java/net/jforum/security/PermissionItem.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 21/09/2003 / 16:39:49
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.security;

import java.util.List;

import net.jforum.util.FormSelectedData;

/**
 * Guarda os itens e os dados de um determinado campo de permissao.
 * No formulario de edicao das permissoes de acesso de algum grupo ou usuario,
 * esta classe encapsula o nome, id e os itens do campo de permissao.
 * 
 * @author Rafael Steil
 * @version $Id$
 */
public class PermissionItem 
{
	/**
	 * Nome da permissao
	 * */
	private String name;
	
	/**
	 * ID da permissao
	 * */
	private String id;
	
	/**
	 * Tipo ( Campo se multipla escolha ou unica )
	 * */
	private String type;
	
	/**
	 * Itens do campo ( id=valor)
	 * */
	private List<FormSelectedData> data;
	
	public static final int SINGLE = 1;
	public static final int MULTIPLE = 2;	
	
	/**
	 * Cria um novo objeto.
	 * 
	 * @param name Nome da permissao
	 * @param id ID da permissao
	 * @param type Tipo da permissao. <code>SINGLE</code> ou <code>MULTIPLE</code>
	 * @param data ArrayList com itens do campo ( contendo objetos do tipo <code>FormSelectedData</code>
	 * */
	public PermissionItem(final String name, final String id, final String type, final List<FormSelectedData> data)
	{
		this.name = name;
		this.id = id;
		this.type = type;
		this.data = data;
	}
	
	/**
	 * Pega o nome da permissao.
	 * 
	 * @return String contendo o nome da permissao
	 * */
	public String getName()
	{
		return this.name;
	}
	
	/**
	 * Pega o ID da permisao.
	 * 
	 * @return String contendo o ID da permissao
	 * */
	public String getId()
	{
		return this.id;
	}
	
	/**
	 * Pega o tipo de permissao.
	 * 
	 * @return int contendo o tipo. Para campo de unica escolha,
	 * retorna o valor de <code>SINGLE</code>, e <code>MULTIPLE</code>
	 * se o campo for de multipla escolha
	 * */
	public String getType()
	{
		return this.type;
	}
	
	/**
	 * Pega os itens do campo.
	 * 
	 * @return ArrayList contendo os itens da permissao. Cada posicao
	 * do ArrayList eh um objeto do tipo <code>FormSelectedData</code>
	 * */
	public List<FormSelectedData> getData()
	{
		return this.data;
	}
}
../jforum2-code/src/main/java/net/jforum/security/PermissionSection.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.

 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:

 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 21/09/2003 / 16:38:49
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.security;

/**
 * @author Rafael Steil
 */
import java.util.ArrayList;
import java.util.List;

/**
 * Stores the permissions page's sections and its respective items
 * 
 * @author Rafael Steil
 */
public class PermissionSection 
{
	private transient final String sectionName;
	private transient final String sectionId;
	private transient final List<PermissionItem> permissionItems;
	
	public PermissionSection(final String sectionName, final String sectionId)
	{
		this.sectionName = sectionName;
		this.sectionId = sectionId;
		this.permissionItems = new ArrayList<>();
	}		
	
	public void addPermission(final PermissionItem item)
	{
		this.permissionItems.add(item);
	}

	public List<PermissionItem> getPermissions()
	{
		return this.permissionItems;
	}

	public String getSectionId() {
		return this.sectionId;
	}

	public String getSectionName() {
		return this.sectionName;
	}
}

../jforum2-code/src/main/java/net/jforum/security/RoleValue.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 08/01/2004 / 21:38:57
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.security;

import java.io.Serializable;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public class RoleValue implements Serializable
{
	private static final long serialVersionUID = -707930821024922098L;
	private int roleId;
	private String value;
	
	public RoleValue() {
		// Empty Constructor
	}
	
	public RoleValue(final String value)
	{
		this.value = value;
	}
	
	public void setRoleId(final int roleId)
	{
		this.roleId = roleId;
	}
	
	public void setValue(final String value)
	{
		this.value = value;
	}
	
	public int getRoleId()
	{
		return this.roleId;
	}
	
	public String getValue()
	{
		return this.value;
	}
	
	/** 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override public boolean equals(final Object obj) 
	{
		if (obj == this) {
			return true;
		}
		
		if (!(obj instanceof RoleValue)) {
			return false;
		}
		
		return ((RoleValue)obj).getValue().equals(this.value);
	}

	/** 
	 * @see java.lang.Object#hashCode()
	 */
	@Override public int hashCode() 
	{
		return this.value.hashCode();
	}
	
	/** 
	 * @see java.lang.Object#toString()
	 */
	@Override public String toString() 
	{
		return this.value; 
	}
}

../jforum2-code/src/main/java/net/jforum/security/XMLPermissionControl.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 21/09/2003 / 16:36:44
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.security;

import java.io.File;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import javax.xml.XMLConstants;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;

import org.xml.sax.Attributes;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;
import org.xml.sax.helpers.DefaultHandler;

import net.jforum.JForumExecutionContext;
import net.jforum.exceptions.DatabaseException;
import net.jforum.exceptions.ForumException;
import net.jforum.util.DbUtils;
import net.jforum.util.FormSelectedData;
import net.jforum.util.I18n;
import net.jforum.util.preferences.SystemGlobals;

/**
 * Manipulates XML permission control file definition 
 * 
 * @author Rafael Steil
 */
public class XMLPermissionControl extends DefaultHandler 
{
    private transient PermissionSection section;
	private transient final PermissionControl permissionControl;
	private transient final List<PermissionSection> listSections;
	private transient List<FormSelectedData> permissionData;
	private transient final Map<String, List<SelectData>> queries;
	private String permissionName;
	private String permissionId;
	private String permissionType;
	
	private boolean alreadySelected;
	
	private static class SelectData
	{
		final private int id;
		final private String name;
		
		public SelectData(final int id, final String name)
		{
			this.id = id;
			this.name = name;
		}
		
		public int getId()
		{
			return this.id;
		}
		
		public String getName()
		{
			return this.name;
		}
	}
	
	public XMLPermissionControl(final PermissionControl permissionControl)
	{
		this.listSections = new ArrayList<>();
		this.permissionData = new ArrayList<>();
		this.queries = new ConcurrentHashMap<>();
		this.permissionControl = permissionControl;
	}

	/**
	 * @return <code>List</code> object containing <code>Section</code> objects. Each
	 * <code>Section</code>  contains many <code>PermissionItem</code> objects, 
	 * which represent the permission elements of some section. For its turn, the
	 * <code>PermissionItem</code> objects have many <code>FormSelectedData</code>
	 * objects, which are the ones responsible to store field values, and which values
	 * are checked and which not.
     * @param xmlFile String
	 */
	public List<PermissionSection> loadConfigurations(final String xmlFile)
	{
        try
        {
            final SAXParserFactory factory = SAXParserFactory.newInstance();
            factory.setValidating(false);
			factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
            final SAXParser parser = factory.newSAXParser();
            final File fileInput = new File(xmlFile);

            if (fileInput.exists()) {
                parser.parse(fileInput, this);
            }
            else {
                final InputSource inputSource = new InputSource(xmlFile);
                parser.parse(inputSource, this);
            }

            return this.listSections;
        }
        catch (Exception e)
        {
            throw new ForumException(e);
        }
    }

	/**
	 * @see org.xml.sax.ContentHandler#endElement(String, String, String)
	 */
	@Override public void endElement(final String namespaceURI, final String localName, final String tag)
		throws SAXException 
	{
		if ("section".equals(tag)) {
			this.listSections.add(this.section);
		}
		else if ("permission".equals(tag)) {
			this.section.addPermission(new PermissionItem(this.permissionName, this.permissionId, this.permissionType, this.permissionData));

			this.permissionData = new ArrayList<>();
		}
	}

	/**
	 * @see org.xml.sax.ErrorHandler#error(SAXParseException)
	 */
	@Override public void error(final SAXParseException exception) throws SAXException 
	{
		throw exception;
	}

	/**
	 * @see org.xml.sax.ContentHandler#startElement(String, String, String, Attributes)
	 */
	@Override public void startElement(
		final String namespaceURI,
		final String localName,
		final String tag,
		final Attributes atts)
		throws SAXException 
	{
		if ("section".equals(tag)) {
			final String title = I18n.getMessage(atts.getValue("title"));
			this.section = new PermissionSection(title, atts.getValue("id"));
		}
		else if ("permission".equals(tag)) {
			final String title = I18n.getMessage(atts.getValue("title"));
			
			this.permissionName = title;
			this.permissionId = atts.getValue("id");
			this.permissionType = atts.getValue("type");
			this.alreadySelected = false;
		}
		else if ("sql".equals(tag)) {
			final String refName = atts.getValue("refName");
			
			// If refName is present, then we have a template query
			if (refName != null) {
                ResultSet resultSet = null;
                PreparedStatement pstmt = null;
                
				try {
					pstmt = JForumExecutionContext.getConnection().prepareStatement(
						SystemGlobals.getSql(atts.getValue("queryName")));
					resultSet = pstmt.executeQuery();
					
					final String valueField = atts.getValue("valueField");
					final String captionField = atts.getValue("captionField");
					
					final List<SelectData> list = new ArrayList<>();
					
					while (resultSet.next()) {
						list.add(new SelectData(resultSet.getInt(valueField), resultSet.getString(captionField)));
					}
					
					this.queries.put(refName, list);
				}
				catch (Exception e) {
                    throw new DatabaseException(e);
				}
				finally {
                    DbUtils.close(resultSet, pstmt);
				}
			}
			else {
				// If it gets here, then it should be a <sql ref="xxxx"> section
				RoleValueCollection roleValues = new RoleValueCollection();
				Role role = this.permissionControl.getRole(this.permissionId);
				
				if (role != null) {
					roleValues = role.getValues();
				}
				
				List<SelectData> list = this.queries.get(atts.getValue("ref"));
				
				for (Iterator<SelectData> iter = list.iterator(); iter.hasNext(); ) {
					SelectData data = iter.next();
					
					String id = Integer.toString(data.getId());
					RoleValue roleValue = roleValues.get(id);

					this.permissionData.add(new FormSelectedData(data.getName(), id, roleValue == null));
				}
			}
		}
		else if ("option".equals(tag)) {
			boolean selected = false;
			
			if (this.permissionType.equals("single")) {
				if (this.permissionControl.canAccess(this.permissionId) && atts.getValue("value").equals("allow") && !this.alreadySelected) {
					selected = true;
					this.alreadySelected = true;
				}
			}
			else {
				throw new UnsupportedOperationException("'option' tag with 'multiple' attribute support not yet implemented");
			}
			
			this.permissionData.add(new FormSelectedData(
				I18n.getMessage(atts.getValue("description")), atts.getValue("value"), selected));
		}
	}
}

../jforum2-code/src/main/java/net/jforum/security/RoleValueCollection.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.

 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:

 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 08/01/2004 / 21:41:11
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.security;

import java.io.Serializable;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedHashSet;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public class RoleValueCollection extends LinkedHashSet<Object> implements Serializable 
{
	private static final long serialVersionUID = 4067802891802773419L;

	/**
	 * Gets a <code>RoleValue</code> by its name.
	 * 
	 * @param valueName The <code>RoleValue</code> name
	 * @return The <code>RoleValue</code> object if found, or <code>null</code> if not found
	 */
	public RoleValue get(final String valueName)
	{
		for (final Iterator<Object> iter = this.iterator(); iter.hasNext(); ) {
			final RoleValue v = (RoleValue)iter.next();
			
			if (v.getValue().equals(valueName)) {
				return v;
			}
		}
		
		return null;
	}
	
	/** 
	 * @see java.util.HashSet#contains(java.lang.Object)
	 */
	@Override public boolean contains(final Object o) 
	{
		return super.contains(o);
	}
	
	/** 
	 * @see java.util.ArrayList#add(java.lang.Object)
	 */
	@Override public boolean add(final Object o) 
	{
		if (!(o instanceof RoleValue)) {
			throw new IllegalArgumentException("Object passed as parameter is not a RoleValue type");
		}

		return super.add(o);
	}

	/** 
	 * @see java.util.Collection#addAll(java.util.Collection)
	 */
	@Override public boolean addAll(final Collection<?> c) 
	{
		boolean status = true;
		
		for (final Iterator<?> iter = c.iterator(); iter.hasNext(); ) {
			status = this.add(iter.next());
		}
		
		return status;
	}
}

../jforum2-code/src/main/java/net/jforum/csrf/CsrfListener.java
package net.jforum.csrf;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;

import javax.servlet.ServletContext;
import javax.servlet.ServletContextEvent;
import javax.servlet.ServletContextListener;

import org.owasp.csrfguard.CsrfGuard;

/**
 * Reads OWASP format property file with one exception. We add all the
 * "org.owasp.csrfguard.unprotected" properties at runtime using the csrf.properties file.
 * 
 * Except for the new addCsrfExcludeProperties() method, all code was copied
 * from OWASP's CsrfGuardServletContextListener.java
 * https://www.owasp.org/index.php/CSRFGuard_3_Configuration
 * 
 * Also added appPath since /WEB-INF wasn't loading
 * 
 * @author Jeanne Boyarsky
 */
public class CsrfListener implements ServletContextListener {
    private static final String CONFIG_PARAM = "Owasp.CsrfGuard.Config";
    private static final String CONFIG_EXTENSIONS_PARAM = "Owasp.CsrfGuard.Config.Extensions";
    private static final String CONFIG_PRINT_PARAM = "Owasp.CsrfGuard.Config.Print";

    @Override public void contextInitialized(ServletContextEvent event) {
        ServletContext context = event.getServletContext();
        String appPath = event.getServletContext().getRealPath("");
        if (appPath != null && appPath.endsWith(File.separator)) {
			// On Tomcat, getRealPath ends with a "/", whereas on Jetty, it does not. The next line allows for that.
        	appPath = appPath.substring(0, appPath.lastIndexOf(File.separator));
        }
        String config = context.getInitParameter(CONFIG_PARAM);
        String extensions = context.getInitParameter(CONFIG_EXTENSIONS_PARAM);
        if (config == null) {
            throw new RuntimeException(String.format("failure to specify context init-param - %s", CONFIG_PARAM));
        }
        if (extensions == null) {
            throw new RuntimeException(String.format("failure to specify context init-param - %s", CONFIG_EXTENSIONS_PARAM));
        }
        Properties properties = new Properties();
        try (InputStream is = getResourceStream(appPath + config, context)) {
            properties.load(is);
            addCsrfExcludeProperties(appPath + extensions, properties);
            CsrfGuard.load(properties);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        String printConfig = context.getInitParameter(CONFIG_PRINT_PARAM);
        if (printConfig != null && Boolean.parseBoolean(printConfig)) {
            context.log(CsrfGuard.getInstance().toString());
        }
    }

    /**
     * custom function
     * 
     * @throws IOException
     * @throws
     */
    private void addCsrfExcludeProperties(String csrfPath, Properties properties) throws IOException {
        File csrfFile = new File(csrfPath);
        Properties csrfProperties = new Properties();
        csrfProperties.load(new FileInputStream(csrfFile));
        int i = 0;
        for (Object key : csrfProperties.keySet()) {
            String value = csrfProperties.getProperty(key.toString());
            i++;
            if (!value.equals("AddToken")) {
                properties.put("org.owasp.csrfguard.unprotected." + i, key);
            }
        }
    }

    @Override public void contextDestroyed(ServletContextEvent event) {
        /** nothing to do **/
    }

    private InputStream getResourceStream(String resourceName, ServletContext context) throws IOException {
        InputStream is = null;
        /** try classpath **/
        is = getClass().getClassLoader().getResourceAsStream(resourceName);
        /** try web context **/
        if (is == null) {
            String fileName = context.getRealPath(resourceName);
            if (fileName != null) {
            	File file = new File(fileName); 
            	if (file.exists()) {
            		is = new FileInputStream(fileName);
            	}
            }
        }
        /** try current directory **/
        if (is == null) {
        	if (resourceName != null) {
        		File file = new File(resourceName);        	
        		if (file.exists()) {
        			is = new FileInputStream(resourceName);
        		}
        	}
        }
        /** fail if still empty **/
        if (is == null) {
            throw new IOException(String.format("unable to locate resource - %s", resourceName));
        }
        return is;
    }
}


../jforum2-code/src/main/java/net/jforum/csrf/CsrfHttpServletRequestWrapper.java
package net.jforum.csrf;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletRequestWrapper;

/**
 * Pass method instead of requestUri to match unprotected logic from csrf.properties
 * @author Jeanne Boyarsky
 */

public class CsrfHttpServletRequestWrapper extends HttpServletRequestWrapper {

    private final String actionMethodName;
	private HttpServletRequest originalRequest;

    public CsrfHttpServletRequestWrapper (final HttpServletRequest request, final String actionMethodName) {
        super(request);
        this.actionMethodName = actionMethodName;
        this.originalRequest = request;
    }

    @Override
    public String getRequestURI() {
        return actionMethodName;
    }

    @Override
	public String getHeader (String name) {
		if (name.toLowerCase().equals("x-requested-with")) {
			String value = originalRequest.getHeader("X-Requested-With");
			if (value == null) {
				return null;
			} else if (value.equals("XMLHttpRequest")) {
				return value;
			} else {
				// This is the change to fix non-standard browser behavior
				// E.g., the Android 4.1+ browser sends that header even for non-AJAX requests
				return null;
			}
		} 
		
		return originalRequest.getHeader(name);
	}
}


../jforum2-code/src/main/java/net/jforum/csrf/CsrfFilter.java
package net.jforum.csrf;

import java.io.IOException;

import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.apache.commons.fileupload.servlet.ServletRequestContext;
import org.owasp.csrfguard.CsrfGuard;
import org.owasp.csrfguard.http.InterceptRedirectResponse;
import org.owasp.csrfguard.log.LogLevel;

import net.jforum.context.RequestContext;
import net.jforum.context.web.WebRequestContext;

/**
 * Didn't use OWASP filter because couldn't map jforum actions to urls consistently.
 * Copied from OWASP and added getJForumMethodName() and changed logic near isValidRequest line.
 * 
 * @author Jeanne Boyarsky
 */

public class CsrfFilter implements Filter {

    public static final String OWASP_CSRF_TOKEN_NAME = "OWASP_CSRFTOKEN";

    private FilterConfig filterConfig = null;

    @Override public void destroy() {
        filterConfig = null;
    }

    @Override public void init (FilterConfig filterConfig) throws ServletException {
        this.filterConfig = filterConfig;
    }

    private String getJForumMethodName (HttpServletRequest req) throws IOException {
        String module = null;
        boolean multiPart = ServletFileUpload.isMultipartContent(new ServletRequestContext(req));
        /*
         * If a multipart request, we know that CSRF protection is needed (it is a post/upload).
		 * Don't actually look up the module since that will cause the input stream
		 * to get read and then be unavailable for the real request.
         */
        if (multiPart) {
            module = "multipart request: " + req.getRequestURI();
        } else {
            RequestContext request = new WebRequestContext(req);
            module = request.getAction();
            if (module == null) {
                module = "unknown module for " + req.getRequestURI();
            }
        }
        
        return module;
    }

    @Override public void doFilter (ServletRequest request, ServletResponse response, FilterChain filterChain)
			throws IOException, ServletException {
        /** only work with HttpServletRequest objects **/
        if (request instanceof HttpServletRequest && response instanceof HttpServletResponse) {
            CsrfGuard csrfGuard = CsrfGuard.getInstance();
            HttpServletRequest httpRequest = (HttpServletRequest) request;
            HttpSession session = httpRequest.getSession(false);
            if (session == null) {
                // If there is no session, no harm can be done
                filterChain.doFilter(httpRequest, (HttpServletResponse) response);
                // added this because wasn't creating tokens on initial request
				try {
					session = httpRequest.getSession(true);
				} catch (IllegalStateException isex) {
					/* throws "Cannot create a session after the response has been committed" */
				}
                csrfGuard.updateTokens(httpRequest);
                return;
            }
            csrfGuard.getLogger().log(LogLevel.Debug, String.format("CsrfGuard analyzing request %s", httpRequest.getRequestURI()));
            InterceptRedirectResponse httpResponse = new InterceptRedirectResponse((HttpServletResponse) response, httpRequest, csrfGuard);
            // if (MultipartHttpServletRequest.isMultipartRequest(httpRequest)) {
            //     httpRequest = new MultipartHttpServletRequest(httpRequest);
            // }
            /**
             * Custom code
             */
            // bypass uri ends with /
            if (httpRequest.getRequestURI().endsWith("/")) {
            	csrfGuard.getLogger().log("bypass uri="+httpRequest.getRequestURI());
            	filterChain.doFilter(httpRequest, httpResponse);
            	return;            	
            }
            String name = getJForumMethodName(httpRequest);
            CsrfHttpServletRequestWrapper csrfRequestWrapper = new CsrfHttpServletRequestWrapper(httpRequest, name);
            if (session.isNew() && csrfGuard.isUseNewTokenLandingPage()) {
                csrfGuard.writeLandingPage(httpRequest, httpResponse);                
            } else if (csrfGuard.isValidRequest(csrfRequestWrapper, httpResponse)) {
                filterChain.doFilter(httpRequest, httpResponse);
            } else {
                /** invalid request - nothing to do - actions already executed **/
            }
            /** update tokens **/
            csrfGuard.updateTokens(httpRequest);
        } else {
            filterConfig.getServletContext().log(
				String.format("[WARNING] CsrfGuard does not know how to work with requests of class %s ", request.getClass().getName()));
            filterChain.doFilter(request, response);
        }
    }
}


../jforum2-code/src/main/java/net/jforum/csrf/CsrfLogger.java
package net.jforum.csrf;

import org.apache.log4j.Logger;
import org.owasp.csrfguard.log.ILogger;
import org.owasp.csrfguard.log.LogLevel;

public class CsrfLogger implements ILogger {

	private static final long serialVersionUID = -4857601483759096197L;

    private static final Logger LOGGER = Logger.getLogger(CsrfLogger.class);

	@Override
	public void log (String msg) {
		LOGGER.info(msg.replaceAll("(\\r|\\n)", ""));
	}

	@Override
	public void log (LogLevel level, String msg) {
		// Remove CR and LF characters to prevent CRLF injection
		String sanitizedMsg = msg.replaceAll("(\\r|\\n)", "");

		switch(level) {
			case Trace:
				LOGGER.trace(sanitizedMsg);
				break;
			case Debug:
				LOGGER.debug(sanitizedMsg);
				break;
			case Info:
				LOGGER.info(sanitizedMsg);
				break;
			case Warning:
				LOGGER.warn(sanitizedMsg);
				break;
			case Error:
				LOGGER.error(sanitizedMsg);
				break;
			case Fatal:
				LOGGER.fatal(sanitizedMsg);
				break;
			default:
				throw new RuntimeException("unsupported log level " + level);
		}
	}

	@Override
	public void log (Exception exception) {
		LOGGER.warn(exception.getLocalizedMessage(), exception);
	}

	@Override
	public void log (LogLevel level, Exception exception) {
			switch(level) {
			case Trace:
				LOGGER.trace(exception.getLocalizedMessage(), exception);
				break;
			case Debug:
				LOGGER.debug(exception.getLocalizedMessage(), exception);
				break;
			case Info:
				LOGGER.info(exception.getLocalizedMessage(), exception);
				break;
			case Warning:
				LOGGER.warn(exception.getLocalizedMessage(), exception);
				break;
			case Error:
				LOGGER.error(exception.getLocalizedMessage(), exception);
				break;
			case Fatal:
				LOGGER.fatal(exception.getLocalizedMessage(), exception);
				break;
			default:
				throw new RuntimeException("unsupported log level " + level);
		}
	}
}

../jforum2-code/src/main/java/net/jforum/sso/SSOUtils.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Jun 2, 2005 6:56:25 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.sso;

import net.jforum.dao.DataAccessDriver;
import net.jforum.dao.UserDAO;
import net.jforum.entities.User;
import net.jforum.repository.ForumRepository;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;

/**
 * General utilities to use with SSO.
 * 
 * @author Rafael Steil
 */
public class SSOUtils
{
	private transient String username;
	private transient boolean exists = true;
	private transient User user;
	private transient UserDAO dao;

	/**
	 * Checks if a user exists in the database
	 * 
	 * @param username The username to check
	 * @return <code>true</code> if the user exists. If <code>false</code> is
	 * returned, then you can insert the user by calling {@link #register(String, String)}
	 * @see #register(String, String)
	 * @see #getUser()
	 */
	public boolean userExists(final String username)
	{
		this.username = username;
		this.dao = DataAccessDriver.getInstance().newUserDAO();

		this.user = this.dao.selectByName(username);
		this.exists = this.user != null;

		return this.exists;
	}

	/**
	 * Registers a new user. 
	 * This method should be used together with {@link #userExists(String)}. 
	 * 
	 * @param password the user's password. It <em>should</em> be the real / final 
	 * password. In other words, the data passed as password is the data that'll be
	 * written to the database
	 * @param email the user's email
	 * @see #getUser()
	 */
    public void register(final String password, final String email) 
    {
        if (this.exists) {
            return;
        }

        // Is a new user for us. Register him
        this.user = new User();
        this.user.setUsername(this.username);
        this.user.setPassword(password);
        this.user.setEmail(email);
        this.user.setActive(1);

        this.dao.addNew(this.user, SystemGlobals.getIntValue(ConfigKeys.DEFAULT_USER_GROUP));

        // Update the information
        ForumRepository.setLastRegisteredUser(this.user);
        ForumRepository.incrementTotalUsers();
    }

	/**
	 * Gets the user associated to this class instance.
	 * 
	 * @return the user
	 */
	public User getUser()
	{
		return this.user;
	}
}

../jforum2-code/src/main/java/net/jforum/sso/RemoteUserSSO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Mar 28, 2005 7:36:00 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.sso;

import net.jforum.context.RequestContext;
import net.jforum.entities.UserSession;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;

/**
 * Simple SSO authenticator. This class will try to validate a user by simple checking
 * <code>request.getRemoteUser()</code> is not null.
 * 
 * @author Rafael Steil
 * @author Daniel Campagnoli
 * @version $Id$
 */
public class RemoteUserSSO implements SSO
{
	/**
	 * @see net.jforum.sso.SSO#authenticateUser(net.jforum.context.RequestContext)
     * @param request AWebContextRequest     * @return String
	 */
	@Override public String authenticateUser(final RequestContext request)
	{
		return request.getRemoteUser();
	}

	@Override public boolean isSessionValid(final UserSession userSession, final RequestContext request)
	{
		final String remoteUser = request.getRemoteUser();
		boolean result = true;

		// user has since logged out
		if (remoteUser == null && userSession.getUserId() != SystemGlobals.getIntValue(ConfigKeys.ANONYMOUS_USER_ID)) {
			result = false;
		}
		// user has since logged in
		else if (remoteUser != null
				&& userSession.getUserId() == SystemGlobals.getIntValue(ConfigKeys.ANONYMOUS_USER_ID)) {
			result = false;
		}
		// user has changed user
		else if (remoteUser != null && !remoteUser.equals(userSession.getUsername())) {
			result = false;
		}
        
		return result;
	}
}

../jforum2-code/src/main/java/net/jforum/sso/LDAPAuthenticator.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Jun 2, 2005 5:41:11 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.sso;

import java.util.Hashtable;
import java.util.Map;

import javax.naming.AuthenticationException;
import javax.naming.Context;
import javax.naming.NamingException;
import javax.naming.directory.Attribute;
import javax.naming.directory.DirContext;
import javax.naming.directory.InitialDirContext;

import net.jforum.dao.UserDAO;
import net.jforum.entities.User;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;

/**
 * Authenticate users against a LDAP server. 
 * 
 * This class must use Hashtable because the InitialDirContext constructor needs it.
 *
 * @author Rafael Steil
 */
public class LDAPAuthenticator implements LoginAuthenticator
{
	private Hashtable<String, String> prepareEnvironment()
	{
		Hashtable<String, String> h = new Hashtable<String, String>();
		
		h.put(Context.INITIAL_CONTEXT_FACTORY, SystemGlobals.getValue(ConfigKeys.LDAP_FACTORY));
		h.put(Context.PROVIDER_URL, SystemGlobals.getValue(ConfigKeys.LDAP_SERVER_URL));
		
		String protocol = SystemGlobals.getValue(ConfigKeys.LDAP_SECURITY_PROTOCOL);
		
		if (protocol != null && !"".equals(protocol.trim())) {
			h.put(Context.SECURITY_PROTOCOL, protocol);
		}

		String  authentication = SystemGlobals.getValue(ConfigKeys.LDAP_AUTHENTICATION);

		if (authentication != null && !"".equals(authentication.trim())) {
			h.put(Context.SECURITY_AUTHENTICATION, authentication);
		}
		
		return h;
	}
	
	/**
	 * @see net.jforum.sso.LoginAuthenticator#validateLogin(java.lang.String, java.lang.String, java.util.Map)
	 */
	@Override public User validateLogin(String username, String password, Map<?, ?> extraParams)
	{
		Hashtable<String, String> environment = this.prepareEnvironment();
		
		StringBuilder principal = new StringBuilder(256)
			.append(SystemGlobals.getValue(ConfigKeys.LDAP_LOGIN_PREFIX))
			.append(username)
			.append(',')
			.append(SystemGlobals.getValue(ConfigKeys.LDAP_LOGIN_SUFFIX));
		
		environment.put(Context.SECURITY_PRINCIPAL, principal.toString());
		environment.put(Context.SECURITY_CREDENTIALS, password);
		
		DirContext dir = null;
		
		try {
			dir = new InitialDirContext(environment);
			
			String lookupPrefix = SystemGlobals.getValue(ConfigKeys.LDAP_LOOKUP_PREFIX);
			String lookupSuffix = SystemGlobals.getValue(ConfigKeys.LDAP_LOOKUP_SUFFIX);
			
			if (lookupPrefix == null || lookupPrefix.length() == 0) {
				lookupPrefix = SystemGlobals.getValue(ConfigKeys.LDAP_LOGIN_PREFIX);
			}
			
			if (lookupSuffix == null || lookupSuffix .length() == 0) {
				lookupSuffix = SystemGlobals.getValue(ConfigKeys.LDAP_LOGIN_SUFFIX);
			}

			String lookupPrincipal = lookupPrefix + username + "," + lookupSuffix ;

			Attribute att = dir.getAttributes(lookupPrincipal ).get(SystemGlobals.getValue(ConfigKeys.LDAP_FIELD_EMAIL));
			
			SSOUtils utils = new SSOUtils();
			
			if (!utils.userExists(username)) {
				String email = att != null ? (String)att.get() : "noemail";
				utils.register("ldap", email);
			}
			
			return utils.getUser();
		}
		catch (AuthenticationException e) {
			return null;
		}
        catch (NamingException e)
        {
            return null;
        }
        finally {
			if (dir != null) {
                try
                {
                    dir.close();
                }
                catch (NamingException e)
                {
                    //close jndi context
                }
            }
		}
	}

	/**
	 * @see net.jforum.sso.LoginAuthenticator#setUserModel(net.jforum.dao.UserDAO)
	 */
	@Override public void setUserModel(UserDAO dao) 
	{
	}
}

../jforum2-code/src/main/java/net/jforum/sso/SSO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Mar 28, 2005 7:22:52 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.sso;

import net.jforum.context.RequestContext;
import net.jforum.entities.UserSession;

/**
 * @author Rafael Steil
 * @author Daniel Campagnoli
 * @version $Id$
 */
public interface SSO
{
	/**
	 * Authenticates a user. 
	 * This method should check if the incoming user is authorized
	 * to access the forum. 
	 * @param request The request object
	 * @return The username, if authentication succeed, or <code>null</code> 
	 * otherwise. 
	 */
	String authenticateUser(RequestContext request);
   
   
    /**
     * Check to see if the user for the current {@link UserSession} is the same user by
     * single sign on mechanism.
     * @param userSession the current user session
     * @param request the current request
     * @return if the UserSession is valid
     */
    boolean isSessionValid(UserSession userSession, RequestContext request);
}

../jforum2-code/src/main/java/net/jforum/sso/DefaultLoginAuthenticator.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Jan 3, 2005 1:20:24 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.sso;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Map;

import net.jforum.JForumExecutionContext;
import net.jforum.dao.UserDAO;
import net.jforum.entities.User;
import net.jforum.exceptions.ForumException;
import net.jforum.util.DbUtils;
import net.jforum.util.Hash;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;

/**
 * Default login authenticator for JForum.
 * This authenticator will validate the input against <i>jforum_users</i>. 
 * 
 * @author Rafael Steil
 */
public class DefaultLoginAuthenticator implements LoginAuthenticator
{
	private transient UserDAO userModel;

	/**
	 * @see net.jforum.sso.LoginAuthenticator#setUserModel(net.jforum.dao.UserDAO)
	 */
	@Override
	public void setUserModel(final UserDAO userModel)
	{
		this.userModel = userModel;
	}

	/**
	 * @see net.jforum.sso.LoginAuthenticator#validateLogin(String, String, java.util.Map) 
	 */
	@Override
	public User validateLogin(final String username, final String password, final Map<?, ?> extraParams)
	{
		User user = null;
		ResultSet resultSet = null;
		PreparedStatement pstmt = null;

		try 
		{
			pstmt = JForumExecutionContext.getConnection().prepareStatement(
					SystemGlobals.getSql("UserModel.login"));
			pstmt.setString(1, username);
			// passing the username twice, because it is also checked against the email
			// because these days, people expect to log in with their email, not a username
			pstmt.setString(2, username);
			// first try MD5 hash
			pstmt.setString(3, Hash.md5(password));

			resultSet = pstmt.executeQuery();
			if (resultSet.next() && resultSet.getInt("user_id") > 0) {
				user = this.userModel.selectById(resultSet.getInt("user_id"));
			} else {
				resultSet.close();
				// then, SHA-512
				pstmt.setString(3, Hash.sha512(password));

				resultSet = pstmt.executeQuery();
				if (resultSet.next() && resultSet.getInt("user_id") > 0) {
					user = this.userModel.selectById(resultSet.getInt("user_id"));
				} else {
					resultSet.close();
					// then, SHA-512 with a salt
					pstmt.setString(3, Hash.sha512(password+SystemGlobals.getValue(ConfigKeys.USER_HASH_SEQUENCE)));

					resultSet = pstmt.executeQuery();
					if (resultSet.next() && resultSet.getInt("user_id") > 0) {
						user = this.userModel.selectById(resultSet.getInt("user_id"));
					}
				}
			}
		}
		catch (SQLException e)
		{
			throw new ForumException(e);
		}
		finally
		{
			DbUtils.close(resultSet, pstmt);
		}

		if (user != null && !user.isDeleted() && (user.getActivationKey() == null || user.isActive())) {
			return user;
		}

		return null;
	}
}

../jforum2-code/src/main/java/net/jforum/sso/LoginAuthenticator.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Aug 2, 2004 by pieter
 *
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.sso;

import java.util.Map;

import net.jforum.dao.UserDAO;
import net.jforum.entities.User;

/**
 * Validates user's credentials. 
 * Implementations of this interface are supposed
 * to check for access rights in some "shared" environment, 
 * like calling some external procedure, consulting a different
 * users table, reading from a XML file etc.. It is <b>not</b> SSO, 
 * since it still will be JForum that will call the validate login
 * methods. 
 * <br>
 * If you want SSO, please check {@link net.jforum.sso.SSO}
 * @author Rafael Steil
 * @version $Id$
 */
public interface LoginAuthenticator 
{
	/**
	 * Authenticates a user.
	 * 
	 * @param username Username
	 * @param password Password
	 * @param extraParams Extra parameters, if any. 
	 * @return An instance of a {@link net.jforum.entities.User} or <code>null</code>
	 */
	User validateLogin(String username, String password, Map<?, ?> extraParams) ;
	
	/**
	 * Sets the user model for the instance.
	 * 
	 * @param dao UserDAOThe user model to set
	 */
	void setUserModel(UserDAO dao);
}

../jforum2-code/src/main/java/net/jforum/sso/CookieUserSSO.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 2009/8/17 12:05:05 AM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.sso;

import javax.servlet.http.Cookie;

import net.jforum.ControllerUtils;
import net.jforum.context.RequestContext;
import net.jforum.entities.UserSession;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;
/**
 * @author Andowson Chang
 * @version $Id$
 */
public class CookieUserSSO implements SSO {
	
	/* (non-Javadoc)
	 * @see net.jforum.sso.SSO#authenticateUser(net.jforum.context.RequestContext)
	 */
	@Override public String authenticateUser(final RequestContext request) {
		// myapp login cookie, contain logged username
		final Cookie myCookie = ControllerUtils.getCookie(
				SystemGlobals.getValue(ConfigKeys.COOKIE_NAME_USER));		
		String username = null;
		
		if (myCookie != null) {
			username = myCookie.getValue();		
		}		 
		return username; // jforum username
	}

	/* (non-Javadoc)
	 * @see net.jforum.sso.SSO#isSessionValid(net.jforum.entities.UserSession, net.jforum.context.RequestContext)
	 */
	@Override public boolean isSessionValid(final UserSession userSession,
			final RequestContext request) {
		String remoteUser = null;
		boolean result = true;
		final Cookie SSOCookie = ControllerUtils.getCookie(
				SystemGlobals.getValue(ConfigKeys.COOKIE_NAME_USER)); // myapp login cookie			
		if (SSOCookie != null) {
			remoteUser = SSOCookie.getValue(); //  jforum username
		}

        // user has since logged out
        if (remoteUser == null && 
                userSession.getUserId() != SystemGlobals.getIntValue(ConfigKeys.ANONYMOUS_USER_ID)) {
			result = false;
        // user has since logged in
        } else if (remoteUser != null && 
                userSession.getUserId() == SystemGlobals.getIntValue(ConfigKeys.ANONYMOUS_USER_ID)) {
        	result = false;
        // user has changed user
        } else if (remoteUser != null && !remoteUser.equals(userSession.getUsername())) {
        	result = false;
        }
        return result; // myapp user and forum user the same
	}

}

../jforum2-code/src/main/java/net/jforum/cache/EhCacheEngine.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.cache;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;

import org.apache.log4j.Logger;

import net.jforum.util.preferences.SystemGlobals;
import net.sf.ehcache.Cache;
import net.sf.ehcache.CacheException;
import net.sf.ehcache.CacheManager;
import net.sf.ehcache.Element;
/**
 * The rest of the application seems to make some invalid assumptions about how
 * things are cached. Those assumptions might be benign, but it is hard to tell
 * without deep testing. Until this is finished the JBossCacheEngine should be 
 * configured in a local mode.
 *
 * Created on Oct 11, 2005 
 *
 * @author Jake Fear
 * @author Andowson Chang
 */
public class EhCacheEngine implements CacheEngine {

	private static final Logger LOGGER = Logger.getLogger(EhCacheEngine.class);
	
	private transient CacheManager manager;
	
	@Override public void init() {
		try {
			manager = CacheManager.create(SystemGlobals.getValue("ehcache.cache.properties"));
		} catch (CacheException ce) {
			LOGGER.error("EhCache could not be initialized", ce);
			throw ce;
		}
	}

	@Override public void stop() {
		manager.shutdown();
	}

	@Override public void add (final String key, final Object value) {
		add(DUMMY_FQN, key, value);
	}

	@Override public void add (final String fqn, final String key, final Object value) {
		try {
			if (!manager.cacheExists(fqn)) {
				LOGGER.debug("cache "+ fqn +" doesn't exist, add one");
				manager.addCache(fqn);
			}
			final Cache cache = manager.getCache(fqn);
			final Element element = new Element(key, value);
			if (cache != null) {
				cache.put(element);
			}
		} catch (IllegalStateException ie) {
           manager.addCache(fqn);
           final Cache cache = manager.getCache(fqn);
           final Element element = new Element(key, value);
           if (cache != null) {
				cache.put(element);
			}
        } catch (Exception ce) {
			LOGGER.error(ce);
			throw new CacheException(ce);
		}
	}

	@Override public Object get (final String fqn, final String key) {
		try {
			if (!manager.cacheExists(fqn)) {				
			    manager.addCache(fqn);
				LOGGER.debug("cache " + fqn + " doesn't exist and returns null");
				return null;
			}
			final Cache cache = manager.getCache(fqn);
			final Element element = cache.get(key);
			if (element != null) {
				return element.getObjectValue();
			} 
			LOGGER.debug("cache " + fqn + " exists but " + key + " returns null");
			return null;
		} catch (Exception ce) {
			LOGGER.error(ce);
			throw new CacheException(ce);
		}
	}

	@Override public Object get (final String fqn) {	
		try {
			if (!manager.cacheExists(fqn)) {
				manager.addCache(fqn);
				LOGGER.debug("cache " + fqn + " doesn't exist and returns null");
				return null;
			}
			final Cache cache = manager.getCache(fqn);
			return cache.getAllWithLoader(cache.getKeys(), null);
		} catch (Exception ce) {
			LOGGER.error(ce);
			throw new CacheException(ce);
		}
				
	}

	@Override public Collection<Object> getValues (final String fqn) {
		try {
			if (!manager.cacheExists(fqn)) {
				//manager.addCache(fqn);
				LOGGER.debug("cache " + fqn + " doesn't exist and returns empty collection");
				return new ArrayList<>();
			}
			final Cache cache = manager.getCache(fqn);
			final List<Object> values = new ArrayList<>();
			final List<?> keys = cache.getKeys();
			
			for (final Iterator<?> iter = keys.iterator(); iter.hasNext(); ) {
				final Element element = cache.get(iter.next());
				if (element == null) {
					LOGGER.debug("element is null");
				} else {					
					values.add(element.getObjectValue());
				}
			}
			
			LOGGER.debug("return:" + values);

			return values;
		} catch (Exception ce) {
			LOGGER.error(ce);
			throw new CacheException(ce);
		}
	}

	@Override public void remove (final String fqn, final String key) {
		try {
			final Cache cache = manager.getCache(fqn);

			if (cache != null) {
				cache.remove(key);
			}
		} catch (Exception ce) {
			LOGGER.error(ce);
			throw new CacheException(ce);
		}
	}

	@Override public void remove (final String fqn) {
		try {
			if (manager.cacheExists(fqn)) {
				//manager.removeCache(fqn);
                manager.getCache(fqn).flush();
			}
		} catch (Exception ce) {
			LOGGER.error(ce);
			throw new CacheException(ce);
		}
	}

}

../jforum2-code/src/main/java/net/jforum/cache/CacheEngine.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Jan 13, 2005 5:58:36 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.cache;

import java.util.Collection;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public interface CacheEngine
{
	String DUMMY_FQN = "";
	String NOTIFICATION = "notification";
	
	/**
	 * Initializes the cache engine. 
	 */
	void init();
	
	/**
	 * Stops the cache engine
	 */
	void stop();
	
	/**
	 * Adds a new object to the cache. 
	 * The fqn will be set as the value of {@link #DUMMY_FQN}
	 * 
	 * @param key The key to associate with the object. 
	 * @param value The object to cache
	 */
	void add(final String key, final Object value);
	
	/**
	 * 
	 * Adds a new object to the cache.
	 * 
	 * @param fqn The fully qualified name of the cache. 
	 * @param key The key to associate with the object
	 * @param value The object to cache
	 */
	void add(final String fqn, String key, final Object value);
	
	/**
	 * Gets some object from the cache.
	 * 
	 * @param fqn The fully qualified name associated with the key
	 * @param key The key to get
	 * @return The cached object, or <code>null</code> if no entry was found
	 */
	Object get(final String fqn, final String key);
	
	/**
	 * Gets some object from the cache.
	 * 
	 * @param fqn The fqn tree to get
	 * @return The cached object, or <code>null</code> if no entry was found
	 */
	Object get(final String fqn);
	
	/**
	 * Gets all values from some given FQN.
	 * 
	 * @param fqn String
	 * @return Collection
	 */
	Collection<Object> getValues(final String fqn);
	
	/**
	 * Removes an entry from the cache.
	 * 
	 * @param fqn The fully qualified name associated with the key
	 * @param key The key to remove
	 */
	void remove(final String fqn, final String key);
	
	/**
	 * Removes a complete node from the cache
	 * @param fqn The fqn to remove
	 */
	void remove(final String fqn);
}

../jforum2-code/src/main/java/net/jforum/cache/DefaultCacheEngine.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Feb 1, 2005 7:30:35 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.cache;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;

/**
 * @author Rafael Steil
 */
public class DefaultCacheEngine implements CacheEngine
{
	private transient Map<String, Object> cache;
	
	/**
	 * @see net.jforum.cache.CacheEngine#init()
	 */
	@Override public void init()
	{
		this.cache = new HashMap<>();
	}
	
	/**
	 * @see net.jforum.cache.CacheEngine#stop()
	 */
	@Override public void stop() 
	{
		this.cache.clear();
	}
	
	/**
	 * @see net.jforum.cache.CacheEngine#add(java.lang.String, java.lang.Object)
	 */
	@Override public void add(final String key, final Object value)
	{
		this.cache.put(key, value);
	}
	
	/**
	 * @see net.jforum.cache.CacheEngine#add(java.lang.String, java.lang.String, java.lang.Object)
	 */
	@Override public void add(final String fqn, final String key, final Object value)
	{
		this.cache.putIfAbsent(fqn, new HashMap<>());
		Map<String, Object> map = (Map<String, Object>)this.cache.get(fqn);

		map.put(key, value);
		this.cache.put(fqn, map);
	}
	
	/**
	 * @see net.jforum.cache.CacheEngine#get(java.lang.String, java.lang.String)
	 */
	@Override public Object get(final String fqn, final String key)
	{
		final Map<String, Object> map = (Map<String, Object>)this.cache.get(fqn);
		
		return map == null ? null : map.get(key);
	}
	
	/**
	 * @see net.jforum.cache.CacheEngine#get(java.lang.String)
	 */
	@Override public Object get(final String fqn)
	{
		return this.cache.get(fqn);
	}
	
	/**
	 * @see net.jforum.cache.CacheEngine#getValues(java.lang.String)
	 */
	@Override public Collection<Object> getValues(final String fqn)
	{
		final Map<String, Object> map = (Map<String, Object>)this.cache.get(fqn);
		if (map == null) {
			return new ArrayList<>();
		}

		return map.values();
	}
	
	/**
	 * @see net.jforum.cache.CacheEngine#remove(java.lang.String, java.lang.String)
	 */
	@Override public void remove(final String fqn, final String key)
	{
		final Map<String, Object> map = (Map<String, Object>)this.cache.get(fqn);
		if (map != null) {
			map.remove(key);
		}
	}
	
	/**
	 * @see net.jforum.cache.CacheEngine#remove(java.lang.String)
	 */
	@Override public void remove(final String fqn)
	{
		this.cache.remove(fqn);
	}
}

../jforum2-code/src/main/java/net/jforum/cache/JBossCacheListener.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Mar 15, 2005 1:22:52 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.cache;

import org.apache.log4j.Logger;
import org.jboss.cache.Cache;
import org.jboss.cache.Fqn;
import org.jboss.cache.notifications.annotation.CacheListener;
import org.jboss.cache.notifications.annotation.CacheStarted;
import org.jboss.cache.notifications.annotation.CacheStopped;
import org.jboss.cache.notifications.annotation.NodeCreated;
import org.jboss.cache.notifications.annotation.NodeModified;
import org.jboss.cache.notifications.annotation.NodeMoved;
import org.jboss.cache.notifications.annotation.NodeRemoved;
import org.jboss.cache.notifications.annotation.NodeVisited;
import org.jboss.cache.notifications.event.Event;
import org.jboss.cache.notifications.event.NodeEvent;
import org.jgroups.View;

/**
 * @author Rafael Steil
 * @author Andowson Chang
 * @version $Id$
 */
@CacheListener
public class JBossCacheListener {
	private static final Logger LOGGER = Logger.getLogger(JBossCacheListener.class);
	
	@CacheStarted
	@CacheStopped
	public void cacheStartStopEvent(final Event event) {
		switch (event.getType())
		{
		case CACHE_STARTED:
			LOGGER.info("Cache has started");
			break;
		case CACHE_STOPPED:
			LOGGER.info("Cache has stopped");
			break;
		default:
			break;
		}
	}

	@NodeCreated
	@NodeRemoved
	@NodeVisited
	@NodeModified
	@NodeMoved
	public void logNodeEvent(final NodeEvent nodeEvent)
	{
		//LOGGER.debug("An event on node " + nodeEvent.getFqn() + " has occured: " + nodeEvent.getType());
	}

	/**
	 * @see org.jboss.cache.TreeCacheListener#nodeCreated(org.jboss.cache.Fqn)
	 */
	public void nodeCreated(final Fqn<?> fqn) {
		// Empty method
	}

	/**
	 * @see org.jboss.cache.TreeCacheListener#nodeRemoved(org.jboss.cache.Fqn)
	 */
	public void nodeRemoved(final Fqn<?> fqn) {
		// Empty method
	}

	/**
	 * @see org.jboss.cache.TreeCacheListener#nodeLoaded(org.jboss.cache.Fqn)
	 */
	public void nodeLoaded(final Fqn<?> fqn) {
		// Empty method
	}

	/**
	 * @see org.jboss.cache.TreeCacheListener#nodeEvicted(org.jboss.cache.Fqn)
	 */
	public void nodeEvicted(final Fqn<?> fqn) {
		// Empty method
	}

	/**
	 * @see org.jboss.cache.TreeCacheListener#nodeModified(org.jboss.cache.Fqn)
	 */
	public void nodeModified(final Fqn<?> fqn) {
		// Empty method
		// if (CacheEngine.NOTIFICATION.startsWith((String)fqn.get(0))) {
		// }
	}

	/**
	 * @see org.jboss.cache.TreeCacheListener#nodeVisited(org.jboss.cache.Fqn)
	 */
	public void nodeVisited(final Fqn<?> fqn) {
		// Empty method
	}

	/**
	 * @see org.jboss.cache.TreeCacheListener#cacheStarted(org.jboss.cache.TreeCache)
	 */
	public void cacheStarted(final Cache<?, ?> cache) {
		// Empty method
	}

	/**
	 * @see org.jboss.cache.TreeCacheListener#cacheStopped(org.jboss.cache.TreeCache)
	 */
	public void cacheStopped(final Cache<?, ?> cache) {
		// Empty method
	}

	/**
	 * @see org.jboss.cache.TreeCacheListener#viewChange(org.jgroups.View)
	 */
	public void viewChange(final View view) {
		// Empty method
	}
}

../jforum2-code/src/main/java/net/jforum/cache/JForumTransactionManagerLookup.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.cache;

import javax.transaction.TransactionManager;

import org.jboss.cache.transaction.BatchModeTransactionManager;
import org.jboss.cache.transaction.TransactionManagerLookup;

/**
 * @author Andowson Chang
 * @version $Id$
 */
public class JForumTransactionManagerLookup implements TransactionManagerLookup {

	@Override public TransactionManager getTransactionManager() {
		// Don't call BatchModeTransactionManager.getInstance(), which tries
		// to bind a singleton in JNDI -- just create one for our use
		return new BatchModeTransactionManager();
	}

}

../jforum2-code/src/main/java/net/jforum/cache/JBossCacheEngine.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Jan 13, 2005 11:42:54 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.cache;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Map;

import org.apache.log4j.Logger;
import org.jboss.cache.Cache;
import org.jboss.cache.CacheFactory;
import org.jboss.cache.CacheStatus;
import org.jboss.cache.DefaultCacheFactory;
import org.jboss.cache.Fqn;

import net.jforum.exceptions.CacheException;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public class JBossCacheEngine implements CacheEngine
{
	private static final Logger LOGGER = Logger.getLogger(JBossCacheEngine.class);
	private transient Cache<String, Object> cache;

	/**
	 * @see net.jforum.cache.CacheEngine#init()
	 */
	@Override public void init()
	{
		try {
			final CacheFactory<String, Object> factory = new DefaultCacheFactory<>();			
			this.cache = factory.createCache(SystemGlobals.getValue(ConfigKeys.JBOSS_CACHE_PROPERTIES));
			
			this.cache.addCacheListener(new JBossCacheListener());
		}
		catch (Exception e) {
			throw new CacheException("Error while trying to configure jboss-cache: " + e);
		}
	}
	
	/**
	 * @see net.jforum.cache.CacheEngine#stop()
	 */
	@Override public void stop()
	{		
		this.cache.stop();
		this.cache.destroy();
	}

	/**
	 * @see net.jforum.cache.CacheEngine#add(java.lang.String, java.lang.Object)
	 */
	@Override public void add(final String key, final Object value)
	{
		this.add(CacheEngine.DUMMY_FQN, key, value);
	}

	/**
	 * @see net.jforum.cache.CacheEngine#add(java.lang.String, java.lang.String, java.lang.Object)
	 */
	@Override public void add(final String fqn, final String key, final Object value)
	{
		try {
			if (this.cache.getCacheStatus() != CacheStatus.DESTROYED) {
			    this.cache.put(Fqn.fromString(fqn), key, value);
			}
		}
		catch (Exception e) {
			throw new CacheException("Error while adding a new entry to the cache: " + e);			
		}
	}

	/**
	 * @see net.jforum.cache.CacheEngine#get(java.lang.String, java.lang.String)
	 */
	@Override public Object get(final String fqn, final String key)
	{		
		Object value = null;
		
		try {
			if (this.cache.getCacheStatus() != CacheStatus.DESTROYED) {
			    value = this.cache.get(Fqn.fromString(fqn), key);
			}
		}
		catch (Exception e) {
			throw new CacheException("Error while trying to get an entry from the cache: " + e);
		}
		
		return value;
	}

	/**
	 * @see net.jforum.cache.CacheEngine#get(java.lang.String)
	 */
	@Override public Object get(final String fqn)
	{
		Object value = null;
		
		try {
			if (this.cache.getCacheStatus() != CacheStatus.DESTROYED) {
			    value = this.cache.getData(Fqn.fromString(fqn));
			}
		}
		catch (Exception e) {
			throw new CacheException("Error while trying to get an entry from the cache: " + e);
		}
		
		return value;
	}
	
	/**
	 * @see net.jforum.cache.CacheEngine#getValues(java.lang.String)
	 */
	@Override public Collection<Object> getValues(final String fqn)
	{		
		Map<String, Object> map = null;
		if (this.cache.getCacheStatus() != CacheStatus.DESTROYED) {
			map = this.cache.getData(Fqn.fromString(fqn));
		}
		
		return map == null ? new ArrayList<>() : map.values();
	}

	/**
	 * @see net.jforum.cache.CacheEngine#remove(java.lang.String, java.lang.String)
	 */
	@Override public void remove(final String fqn, final String key)
	{
		try {
			if (key == null) {
				remove(fqn);				
			}
			else {
				if (this.cache.getCacheStatus() != CacheStatus.DESTROYED) {
				    this.cache.remove(Fqn.fromString(fqn), key);
				}
			}
		}
		catch (Exception e) {
			LOGGER.warn("Error while removing a FQN from the cache: " + e);
		}
	}

	/**
	 * @see net.jforum.cache.CacheEngine#remove(java.lang.String)
	 */
	@Override public void remove(final String fqn)
	{
		try {
			if (this.cache.getCacheStatus() != CacheStatus.DESTROYED) {
			    this.cache.removeNode(Fqn.fromString(fqn));
			}
		}
		catch (Exception e) {
			LOGGER.warn("Error while removing a FQN from the cache: " + e);
		}
	}

}

../jforum2-code/src/main/java/net/jforum/cache/Cacheable.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Jan 13, 2005 6:00:40 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.cache;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public interface Cacheable
{
	/**
	 * Sets the cache engine instance.
	 * @param engine The instance of the cache engine
	 */
	void setCacheEngine(CacheEngine engine);
}

../jforum2-code/src/main/java/net/jforum/summary/SummaryJob.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Class created on Jul 15, 2005
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.summary;

import org.quartz.Job;
import org.quartz.JobExecutionContext;
import org.quartz.JobExecutionException;

/**
 * @author Franklin S. Dattein (<a href="mailto:franklin@hp.com">franklin@hp.com</a>)
 * @version $Id$
 */
public class SummaryJob implements Job
{
	/**
	 * @see org.quartz.Job#execute(org.quartz.JobExecutionContext)
	 */
	@Override public void execute(final JobExecutionContext context) throws JobExecutionException
	{
		final SummaryModel model = new SummaryModel();
		
		model.sendPostsSummary(model.listRecipients());		
	}
}

../jforum2-code/src/main/java/net/jforum/summary/SummaryScheduler.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Class created on Jul 15, 2005
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.summary;

import static org.quartz.CronScheduleBuilder.cronSchedule;
import static org.quartz.JobBuilder.newJob;
import static org.quartz.TriggerBuilder.newTrigger;

import org.apache.log4j.Logger;
import org.quartz.CronTrigger;
import org.quartz.JobDetail;
import org.quartz.Scheduler;
import org.quartz.SchedulerException;
import org.quartz.impl.StdSchedulerFactory;

import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;

/**
 * Schedule the summaries to be sent to the users.
 * 
 * @see net.jforum.summary.SummaryJob
 * 
 * @author Franklin S. Dattein (<a href="mailto:franklin@portaljava.com">franklin@portaljava.com</a>)
 * @version $Id$
 */
public final class SummaryScheduler
{
	private static final Logger LOGGER = Logger.getLogger(SummaryScheduler.class);
	private static Scheduler scheduler;
	private static boolean isStarted = false;
	private static final Object MUTEX = new Object();

	/**
	 * Starts the summary Job. Conditions to start: Is not started yet and is enabled on the file
	 * SystemGlobasl.properties. The to enable it is "summary.enabled"
	 * (ConfigKeys.SUMMARY_IS_ENABLED).
	 * 
	 * @throws SchedulerException
	 */
	public static void startJob() throws SchedulerException
	{
		final boolean isEnabled = SystemGlobals.getBoolValue(ConfigKeys.SUMMARY_IS_ENABLED);

		synchronized(MUTEX) {
			if (!isStarted && isEnabled) {
				final String filename = SystemGlobals.getValue(ConfigKeys.QUARTZ_CONFIG);

				final String cronExpression = SystemGlobals.getValue("org.quartz.context.summary.cron.expression");
				scheduler = new StdSchedulerFactory(filename).getScheduler();

				final JobDetail job = newJob(SummaryJob.class).withIdentity("summaryJob", "group1").build();

				final CronTrigger trigger = newTrigger().withIdentity("trigger1", "group1").withSchedule(cronSchedule(cronExpression)).build();

				scheduler.scheduleJob(job, trigger);
				LOGGER.info("Starting quartz summary expression " + cronExpression);
				scheduler.start();
			}

			isStarted = true;
		}
	}

	/**
	 * Stops the summary Job. Conditions to stop: Is started and is enabled on the file
	 * SystemGlobasl.properties. The to enable it is "summary.enabled"
	 * (ConfigKeys.SUMMARY_IS_ENABLED).
	 * 
	 * @throws SchedulerException
	 */
	public static void stopJob() throws SchedulerException
	{
		final boolean isEnabled = SystemGlobals.getBoolValue(ConfigKeys.SUMMARY_IS_ENABLED);

		synchronized(MUTEX) {
			if (isStarted && isEnabled) {			
				final String cronExpression = SystemGlobals.getValue("org.quartz.context.summary.cron.expression");
					
				LOGGER.info("Stopping quartz summary expression " + cronExpression);
				scheduler.shutdown(true);				
			}

			isStarted = false;
		}
		
		// avoid Tomcat report memory leak
		try {
			Thread.sleep(1000);
		} catch (InterruptedException e) {
			LOGGER.error(e.getMessage(), e);
		}
	}
	
	private SummaryScheduler() {}
}

../jforum2-code/src/main/java/net/jforum/summary/SummaryModel.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Class created on Jul 15, 2005
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.summary;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import org.apache.log4j.Logger;

import freemarker.template.SimpleHash;
import net.jforum.JForumExecutionContext;
import net.jforum.dao.DataAccessDriver;
import net.jforum.dao.SummaryDAO;
import net.jforum.entities.Post;
import net.jforum.entities.User;
import net.jforum.util.mail.Spammer;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;
import net.jforum.view.forum.common.ViewCommon;

/**
 * Manage the Summary sends.
 * 
 * @see net.jforum.summary.SummaryJob
 * @see net.jforum.summary.SummaryScheduler
 * 
 * @author Franklin S. Dattein (<a href="mailto:franklin@hp.com">franklin@hp.com</a>)
 */
public class SummaryModel extends Spammer
{
	private static final Logger LOGGER = Logger.getLogger(SummaryModel.class);
	private transient final SummaryDAO dao;

	public SummaryModel()
	{
		super();
		this.dao = DataAccessDriver.getInstance().newSummaryDAO();
	}

	public void sendPostsSummary(final List<String> recipients)
	{
		if (!recipients.isEmpty()) { // make sure somebody want to receive it
			// Gets a Date seven days before now
			final int daysBefore = Integer.parseInt(SystemGlobals.getValue(ConfigKeys.SUMMARY_DAYS_BEFORE));

			// New date "X" days before now, where "X" is the number set on the variable daysBefore
			final long dateBefore = Calendar.getInstance().getTimeInMillis() - (1000L * 60 * 60 * 24 * daysBefore);

			final List<Post> posts = listPosts(new Date(dateBefore), new Date());
			if (!posts.isEmpty()) { // make sure there is at least one new post

				final String forumLink = ViewCommon.getForumLink();

				final SimpleHash params = JForumExecutionContext.newSimpleHash();
				params.put("posts", posts);
				params.put("url", forumLink);
				params.put("extension", SystemGlobals.getValue(ConfigKeys.SERVLET_EXTENSION));

				final String subject = SystemGlobals.getValue(ConfigKeys.MAIL_SUMMARY_SUBJECT);

				LOGGER.info("Sending Weekly summary...");

				this.setUsers(this.recipientsAsUsers(recipients));
				this.setTemplateParams(params);

				this.prepareMessage(subject, SystemGlobals.getValue(ConfigKeys.MAIL_SUMMARY_FILE));
				super.dispatchMessages();
			}
		}
	}

	private List<User> recipientsAsUsers(final List<String> recipients)
	{
		final List<User> list = new ArrayList<>();

		for (final String email : recipients) {
			if (LOGGER.isDebugEnabled()) {
				LOGGER.debug("email="+email);
			}
			final User user = new User();
			user.setEmail(email);

			list.add(user);
		}

		return list;
	}

	/**
	 * List all recipients able to receive posts summaries.
	 * 
	 * @return List of users
	 */
	public List<String> listRecipients()
	{
		return this.dao.listRecipients();
	}

	/**
	 * List last posts of a period like a week, day or month.
	 * 
	 * @param firstDate First date of a period.
	 * @param lastDate Last date of a period.
	 * @return List of Posts
	 */
	public List<Post> listPosts(final Date firstDate, final Date lastDate)
	{
		return this.dao.selectLastPosts(firstDate, lastDate);
	}
}

../jforum2-code/src/main/java/net/jforum/exceptions/AttachmentException.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Jan 24, 2005 6:26:48 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.exceptions;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public class AttachmentException extends RuntimeException
{
	private static final long serialVersionUID = 942700256072969032L;

	public AttachmentException(final String message)
	{
		super(message);
	}
}

../jforum2-code/src/main/java/net/jforum/exceptions/CacheException.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Feb 1, 2005 7:23:13 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.exceptions;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public class CacheException extends RuntimeException
{
	private static final long serialVersionUID = 8608740478943321166L;

	public CacheException(final String message)
	{
		super(message);
	}
}

../jforum2-code/src/main/java/net/jforum/exceptions/ForumException.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Feb 3, 2005 5:26:07 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.exceptions;


/**
 * @author Rafael Steil
 * @version $Id$
 */
public class ForumException extends RuntimeException
{
	private static final long serialVersionUID = 8943655855892360677L;

	public ForumException(final String message)
	{
		super(message);
	}
	
	public ForumException(final Throwable throwable)
	{
		this(throwable.toString(), throwable);
	}
	
	public ForumException(final String message, final Throwable throwable)
	{
		super(message, throwable);
		this.setStackTrace(throwable.getStackTrace());
	}
}

../jforum2-code/src/main/java/net/jforum/exceptions/APIException.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 04/09/2006 21:32:40
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.exceptions;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public class APIException extends RuntimeException
{
	private static final long serialVersionUID = 5069796445984449394L;

	public APIException(final String message)
	{
		super(message);
	}
}

../jforum2-code/src/main/java/net/jforum/exceptions/CacheEngineStartupException.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Feb 1, 2005 5:31:54 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.exceptions;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public class CacheEngineStartupException extends RuntimeException
{
	private static final long serialVersionUID = -2605724673346486481L;

	public CacheEngineStartupException(final String message, final Throwable throwable)
	{
		super(message, throwable);
		this.setStackTrace(throwable.getStackTrace());
	}
}

../jforum2-code/src/main/java/net/jforum/exceptions/DatabaseException.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 13/11/2004 02:05:47
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.exceptions;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public class DatabaseException extends RuntimeException 
{
	private static final long serialVersionUID = -2960230625596900302L;

	public DatabaseException(final String message) {
		super(message);
	}
	
	public DatabaseException(final String message, final Throwable throwable) {
		super(message, throwable);
		this.setStackTrace(throwable.getStackTrace());
	}
	
	public DatabaseException(final Throwable throwable) {
		super(throwable);
		this.setStackTrace(throwable.getStackTrace());
	}
}

../jforum2-code/src/main/java/net/jforum/exceptions/ExceptionWriter.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * /*
 * Created on Feb 3, 2005 5:15:34 PM
  * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.exceptions;

import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.Writer;

import org.apache.log4j.Logger;

import freemarker.template.SimpleHash;
import freemarker.template.Template;
import net.jforum.JForumExecutionContext;
import net.jforum.SessionFacade;
import net.jforum.context.RequestContext;
import net.jforum.util.preferences.ConfigKeys;
import net.jforum.util.preferences.SystemGlobals;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public class ExceptionWriter
{
	private static final Logger LOGGER = Logger.getLogger(ExceptionWriter.class);
	
	public void handleExceptionData(final Throwable throwable, final Writer wtr, final RequestContext request)
	{
		StringWriter strWriter = new StringWriter();
		PrintWriter writer = new PrintWriter(strWriter);
		throwable.printStackTrace(writer);	
		
		final String currentUrl = this.extractCurrentUrl(request);
		
		writer.write(currentUrl != null ? currentUrl : "null");
		writer.close();
		
		try {
			LOGGER.error(strWriter);

			String message = "";
			Throwable cause = throwable.getCause();
			
			while (cause != null) {
				message = cause.toString();
				cause = cause.getCause();
			}
			
			if (message == null || message.equals("")) {
				message = throwable.getMessage();
			}
			
			if (message == null || message.equals("")) {
				message = throwable.toString();
			}

			final boolean canViewStackTrace = !SystemGlobals.getBoolValue(ConfigKeys.STACKTRACE_MODERATORS_ONLY)
				|| (SessionFacade.isLogged() && SessionFacade.getUserSession().isModerator());

			final String filter = "[<>]";
			String stackTrace = canViewStackTrace
				? strWriter.toString()
				: "Only moderators can view stack trace.";

			stackTrace = stackTrace.replaceAll(filter, "");
			message = message.replaceAll(filter, "");

			final SimpleHash templateContext = JForumExecutionContext.getTemplateContext();
            templateContext.put("mobileRequest", request.isMobileRequest());
			templateContext.put("stackTrace", stackTrace);
			templateContext.put("message", message);

			final Template template = JForumExecutionContext.getTemplateConfig().getTemplate("exception.html", SystemGlobals.getValue(ConfigKeys.ENCODING));
			template.process(templateContext, wtr);
		}
		catch (Exception e) {
			strWriter = new StringWriter();
			writer = new PrintWriter(strWriter);
			e.printStackTrace(writer);
			writer.close();
			LOGGER.error(strWriter);
		}
	}
	
	private String extractCurrentUrl(final RequestContext request)
	{
		String url = null;
		if (request != null) {
			final StringBuilder sb = new StringBuilder().append("\nURL is: ").append(request.getRequestURI()); 
			if (request.getQueryString() != null) {
				sb.append('?').append(request.getQueryString());				
			}
			url = sb.toString();
		}
		return url;
	}
}

../jforum2-code/src/main/java/net/jforum/exceptions/BadExtensionException.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Jan 24, 2005 6:29:32 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.exceptions;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public class BadExtensionException extends AttachmentException
{
	private static final long serialVersionUID = 6988357963615278491L;

	public BadExtensionException(final String message) 
	{
		super(message);
	}
}

../jforum2-code/src/main/java/net/jforum/exceptions/ConfigLoadException.java
/*
 * Copyright (c) JForum Team
 * 
 * All rights reserved.
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Mar 14, 2005 3:29:55 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.exceptions;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public class ConfigLoadException extends RuntimeException
{
	private static final long serialVersionUID = -14168976750213340L;

	public ConfigLoadException(final String message)
	{
		super(message);
	}
}

../jforum2-code/src/main/java/net/jforum/exceptions/MailException.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 21/08/2006 22:49:58
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.exceptions;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public class MailException extends RuntimeException
{
	private static final long serialVersionUID = -901628985758272393L;

	public MailException(final Throwable throwable)
	{
		super(throwable);
		this.setStackTrace(throwable.getStackTrace());
	}
	
	public MailException(final String message, final Throwable throwable)
	{
		super(message, throwable);
		this.setStackTrace(throwable.getStackTrace());
	}
}

../jforum2-code/src/main/java/net/jforum/exceptions/SearchException.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Mar 11, 2005 12:30:01 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.exceptions;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public class SearchException extends RuntimeException
{
	private static final long serialVersionUID = -4134125670913653144L;

	public SearchException(final String message)
	{
		super(message);
	}
	
	public SearchException(final Throwable throwable)
	{
		this(throwable.toString(), throwable);
	}
	
	public SearchException(final String message, final Throwable throwable)
	{
		super(message, throwable);
		this.setStackTrace(throwable.getStackTrace());
	}
}

../jforum2-code/src/main/java/net/jforum/exceptions/TemplateNotFoundException.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Mar 14, 2005 4:12:58 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.exceptions;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public class TemplateNotFoundException extends RuntimeException
{
	private static final long serialVersionUID = -2345957226067403274L;

	public TemplateNotFoundException(final String message)
	{
		super(message);
	}
}

../jforum2-code/src/main/java/net/jforum/exceptions/InvalidBookmarkTypeException.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 *
 * Created on Jan 16, 2005 4:45:50 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.exceptions;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public class InvalidBookmarkTypeException extends RuntimeException
{
	private static final long serialVersionUID = -8228566337057957022L;

	public InvalidBookmarkTypeException(final String message)
	{
		super(message);
	}
}

../jforum2-code/src/main/java/net/jforum/exceptions/RepositoryStartupException.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 13/11/2004 02:13:44
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.exceptions;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public class RepositoryStartupException extends RuntimeException 
{
	private static final long serialVersionUID = -4934993468672541051L;

	public RepositoryStartupException(final String message) {
		super(message);
	}
	
	public RepositoryStartupException(final String message, final Throwable throwable) {
		super(message, throwable);
		this.setStackTrace(throwable.getStackTrace());
	}
}

../jforum2-code/src/main/java/net/jforum/exceptions/SmiliesLoadException.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Feb 1, 2005 6:44:31 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.exceptions;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public class SmiliesLoadException extends RuntimeException
{
	private static final long serialVersionUID = 8776363940808371371L;

	public SmiliesLoadException(final String message)
	{
		super(message);
	}
}

../jforum2-code/src/main/java/net/jforum/exceptions/AttachmentSizeTooBigException.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Jan 24, 2005 1:56:30 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.exceptions;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public class AttachmentSizeTooBigException extends AttachmentException
{
	private static final long serialVersionUID = 5564323789449065935L;

	public AttachmentSizeTooBigException(final String message)
	{
		super(message);
	}
}

../jforum2-code/src/main/java/net/jforum/exceptions/CategoryNotFoundException.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 12/11/2004 23:22:46
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.exceptions;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public class CategoryNotFoundException extends RuntimeException 
{
	private static final long serialVersionUID = 656734409768262085L;

	public CategoryNotFoundException(final String message) {
		super(message);
	}
	
	public CategoryNotFoundException(final Throwable throwable) {
		super(throwable);
		this.setStackTrace(throwable.getStackTrace());
	}
	
	public CategoryNotFoundException(final String message, final Throwable throwable) {
		super(message, throwable);
		this.setStackTrace(throwable.getStackTrace());
	}
}

../jforum2-code/src/main/java/net/jforum/exceptions/ForumOrderChangedException.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on 08/12/2004 23:42:20
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.exceptions;

/**
 * Thrown when someone tries to reload some cached
 * forum instance which had its order changed.
 * 
 * @author Rafael Steil
 * @version $Id$
 */
public class ForumOrderChangedException extends RuntimeException 
{
	private static final long serialVersionUID = -9153628843293331164L;

	public ForumOrderChangedException(final String message) {
		super(message);
	}
}

../jforum2-code/src/main/java/net/jforum/exceptions/MultipartHandlingException.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Feb 3, 2005 5:12:39 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.exceptions;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public class MultipartHandlingException extends RuntimeException
{
	private static final long serialVersionUID = -4790400563393709170L;

	public MultipartHandlingException(final String message)
	{
		super(message);
	}
}

../jforum2-code/src/main/java/net/jforum/exceptions/SearchInstantiationException.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Mar 11, 2005 12:06:39 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.exceptions;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public class SearchInstantiationException extends RuntimeException
{
	private static final long serialVersionUID = -6592263829692943078L;

	public SearchInstantiationException(final String message)
	{
		super(message);
	}
}

../jforum2-code/src/main/java/net/jforum/exceptions/ForumStartupException.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Feb 3, 2005 5:17:36 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.exceptions;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public class ForumStartupException extends ForumException
{
	private static final long serialVersionUID = 293914178692318345L;

	public ForumStartupException(final String message, final Throwable throwable)
	{
		super(message, throwable);
		this.setStackTrace(throwable.getStackTrace());
	}
}

../jforum2-code/src/main/java/net/jforum/exceptions/RankingLoadException.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.

 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:

 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Feb 1, 2005 6:20:53 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.exceptions;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public class RankingLoadException extends RuntimeException
{
	private static final long serialVersionUID = -6339155597772011861L;

	public RankingLoadException(final String message)
	{
		super(message);
	}
}

../jforum2-code/src/main/java/net/jforum/exceptions/SecurityLoadException.java
/*
 * Copyright (c) JForum Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution.
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 * 
 * Created on Dec 27, 2004 5:43:20 PM
 * The JForum Project
 * http://www.jforum.net
 */
package net.jforum.exceptions;

/**
 * @author Rafael Steil
 * @version $Id$
 */
public class SecurityLoadException extends RuntimeException
{
	private static final long serialVersionUID = 8044265812128805726L;

	public SecurityLoadException(final String message)
	{
		super(message);
	}
	
	public SecurityLoadException(final Exception exception)
	{
		super(exception);
	}
}

