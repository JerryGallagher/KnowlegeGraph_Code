['../spring-petclinic/target/site/jacoco/jacoco-resources/prettify.js', '../spring-petclinic/target/site/jacoco/jacoco-resources/sort.js', '../spring-petclinic/.mvn/wrapper/MavenWrapperDownloader.java', '../spring-petclinic/src/main/java/org/springframework/samples/petclinic/PetClinicApplication.java', '../spring-petclinic/src/main/java/org/springframework/samples/petclinic/PetClinicRuntimeHints.java', '../spring-petclinic/src/main/java/org/springframework/samples/petclinic/model/BaseEntity.java', '../spring-petclinic/src/main/java/org/springframework/samples/petclinic/model/NamedEntity.java', '../spring-petclinic/src/main/java/org/springframework/samples/petclinic/model/Person.java', '../spring-petclinic/src/main/java/org/springframework/samples/petclinic/model/package-info.java', '../spring-petclinic/src/main/java/org/springframework/samples/petclinic/owner/Owner.java', '../spring-petclinic/src/main/java/org/springframework/samples/petclinic/owner/OwnerController.java', '../spring-petclinic/src/main/java/org/springframework/samples/petclinic/owner/OwnerRepository.java', '../spring-petclinic/src/main/java/org/springframework/samples/petclinic/owner/Pet.java', '../spring-petclinic/src/main/java/org/springframework/samples/petclinic/owner/PetController.java', '../spring-petclinic/src/main/java/org/springframework/samples/petclinic/owner/PetType.java', '../spring-petclinic/src/main/java/org/springframework/samples/petclinic/owner/PetTypeFormatter.java', '../spring-petclinic/src/main/java/org/springframework/samples/petclinic/owner/PetValidator.java', '../spring-petclinic/src/main/java/org/springframework/samples/petclinic/owner/Visit.java', '../spring-petclinic/src/main/java/org/springframework/samples/petclinic/owner/VisitController.java', '../spring-petclinic/src/main/java/org/springframework/samples/petclinic/system/CacheConfiguration.java', '../spring-petclinic/src/main/java/org/springframework/samples/petclinic/system/CrashController.java', '../spring-petclinic/src/main/java/org/springframework/samples/petclinic/system/WelcomeController.java', '../spring-petclinic/src/main/java/org/springframework/samples/petclinic/vet/Specialty.java', '../spring-petclinic/src/main/java/org/springframework/samples/petclinic/vet/Vet.java', '../spring-petclinic/src/main/java/org/springframework/samples/petclinic/vet/VetController.java', '../spring-petclinic/src/main/java/org/springframework/samples/petclinic/vet/VetRepository.java', '../spring-petclinic/src/main/java/org/springframework/samples/petclinic/vet/Vets.java', '../spring-petclinic/src/test/java/org/springframework/samples/petclinic/MySqlIntegrationTests.java', '../spring-petclinic/src/test/java/org/springframework/samples/petclinic/MysqlTestApplication.java', '../spring-petclinic/src/test/java/org/springframework/samples/petclinic/PetClinicIntegrationTests.java', '../spring-petclinic/src/test/java/org/springframework/samples/petclinic/PostgresIntegrationTests.java', '../spring-petclinic/src/test/java/org/springframework/samples/petclinic/model/ValidatorTests.java', '../spring-petclinic/src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java', '../spring-petclinic/src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java', '../spring-petclinic/src/test/java/org/springframework/samples/petclinic/owner/PetTypeFormatterTests.java', '../spring-petclinic/src/test/java/org/springframework/samples/petclinic/owner/VisitControllerTests.java', '../spring-petclinic/src/test/java/org/springframework/samples/petclinic/service/ClinicServiceTests.java', '../spring-petclinic/src/test/java/org/springframework/samples/petclinic/service/EntityUtils.java', '../spring-petclinic/src/test/java/org/springframework/samples/petclinic/system/CrashControllerIntegrationTests.java', '../spring-petclinic/src/test/java/org/springframework/samples/petclinic/system/CrashControllerTests.java', '../spring-petclinic/src/test/java/org/springframework/samples/petclinic/vet/VetControllerTests.java', '../spring-petclinic/src/test/java/org/springframework/samples/petclinic/vet/VetTests.java', '../spring-petclinic/build/generated/aotSources/org/springframework/aop/aspectj/annotation/AnnotationAwareAspectJAutoProxyCreator__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/audit/AuditEventsEndpointAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/availability/AvailabilityHealthContributorAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/beans/BeansEndpointAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/cache/CachesEndpointAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/condition/ConditionsReportEndpointAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/context/properties/ConfigurationPropertiesReportEndpointAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/context/properties/ConfigurationPropertiesReportEndpointProperties__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/endpoint/EndpointAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/endpoint/jackson/JacksonEndpointAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/endpoint/web/CorsEndpointProperties__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/endpoint/web/ServletEndpointManagementContextConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/endpoint/web/WebEndpointAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/endpoint/web/WebEndpointProperties__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/endpoint/web/servlet/WebMvcEndpointManagementContextConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/env/EnvironmentEndpointAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/env/EnvironmentEndpointProperties__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/health/HealthContributorAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/health/HealthEndpointAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/health/HealthEndpointConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/health/HealthEndpointProperties__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/health/HealthEndpointWebExtensionConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/info/InfoContributorAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/info/InfoContributorProperties__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/info/InfoEndpointAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/jdbc/DataSourceHealthContributorAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/jdbc/DataSourceHealthIndicatorProperties__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/logging/LogFileWebEndpointAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/logging/LogFileWebEndpointProperties__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/logging/LoggersEndpointAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/management/HeapDumpWebEndpointAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/management/ThreadDumpEndpointAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/metrics/CompositeMeterRegistryAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/metrics/JvmMetricsAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/metrics/LogbackMetricsAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/metrics/MetricsAspectsAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/metrics/MetricsAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/metrics/MetricsEndpointAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/metrics/MetricsProperties__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/metrics/SystemMetricsAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/metrics/cache/CacheMeterBinderProvidersConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/metrics/cache/CacheMetricsAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/metrics/cache/CacheMetricsRegistrarConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/metrics/data/RepositoryMetricsAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/metrics/export/simple/SimpleMetricsExportAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/metrics/export/simple/SimpleProperties__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/metrics/integration/IntegrationMetricsAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/metrics/jdbc/DataSourcePoolMetricsAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/metrics/startup/StartupTimeMetricsListenerAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/metrics/task/TaskExecutorMetricsAutoConfiguration__Autowiring.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/metrics/task/TaskExecutorMetricsAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/metrics/web/tomcat/TomcatMetricsAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/observation/ObservationAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/observation/ObservationProperties__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/observation/web/client/HttpClientObservationsAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/observation/web/client/RestClientObservationConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/observation/web/client/RestTemplateObservationConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/observation/web/servlet/WebMvcObservationAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/scheduling/ScheduledTasksEndpointAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/scheduling/ScheduledTasksObservabilityAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/system/DiskSpaceHealthContributorAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/system/DiskSpaceHealthIndicatorProperties__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/web/exchanges/HttpExchangesEndpointAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/web/mappings/MappingsEndpointAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/web/server/ManagementContextAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/web/server/ManagementServerProperties__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/web/servlet/ServletManagementContextAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/AutoConfigurationPackages__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/aop/AopAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/availability/ApplicationAvailabilityAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/cache/CacheAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/cache/CacheProperties__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/cache/CaffeineCacheConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/context/ConfigurationPropertiesAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/context/LifecycleAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/context/LifecycleProperties__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/context/MessageSourceAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/context/PropertyPlaceholderAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/dao/PersistenceExceptionTranslationAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/data/jpa/JpaRepositoriesAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/data/web/SpringDataWebAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/data/web/SpringDataWebProperties__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/http/HttpMessageConvertersAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/http/JacksonHttpMessageConvertersConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/info/ProjectInfoAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/info/ProjectInfoProperties__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/jackson/JacksonProperties__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/jdbc/DataSourceConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/jdbc/DataSourceJmxConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/jdbc/DataSourceTransactionManagerAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/jdbc/JdbcClientAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/jdbc/JdbcProperties__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/jdbc/JdbcTemplateAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/jdbc/JdbcTemplateConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/jdbc/NamedParameterJdbcTemplateConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/jdbc/metadata/DataSourcePoolMetadataProvidersConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/orm/jpa/HibernateProperties__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/orm/jpa/JpaBaseConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/orm/jpa/JpaProperties__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/sql/init/SqlInitializationAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/sql/init/SqlInitializationProperties__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/ssl/SslAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/ssl/SslProperties__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/task/TaskExecutionAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/task/TaskExecutionProperties__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/task/TaskExecutorConfigurations__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/task/TaskSchedulingAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/task/TaskSchedulingConfigurations__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/task/TaskSchedulingProperties__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/thymeleaf/TemplateEngineConfigurations__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafProperties__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/transaction/TransactionAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/transaction/TransactionManagerCustomizationAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/transaction/TransactionProperties__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/transaction/jta/JtaAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/validation/ValidationAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/web/ServerProperties__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/web/WebProperties__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/web/client/RestClientAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/web/client/RestTemplateAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/web/embedded/EmbeddedWebServerFactoryCustomizerAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/web/servlet/DispatcherServletAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/web/servlet/HttpEncodingAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/web/servlet/MultipartAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/web/servlet/MultipartProperties__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/web/servlet/ServletWebServerFactoryAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/web/servlet/ServletWebServerFactoryConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfiguration_EnableWebMvcConfiguration__Autowiring.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/web/servlet/WebMvcProperties__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/web/servlet/error/ErrorMvcAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/websocket/servlet/WebSocketServletAutoConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/context/properties/BoundConfigurationProperties__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/context/properties/ConfigurationPropertiesBinder__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/jackson/JsonMixinModuleEntries__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/sql/init/dependency/DatabaseInitializationDependencyConfigurer__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/validation/beanvalidation/MethodValidationExcludeFilter__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/web/server/ErrorPageRegistrarBeanPostProcessor__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/boot/web/server/WebServerFactoryCustomizerBeanPostProcessor__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/cache/annotation/ProxyCachingConfiguration__Autowiring.java', '../spring-petclinic/build/generated/aotSources/org/springframework/cache/annotation/ProxyCachingConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/cache/jcache/config/AbstractJCacheConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/cache/jcache/config/ProxyJCacheConfiguration__Autowiring.java', '../spring-petclinic/build/generated/aotSources/org/springframework/cache/jcache/config/ProxyJCacheConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/context/event/DefaultEventListenerFactory__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/context/event/EventListenerMethodProcessor__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/data/jpa/mapping/JpaMetamodelMappingContext__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/data/jpa/repository/support/DefaultJpaContext__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/data/jpa/repository/support/EntityManagerBeanDefinitionRegistrarPostProcessor__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/data/jpa/repository/support/JpaEvaluationContextExtension__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/data/jpa/repository/support/JpaRepositoryFactoryBean__Autowiring.java', '../spring-petclinic/build/generated/aotSources/org/springframework/data/jpa/repository/support/JpaRepositoryFactoryBean__Autowiring1.java', '../spring-petclinic/build/generated/aotSources/org/springframework/data/jpa/util/JpaMetamodelCacheCleanup__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/data/repository/core/support/PropertiesBasedNamedQueries__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/data/repository/core/support/RepositoryComposition__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/data/web/config/ProjectingArgumentResolverRegistrar__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/data/web/config/SpringDataJacksonConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/data/web/config/SpringDataWebConfiguration__BeanDefinitions.java', '../spring-petclinic/build/generated/aotSources/org/springframework/orm/jpa/SharedEntityManagerCreator__BeanDefinitions.java', '../spring-petclinic/build/reports/tests/test/js/report.js']
Found 210 source code files:
../spring-petclinic/target/site/jacoco/jacoco-resources/prettify.js
// Copyright (C) 2006 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


/**
 * @fileoverview
 * some functions for browser-side pretty printing of code contained in html.
 * <p>
 *
 * For a fairly comprehensive set of languages see the
 * <a href="http://google-code-prettify.googlecode.com/svn/trunk/README.html#langs">README</a>
 * file that came with this source.  At a minimum, the lexer should work on a
 * number of languages including C and friends, Java, Python, Bash, SQL, HTML,
 * XML, CSS, Javascript, and Makefiles.  It works passably on Ruby, PHP and Awk
 * and a subset of Perl, but, because of commenting conventions, doesn't work on
 * Smalltalk, Lisp-like, or CAML-like languages without an explicit lang class.
 * <p>
 * Usage: <ol>
 * <li> include this source file in an html page via
 *   {@code <script type="text/javascript" src="/path/to/prettify.js"></script>}
 * <li> define style rules.  See the example page for examples.
 * <li> mark the {@code <pre>} and {@code <code>} tags in your source with
 *    {@code class=prettyprint.}
 *    You can also use the (html deprecated) {@code <xmp>} tag, but the pretty
 *    printer needs to do more substantial DOM manipulations to support that, so
 *    some css styles may not be preserved.
 * </ol>
 * That's it.  I wanted to keep the API as simple as possible, so there's no
 * need to specify which language the code is in, but if you wish, you can add
 * another class to the {@code <pre>} or {@code <code>} element to specify the
 * language, as in {@code <pre class="prettyprint lang-java">}.  Any class that
 * starts with "lang-" followed by a file extension, specifies the file type.
 * See the "lang-*.js" files in this directory for code that implements
 * per-language file handlers.
 * <p>
 * Change log:<br>
 * cbeust, 2006/08/22
 * <blockquote>
 *   Java annotations (start with "@") are now captured as literals ("lit")
 * </blockquote>
 * @requires console
 */

// JSLint declarations
/*global console, document, navigator, setTimeout, window */

/**
 * Split {@code prettyPrint} into multiple timeouts so as not to interfere with
 * UI events.
 * If set to {@code false}, {@code prettyPrint()} is synchronous.
 */
window['PR_SHOULD_USE_CONTINUATION'] = true;

/** the number of characters between tab columns */
window['PR_TAB_WIDTH'] = 8;

/** Walks the DOM returning a properly escaped version of innerHTML.
  * @param {Node} node
  * @param {Array.<string>} out output buffer that receives chunks of HTML.
  */
window['PR_normalizedHtml']

/** Contains functions for creating and registering new language handlers.
  * @type {Object}
  */
  = window['PR']

/** Pretty print a chunk of code.
  *
  * @param {string} sourceCodeHtml code as html
  * @return {string} code as html, but prettier
  */
  = window['prettyPrintOne']
/** Find all the {@code <pre>} and {@code <code>} tags in the DOM with
  * {@code class=prettyprint} and prettify them.
  * @param {Function?} opt_whenDone if specified, called when the last entry
  *     has been finished.
  */
  = window['prettyPrint'] = void 0;

/** browser detection. @extern @returns false if not IE, otherwise the major version. */
window['_pr_isIE6'] = function () {
  var ieVersion = navigator && navigator.userAgent &&
      navigator.userAgent.match(/\bMSIE ([678])\./);
  ieVersion = ieVersion ? +ieVersion[1] : false;
  window['_pr_isIE6'] = function () { return ieVersion; };
  return ieVersion;
};


(function () {
  // Keyword lists for various languages.
  var FLOW_CONTROL_KEYWORDS =
      "break continue do else for if return while ";
  var C_KEYWORDS = FLOW_CONTROL_KEYWORDS + "auto case char const default " +
      "double enum extern float goto int long register short signed sizeof " +
      "static struct switch typedef union unsigned void volatile ";
  var COMMON_KEYWORDS = C_KEYWORDS + "catch class delete false import " +
      "new operator private protected public this throw true try typeof ";
  var CPP_KEYWORDS = COMMON_KEYWORDS + "alignof align_union asm axiom bool " +
      "concept concept_map const_cast constexpr decltype " +
      "dynamic_cast explicit export friend inline late_check " +
      "mutable namespace nullptr reinterpret_cast static_assert static_cast " +
      "template typeid typename using virtual wchar_t where ";
  var JAVA_KEYWORDS = COMMON_KEYWORDS +
      "abstract boolean byte extends final finally implements import " +
      "instanceof null native package strictfp super synchronized throws " +
      "transient ";
  var CSHARP_KEYWORDS = JAVA_KEYWORDS +
      "as base by checked decimal delegate descending event " +
      "fixed foreach from group implicit in interface internal into is lock " +
      "object out override orderby params partial readonly ref sbyte sealed " +
      "stackalloc string select uint ulong unchecked unsafe ushort var ";
  var JSCRIPT_KEYWORDS = COMMON_KEYWORDS +
      "debugger eval export function get null set undefined var with " +
      "Infinity NaN ";
  var PERL_KEYWORDS = "caller delete die do dump elsif eval exit foreach for " +
      "goto if import last local my next no our print package redo require " +
      "sub undef unless until use wantarray while BEGIN END ";
  var PYTHON_KEYWORDS = FLOW_CONTROL_KEYWORDS + "and as assert class def del " +
      "elif except exec finally from global import in is lambda " +
      "nonlocal not or pass print raise try with yield " +
      "False True None ";
  var RUBY_KEYWORDS = FLOW_CONTROL_KEYWORDS + "alias and begin case class def" +
      " defined elsif end ensure false in module next nil not or redo rescue " +
      "retry self super then true undef unless until when yield BEGIN END ";
  var SH_KEYWORDS = FLOW_CONTROL_KEYWORDS + "case done elif esac eval fi " +
      "function in local set then until ";
  var ALL_KEYWORDS = (
      CPP_KEYWORDS + CSHARP_KEYWORDS + JSCRIPT_KEYWORDS + PERL_KEYWORDS +
      PYTHON_KEYWORDS + RUBY_KEYWORDS + SH_KEYWORDS);

  // token style names.  correspond to css classes
  /** token style for a string literal */
  var PR_STRING = 'str';
  /** token style for a keyword */
  var PR_KEYWORD = 'kwd';
  /** token style for a comment */
  var PR_COMMENT = 'com';
  /** token style for a type */
  var PR_TYPE = 'typ';
  /** token style for a literal value.  e.g. 1, null, true. */
  var PR_LITERAL = 'lit';
  /** token style for a punctuation string. */
  var PR_PUNCTUATION = 'pun';
  /** token style for a punctuation string. */
  var PR_PLAIN = 'pln';

  /** token style for an sgml tag. */
  var PR_TAG = 'tag';
  /** token style for a markup declaration such as a DOCTYPE. */
  var PR_DECLARATION = 'dec';
  /** token style for embedded source. */
  var PR_SOURCE = 'src';
  /** token style for an sgml attribute name. */
  var PR_ATTRIB_NAME = 'atn';
  /** token style for an sgml attribute value. */
  var PR_ATTRIB_VALUE = 'atv';

  /**
   * A class that indicates a section of markup that is not code, e.g. to allow
   * embedding of line numbers within code listings.
   */
  var PR_NOCODE = 'nocode';

  /** A set of tokens that can precede a regular expression literal in
    * javascript.
    * http://www.mozilla.org/js/language/js20/rationale/syntax.html has the full
    * list, but I've removed ones that might be problematic when seen in
    * languages that don't support regular expression literals.
    *
    * <p>Specifically, I've removed any keywords that can't precede a regexp
    * literal in a syntactically legal javascript program, and I've removed the
    * "in" keyword since it's not a keyword in many languages, and might be used
    * as a count of inches.
    *
    * <p>The link a above does not accurately describe EcmaScript rules since
    * it fails to distinguish between (a=++/b/i) and (a++/b/i) but it works
    * very well in practice.
    *
    * @private
    */
  var REGEXP_PRECEDER_PATTERN = function () {
      var preceders = [
          "!", "!=", "!==", "#", "%", "%=", "&", "&&", "&&=",
          "&=", "(", "*", "*=", /* "+", */ "+=", ",", /* "-", */ "-=",
          "->", /*".", "..", "...", handled below */ "/", "/=", ":", "::", ";",
          "<", "<<", "<<=", "<=", "=", "==", "===", ">",
          ">=", ">>", ">>=", ">>>", ">>>=", "?", "@", "[",
          "^", "^=", "^^", "^^=", "{", "|", "|=", "||",
          "||=", "~" /* handles =~ and !~ */,
          "break", "case", "continue", "delete",
          "do", "else", "finally", "instanceof",
          "return", "throw", "try", "typeof"
          ];
      var pattern = '(?:^^|[+-]';
      for (var i = 0; i < preceders.length; ++i) {
        pattern += '|' + preceders[i].replace(/([^=<>:&a-z])/g, '\\$1');
      }
      pattern += ')\\s*';  // matches at end, and matches empty string
      return pattern;
      // CAVEAT: this does not properly handle the case where a regular
      // expression immediately follows another since a regular expression may
      // have flags for case-sensitivity and the like.  Having regexp tokens
      // adjacent is not valid in any language I'm aware of, so I'm punting.
      // TODO: maybe style special characters inside a regexp as punctuation.
    }();

  // Define regexps here so that the interpreter doesn't have to create an
  // object each time the function containing them is called.
  // The language spec requires a new object created even if you don't access
  // the $1 members.
  var pr_amp = /&/g;
  var pr_lt = /</g;
  var pr_gt = />/g;
  var pr_quot = /\"/g;
  /** like textToHtml but escapes double quotes to be attribute safe. */
  function attribToHtml(str) {
    return str.replace(pr_amp, '&amp;')
        .replace(pr_lt, '&lt;')
        .replace(pr_gt, '&gt;')
        .replace(pr_quot, '&quot;');
  }

  /** escapest html special characters to html. */
  function textToHtml(str) {
    return str.replace(pr_amp, '&amp;')
        .replace(pr_lt, '&lt;')
        .replace(pr_gt, '&gt;');
  }


  var pr_ltEnt = /&lt;/g;
  var pr_gtEnt = /&gt;/g;
  var pr_aposEnt = /&apos;/g;
  var pr_quotEnt = /&quot;/g;
  var pr_ampEnt = /&amp;/g;
  var pr_nbspEnt = /&nbsp;/g;
  /** unescapes html to plain text. */
  function htmlToText(html) {
    var pos = html.indexOf('&');
    if (pos < 0) { return html; }
    // Handle numeric entities specially.  We can't use functional substitution
    // since that doesn't work in older versions of Safari.
    // These should be rare since most browsers convert them to normal chars.
    for (--pos; (pos = html.indexOf('&#', pos + 1)) >= 0;) {
      var end = html.indexOf(';', pos);
      if (end >= 0) {
        var num = html.substring(pos + 3, end);
        var radix = 10;
        if (num && num.charAt(0) === 'x') {
          num = num.substring(1);
          radix = 16;
        }
        var codePoint = parseInt(num, radix);
        if (!isNaN(codePoint)) {
          html = (html.substring(0, pos) + String.fromCharCode(codePoint) +
                  html.substring(end + 1));
        }
      }
    }

    return html.replace(pr_ltEnt, '<')
        .replace(pr_gtEnt, '>')
        .replace(pr_aposEnt, "'")
        .replace(pr_quotEnt, '"')
        .replace(pr_nbspEnt, ' ')
        .replace(pr_ampEnt, '&');
  }

  /** is the given node's innerHTML normally unescaped? */
  function isRawContent(node) {
    return 'XMP' === node.tagName;
  }

  var newlineRe = /[\r\n]/g;
  /**
   * Are newlines and adjacent spaces significant in the given node's innerHTML?
   */
  function isPreformatted(node, content) {
    // PRE means preformatted, and is a very common case, so don't create
    // unnecessary computed style objects.
    if ('PRE' === node.tagName) { return true; }
    if (!newlineRe.test(content)) { return true; }  // Don't care
    var whitespace = '';
    // For disconnected nodes, IE has no currentStyle.
    if (node.currentStyle) {
      whitespace = node.currentStyle.whiteSpace;
    } else if (window.getComputedStyle) {
      // Firefox makes a best guess if node is disconnected whereas Safari
      // returns the empty string.
      whitespace = window.getComputedStyle(node, null).whiteSpace;
    }
    return !whitespace || whitespace === 'pre';
  }

  function normalizedHtml(node, out, opt_sortAttrs) {
    switch (node.nodeType) {
      case 1:  // an element
        var name = node.tagName.toLowerCase();

        out.push('<', name);
        var attrs = node.attributes;
        var n = attrs.length;
        if (n) {
          if (opt_sortAttrs) {
            var sortedAttrs = [];
            for (var i = n; --i >= 0;) { sortedAttrs[i] = attrs[i]; }
            sortedAttrs.sort(function (a, b) {
                return (a.name < b.name) ? -1 : a.name === b.name ? 0 : 1;
              });
            attrs = sortedAttrs;
          }
          for (var i = 0; i < n; ++i) {
            var attr = attrs[i];
            if (!attr.specified) { continue; }
            out.push(' ', attr.name.toLowerCase(),
                     '="', attribToHtml(attr.value), '"');
          }
        }
        out.push('>');
        for (var child = node.firstChild; child; child = child.nextSibling) {
          normalizedHtml(child, out, opt_sortAttrs);
        }
        if (node.firstChild || !/^(?:br|link|img)$/.test(name)) {
          out.push('<\/', name, '>');
        }
        break;
      case 3: case 4: // text
        out.push(textToHtml(node.nodeValue));
        break;
    }
  }

  /**
   * Given a group of {@link RegExp}s, returns a {@code RegExp} that globally
   * matches the union o the sets o strings matched d by the input RegExp.
   * Since it matches globally, if the input strings have a start-of-input
   * anchor (/^.../), it is ignored for the purposes of unioning.
   * @param {Array.<RegExp>} regexs non multiline, non-global regexs.
   * @return {RegExp} a global regex.
   */
  function combinePrefixPatterns(regexs) {
    var capturedGroupIndex = 0;

    var needToFoldCase = false;
    var ignoreCase = false;
    for (var i = 0, n = regexs.length; i < n; ++i) {
      var regex = regexs[i];
      if (regex.ignoreCase) {
        ignoreCase = true;
      } else if (/[a-z]/i.test(regex.source.replace(
                     /\\u[0-9a-f]{4}|\\x[0-9a-f]{2}|\\[^ux]/gi, ''))) {
        needToFoldCase = true;
        ignoreCase = false;
        break;
      }
    }

    function decodeEscape(charsetPart) {
      if (charsetPart.charAt(0) !== '\\') { return charsetPart.charCodeAt(0); }
      switch (charsetPart.charAt(1)) {
        case 'b': return 8;
        case 't': return 9;
        case 'n': return 0xa;
        case 'v': return 0xb;
        case 'f': return 0xc;
        case 'r': return 0xd;
        case 'u': case 'x':
          return parseInt(charsetPart.substring(2), 16)
              || charsetPart.charCodeAt(1);
        case '0': case '1': case '2': case '3': case '4':
        case '5': case '6': case '7':
          return parseInt(charsetPart.substring(1), 8);
        default: return charsetPart.charCodeAt(1);
      }
    }

    function encodeEscape(charCode) {
      if (charCode < 0x20) {
        return (charCode < 0x10 ? '\\x0' : '\\x') + charCode.toString(16);
      }
      var ch = String.fromCharCode(charCode);
      if (ch === '\\' || ch === '-' || ch === '[' || ch === ']') {
        ch = '\\' + ch;
      }
      return ch;
    }

    function caseFoldCharset(charSet) {
      var charsetParts = charSet.substring(1, charSet.length - 1).match(
          new RegExp(
              '\\\\u[0-9A-Fa-f]{4}'
              + '|\\\\x[0-9A-Fa-f]{2}'
              + '|\\\\[0-3][0-7]{0,2}'
              + '|\\\\[0-7]{1,2}'
              + '|\\\\[\\s\\S]'
              + '|-'
              + '|[^-\\\\]',
              'g'));
      var groups = [];
      var ranges = [];
      var inverse = charsetParts[0] === '^';
      for (var i = inverse ? 1 : 0, n = charsetParts.length; i < n; ++i) {
        var p = charsetParts[i];
        switch (p) {
          case '\\B': case '\\b':
          case '\\D': case '\\d':
          case '\\S': case '\\s':
          case '\\W': case '\\w':
            groups.push(p);
            continue;
        }
        var start = decodeEscape(p);
        var end;
        if (i + 2 < n && '-' === charsetParts[i + 1]) {
          end = decodeEscape(charsetParts[i + 2]);
          i += 2;
        } else {
          end = start;
        }
        ranges.push([start, end]);
        // If the range might intersect letters, then expand it.
        if (!(end < 65 || start > 122)) {
          if (!(end < 65 || start > 90)) {
            ranges.push([Math.max(65, start) | 32, Math.min(end, 90) | 32]);
          }
          if (!(end < 97 || start > 122)) {
            ranges.push([Math.max(97, start) & ~32, Math.min(end, 122) & ~32]);
          }
        }
      }

      // [[1, 10], [3, 4], [8, 12], [14, 14], [16, 16], [17, 17]]
      // -> [[1, 12], [14, 14], [16, 17]]
      ranges.sort(function (a, b) { return (a[0] - b[0]) || (b[1]  - a[1]); });
      var consolidatedRanges = [];
      var lastRange = [NaN, NaN];
      for (var i = 0; i < ranges.length; ++i) {
        var range = ranges[i];
        if (range[0] <= lastRange[1] + 1) {
          lastRange[1] = Math.max(lastRange[1], range[1]);
        } else {
          consolidatedRanges.push(lastRange = range);
        }
      }

      var out = ['['];
      if (inverse) { out.push('^'); }
      out.push.apply(out, groups);
      for (var i = 0; i < consolidatedRanges.length; ++i) {
        var range = consolidatedRanges[i];
        out.push(encodeEscape(range[0]));
        if (range[1] > range[0]) {
          if (range[1] + 1 > range[0]) { out.push('-'); }
          out.push(encodeEscape(range[1]));
        }
      }
      out.push(']');
      return out.join('');
    }

    function allowAnywhereFoldCaseAndRenumberGroups(regex) {
      // Split into character sets, escape sequences, punctuation strings
      // like ('(', '(?:', ')', '^'), and runs of characters that do not
      // include any of the above.
      var parts = regex.source.match(
          new RegExp(
              '(?:'
              + '\\[(?:[^\\x5C\\x5D]|\\\\[\\s\\S])*\\]'  // a character set
              + '|\\\\u[A-Fa-f0-9]{4}'  // a unicode escape
              + '|\\\\x[A-Fa-f0-9]{2}'  // a hex escape
              + '|\\\\[0-9]+'  // a back-reference or octal escape
              + '|\\\\[^ux0-9]'  // other escape sequence
              + '|\\(\\?[:!=]'  // start of a non-capturing group
              + '|[\\(\\)\\^]'  // start/emd of a group, or line start
              + '|[^\\x5B\\x5C\\(\\)\\^]+'  // run of other characters
              + ')',
              'g'));
      var n = parts.length;

      // Maps captured group numbers to the number they will occupy in
      // the output or to -1 if that has not been determined, or to
      // undefined if they need not be capturing in the output.
      var capturedGroups = [];

      // Walk over and identify back references to build the capturedGroups
      // mapping.
      for (var i = 0, groupIndex = 0; i < n; ++i) {
        var p = parts[i];
        if (p === '(') {
          // groups are 1-indexed, so max group index is count of '('
          ++groupIndex;
        } else if ('\\' === p.charAt(0)) {
          var decimalValue = +p.substring(1);
          if (decimalValue && decimalValue <= groupIndex) {
            capturedGroups[decimalValue] = -1;
          }
        }
      }

      // Renumber groups and reduce capturing groups to non-capturing groups
      // where possible.
      for (var i = 1; i < capturedGroups.length; ++i) {
        if (-1 === capturedGroups[i]) {
          capturedGroups[i] = ++capturedGroupIndex;
        }
      }
      for (var i = 0, groupIndex = 0; i < n; ++i) {
        var p = parts[i];
        if (p === '(') {
          ++groupIndex;
          if (capturedGroups[groupIndex] === undefined) {
            parts[i] = '(?:';
          }
        } else if ('\\' === p.charAt(0)) {
          var decimalValue = +p.substring(1);
          if (decimalValue && decimalValue <= groupIndex) {
            parts[i] = '\\' + capturedGroups[groupIndex];
          }
        }
      }

      // Remove any prefix anchors so that the output will match anywhere.
      // ^^ really does mean an anchored match though.
      for (var i = 0, groupIndex = 0; i < n; ++i) {
        if ('^' === parts[i] && '^' !== parts[i + 1]) { parts[i] = ''; }
      }

      // Expand letters to groupts to handle mixing of case-sensitive and
      // case-insensitive patterns if necessary.
      if (regex.ignoreCase && needToFoldCase) {
        for (var i = 0; i < n; ++i) {
          var p = parts[i];
          var ch0 = p.charAt(0);
          if (p.length >= 2 && ch0 === '[') {
            parts[i] = caseFoldCharset(p);
          } else if (ch0 !== '\\') {
            // TODO: handle letters in numeric escapes.
            parts[i] = p.replace(
                /[a-zA-Z]/g,
                function (ch) {
                  var cc = ch.charCodeAt(0);
                  return '[' + String.fromCharCode(cc & ~32, cc | 32) + ']';
                });
          }
        }
      }

      return parts.join('');
    }

    var rewritten = [];
    for (var i = 0, n = regexs.length; i < n; ++i) {
      var regex = regexs[i];
      if (regex.global || regex.multiline) { throw new Error('' + regex); }
      rewritten.push(
          '(?:' + allowAnywhereFoldCaseAndRenumberGroups(regex) + ')');
    }

    return new RegExp(rewritten.join('|'), ignoreCase ? 'gi' : 'g');
  }

  var PR_innerHtmlWorks = null;
  function getInnerHtml(node) {
    // inner html is hopelessly broken in Safari 2.0.4 when the content is
    // an html description of well formed XML and the containing tag is a PRE
    // tag, so we detect that case and emulate innerHTML.
    if (null === PR_innerHtmlWorks) {
      var testNode = document.createElement('PRE');
      testNode.appendChild(
          document.createTextNode('<!DOCTYPE foo PUBLIC "foo bar">\n<foo />'));
      PR_innerHtmlWorks = !/</.test(testNode.innerHTML);
    }

    if (PR_innerHtmlWorks) {
      var content = node.innerHTML;
      // XMP tags contain unescaped entities so require special handling.
      if (isRawContent(node)) {
        content = textToHtml(content);
      } else if (!isPreformatted(node, content)) {
        content = content.replace(/(<br\s*\/?>)[\r\n]+/g, '$1')
            .replace(/(?:[\r\n]+[ \t]*)+/g, ' ');
      }
      return content;
    }

    var out = [];
    for (var child = node.firstChild; child; child = child.nextSibling) {
      normalizedHtml(child, out);
    }
    return out.join('');
  }

  /** returns a function that expand tabs to spaces.  This function can be fed
    * successive chunks of text, and will maintain its own internal state to
    * keep track of how tabs are expanded.
    * @return {function (string) : string} a function that takes
    *   plain text and return the text with tabs expanded.
    * @private
    */
  function makeTabExpander(tabWidth) {
    var SPACES = '                ';
    var charInLine = 0;

    return function (plainText) {
      // walk over each character looking for tabs and newlines.
      // On tabs, expand them.  On newlines, reset charInLine.
      // Otherwise increment charInLine
      var out = null;
      var pos = 0;
      for (var i = 0, n = plainText.length; i < n; ++i) {
        var ch = plainText.charAt(i);

        switch (ch) {
          case '\t':
            if (!out) { out = []; }
            out.push(plainText.substring(pos, i));
            // calculate how much space we need in front of this part
            // nSpaces is the amount of padding -- the number of spaces needed
            // to move us to the next column, where columns occur at factors of
            // tabWidth.
            var nSpaces = tabWidth - (charInLine % tabWidth);
            charInLine += nSpaces;
            for (; nSpaces >= 0; nSpaces -= SPACES.length) {
              out.push(SPACES.substring(0, nSpaces));
            }
            pos = i + 1;
            break;
          case '\n':
            charInLine = 0;
            break;
          default:
            ++charInLine;
        }
      }
      if (!out) { return plainText; }
      out.push(plainText.substring(pos));
      return out.join('');
    };
  }

  var pr_chunkPattern = new RegExp(
      '[^<]+'  // A run of characters other than '<'
      + '|<\!--[\\s\\S]*?--\>'  // an HTML comment
      + '|<!\\[CDATA\\[[\\s\\S]*?\\]\\]>'  // a CDATA section
      // a probable tag that should not be highlighted
      + '|<\/?[a-zA-Z](?:[^>\"\']|\'[^\']*\'|\"[^\"]*\")*>'
      + '|<',  // A '<' that does not begin a larger chunk
      'g');
  var pr_commentPrefix = /^<\!--/;
  var pr_cdataPrefix = /^<!\[CDATA\[/;
  var pr_brPrefix = /^<br\b/i;
  var pr_tagNameRe = /^<(\/?)([a-zA-Z][a-zA-Z0-9]*)/;

  /** split markup into chunks of html tags (style null) and
    * plain text (style {@link #PR_PLAIN}), converting tags which are
    * significant for tokenization (<br>) into their textual equivalent.
    *
    * @param {string} s html where whitespace is considered significant.
    * @return {Object} source code and extracted tags.
    * @private
    */
  function extractTags(s) {
    // since the pattern has the 'g' modifier and defines no capturing groups,
    // this will return a list of all chunks which we then classify and wrap as
    // PR_Tokens
    var matches = s.match(pr_chunkPattern);
    var sourceBuf = [];
    var sourceBufLen = 0;
    var extractedTags = [];
    if (matches) {
      for (var i = 0, n = matches.length; i < n; ++i) {
        var match = matches[i];
        if (match.length > 1 && match.charAt(0) === '<') {
          if (pr_commentPrefix.test(match)) { continue; }
          if (pr_cdataPrefix.test(match)) {
            // strip CDATA prefix and suffix.  Don't unescape since it's CDATA
            sourceBuf.push(match.substring(9, match.length - 3));
            sourceBufLen += match.length - 12;
          } else if (pr_brPrefix.test(match)) {
            // <br> tags are lexically significant so convert them to text.
            // This is undone later.
            sourceBuf.push('\n');
            ++sourceBufLen;
          } else {
            if (match.indexOf(PR_NOCODE) >= 0 && isNoCodeTag(match)) {
              // A <span class="nocode"> will start a section that should be
              // ignored.  Continue walking the list until we see a matching end
              // tag.
              var name = match.match(pr_tagNameRe)[2];
              var depth = 1;
              var j;
              end_tag_loop:
              for (j = i + 1; j < n; ++j) {
                var name2 = matches[j].match(pr_tagNameRe);
                if (name2 && name2[2] === name) {
                  if (name2[1] === '/') {
                    if (--depth === 0) { break end_tag_loop; }
                  } else {
                    ++depth;
                  }
                }
              }
              if (j < n) {
                extractedTags.push(
                    sourceBufLen, matches.slice(i, j + 1).join(''));
                i = j;
              } else {  // Ignore unclosed sections.
                extractedTags.push(sourceBufLen, match);
              }
            } else {
              extractedTags.push(sourceBufLen, match);
            }
          }
        } else {
          var literalText = htmlToText(match);
          sourceBuf.push(literalText);
          sourceBufLen += literalText.length;
        }
      }
    }
    return { source: sourceBuf.join(''), tags: extractedTags };
  }

  /** True if the given tag contains a class attribute with the nocode class. */
  function isNoCodeTag(tag) {
    return !!tag
        // First canonicalize the representation of attributes
        .replace(/\s(\w+)\s*=\s*(?:\"([^\"]*)\"|'([^\']*)'|(\S+))/g,
                 ' $1="$2$3$4"')
        // Then look for the attribute we want.
        .match(/[cC][lL][aA][sS][sS]=\"[^\"]*\bnocode\b/);
  }

  /**
   * Apply the given language handler to sourceCode and add the resulting
   * decorations to out.
   * @param {number} basePos the index of sourceCode within the chunk of source
   *    whose decorations are already present on out.
   */
  function appendDecorations(basePos, sourceCode, langHandler, out) {
    if (!sourceCode) { return; }
    var job = {
      source: sourceCode,
      basePos: basePos
    };
    langHandler(job);
    out.push.apply(out, job.decorations);
  }

  /** Given triples of [style, pattern, context] returns a lexing function,
    * The lexing function interprets the patterns to find token boundaries and
    * returns a decoration list of the form
    * [index_0, style_0, index_1, style_1, ..., index_n, style_n]
    * where index_n is an index into the sourceCode, and style_n is a style
    * constant like PR_PLAIN.  index_n-1 <= index_n, and style_n-1 applies to
    * all characters in sourceCode[index_n-1:index_n].
    *
    * The stylePatterns is a list whose elements have the form
    * [style : string, pattern : RegExp, DEPRECATED, shortcut : string].
    *
    * Style is a style constant like PR_PLAIN, or can be a string of the
    * form 'lang-FOO', where FOO is a language extension describing the
    * language of the portion of the token in $1 after pattern executes.
    * E.g., if style is 'lang-lisp', and group 1 contains the text
    * '(hello (world))', then that portion of the token will be passed to the
    * registered lisp handler for formatting.
    * The text before and after group 1 will be restyled using this decorator
    * so decorators should take care that this doesn't result in infinite
    * recursion.  For example, the HTML lexer rule for SCRIPT elements looks
    * something like ['lang-js', /<[s]cript>(.+?)<\/script>/].  This may match
    * '<script>foo()<\/script>', which would cause the current decorator to
    * be called with '<script>' which would not match the same rule since
    * group 1 must not be empty, so it would be instead styled as PR_TAG by
    * the generic tag rule.  The handler registered for the 'js' extension would
    * then be called with 'foo()', and finally, the current decorator would
    * be called with '<\/script>' which would not match the original rule and
    * so the generic tag rule would identify it as a tag.
    *
    * Pattern must only match prefixes, and if it matches a prefix, then that
    * match is considered a token with the same style.
    *
    * Context is applied to the last non-whitespace, non-comment token
    * recognized.
    *
    * Shortcut is an optional string of characters, any of which, if the first
    * character, gurantee that this pattern and only this pattern matches.
    *
    * @param {Array} shortcutStylePatterns patterns that always start with
    *   a known character.  Must have a shortcut string.
    * @param {Array} fallthroughStylePatterns patterns that will be tried in
    *   order if the shortcut ones fail.  May have shortcuts.
    *
    * @return {function (Object)} a
    *   function that takes source code and returns a list of decorations.
    */
  function createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns) {
    var shortcuts = {};
    var tokenizer;
    (function () {
      var allPatterns = shortcutStylePatterns.concat(fallthroughStylePatterns);
      var allRegexs = [];
      var regexKeys = {};
      for (var i = 0, n = allPatterns.length; i < n; ++i) {
        var patternParts = allPatterns[i];
        var shortcutChars = patternParts[3];
        if (shortcutChars) {
          for (var c = shortcutChars.length; --c >= 0;) {
            shortcuts[shortcutChars.charAt(c)] = patternParts;
          }
        }
        var regex = patternParts[1];
        var k = '' + regex;
        if (!regexKeys.hasOwnProperty(k)) {
          allRegexs.push(regex);
          regexKeys[k] = null;
        }
      }
      allRegexs.push(/[\0-\uffff]/);
      tokenizer = combinePrefixPatterns(allRegexs);
    })();

    var nPatterns = fallthroughStylePatterns.length;
    var notWs = /\S/;

    /**
     * Lexes job.source and produces an output array job.decorations of style
     * classes preceded by the position at which they start in job.source in
     * order.
     *
     * @param {Object} job an object like {@code
     *    source: {string} sourceText plain text,
     *    basePos: {int} position of job.source in the larger chunk of
     *        sourceCode.
     * }
     */
    var decorate = function (job) {
      var sourceCode = job.source, basePos = job.basePos;
      /** Even entries are positions in source in ascending order.  Odd enties
        * are style markers (e.g., PR_COMMENT) that run from that position until
        * the end.
        * @type {Array.<number|string>}
        */
      var decorations = [basePos, PR_PLAIN];
      var pos = 0;  // index into sourceCode
      var tokens = sourceCode.match(tokenizer) || [];
      var styleCache = {};

      for (var ti = 0, nTokens = tokens.length; ti < nTokens; ++ti) {
        var token = tokens[ti];
        var style = styleCache[token];
        var match = void 0;

        var isEmbedded;
        if (typeof style === 'string') {
          isEmbedded = false;
        } else {
          var patternParts = shortcuts[token.charAt(0)];
          if (patternParts) {
            match = token.match(patternParts[1]);
            style = patternParts[0];
          } else {
            for (var i = 0; i < nPatterns; ++i) {
              patternParts = fallthroughStylePatterns[i];
              match = token.match(patternParts[1]);
              if (match) {
                style = patternParts[0];
                break;
              }
            }

            if (!match) {  // make sure that we make progress
              style = PR_PLAIN;
            }
          }

          isEmbedded = style.length >= 5 && 'lang-' === style.substring(0, 5);
          if (isEmbedded && !(match && typeof match[1] === 'string')) {
            isEmbedded = false;
            style = PR_SOURCE;
          }

          if (!isEmbedded) { styleCache[token] = style; }
        }

        var tokenStart = pos;
        pos += token.length;

        if (!isEmbedded) {
          decorations.push(basePos + tokenStart, style);
        } else {  // Treat group 1 as an embedded block of source code.
          var embeddedSource = match[1];
          var embeddedSourceStart = token.indexOf(embeddedSource);
          var embeddedSourceEnd = embeddedSourceStart + embeddedSource.length;
          if (match[2]) {
            // If embeddedSource can be blank, then it would match at the
            // beginning which would cause us to infinitely recurse on the
            // entire token, so we catch the right context in match[2].
            embeddedSourceEnd = token.length - match[2].length;
            embeddedSourceStart = embeddedSourceEnd - embeddedSource.length;
          }
          var lang = style.substring(5);
          // Decorate the left of the embedded source
          appendDecorations(
              basePos + tokenStart,
              token.substring(0, embeddedSourceStart),
              decorate, decorations);
          // Decorate the embedded source
          appendDecorations(
              basePos + tokenStart + embeddedSourceStart,
              embeddedSource,
              langHandlerForExtension(lang, embeddedSource),
              decorations);
          // Decorate the right of the embedded section
          appendDecorations(
              basePos + tokenStart + embeddedSourceEnd,
              token.substring(embeddedSourceEnd),
              decorate, decorations);
        }
      }
      job.decorations = decorations;
    };
    return decorate;
  }

  /** returns a function that produces a list of decorations from source text.
    *
    * This code treats ", ', and ` as string delimiters, and \ as a string
    * escape.  It does not recognize perl's qq() style strings.
    * It has no special handling for double delimiter escapes as in basic, or
    * the tripled delimiters used in python, but should work on those regardless
    * although in those cases a single string literal may be broken up into
    * multiple adjacent string literals.
    *
    * It recognizes C, C++, and shell style comments.
    *
    * @param {Object} options a set of optional parameters.
    * @return {function (Object)} a function that examines the source code
    *     in the input job and builds the decoration list.
    */
  function sourceDecorator(options) {
    var shortcutStylePatterns = [], fallthroughStylePatterns = [];
    if (options['tripleQuotedStrings']) {
      // '''multi-line-string''', 'single-line-string', and double-quoted
      shortcutStylePatterns.push(
          [PR_STRING,  /^(?:\'\'\'(?:[^\'\\]|\\[\s\S]|\'{1,2}(?=[^\']))*(?:\'\'\'|$)|\"\"\"(?:[^\"\\]|\\[\s\S]|\"{1,2}(?=[^\"]))*(?:\"\"\"|$)|\'(?:[^\\\']|\\[\s\S])*(?:\'|$)|\"(?:[^\\\"]|\\[\s\S])*(?:\"|$))/,
           null, '\'"']);
    } else if (options['multiLineStrings']) {
      // 'multi-line-string', "multi-line-string"
      shortcutStylePatterns.push(
          [PR_STRING,  /^(?:\'(?:[^\\\']|\\[\s\S])*(?:\'|$)|\"(?:[^\\\"]|\\[\s\S])*(?:\"|$)|\`(?:[^\\\`]|\\[\s\S])*(?:\`|$))/,
           null, '\'"`']);
    } else {
      // 'single-line-string', "single-line-string"
      shortcutStylePatterns.push(
          [PR_STRING,
           /^(?:\'(?:[^\\\'\r\n]|\\.)*(?:\'|$)|\"(?:[^\\\"\r\n]|\\.)*(?:\"|$))/,
           null, '"\'']);
    }
    if (options['verbatimStrings']) {
      // verbatim-string-literal production from the C# grammar.  See issue 93.
      fallthroughStylePatterns.push(
          [PR_STRING, /^@\"(?:[^\"]|\"\")*(?:\"|$)/, null]);
    }
    if (options['hashComments']) {
      if (options['cStyleComments']) {
        // Stop C preprocessor declarations at an unclosed open comment
        shortcutStylePatterns.push(
            [PR_COMMENT, /^#(?:(?:define|elif|else|endif|error|ifdef|include|ifndef|line|pragma|undef|warning)\b|[^\r\n]*)/,
             null, '#']);
        fallthroughStylePatterns.push(
            [PR_STRING,
             /^<(?:(?:(?:\.\.\/)*|\/?)(?:[\w-]+(?:\/[\w-]+)+)?[\w-]+\.h|[a-z]\w*)>/,
             null]);
      } else {
        shortcutStylePatterns.push([PR_COMMENT, /^#[^\r\n]*/, null, '#']);
      }
    }
    if (options['cStyleComments']) {
      fallthroughStylePatterns.push([PR_COMMENT, /^\/\/[^\r\n]*/, null]);
      fallthroughStylePatterns.push(
          [PR_COMMENT, /^\/\*[\s\S]*?(?:\*\/|$)/, null]);
    }
    if (options['regexLiterals']) {
      var REGEX_LITERAL = (
          // A regular expression literal starts with a slash that is
          // not followed by * or / so that it is not confused with
          // comments.
          '/(?=[^/*])'
          // and then contains any number of raw characters,
          + '(?:[^/\\x5B\\x5C]'
          // escape sequences (\x5C),
          +    '|\\x5C[\\s\\S]'
          // or non-nesting character sets (\x5B\x5D);
          +    '|\\x5B(?:[^\\x5C\\x5D]|\\x5C[\\s\\S])*(?:\\x5D|$))+'
          // finally closed by a /.
          + '/');
      fallthroughStylePatterns.push(
          ['lang-regex',
           new RegExp('^' + REGEXP_PRECEDER_PATTERN + '(' + REGEX_LITERAL + ')')
           ]);
    }

    var keywords = options['keywords'].replace(/^\s+|\s+$/g, '');
    if (keywords.length) {
      fallthroughStylePatterns.push(
          [PR_KEYWORD,
           new RegExp('^(?:' + keywords.replace(/\s+/g, '|') + ')\\b'), null]);
    }

    shortcutStylePatterns.push([PR_PLAIN,       /^\s+/, null, ' \r\n\t\xA0']);
    fallthroughStylePatterns.push(
        // TODO(mikesamuel): recognize non-latin letters and numerals in idents
        [PR_LITERAL,     /^@[a-z_$][a-z_$@0-9]*/i, null],
        [PR_TYPE,        /^@?[A-Z]+[a-z][A-Za-z_$@0-9]*/, null],
        [PR_PLAIN,       /^[a-z_$][a-z_$@0-9]*/i, null],
        [PR_LITERAL,
         new RegExp(
             '^(?:'
             // A hex number
             + '0x[a-f0-9]+'
             // or an octal or decimal number,
             + '|(?:\\d(?:_\\d+)*\\d*(?:\\.\\d*)?|\\.\\d\\+)'
             // possibly in scientific notation
             + '(?:e[+\\-]?\\d+)?'
             + ')'
             // with an optional modifier like UL for unsigned long
             + '[a-z]*', 'i'),
         null, '0123456789'],
        [PR_PUNCTUATION, /^.[^\s\w\.$@\'\"\`\/\#]*/, null]);

    return createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns);
  }

  var decorateSource = sourceDecorator({
        'keywords': ALL_KEYWORDS,
        'hashComments': true,
        'cStyleComments': true,
        'multiLineStrings': true,
        'regexLiterals': true
      });

  /** Breaks {@code job.source} around style boundaries in
    * {@code job.decorations} while re-interleaving {@code job.extractedTags},
    * and leaves the result in {@code job.prettyPrintedHtml}.
    * @param {Object} job like {
    *    source: {string} source as plain text,
    *    extractedTags: {Array.<number|string>} extractedTags chunks of raw
    *                   html preceded by their position in {@code job.source}
    *                   in order
    *    decorations: {Array.<number|string} an array of style classes preceded
    *                 by the position at which they start in job.source in order
    * }
    * @private
    */
  function recombineTagsAndDecorations(job) {
    var sourceText = job.source;
    var extractedTags = job.extractedTags;
    var decorations = job.decorations;

    var html = [];
    // index past the last char in sourceText written to html
    var outputIdx = 0;

    var openDecoration = null;
    var currentDecoration = null;
    var tagPos = 0;  // index into extractedTags
    var decPos = 0;  // index into decorations
    var tabExpander = makeTabExpander(window['PR_TAB_WIDTH']);

    var adjacentSpaceRe = /([\r\n ]) /g;
    var startOrSpaceRe = /(^| ) /gm;
    var newlineRe = /\r\n?|\n/g;
    var trailingSpaceRe = /[ \r\n]$/;
    var lastWasSpace = true;  // the last text chunk emitted ended with a space.

    // See bug 71 and http://stackoverflow.com/questions/136443/why-doesnt-ie7-
    var isIE678 = window['_pr_isIE6']();
    var lineBreakHtml = (
        isIE678
        ? (job.sourceNode.tagName === 'PRE'
           // Use line feeds instead of <br>s so that copying and pasting works
           // on IE.
           // Doing this on other browsers breaks lots of stuff since \r\n is
           // treated as two newlines on Firefox.
           ? (isIE678 === 6 ? '&#160;\r\n' :
              isIE678 === 7 ? '&#160;<br>\r' : '&#160;\r')
           // IE collapses multiple adjacent <br>s into 1 line break.
           // Prefix every newline with '&#160;' to prevent such behavior.
           // &nbsp; is the same as &#160; but works in XML as well as HTML.
           : '&#160;<br />')
        : '<br />');

    // Look for a class like linenums or linenums:<n> where <n> is the 1-indexed
    // number of the first line.
    var numberLines = job.sourceNode.className.match(/\blinenums\b(?::(\d+))?/);
    var lineBreaker;
    if (numberLines) {
      var lineBreaks = [];
      for (var i = 0; i < 10; ++i) {
        lineBreaks[i] = lineBreakHtml + '</li><li class="L' + i + '">';
      }
      var lineNum = numberLines[1] && numberLines[1].length
          ? numberLines[1] - 1 : 0;  // Lines are 1-indexed
      html.push('<ol class="linenums"><li class="L', (lineNum) % 10, '"');
      if (lineNum) {
        html.push(' value="', lineNum + 1, '"');
      }
      html.push('>');
      lineBreaker = function () {
        var lb = lineBreaks[++lineNum % 10];
        // If a decoration is open, we need to close it before closing a list-item
        // and reopen it on the other side of the list item.
        return openDecoration
            ? ('</span>' + lb + '<span class="' + openDecoration + '">') : lb;
      };
    } else {
      lineBreaker = lineBreakHtml;
    }

    // A helper function that is responsible for opening sections of decoration
    // and outputing properly escaped chunks of source
    function emitTextUpTo(sourceIdx) {
      if (sourceIdx > outputIdx) {
        if (openDecoration && openDecoration !== currentDecoration) {
          // Close the current decoration
          html.push('</span>');
          openDecoration = null;
        }
        if (!openDecoration && currentDecoration) {
          openDecoration = currentDecoration;
          html.push('<span class="', openDecoration, '">');
        }
        // This interacts badly with some wikis which introduces paragraph tags
        // into pre blocks for some strange reason.
        // It's necessary for IE though which seems to lose the preformattedness
        // of <pre> tags when their innerHTML is assigned.
        // http://stud3.tuwien.ac.at/~e0226430/innerHtmlQuirk.html
        // and it serves to undo the conversion of <br>s to newlines done in
        // chunkify.
        var htmlChunk = textToHtml(
            tabExpander(sourceText.substring(outputIdx, sourceIdx)))
            .replace(lastWasSpace
                     ? startOrSpaceRe
                     : adjacentSpaceRe, '$1&#160;');
        // Keep track of whether we need to escape space at the beginning of the
        // next chunk.
        lastWasSpace = trailingSpaceRe.test(htmlChunk);
        html.push(htmlChunk.replace(newlineRe, lineBreaker));
        outputIdx = sourceIdx;
      }
    }

    while (true) {
      // Determine if we're going to consume a tag this time around.  Otherwise
      // we consume a decoration or exit.
      var outputTag;
      if (tagPos < extractedTags.length) {
        if (decPos < decorations.length) {
          // Pick one giving preference to extractedTags since we shouldn't open
          // a new style that we're going to have to immediately close in order
          // to output a tag.
          outputTag = extractedTags[tagPos] <= decorations[decPos];
        } else {
          outputTag = true;
        }
      } else {
        outputTag = false;
      }
      // Consume either a decoration or a tag or exit.
      if (outputTag) {
        emitTextUpTo(extractedTags[tagPos]);
        if (openDecoration) {
          // Close the current decoration
          html.push('</span>');
          openDecoration = null;
        }
        html.push(extractedTags[tagPos + 1]);
        tagPos += 2;
      } else if (decPos < decorations.length) {
        emitTextUpTo(decorations[decPos]);
        currentDecoration = decorations[decPos + 1];
        decPos += 2;
      } else {
        break;
      }
    }
    emitTextUpTo(sourceText.length);
    if (openDecoration) {
      html.push('</span>');
    }
    if (numberLines) { html.push('</li></ol>'); }
    job.prettyPrintedHtml = html.join('');
  }

  /** Maps language-specific file extensions to handlers. */
  var langHandlerRegistry = {};
  /** Register a language handler for the given file extensions.
    * @param {function (Object)} handler a function from source code to a list
    *      of decorations.  Takes a single argument job which describes the
    *      state of the computation.   The single parameter has the form
    *      {@code {
    *        source: {string} as plain text.
    *        decorations: {Array.<number|string>} an array of style classes
    *                     preceded by the position at which they start in
    *                     job.source in order.
    *                     The language handler should assigned this field.
    *        basePos: {int} the position of source in the larger source chunk.
    *                 All positions in the output decorations array are relative
    *                 to the larger source chunk.
    *      } }
    * @param {Array.<string>} fileExtensions
    */
  function registerLangHandler(handler, fileExtensions) {
    for (var i = fileExtensions.length; --i >= 0;) {
      var ext = fileExtensions[i];
      if (!langHandlerRegistry.hasOwnProperty(ext)) {
        langHandlerRegistry[ext] = handler;
      } else if ('console' in window) {
        console['warn']('cannot override language handler %s', ext);
      }
    }
  }
  function langHandlerForExtension(extension, source) {
    if (!(extension && langHandlerRegistry.hasOwnProperty(extension))) {
      // Treat it as markup if the first non whitespace character is a < and
      // the last non-whitespace character is a >.
      extension = /^\s*</.test(source)
          ? 'default-markup'
          : 'default-code';
    }
    return langHandlerRegistry[extension];
  }
  registerLangHandler(decorateSource, ['default-code']);
  registerLangHandler(
      createSimpleLexer(
          [],
          [
           [PR_PLAIN,       /^[^<?]+/],
           [PR_DECLARATION, /^<!\w[^>]*(?:>|$)/],
           [PR_COMMENT,     /^<\!--[\s\S]*?(?:-\->|$)/],
           // Unescaped content in an unknown language
           ['lang-',        /^<\?([\s\S]+?)(?:\?>|$)/],
           ['lang-',        /^<%([\s\S]+?)(?:%>|$)/],
           [PR_PUNCTUATION, /^(?:<[%?]|[%?]>)/],
           ['lang-',        /^<xmp\b[^>]*>([\s\S]+?)<\/xmp\b[^>]*>/i],
           // Unescaped content in javascript.  (Or possibly vbscript).
           ['lang-js',      /^<script\b[^>]*>([\s\S]*?)(<\/script\b[^>]*>)/i],
           // Contains unescaped stylesheet content
           ['lang-css',     /^<style\b[^>]*>([\s\S]*?)(<\/style\b[^>]*>)/i],
           ['lang-in.tag',  /^(<\/?[a-z][^<>]*>)/i]
          ]),
      ['default-markup', 'htm', 'html', 'mxml', 'xhtml', 'xml', 'xsl']);
  registerLangHandler(
      createSimpleLexer(
          [
           [PR_PLAIN,        /^[\s]+/, null, ' \t\r\n'],
           [PR_ATTRIB_VALUE, /^(?:\"[^\"]*\"?|\'[^\']*\'?)/, null, '\"\'']
           ],
          [
           [PR_TAG,          /^^<\/?[a-z](?:[\w.:-]*\w)?|\/?>$/i],
           [PR_ATTRIB_NAME,  /^(?!style[\s=]|on)[a-z](?:[\w:-]*\w)?/i],
           ['lang-uq.val',   /^=\s*([^>\'\"\s]*(?:[^>\'\"\s\/]|\/(?=\s)))/],
           [PR_PUNCTUATION,  /^[=<>\/]+/],
           ['lang-js',       /^on\w+\s*=\s*\"([^\"]+)\"/i],
           ['lang-js',       /^on\w+\s*=\s*\'([^\']+)\'/i],
           ['lang-js',       /^on\w+\s*=\s*([^\"\'>\s]+)/i],
           ['lang-css',      /^style\s*=\s*\"([^\"]+)\"/i],
           ['lang-css',      /^style\s*=\s*\'([^\']+)\'/i],
           ['lang-css',      /^style\s*=\s*([^\"\'>\s]+)/i]
           ]),
      ['in.tag']);
  registerLangHandler(
      createSimpleLexer([], [[PR_ATTRIB_VALUE, /^[\s\S]+/]]), ['uq.val']);
  registerLangHandler(sourceDecorator({
          'keywords': CPP_KEYWORDS,
          'hashComments': true,
          'cStyleComments': true
        }), ['c', 'cc', 'cpp', 'cxx', 'cyc', 'm']);
  registerLangHandler(sourceDecorator({
          'keywords': 'null true false'
        }), ['json']);
  registerLangHandler(sourceDecorator({
          'keywords': CSHARP_KEYWORDS,
          'hashComments': true,
          'cStyleComments': true,
          'verbatimStrings': true
        }), ['cs']);
  registerLangHandler(sourceDecorator({
          'keywords': JAVA_KEYWORDS,
          'cStyleComments': true
        }), ['java']);
  registerLangHandler(sourceDecorator({
          'keywords': SH_KEYWORDS,
          'hashComments': true,
          'multiLineStrings': true
        }), ['bsh', 'csh', 'sh']);
  registerLangHandler(sourceDecorator({
          'keywords': PYTHON_KEYWORDS,
          'hashComments': true,
          'multiLineStrings': true,
          'tripleQuotedStrings': true
        }), ['cv', 'py']);
  registerLangHandler(sourceDecorator({
          'keywords': PERL_KEYWORDS,
          'hashComments': true,
          'multiLineStrings': true,
          'regexLiterals': true
        }), ['perl', 'pl', 'pm']);
  registerLangHandler(sourceDecorator({
          'keywords': RUBY_KEYWORDS,
          'hashComments': true,
          'multiLineStrings': true,
          'regexLiterals': true
        }), ['rb']);
  registerLangHandler(sourceDecorator({
          'keywords': JSCRIPT_KEYWORDS,
          'cStyleComments': true,
          'regexLiterals': true
        }), ['js']);
  registerLangHandler(
      createSimpleLexer([], [[PR_STRING, /^[\s\S]+/]]), ['regex']);

  function applyDecorator(job) {
    var sourceCodeHtml = job.sourceCodeHtml;
    var opt_langExtension = job.langExtension;

    // Prepopulate output in case processing fails with an exception.
    job.prettyPrintedHtml = sourceCodeHtml;

    try {
      // Extract tags, and convert the source code to plain text.
      var sourceAndExtractedTags = extractTags(sourceCodeHtml);
      /** Plain text. @type {string} */
      var source = sourceAndExtractedTags.source;
      job.source = source;
      job.basePos = 0;

      /** Even entries are positions in source in ascending order.  Odd entries
        * are tags that were extracted at that position.
        * @type {Array.<number|string>}
        */
      job.extractedTags = sourceAndExtractedTags.tags;

      // Apply the appropriate language handler
      langHandlerForExtension(opt_langExtension, source)(job);
      // Integrate the decorations and tags back into the source code to produce
      // a decorated html string which is left in job.prettyPrintedHtml.
      recombineTagsAndDecorations(job);
    } catch (e) {
      if ('console' in window) {
        console['log'](e && e['stack'] ? e['stack'] : e);
      }
    }
  }

  function prettyPrintOne(sourceCodeHtml, opt_langExtension) {
    var job = {
      sourceCodeHtml: sourceCodeHtml,
      langExtension: opt_langExtension
    };
    applyDecorator(job);
    return job.prettyPrintedHtml;
  }

  function prettyPrint(opt_whenDone) {
    function byTagName(tn) { return document.getElementsByTagName(tn); }
    // fetch a list of nodes to rewrite
    var codeSegments = [byTagName('pre'), byTagName('code'), byTagName('xmp')];
    var elements = [];
    for (var i = 0; i < codeSegments.length; ++i) {
      for (var j = 0, n = codeSegments[i].length; j < n; ++j) {
        elements.push(codeSegments[i][j]);
      }
    }
    codeSegments = null;

    var clock = Date;
    if (!clock['now']) {
      clock = { 'now': function () { return (new Date).getTime(); } };
    }

    // The loop is broken into a series of continuations to make sure that we
    // don't make the browser unresponsive when rewriting a large page.
    var k = 0;
    var prettyPrintingJob;

    function doWork() {
      var endTime = (window['PR_SHOULD_USE_CONTINUATION'] ?
                     clock.now() + 250 /* ms */ :
                     Infinity);
      for (; k < elements.length && clock.now() < endTime; k++) {
        var cs = elements[k];
        // [JACOCO] 'prettyprint' -> 'source'
        if (cs.className && cs.className.indexOf('source') >= 0) {
          // If the classes includes a language extensions, use it.
          // Language extensions can be specified like
          //     <pre class="prettyprint lang-cpp">
          // the language extension "cpp" is used to find a language handler as
          // passed to PR_registerLangHandler.
          var langExtension = cs.className.match(/\blang-(\w+)\b/);
          if (langExtension) { langExtension = langExtension[1]; }

          // make sure this is not nested in an already prettified element
          var nested = false;
          for (var p = cs.parentNode; p; p = p.parentNode) {
            if ((p.tagName === 'pre' || p.tagName === 'code' ||
                 p.tagName === 'xmp') &&
                // [JACOCO] 'prettyprint' -> 'source'
                p.className && p.className.indexOf('source') >= 0) {
              nested = true;
              break;
            }
          }
          if (!nested) {
            // fetch the content as a snippet of properly escaped HTML.
            // Firefox adds newlines at the end.
            var content = getInnerHtml(cs);
            content = content.replace(/(?:\r\n?|\n)$/, '');

            // do the pretty printing
            prettyPrintingJob = {
              sourceCodeHtml: content,
              langExtension: langExtension,
              sourceNode: cs
            };
            applyDecorator(prettyPrintingJob);
            replaceWithPrettyPrintedHtml();
          }
        }
      }
      if (k < elements.length) {
        // finish up in a continuation
        setTimeout(doWork, 250);
      } else if (opt_whenDone) {
        opt_whenDone();
      }
    }

    function replaceWithPrettyPrintedHtml() {
      var newContent = prettyPrintingJob.prettyPrintedHtml;
      if (!newContent) { return; }
      var cs = prettyPrintingJob.sourceNode;

      // push the prettified html back into the tag.
      if (!isRawContent(cs)) {
        // just replace the old html with the new
        cs.innerHTML = newContent;
      } else {
        // we need to change the tag to a <pre> since <xmp>s do not allow
        // embedded tags such as the span tags used to attach styles to
        // sections of source code.
        var pre = document.createElement('PRE');
        for (var i = 0; i < cs.attributes.length; ++i) {
          var a = cs.attributes[i];
          if (a.specified) {
            var aname = a.name.toLowerCase();
            if (aname === 'class') {
              pre.className = a.value;  // For IE 6
            } else {
              pre.setAttribute(a.name, a.value);
            }
          }
        }
        pre.innerHTML = newContent;

        // remove the old
        cs.parentNode.replaceChild(pre, cs);
        cs = pre;
      }
    }

    doWork();
  }

  window['PR_normalizedHtml'] = normalizedHtml;
  window['prettyPrintOne'] = prettyPrintOne;
  window['prettyPrint'] = prettyPrint;
  window['PR'] = {
        'combinePrefixPatterns': combinePrefixPatterns,
        'createSimpleLexer': createSimpleLexer,
        'registerLangHandler': registerLangHandler,
        'sourceDecorator': sourceDecorator,
        'PR_ATTRIB_NAME': PR_ATTRIB_NAME,
        'PR_ATTRIB_VALUE': PR_ATTRIB_VALUE,
        'PR_COMMENT': PR_COMMENT,
        'PR_DECLARATION': PR_DECLARATION,
        'PR_KEYWORD': PR_KEYWORD,
        'PR_LITERAL': PR_LITERAL,
        'PR_NOCODE': PR_NOCODE,
        'PR_PLAIN': PR_PLAIN,
        'PR_PUNCTUATION': PR_PUNCTUATION,
        'PR_SOURCE': PR_SOURCE,
        'PR_STRING': PR_STRING,
        'PR_TAG': PR_TAG,
        'PR_TYPE': PR_TYPE
      };
})();

../spring-petclinic/target/site/jacoco/jacoco-resources/sort.js
/*******************************************************************************
 * Copyright (c) 2009, 2023 Mountainminds GmbH & Co. KG and Contributors
 * This program and the accompanying materials are made available under
 * the terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *    Marc R. Hoffmann - initial API and implementation
 *
 *******************************************************************************/

(function () {

  /**
   * Sets the initial sorting derived from the hash.
   *
   * @param linkelementids
   *          list of element ids to search for links to add sort inidcator
   *          hash links
   */
  function initialSort(linkelementids) {
    window.linkelementids = linkelementids;
    var hash = window.location.hash;
    if (hash) {
      var m = hash.match(/up-./);
      if (m) {
        var header = window.document.getElementById(m[0].charAt(3));
        if (header) {
          sortColumn(header, true);
        }
        return;
      }
      var m = hash.match(/dn-./);
      if (m) {
        var header = window.document.getElementById(m[0].charAt(3));
        if (header) {
          sortColumn(header, false);
        }
        return
      }
    }
  }

  /**
   * Sorts the columns with the given header dependening on the current sort state.
   */
  function toggleSort(header) {
    var sortup = header.className.indexOf('down ') == 0;
    sortColumn(header, sortup);
  }

  /**
   * Sorts the columns with the given header in the given direction.
   */
  function sortColumn(header, sortup) {
    var table = header.parentNode.parentNode.parentNode;
    var body = table.tBodies[0];
    var colidx = getNodePosition(header);

    resetSortedStyle(table);

    var rows = body.rows;
    var sortedrows = [];
    for (var i = 0; i < rows.length; i++) {
      r = rows[i];
      sortedrows[parseInt(r.childNodes[colidx].id.slice(1))] = r;
    }

    var hash;

    if (sortup) {
      for (var i = sortedrows.length - 1; i >= 0; i--) {
        body.appendChild(sortedrows[i]);
      }
      header.className = 'up ' + header.className;
      hash = 'up-' + header.id;
    } else {
      for (var i = 0; i < sortedrows.length; i++) {
        body.appendChild(sortedrows[i]);
      }
      header.className = 'down ' + header.className;
      hash = 'dn-' + header.id;
    }

    setHash(hash);
  }

  /**
   * Adds the sort indicator as a hash to the document URL and all links.
   */
  function setHash(hash) {
    window.document.location.hash = hash;
    ids = window.linkelementids;
    for (var i = 0; i < ids.length; i++) {
        setHashOnAllLinks(document.getElementById(ids[i]), hash);
    }
  }

  /**
   * Extend all links within the given tag with the given hash.
   */
  function setHashOnAllLinks(tag, hash) {
    links = tag.getElementsByTagName("a");
    for (var i = 0; i < links.length; i++) {
        var a = links[i];
        var href = a.href;
        var hashpos = href.indexOf("#");
        if (hashpos != -1) {
            href = href.substring(0, hashpos);
        }
        a.href = href + "#" + hash;
    }
  }

  /**
   * Calculates the position of a element within its parent.
   */
  function getNodePosition(element) {
    var pos = -1;
    while (element) {
      element = element.previousSibling;
      pos++;
    }
    return pos;
  }

  /**
   * Remove the sorting indicator style from all headers.
   */
  function resetSortedStyle(table) {
    for (var c = table.tHead.firstChild.firstChild; c; c = c.nextSibling) {
      if (c.className) {
        if (c.className.indexOf('down ') == 0) {
          c.className = c.className.slice(5);
        }
        if (c.className.indexOf('up ') == 0) {
          c.className = c.className.slice(3);
        }
      }
    }
  }

  window['initialSort'] = initialSort;
  window['toggleSort'] = toggleSort;

})();

../spring-petclinic/.mvn/wrapper/MavenWrapperDownloader.java
/*
 * Copyright 2007-present the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0'
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import java.net.*;
import java.io.*;
import java.nio.channels.*;
import java.util.Properties;

public class MavenWrapperDownloader {

    private static final String WRAPPER_VERSION = "0.5.6";
    /**
     * Default URL to download the maven-wrapper.jar from, if no 'downloadUrl' is provided.
     */
    private static final String DEFAULT_DOWNLOAD_URL = "https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/"
        + WRAPPER_VERSION + "/maven-wrapper-" + WRAPPER_VERSION + ".jar";

    /**
     * Path to the maven-wrapper.properties file, which might contain a downloadUrl property to
     * use instead of the default one.
     */
    private static final String MAVEN_WRAPPER_PROPERTIES_PATH =
            ".mvn/wrapper/maven-wrapper.properties";

    /**
     * Path where the maven-wrapper.jar will be saved to.
     */
    private static final String MAVEN_WRAPPER_JAR_PATH =
            ".mvn/wrapper/maven-wrapper.jar";

    /**
     * Name of the property which should be used to override the default download url for the wrapper.
     */
    private static final String PROPERTY_NAME_WRAPPER_URL = "wrapperUrl";

    public static void main(String args[]) {
        System.out.println("- Downloader started");
        File baseDirectory = new File(args[0]);
        System.out.println("- Using base directory: " + baseDirectory.getAbsolutePath());

        // If the maven-wrapper.properties exists, read it and check if it contains a custom
        // wrapperUrl parameter.
        File mavenWrapperPropertyFile = new File(baseDirectory, MAVEN_WRAPPER_PROPERTIES_PATH);
        String url = DEFAULT_DOWNLOAD_URL;
        if(mavenWrapperPropertyFile.exists()) {
            FileInputStream mavenWrapperPropertyFileInputStream = null;
            try {
                mavenWrapperPropertyFileInputStream = new FileInputStream(mavenWrapperPropertyFile);
                Properties mavenWrapperProperties = new Properties();
                mavenWrapperProperties.load(mavenWrapperPropertyFileInputStream);
                url = mavenWrapperProperties.getProperty(PROPERTY_NAME_WRAPPER_URL, url);
            } catch (IOException e) {
                System.out.println("- ERROR loading '" + MAVEN_WRAPPER_PROPERTIES_PATH + "'");
            } finally {
                try {
                    if(mavenWrapperPropertyFileInputStream != null) {
                        mavenWrapperPropertyFileInputStream.close();
                    }
                } catch (IOException e) {
                    // Ignore ...
                }
            }
        }
        System.out.println("- Downloading from: " + url);

        File outputFile = new File(baseDirectory.getAbsolutePath(), MAVEN_WRAPPER_JAR_PATH);
        if(!outputFile.getParentFile().exists()) {
            if(!outputFile.getParentFile().mkdirs()) {
                System.out.println(
                        "- ERROR creating output directory '" + outputFile.getParentFile().getAbsolutePath() + "'");
            }
        }
        System.out.println("- Downloading to: " + outputFile.getAbsolutePath());
        try {
            downloadFileFromURL(url, outputFile);
            System.out.println("Done");
            System.exit(0);
        } catch (Throwable e) {
            System.out.println("- Error downloading");
            e.printStackTrace();
            System.exit(1);
        }
    }

    private static void downloadFileFromURL(String urlString, File destination) throws Exception {
        if (System.getenv("MVNW_USERNAME") != null && System.getenv("MVNW_PASSWORD") != null) {
            String username = System.getenv("MVNW_USERNAME");
            char[] password = System.getenv("MVNW_PASSWORD").toCharArray();
            Authenticator.setDefault(new Authenticator() {
                @Override
                protected PasswordAuthentication getPasswordAuthentication() {
                    return new PasswordAuthentication(username, password);
                }
            });
        }
        URL website = new URL(urlString);
        ReadableByteChannel rbc;
        rbc = Channels.newChannel(website.openStream());
        FileOutputStream fos = new FileOutputStream(destination);
        fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);
        fos.close();
        rbc.close();
    }

}

../spring-petclinic/src/main/java/org/springframework/samples/petclinic/PetClinicApplication.java
/*
 * Copyright 2012-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.springframework.samples.petclinic;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.ImportRuntimeHints;

/**
 * PetClinic Spring Boot Application.
 *
 * @author Dave Syer
 *
 */
@SpringBootApplication
@ImportRuntimeHints(PetClinicRuntimeHints.class)
public class PetClinicApplication {

	public static void main(String[] args) {
		SpringApplication.run(PetClinicApplication.class, args);
	}

}

../spring-petclinic/src/main/java/org/springframework/samples/petclinic/PetClinicRuntimeHints.java
/*
 * Copyright 2012-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.springframework.samples.petclinic;

import org.springframework.aot.hint.RuntimeHints;
import org.springframework.aot.hint.RuntimeHintsRegistrar;
import org.springframework.samples.petclinic.model.BaseEntity;
import org.springframework.samples.petclinic.model.Person;
import org.springframework.samples.petclinic.vet.Vet;

public class PetClinicRuntimeHints implements RuntimeHintsRegistrar {

	@Override
	public void registerHints(RuntimeHints hints, ClassLoader classLoader) {
		hints.resources().registerPattern("db/*"); // https://github.com/spring-projects/spring-boot/issues/32654
		hints.resources().registerPattern("messages/*");
		hints.resources().registerPattern("META-INF/resources/webjars/*");
		hints.resources().registerPattern("mysql-default-conf");
		hints.serialization().registerType(BaseEntity.class);
		hints.serialization().registerType(Person.class);
		hints.serialization().registerType(Vet.class);
	}

}

../spring-petclinic/src/main/java/org/springframework/samples/petclinic/model/BaseEntity.java
/*
 * Copyright 2012-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.springframework.samples.petclinic.model;

import java.io.Serializable;

import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.MappedSuperclass;

/**
 * Simple JavaBean domain object with an id property. Used as a base class for objects
 * needing this property.
 *
 * @author Ken Krebs
 * @author Juergen Hoeller
 */
@MappedSuperclass
public class BaseEntity implements Serializable {

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Integer id;

	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public boolean isNew() {
		return this.id == null;
	}

}

../spring-petclinic/src/main/java/org/springframework/samples/petclinic/model/NamedEntity.java
/*
 * Copyright 2012-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.springframework.samples.petclinic.model;

import jakarta.persistence.Column;
import jakarta.persistence.MappedSuperclass;

/**
 * Simple JavaBean domain object adds a name property to <code>BaseEntity</code>. Used as
 * a base class for objects needing these properties.
 *
 * @author Ken Krebs
 * @author Juergen Hoeller
 */
@MappedSuperclass
public class NamedEntity extends BaseEntity {

	@Column(name = "name")
	private String name;

	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Override
	public String toString() {
		return this.getName();
	}

}

../spring-petclinic/src/main/java/org/springframework/samples/petclinic/model/Person.java
/*
 * Copyright 2012-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.springframework.samples.petclinic.model;

import jakarta.persistence.Column;
import jakarta.persistence.MappedSuperclass;
import jakarta.validation.constraints.NotBlank;

/**
 * Simple JavaBean domain object representing an person.
 *
 * @author Ken Krebs
 */
@MappedSuperclass
public class Person extends BaseEntity {

	@Column(name = "first_name")
	@NotBlank
	private String firstName;

	@Column(name = "last_name")
	@NotBlank
	private String lastName;

	public String getFirstName() {
		return this.firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	public String getLastName() {
		return this.lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

}

../spring-petclinic/src/main/java/org/springframework/samples/petclinic/model/package-info.java
/*
 * Copyright 2012-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * The classes in this package represent utilities used by the domain.
 */
package org.springframework.samples.petclinic.model;

../spring-petclinic/src/main/java/org/springframework/samples/petclinic/owner/Owner.java
/*
 * Copyright 2012-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.springframework.samples.petclinic.owner;

import java.util.ArrayList;
import java.util.List;

import org.springframework.core.style.ToStringCreator;
import org.springframework.samples.petclinic.model.Person;
import org.springframework.util.Assert;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.OneToMany;
import jakarta.persistence.OrderBy;
import jakarta.persistence.Table;
import jakarta.validation.constraints.Digits;
import jakarta.validation.constraints.NotBlank;

/**
 * Simple JavaBean domain object representing an owner.
 *
 * @author Ken Krebs
 * @author Juergen Hoeller
 * @author Sam Brannen
 * @author Michael Isvy
 * @author Oliver Drotbohm
 */
@Entity
@Table(name = "owners")
public class Owner extends Person {

	@Column(name = "address")
	@NotBlank
	private String address;

	@Column(name = "city")
	@NotBlank
	private String city;

	@Column(name = "telephone")
	@NotBlank
	@Digits(fraction = 0, integer = 10)
	private String telephone;

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER)
	@JoinColumn(name = "owner_id")
	@OrderBy("name")
	private List<Pet> pets = new ArrayList<>();

	public String getAddress() {
		return this.address;
	}

	public void setAddress(String address) {
		this.address = address;
	}

	public String getCity() {
		return this.city;
	}

	public void setCity(String city) {
		this.city = city;
	}

	public String getTelephone() {
		return this.telephone;
	}

	public void setTelephone(String telephone) {
		this.telephone = telephone;
	}

	public List<Pet> getPets() {
		return this.pets;
	}

	public void addPet(Pet pet) {
		if (pet.isNew()) {
			getPets().add(pet);
		}
	}

	/**
	 * Return the Pet with the given name, or null if none found for this Owner.
	 * @param name to test
	 * @return a pet if pet name is already in use
	 */
	public Pet getPet(String name) {
		return getPet(name, false);
	}

	/**
	 * Return the Pet with the given id, or null if none found for this Owner.
	 * @param id to test
	 * @return a pet if pet id is already in use
	 */
	public Pet getPet(Integer id) {
		for (Pet pet : getPets()) {
			if (!pet.isNew()) {
				Integer compId = pet.getId();
				if (compId.equals(id)) {
					return pet;
				}
			}
		}
		return null;
	}

	/**
	 * Return the Pet with the given name, or null if none found for this Owner.
	 * @param name to test
	 * @return a pet if pet name is already in use
	 */
	public Pet getPet(String name, boolean ignoreNew) {
		name = name.toLowerCase();
		for (Pet pet : getPets()) {
			String compName = pet.getName();
			if (compName != null && compName.equalsIgnoreCase(name)) {
				if (!ignoreNew || !pet.isNew()) {
					return pet;
				}
			}
		}
		return null;
	}

	@Override
	public String toString() {
		return new ToStringCreator(this).append("id", this.getId())
			.append("new", this.isNew())
			.append("lastName", this.getLastName())
			.append("firstName", this.getFirstName())
			.append("address", this.address)
			.append("city", this.city)
			.append("telephone", this.telephone)
			.toString();
	}

	/**
	 * Adds the given {@link Visit} to the {@link Pet} with the given identifier.
	 * @param petId the identifier of the {@link Pet}, must not be {@literal null}.
	 * @param visit the visit to add, must not be {@literal null}.
	 */
	public void addVisit(Integer petId, Visit visit) {

		Assert.notNull(petId, "Pet identifier must not be null!");
		Assert.notNull(visit, "Visit must not be null!");

		Pet pet = getPet(petId);

		Assert.notNull(pet, "Invalid Pet identifier!");

		pet.addVisit(visit);
	}

}

../spring-petclinic/src/main/java/org/springframework/samples/petclinic/owner/OwnerController.java
/*
 * Copyright 2012-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.springframework.samples.petclinic.owner;

import java.util.List;
import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import jakarta.validation.Valid;

/**
 * @author Juergen Hoeller
 * @author Ken Krebs
 * @author Arjen Poutsma
 * @author Michael Isvy
 */
@Controller
class OwnerController {

	private static final String VIEWS_OWNER_CREATE_OR_UPDATE_FORM = "owners/createOrUpdateOwnerForm";

	private final OwnerRepository owners;

	public OwnerController(OwnerRepository clinicService) {
		this.owners = clinicService;
	}

	@InitBinder
	public void setAllowedFields(WebDataBinder dataBinder) {
		dataBinder.setDisallowedFields("id");
	}

	@ModelAttribute("owner")
	public Owner findOwner(@PathVariable(name = "ownerId", required = false) Integer ownerId) {
		return ownerId == null ? new Owner() : this.owners.findById(ownerId);
	}

	@GetMapping("/owners/new")
	public String initCreationForm(Map<String, Object> model) {
		Owner owner = new Owner();
		model.put("owner", owner);
		return VIEWS_OWNER_CREATE_OR_UPDATE_FORM;
	}

	@PostMapping("/owners/new")
	public String processCreationForm(@Valid Owner owner, BindingResult result) {
		if (result.hasErrors()) {
			return VIEWS_OWNER_CREATE_OR_UPDATE_FORM;
		}

		this.owners.save(owner);
		return "redirect:/owners/" + owner.getId();
	}

	@GetMapping("/owners/find")
	public String initFindForm() {
		return "owners/findOwners";
	}

	@GetMapping("/owners")
	public String processFindForm(@RequestParam(defaultValue = "1") int page, Owner owner, BindingResult result,
			Model model) {
		// allow parameterless GET request for /owners to return all records
		if (owner.getLastName() == null) {
			owner.setLastName(""); // empty string signifies broadest possible search
		}

		// find owners by last name
		Page<Owner> ownersResults = findPaginatedForOwnersLastName(page, owner.getLastName());
		if (ownersResults.isEmpty()) {
			// no owners found
			result.rejectValue("lastName", "notFound", "not found");
			return "owners/findOwners";
		}

		if (ownersResults.getTotalElements() == 1) {
			// 1 owner found
			owner = ownersResults.iterator().next();
			return "redirect:/owners/" + owner.getId();
		}

		// multiple owners found
		return addPaginationModel(page, model, ownersResults);
	}

	private String addPaginationModel(int page, Model model, Page<Owner> paginated) {
		List<Owner> listOwners = paginated.getContent();
		model.addAttribute("currentPage", page);
		model.addAttribute("totalPages", paginated.getTotalPages());
		model.addAttribute("totalItems", paginated.getTotalElements());
		model.addAttribute("listOwners", listOwners);
		return "owners/ownersList";
	}

	private Page<Owner> findPaginatedForOwnersLastName(int page, String lastname) {
		int pageSize = 5;
		Pageable pageable = PageRequest.of(page - 1, pageSize);
		return owners.findByLastName(lastname, pageable);
	}

	@GetMapping("/owners/{ownerId}/edit")
	public String initUpdateOwnerForm(@PathVariable("ownerId") int ownerId, Model model) {
		Owner owner = this.owners.findById(ownerId);
		model.addAttribute(owner);
		return VIEWS_OWNER_CREATE_OR_UPDATE_FORM;
	}

	@PostMapping("/owners/{ownerId}/edit")
	public String processUpdateOwnerForm(@Valid Owner owner, BindingResult result,
			@PathVariable("ownerId") int ownerId) {
		if (result.hasErrors()) {
			return VIEWS_OWNER_CREATE_OR_UPDATE_FORM;
		}

		owner.setId(ownerId);
		this.owners.save(owner);
		return "redirect:/owners/{ownerId}";
	}

	/**
	 * Custom handler for displaying an owner.
	 * @param ownerId the ID of the owner to display
	 * @return a ModelMap with the model attributes for the view
	 */
	@GetMapping("/owners/{ownerId}")
	public ModelAndView showOwner(@PathVariable("ownerId") int ownerId) {
		ModelAndView mav = new ModelAndView("owners/ownerDetails");
		Owner owner = this.owners.findById(ownerId);
		mav.addObject(owner);
		return mav;
	}

}

../spring-petclinic/src/main/java/org/springframework/samples/petclinic/owner/OwnerRepository.java
/*
 * Copyright 2012-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.springframework.samples.petclinic.owner;

import java.util.List;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.Repository;
import org.springframework.data.repository.query.Param;
import org.springframework.transaction.annotation.Transactional;

/**
 * Repository class for <code>Owner</code> domain objects All method names are compliant
 * with Spring Data naming conventions so this interface can easily be extended for Spring
 * Data. See:
 * https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#repositories.query-methods.query-creation
 *
 * @author Ken Krebs
 * @author Juergen Hoeller
 * @author Sam Brannen
 * @author Michael Isvy
 */
public interface OwnerRepository extends Repository<Owner, Integer> {

	/**
	 * Retrieve all {@link PetType}s from the data store.
	 * @return a Collection of {@link PetType}s.
	 */
	@Query("SELECT ptype FROM PetType ptype ORDER BY ptype.name")
	@Transactional(readOnly = true)
	List<PetType> findPetTypes();

	/**
	 * Retrieve {@link Owner}s from the data store by last name, returning all owners
	 * whose last name <i>starts</i> with the given name.
	 * @param lastName Value to search for
	 * @return a Collection of matching {@link Owner}s (or an empty Collection if none
	 * found)
	 */

	@Query("SELECT DISTINCT owner FROM Owner owner left join  owner.pets WHERE owner.lastName LIKE :lastName% ")
	@Transactional(readOnly = true)
	Page<Owner> findByLastName(@Param("lastName") String lastName, Pageable pageable);

	/**
	 * Retrieve an {@link Owner} from the data store by id.
	 * @param id the id to search for
	 * @return the {@link Owner} if found
	 */
	@Query("SELECT owner FROM Owner owner left join fetch owner.pets WHERE owner.id =:id")
	@Transactional(readOnly = true)
	Owner findById(@Param("id") Integer id);

	/**
	 * Save an {@link Owner} to the data store, either inserting or updating it.
	 * @param owner the {@link Owner} to save
	 */
	void save(Owner owner);

	/**
	 * Returns all the owners from data store
	 **/
	@Query("SELECT owner FROM Owner owner")
	@Transactional(readOnly = true)
	Page<Owner> findAll(Pageable pageable);

}

../spring-petclinic/src/main/java/org/springframework/samples/petclinic/owner/Pet.java
/*
 * Copyright 2012-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.springframework.samples.petclinic.owner;

import java.time.LocalDate;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.Set;

import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.samples.petclinic.model.NamedEntity;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.OneToMany;
import jakarta.persistence.OrderBy;
import jakarta.persistence.Table;

/**
 * Simple business object representing a pet.
 *
 * @author Ken Krebs
 * @author Juergen Hoeller
 * @author Sam Brannen
 */
@Entity
@Table(name = "pets")
public class Pet extends NamedEntity {

	@Column(name = "birth_date")
	@DateTimeFormat(pattern = "yyyy-MM-dd")
	private LocalDate birthDate;

	@ManyToOne
	@JoinColumn(name = "type_id")
	private PetType type;

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER)
	@JoinColumn(name = "pet_id")
	@OrderBy("visit_date ASC")
	private Set<Visit> visits = new LinkedHashSet<>();

	public void setBirthDate(LocalDate birthDate) {
		this.birthDate = birthDate;
	}

	public LocalDate getBirthDate() {
		return this.birthDate;
	}

	public PetType getType() {
		return this.type;
	}

	public void setType(PetType type) {
		this.type = type;
	}

	public Collection<Visit> getVisits() {
		return this.visits;
	}

	public void addVisit(Visit visit) {
		getVisits().add(visit);
	}

}

../spring-petclinic/src/main/java/org/springframework/samples/petclinic/owner/PetController.java
/*
 * Copyright 2012-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.springframework.samples.petclinic.owner;

import java.time.LocalDate;
import java.util.Collection;

import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.util.StringUtils;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;

import jakarta.validation.Valid;

/**
 * @author Juergen Hoeller
 * @author Ken Krebs
 * @author Arjen Poutsma
 */
@Controller
@RequestMapping("/owners/{ownerId}")
class PetController {

	private static final String VIEWS_PETS_CREATE_OR_UPDATE_FORM = "pets/createOrUpdatePetForm";

	private final OwnerRepository owners;

	public PetController(OwnerRepository owners) {
		this.owners = owners;
	}

	@ModelAttribute("types")
	public Collection<PetType> populatePetTypes() {
		return this.owners.findPetTypes();
	}

	@ModelAttribute("owner")
	public Owner findOwner(@PathVariable("ownerId") int ownerId) {

		Owner owner = this.owners.findById(ownerId);
		if (owner == null) {
			throw new IllegalArgumentException("Owner ID not found: " + ownerId);
		}
		return owner;
	}

	@ModelAttribute("pet")
	public Pet findPet(@PathVariable("ownerId") int ownerId,
			@PathVariable(name = "petId", required = false) Integer petId) {

		Owner owner = this.owners.findById(ownerId);
		if (owner == null) {
			throw new IllegalArgumentException("Owner ID not found: " + ownerId);
		}
		return petId == null ? new Pet() : owner.getPet(petId);
	}

	@InitBinder("owner")
	public void initOwnerBinder(WebDataBinder dataBinder) {
		dataBinder.setDisallowedFields("id");
	}

	@InitBinder("pet")
	public void initPetBinder(WebDataBinder dataBinder) {
		dataBinder.setValidator(new PetValidator());
	}

	@GetMapping("/pets/new")
	public String initCreationForm(Owner owner, ModelMap model) {
		Pet pet = new Pet();
		owner.addPet(pet);
		model.put("pet", pet);
		return VIEWS_PETS_CREATE_OR_UPDATE_FORM;
	}

	@PostMapping("/pets/new")
	public String processCreationForm(Owner owner, @Valid Pet pet, BindingResult result, ModelMap model) {
		if (StringUtils.hasText(pet.getName()) && pet.isNew() && owner.getPet(pet.getName(), true) != null) {
			result.rejectValue("name", "duplicate", "already exists");
		}

		LocalDate currentDate = LocalDate.now();
		if (pet.getBirthDate() != null && pet.getBirthDate().isAfter(currentDate)) {
			result.rejectValue("birthDate", "typeMismatch.birthDate");
		}

		owner.addPet(pet);
		if (result.hasErrors()) {
			model.put("pet", pet);
			return VIEWS_PETS_CREATE_OR_UPDATE_FORM;
		}

		this.owners.save(owner);
		return "redirect:/owners/{ownerId}";
	}

	@GetMapping("/pets/{petId}/edit")
	public String initUpdateForm(Owner owner, @PathVariable("petId") int petId, ModelMap model) {
		Pet pet = owner.getPet(petId);
		model.put("pet", pet);
		return VIEWS_PETS_CREATE_OR_UPDATE_FORM;
	}

	@PostMapping("/pets/{petId}/edit")
	public String processUpdateForm(@Valid Pet pet, BindingResult result, Owner owner, ModelMap model) {

		String petName = pet.getName();

		// checking if the pet name already exist for the owner
		if (StringUtils.hasText(petName)) {
			Pet existingPet = owner.getPet(petName.toLowerCase(), false);
			if (existingPet != null && existingPet.getId() != pet.getId()) {
				result.rejectValue("name", "duplicate", "already exists");
			}
		}

		LocalDate currentDate = LocalDate.now();
		if (pet.getBirthDate() != null && pet.getBirthDate().isAfter(currentDate)) {
			result.rejectValue("birthDate", "typeMismatch.birthDate");
		}

		if (result.hasErrors()) {
			model.put("pet", pet);
			return VIEWS_PETS_CREATE_OR_UPDATE_FORM;
		}

		owner.addPet(pet);
		this.owners.save(owner);
		return "redirect:/owners/{ownerId}";
	}

}

../spring-petclinic/src/main/java/org/springframework/samples/petclinic/owner/PetType.java
/*
 * Copyright 2012-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.springframework.samples.petclinic.owner;

import org.springframework.samples.petclinic.model.NamedEntity;

import jakarta.persistence.Entity;
import jakarta.persistence.Table;

/**
 * @author Juergen Hoeller Can be Cat, Dog, Hamster...
 */
@Entity
@Table(name = "types")
public class PetType extends NamedEntity {

}

../spring-petclinic/src/main/java/org/springframework/samples/petclinic/owner/PetTypeFormatter.java
/*
 * Copyright 2012-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.springframework.samples.petclinic.owner;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.Formatter;
import org.springframework.stereotype.Component;

import java.text.ParseException;
import java.util.Collection;
import java.util.Locale;

/**
 * Instructs Spring MVC on how to parse and print elements of type 'PetType'. Starting
 * from Spring 3.0, Formatters have come as an improvement in comparison to legacy
 * PropertyEditors. See the following links for more details: - The Spring ref doc:
 * https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#format
 *
 * @author Mark Fisher
 * @author Juergen Hoeller
 * @author Michael Isvy
 */
@Component
public class PetTypeFormatter implements Formatter<PetType> {

	private final OwnerRepository owners;

	@Autowired
	public PetTypeFormatter(OwnerRepository owners) {
		this.owners = owners;
	}

	@Override
	public String print(PetType petType, Locale locale) {
		return petType.getName();
	}

	@Override
	public PetType parse(String text, Locale locale) throws ParseException {
		Collection<PetType> findPetTypes = this.owners.findPetTypes();
		for (PetType type : findPetTypes) {
			if (type.getName().equals(text)) {
				return type;
			}
		}
		throw new ParseException("type not found: " + text, 0);
	}

}

../spring-petclinic/src/main/java/org/springframework/samples/petclinic/owner/PetValidator.java
/*
 * Copyright 2012-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.springframework.samples.petclinic.owner;

import org.springframework.util.StringUtils;
import org.springframework.validation.Errors;
import org.springframework.validation.Validator;

/**
 * <code>Validator</code> for <code>Pet</code> forms.
 * <p>
 * We're not using Bean Validation annotations here because it is easier to define such
 * validation rule in Java.
 * </p>
 *
 * @author Ken Krebs
 * @author Juergen Hoeller
 */
public class PetValidator implements Validator {

	private static final String REQUIRED = "required";

	@Override
	public void validate(Object obj, Errors errors) {
		Pet pet = (Pet) obj;
		String name = pet.getName();
		// name validation
		if (!StringUtils.hasText(name)) {
			errors.rejectValue("name", REQUIRED, REQUIRED);
		}

		// type validation
		if (pet.isNew() && pet.getType() == null) {
			errors.rejectValue("type", REQUIRED, REQUIRED);
		}

		// birth date validation
		if (pet.getBirthDate() == null) {
			errors.rejectValue("birthDate", REQUIRED, REQUIRED);
		}
	}

	/**
	 * This Validator validates *just* Pet instances
	 */
	@Override
	public boolean supports(Class<?> clazz) {
		return Pet.class.isAssignableFrom(clazz);
	}

}

../spring-petclinic/src/main/java/org/springframework/samples/petclinic/owner/Visit.java
/*
 * Copyright 2012-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.springframework.samples.petclinic.owner;

import java.time.LocalDate;

import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.samples.petclinic.model.BaseEntity;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotBlank;

/**
 * Simple JavaBean domain object representing a visit.
 *
 * @author Ken Krebs
 * @author Dave Syer
 */
@Entity
@Table(name = "visits")
public class Visit extends BaseEntity {

	@Column(name = "visit_date")
	@DateTimeFormat(pattern = "yyyy-MM-dd")
	private LocalDate date;

	@NotBlank
	private String description;

	/**
	 * Creates a new instance of Visit for the current date
	 */
	public Visit() {
		this.date = LocalDate.now();
	}

	public LocalDate getDate() {
		return this.date;
	}

	public void setDate(LocalDate date) {
		this.date = date;
	}

	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

}

../spring-petclinic/src/main/java/org/springframework/samples/petclinic/owner/VisitController.java
/*
 * Copyright 2012-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.springframework.samples.petclinic.owner;

import java.util.Map;

import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;

import jakarta.validation.Valid;

/**
 * @author Juergen Hoeller
 * @author Ken Krebs
 * @author Arjen Poutsma
 * @author Michael Isvy
 * @author Dave Syer
 */
@Controller
class VisitController {

	private final OwnerRepository owners;

	public VisitController(OwnerRepository owners) {
		this.owners = owners;
	}

	@InitBinder
	public void setAllowedFields(WebDataBinder dataBinder) {
		dataBinder.setDisallowedFields("id");
	}

	/**
	 * Called before each and every @RequestMapping annotated method. 2 goals: - Make sure
	 * we always have fresh data - Since we do not use the session scope, make sure that
	 * Pet object always has an id (Even though id is not part of the form fields)
	 * @param petId
	 * @return Pet
	 */
	@ModelAttribute("visit")
	public Visit loadPetWithVisit(@PathVariable("ownerId") int ownerId, @PathVariable("petId") int petId,
			Map<String, Object> model) {
		Owner owner = this.owners.findById(ownerId);

		Pet pet = owner.getPet(petId);
		model.put("pet", pet);
		model.put("owner", owner);

		Visit visit = new Visit();
		pet.addVisit(visit);
		return visit;
	}

	// Spring MVC calls method loadPetWithVisit(...) before initNewVisitForm is
	// called
	@GetMapping("/owners/{ownerId}/pets/{petId}/visits/new")
	public String initNewVisitForm() {
		return "pets/createOrUpdateVisitForm";
	}

	// Spring MVC calls method loadPetWithVisit(...) before processNewVisitForm is
	// called
	@PostMapping("/owners/{ownerId}/pets/{petId}/visits/new")
	public String processNewVisitForm(@ModelAttribute Owner owner, @PathVariable int petId, @Valid Visit visit,
			BindingResult result) {
		if (result.hasErrors()) {
			return "pets/createOrUpdateVisitForm";
		}

		owner.addVisit(petId, visit);
		this.owners.save(owner);
		return "redirect:/owners/{ownerId}";
	}

}

../spring-petclinic/src/main/java/org/springframework/samples/petclinic/system/CacheConfiguration.java
/*
 * Copyright 2012-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.springframework.samples.petclinic.system;

import org.springframework.boot.autoconfigure.cache.JCacheManagerCustomizer;
import org.springframework.cache.annotation.EnableCaching;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import javax.cache.configuration.MutableConfiguration;

/**
 * Cache configuration intended for caches providing the JCache API. This configuration
 * creates the used cache for the application and enables statistics that become
 * accessible via JMX.
 */
@Configuration(proxyBeanMethods = false)
@EnableCaching
class CacheConfiguration {

	@Bean
	public JCacheManagerCustomizer petclinicCacheConfigurationCustomizer() {
		return cm -> cm.createCache("vets", cacheConfiguration());
	}

	/**
	 * Create a simple configuration that enable statistics via the JCache programmatic
	 * configuration API.
	 * <p>
	 * Within the configuration object that is provided by the JCache API standard, there
	 * is only a very limited set of configuration options. The really relevant
	 * configuration options (like the size limit) must be set via a configuration
	 * mechanism that is provided by the selected JCache implementation.
	 */
	private javax.cache.configuration.Configuration<Object, Object> cacheConfiguration() {
		return new MutableConfiguration<>().setStatisticsEnabled(true);
	}

}

../spring-petclinic/src/main/java/org/springframework/samples/petclinic/system/CrashController.java
/*
 * Copyright 2012-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.springframework.samples.petclinic.system;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;

/**
 * Controller used to showcase what happens when an exception is thrown
 *
 * @author Michael Isvy
 * <p/>
 * Also see how a view that resolves to "error" has been added ("error.html").
 */
@Controller
class CrashController {

	@GetMapping("/oups")
	public String triggerException() {
		throw new RuntimeException(
				"Expected: controller used to showcase what " + "happens when an exception is thrown");
	}

}

../spring-petclinic/src/main/java/org/springframework/samples/petclinic/system/WelcomeController.java
/*
 * Copyright 2012-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.springframework.samples.petclinic.system;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;

@Controller
class WelcomeController {

	@GetMapping("/")
	public String welcome() {
		return "welcome";
	}

}

../spring-petclinic/src/main/java/org/springframework/samples/petclinic/vet/Specialty.java
/*
 * Copyright 2012-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.springframework.samples.petclinic.vet;

import org.springframework.samples.petclinic.model.NamedEntity;

import jakarta.persistence.Entity;
import jakarta.persistence.Table;

/**
 * Models a {@link Vet Vet's} specialty (for example, dentistry).
 *
 * @author Juergen Hoeller
 */
@Entity
@Table(name = "specialties")
public class Specialty extends NamedEntity {

}

../spring-petclinic/src/main/java/org/springframework/samples/petclinic/vet/Vet.java
/*
 * Copyright 2012-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.springframework.samples.petclinic.vet;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.springframework.beans.support.MutableSortDefinition;
import org.springframework.beans.support.PropertyComparator;
import org.springframework.samples.petclinic.model.Person;

import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.JoinTable;
import jakarta.persistence.ManyToMany;
import jakarta.persistence.Table;
import jakarta.xml.bind.annotation.XmlElement;

/**
 * Simple JavaBean domain object representing a veterinarian.
 *
 * @author Ken Krebs
 * @author Juergen Hoeller
 * @author Sam Brannen
 * @author Arjen Poutsma
 */
@Entity
@Table(name = "vets")
public class Vet extends Person {

	@ManyToMany(fetch = FetchType.EAGER)
	@JoinTable(name = "vet_specialties", joinColumns = @JoinColumn(name = "vet_id"),
			inverseJoinColumns = @JoinColumn(name = "specialty_id"))
	private Set<Specialty> specialties;

	protected Set<Specialty> getSpecialtiesInternal() {
		if (this.specialties == null) {
			this.specialties = new HashSet<>();
		}
		return this.specialties;
	}

	protected void setSpecialtiesInternal(Set<Specialty> specialties) {
		this.specialties = specialties;
	}

	@XmlElement
	public List<Specialty> getSpecialties() {
		List<Specialty> sortedSpecs = new ArrayList<>(getSpecialtiesInternal());
		PropertyComparator.sort(sortedSpecs, new MutableSortDefinition("name", true, true));
		return Collections.unmodifiableList(sortedSpecs);
	}

	public int getNrOfSpecialties() {
		return getSpecialtiesInternal().size();
	}

	public void addSpecialty(Specialty specialty) {
		getSpecialtiesInternal().add(specialty);
	}

}

../spring-petclinic/src/main/java/org/springframework/samples/petclinic/vet/VetController.java
/*
 * Copyright 2012-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.springframework.samples.petclinic.vet;

import java.util.List;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

/**
 * @author Juergen Hoeller
 * @author Mark Fisher
 * @author Ken Krebs
 * @author Arjen Poutsma
 */
@Controller
class VetController {

	private final VetRepository vetRepository;

	public VetController(VetRepository clinicService) {
		this.vetRepository = clinicService;
	}

	@GetMapping("/vets.html")
	public String showVetList(@RequestParam(defaultValue = "1") int page, Model model) {
		// Here we are returning an object of type 'Vets' rather than a collection of Vet
		// objects so it is simpler for Object-Xml mapping
		Vets vets = new Vets();
		Page<Vet> paginated = findPaginated(page);
		vets.getVetList().addAll(paginated.toList());
		return addPaginationModel(page, paginated, model);
	}

	private String addPaginationModel(int page, Page<Vet> paginated, Model model) {
		List<Vet> listVets = paginated.getContent();
		model.addAttribute("currentPage", page);
		model.addAttribute("totalPages", paginated.getTotalPages());
		model.addAttribute("totalItems", paginated.getTotalElements());
		model.addAttribute("listVets", listVets);
		return "vets/vetList";
	}

	private Page<Vet> findPaginated(int page) {
		int pageSize = 5;
		Pageable pageable = PageRequest.of(page - 1, pageSize);
		return vetRepository.findAll(pageable);
	}

	@GetMapping({ "/vets" })
	public @ResponseBody Vets showResourcesVetList() {
		// Here we are returning an object of type 'Vets' rather than a collection of Vet
		// objects so it is simpler for JSon/Object mapping
		Vets vets = new Vets();
		vets.getVetList().addAll(this.vetRepository.findAll());
		return vets;
	}

}

../spring-petclinic/src/main/java/org/springframework/samples/petclinic/vet/VetRepository.java
/*
 * Copyright 2012-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.springframework.samples.petclinic.vet;

import org.springframework.cache.annotation.Cacheable;
import org.springframework.dao.DataAccessException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.repository.Repository;
import org.springframework.transaction.annotation.Transactional;

import java.util.Collection;

/**
 * Repository class for <code>Vet</code> domain objects All method names are compliant
 * with Spring Data naming conventions so this interface can easily be extended for Spring
 * Data. See:
 * https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#repositories.query-methods.query-creation
 *
 * @author Ken Krebs
 * @author Juergen Hoeller
 * @author Sam Brannen
 * @author Michael Isvy
 */
public interface VetRepository extends Repository<Vet, Integer> {

	/**
	 * Retrieve all <code>Vet</code>s from the data store.
	 * @return a <code>Collection</code> of <code>Vet</code>s
	 */
	@Transactional(readOnly = true)
	@Cacheable("vets")
	Collection<Vet> findAll() throws DataAccessException;

	/**
	 * Retrieve all <code>Vet</code>s from data store in Pages
	 * @param pageable
	 * @return
	 * @throws DataAccessException
	 */
	@Transactional(readOnly = true)
	@Cacheable("vets")
	Page<Vet> findAll(Pageable pageable) throws DataAccessException;

}

../spring-petclinic/src/main/java/org/springframework/samples/petclinic/vet/Vets.java
/*
 * Copyright 2012-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.springframework.samples.petclinic.vet;

import java.util.ArrayList;
import java.util.List;

import jakarta.xml.bind.annotation.XmlElement;
import jakarta.xml.bind.annotation.XmlRootElement;

/**
 * Simple domain object representing a list of veterinarians. Mostly here to be used for
 * the 'vets' {@link org.springframework.web.servlet.view.xml.MarshallingView}.
 *
 * @author Arjen Poutsma
 */
@XmlRootElement
public class Vets {

	private List<Vet> vets;

	@XmlElement
	public List<Vet> getVetList() {
		if (vets == null) {
			vets = new ArrayList<>();
		}
		return vets;
	}

}

../spring-petclinic/src/test/java/org/springframework/samples/petclinic/MySqlIntegrationTests.java
/*
 * Copyright 2012-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.springframework.samples.petclinic;

import static org.assertj.core.api.Assertions.assertThat;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.condition.DisabledInNativeImage;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
import org.springframework.boot.test.web.server.LocalServerPort;
import org.springframework.boot.testcontainers.service.connection.ServiceConnection;
import org.springframework.boot.web.client.RestTemplateBuilder;
import org.springframework.http.HttpStatus;
import org.springframework.http.RequestEntity;
import org.springframework.http.ResponseEntity;
import org.springframework.samples.petclinic.vet.VetRepository;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.aot.DisabledInAotMode;
import org.springframework.web.client.RestTemplate;
import org.testcontainers.containers.MySQLContainer;
import org.testcontainers.junit.jupiter.Container;
import org.testcontainers.junit.jupiter.Testcontainers;

@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)
@ActiveProfiles("mysql")
@Testcontainers(disabledWithoutDocker = true)
@DisabledInNativeImage
@DisabledInAotMode
class MySqlIntegrationTests {

	@ServiceConnection
	@Container
	static MySQLContainer<?> container = new MySQLContainer<>("mysql:8.2");

	@LocalServerPort
	int port;

	@Autowired
	private VetRepository vets;

	@Autowired
	private RestTemplateBuilder builder;

	@Test
	void testFindAll() throws Exception {
		vets.findAll();
		vets.findAll(); // served from cache
	}

	@Test
	void testOwnerDetails() {
		RestTemplate template = builder.rootUri("http://localhost:" + port).build();
		ResponseEntity<String> result = template.exchange(RequestEntity.get("/owners/1").build(), String.class);
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
	}

}

../spring-petclinic/src/test/java/org/springframework/samples/petclinic/MysqlTestApplication.java
/*
 * Copyright 2012-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.springframework.samples.petclinic;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.testcontainers.service.connection.ServiceConnection;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Profile;
import org.testcontainers.containers.MySQLContainer;

/**
 * PetClinic Spring Boot Application.
 *
 * @author Dave Syer
 *
 */
@Configuration
public class MysqlTestApplication {

	@ServiceConnection
	@Profile("mysql")
	@Bean
	static MySQLContainer<?> container() {
		return new MySQLContainer<>("mysql:8.2");
	}

	public static void main(String[] args) {
		SpringApplication.run(PetClinicApplication.class, "--spring.profiles.active=mysql");
	}

}

../spring-petclinic/src/test/java/org/springframework/samples/petclinic/PetClinicIntegrationTests.java
/*
 * Copyright 2012-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.springframework.samples.petclinic;

import static org.assertj.core.api.Assertions.assertThat;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
import org.springframework.boot.test.web.server.LocalServerPort;
import org.springframework.boot.web.client.RestTemplateBuilder;
import org.springframework.http.HttpStatus;
import org.springframework.http.RequestEntity;
import org.springframework.http.ResponseEntity;
import org.springframework.samples.petclinic.vet.VetRepository;
import org.springframework.web.client.RestTemplate;

@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)
public class PetClinicIntegrationTests {

	@LocalServerPort
	int port;

	@Autowired
	private VetRepository vets;

	@Autowired
	private RestTemplateBuilder builder;

	@Test
	void testFindAll() throws Exception {
		vets.findAll();
		vets.findAll(); // served from cache
	}

	@Test
	void testOwnerDetails() {
		RestTemplate template = builder.rootUri("http://localhost:" + port).build();
		ResponseEntity<String> result = template.exchange(RequestEntity.get("/owners/1").build(), String.class);
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
	}

	public static void main(String[] args) {
		SpringApplication.run(PetClinicApplication.class, args);
	}

}

../spring-petclinic/src/test/java/org/springframework/samples/petclinic/PostgresIntegrationTests.java
/*
 * Copyright 2012-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.springframework.samples.petclinic;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assumptions.assumeTrue;

import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.condition.DisabledInNativeImage;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.builder.SpringApplicationBuilder;
import org.springframework.boot.context.event.ApplicationPreparedEvent;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
import org.springframework.boot.test.web.server.LocalServerPort;
import org.springframework.boot.web.client.RestTemplateBuilder;
import org.springframework.context.ApplicationListener;
import org.springframework.core.env.ConfigurableEnvironment;
import org.springframework.core.env.EnumerablePropertySource;
import org.springframework.core.env.PropertySource;
import org.springframework.http.HttpStatus;
import org.springframework.http.RequestEntity;
import org.springframework.http.ResponseEntity;
import org.springframework.samples.petclinic.vet.VetRepository;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.web.client.RestTemplate;
import org.testcontainers.DockerClientFactory;

@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT, properties = { "spring.docker.compose.skip.in-tests=false", //
		"spring.docker.compose.profiles.active=postgres" })
@ActiveProfiles("postgres")
@DisabledInNativeImage
public class PostgresIntegrationTests {

	@LocalServerPort
	int port;

	@Autowired
	private VetRepository vets;

	@Autowired
	private RestTemplateBuilder builder;

	@BeforeAll
	static void available() {
		assumeTrue(DockerClientFactory.instance().isDockerAvailable(), "Docker not available");
	}

	public static void main(String[] args) {
		new SpringApplicationBuilder(PetClinicApplication.class) //
			.profiles("postgres") //
			.properties( //
					"spring.docker.compose.profiles.active=postgres" //
			) //
			.listeners(new PropertiesLogger()) //
			.run(args);
	}

	@Test
	void testFindAll() throws Exception {
		vets.findAll();
		vets.findAll(); // served from cache
	}

	@Test
	void testOwnerDetails() {
		RestTemplate template = builder.rootUri("http://localhost:" + port).build();
		ResponseEntity<String> result = template.exchange(RequestEntity.get("/owners/1").build(), String.class);
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
	}

	static class PropertiesLogger implements ApplicationListener<ApplicationPreparedEvent> {

		private static final Log log = LogFactory.getLog(PropertiesLogger.class);

		private ConfigurableEnvironment environment;

		private boolean isFirstRun = true;

		@Override
		public void onApplicationEvent(ApplicationPreparedEvent event) {
			if (isFirstRun) {
				environment = event.getApplicationContext().getEnvironment();
				printProperties();
			}
			isFirstRun = false;
		}

		public void printProperties() {
			for (EnumerablePropertySource<?> source : findPropertiesPropertySources()) {
				log.info("PropertySource: " + source.getName());
				String[] names = source.getPropertyNames();
				Arrays.sort(names);
				for (String name : names) {
					String resolved = environment.getProperty(name);
					String value = source.getProperty(name).toString();
					if (resolved.equals(value)) {
						log.info(name + "=" + resolved);
					}
					else {
						log.info(name + "=" + value + " OVERRIDDEN to " + resolved);
					}
				}
			}
		}

		private List<EnumerablePropertySource<?>> findPropertiesPropertySources() {
			List<EnumerablePropertySource<?>> sources = new LinkedList<>();
			for (PropertySource<?> source : environment.getPropertySources()) {
				if (source instanceof EnumerablePropertySource enumerable) {
					sources.add(enumerable);
				}
			}
			return sources;
		}

	}

}

../spring-petclinic/src/test/java/org/springframework/samples/petclinic/model/ValidatorTests.java
/*
 * Copyright 2012-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.springframework.samples.petclinic.model;

import static org.assertj.core.api.Assertions.assertThat;

import java.util.Locale;
import java.util.Set;

import org.junit.jupiter.api.Test;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.validation.beanvalidation.LocalValidatorFactoryBean;

import jakarta.validation.ConstraintViolation;
import jakarta.validation.Validator;

/**
 * @author Michael Isvy Simple test to make sure that Bean Validation is working (useful
 * when upgrading to a new version of Hibernate Validator/ Bean Validation)
 */
class ValidatorTests {

	private Validator createValidator() {
		LocalValidatorFactoryBean localValidatorFactoryBean = new LocalValidatorFactoryBean();
		localValidatorFactoryBean.afterPropertiesSet();
		return localValidatorFactoryBean;
	}

	@Test
	void shouldNotValidateWhenFirstNameEmpty() {

		LocaleContextHolder.setLocale(Locale.ENGLISH);
		Person person = new Person();
		person.setFirstName("");
		person.setLastName("smith");

		Validator validator = createValidator();
		Set<ConstraintViolation<Person>> constraintViolations = validator.validate(person);

		assertThat(constraintViolations).hasSize(1);
		ConstraintViolation<Person> violation = constraintViolations.iterator().next();
		assertThat(violation.getPropertyPath().toString()).isEqualTo("firstName");
		assertThat(violation.getMessage()).isEqualTo("must not be blank");
	}

}

../spring-petclinic/src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java
/*
 * Copyright 2012-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.springframework.samples.petclinic.owner;

import static org.hamcrest.Matchers.empty;
import static org.hamcrest.Matchers.hasProperty;
import static org.hamcrest.Matchers.is;
import static org.hamcrest.Matchers.not;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.BDDMockito.given;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.model;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.view;

import java.time.LocalDate;
import java.util.List;

import org.assertj.core.util.Lists;
import org.hamcrest.BaseMatcher;
import org.hamcrest.Description;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.condition.DisabledInNativeImage;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.springframework.test.context.aot.DisabledInAotMode;
import org.springframework.test.web.servlet.MockMvc;

/**
 * Test class for {@link OwnerController}
 *
 * @author Colin But
 */
@WebMvcTest(OwnerController.class)
@DisabledInNativeImage
@DisabledInAotMode
class OwnerControllerTests {

	private static final int TEST_OWNER_ID = 1;

	@Autowired
	private MockMvc mockMvc;

	@MockBean
	private OwnerRepository owners;

	private Owner george() {
		Owner george = new Owner();
		george.setId(TEST_OWNER_ID);
		george.setFirstName("George");
		george.setLastName("Franklin");
		george.setAddress("110 W. Liberty St.");
		george.setCity("Madison");
		george.setTelephone("6085551023");
		Pet max = new Pet();
		PetType dog = new PetType();
		dog.setName("dog");
		max.setType(dog);
		max.setName("Max");
		max.setBirthDate(LocalDate.now());
		george.addPet(max);
		max.setId(1);
		return george;
	};

	@BeforeEach
	void setup() {

		Owner george = george();
		given(this.owners.findByLastName(eq("Franklin"), any(Pageable.class)))
			.willReturn(new PageImpl<Owner>(Lists.newArrayList(george)));

		given(this.owners.findAll(any(Pageable.class))).willReturn(new PageImpl<Owner>(Lists.newArrayList(george)));

		given(this.owners.findById(TEST_OWNER_ID)).willReturn(george);
		Visit visit = new Visit();
		visit.setDate(LocalDate.now());
		george.getPet("Max").getVisits().add(visit);

	}

	@Test
	void testInitCreationForm() throws Exception {
		mockMvc.perform(get("/owners/new"))
			.andExpect(status().isOk())
			.andExpect(model().attributeExists("owner"))
			.andExpect(view().name("owners/createOrUpdateOwnerForm"));
	}

	@Test
	void testProcessCreationFormSuccess() throws Exception {
		mockMvc
			.perform(post("/owners/new").param("firstName", "Joe")
				.param("lastName", "Bloggs")
				.param("address", "123 Caramel Street")
				.param("city", "London")
				.param("telephone", "01316761638"))
			.andExpect(status().is3xxRedirection());
	}

	@Test
	void testProcessCreationFormHasErrors() throws Exception {
		mockMvc
			.perform(post("/owners/new").param("firstName", "Joe").param("lastName", "Bloggs").param("city", "London"))
			.andExpect(status().isOk())
			.andExpect(model().attributeHasErrors("owner"))
			.andExpect(model().attributeHasFieldErrors("owner", "address"))
			.andExpect(model().attributeHasFieldErrors("owner", "telephone"))
			.andExpect(view().name("owners/createOrUpdateOwnerForm"));
	}

	@Test
	void testInitFindForm() throws Exception {
		mockMvc.perform(get("/owners/find"))
			.andExpect(status().isOk())
			.andExpect(model().attributeExists("owner"))
			.andExpect(view().name("owners/findOwners"));
	}

	@Test
	void testProcessFindFormSuccess() throws Exception {
		Page<Owner> tasks = new PageImpl<Owner>(Lists.newArrayList(george(), new Owner()));
		Mockito.when(this.owners.findByLastName(anyString(), any(Pageable.class))).thenReturn(tasks);
		mockMvc.perform(get("/owners?page=1")).andExpect(status().isOk()).andExpect(view().name("owners/ownersList"));
	}

	@Test
	void testProcessFindFormByLastName() throws Exception {
		Page<Owner> tasks = new PageImpl<Owner>(Lists.newArrayList(george()));
		Mockito.when(this.owners.findByLastName(eq("Franklin"), any(Pageable.class))).thenReturn(tasks);
		mockMvc.perform(get("/owners?page=1").param("lastName", "Franklin"))
			.andExpect(status().is3xxRedirection())
			.andExpect(view().name("redirect:/owners/" + TEST_OWNER_ID));
	}

	@Test
	void testProcessFindFormNoOwnersFound() throws Exception {
		Page<Owner> tasks = new PageImpl<Owner>(Lists.newArrayList());
		Mockito.when(this.owners.findByLastName(eq("Unknown Surname"), any(Pageable.class))).thenReturn(tasks);
		mockMvc.perform(get("/owners?page=1").param("lastName", "Unknown Surname"))
			.andExpect(status().isOk())
			.andExpect(model().attributeHasFieldErrors("owner", "lastName"))
			.andExpect(model().attributeHasFieldErrorCode("owner", "lastName", "notFound"))
			.andExpect(view().name("owners/findOwners"));

	}

	@Test
	void testInitUpdateOwnerForm() throws Exception {
		mockMvc.perform(get("/owners/{ownerId}/edit", TEST_OWNER_ID))
			.andExpect(status().isOk())
			.andExpect(model().attributeExists("owner"))
			.andExpect(model().attribute("owner", hasProperty("lastName", is("Franklin"))))
			.andExpect(model().attribute("owner", hasProperty("firstName", is("George"))))
			.andExpect(model().attribute("owner", hasProperty("address", is("110 W. Liberty St."))))
			.andExpect(model().attribute("owner", hasProperty("city", is("Madison"))))
			.andExpect(model().attribute("owner", hasProperty("telephone", is("6085551023"))))
			.andExpect(view().name("owners/createOrUpdateOwnerForm"));
	}

	@Test
	void testProcessUpdateOwnerFormSuccess() throws Exception {
		mockMvc
			.perform(post("/owners/{ownerId}/edit", TEST_OWNER_ID).param("firstName", "Joe")
				.param("lastName", "Bloggs")
				.param("address", "123 Caramel Street")
				.param("city", "London")
				.param("telephone", "01616291589"))
			.andExpect(status().is3xxRedirection())
			.andExpect(view().name("redirect:/owners/{ownerId}"));
	}

	@Test
	void testProcessUpdateOwnerFormUnchangedSuccess() throws Exception {
		mockMvc.perform(post("/owners/{ownerId}/edit", TEST_OWNER_ID))
			.andExpect(status().is3xxRedirection())
			.andExpect(view().name("redirect:/owners/{ownerId}"));
	}

	@Test
	void testProcessUpdateOwnerFormHasErrors() throws Exception {
		mockMvc
			.perform(post("/owners/{ownerId}/edit", TEST_OWNER_ID).param("firstName", "Joe")
				.param("lastName", "Bloggs")
				.param("address", "")
				.param("telephone", ""))
			.andExpect(status().isOk())
			.andExpect(model().attributeHasErrors("owner"))
			.andExpect(model().attributeHasFieldErrors("owner", "address"))
			.andExpect(model().attributeHasFieldErrors("owner", "telephone"))
			.andExpect(view().name("owners/createOrUpdateOwnerForm"));
	}

	@Test
	void testShowOwner() throws Exception {
		mockMvc.perform(get("/owners/{ownerId}", TEST_OWNER_ID))
			.andExpect(status().isOk())
			.andExpect(model().attribute("owner", hasProperty("lastName", is("Franklin"))))
			.andExpect(model().attribute("owner", hasProperty("firstName", is("George"))))
			.andExpect(model().attribute("owner", hasProperty("address", is("110 W. Liberty St."))))
			.andExpect(model().attribute("owner", hasProperty("city", is("Madison"))))
			.andExpect(model().attribute("owner", hasProperty("telephone", is("6085551023"))))
			.andExpect(model().attribute("owner", hasProperty("pets", not(empty()))))
			.andExpect(model().attribute("owner", hasProperty("pets", new BaseMatcher<List<Pet>>() {

				@Override
				public boolean matches(Object item) {
					@SuppressWarnings("unchecked")
					List<Pet> pets = (List<Pet>) item;
					Pet pet = pets.get(0);
					if (pet.getVisits().isEmpty()) {
						return false;
					}
					return true;
				}

				@Override
				public void describeTo(Description description) {
					description.appendText("Max did not have any visits");
				}
			})))
			.andExpect(view().name("owners/ownerDetails"));
	}

}

../spring-petclinic/src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java
/*
 * Copyright 2012-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.springframework.samples.petclinic.owner;

import org.assertj.core.util.Lists;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.condition.DisabledInNativeImage;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.FilterType;
import org.springframework.test.context.aot.DisabledInAotMode;
import org.springframework.test.web.servlet.MockMvc;

import static org.mockito.BDDMockito.given;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.model;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.view;

/**
 * Test class for the {@link PetController}
 *
 * @author Colin But
 */
@WebMvcTest(value = PetController.class,
		includeFilters = @ComponentScan.Filter(value = PetTypeFormatter.class, type = FilterType.ASSIGNABLE_TYPE))
@DisabledInNativeImage
@DisabledInAotMode
class PetControllerTests {

	private static final int TEST_OWNER_ID = 1;

	private static final int TEST_PET_ID = 1;

	@Autowired
	private MockMvc mockMvc;

	@MockBean
	private OwnerRepository owners;

	@BeforeEach
	void setup() {
		PetType cat = new PetType();
		cat.setId(3);
		cat.setName("hamster");
		given(this.owners.findPetTypes()).willReturn(Lists.newArrayList(cat));
		Owner owner = new Owner();
		Pet pet = new Pet();
		owner.addPet(pet);
		pet.setId(TEST_PET_ID);
		given(this.owners.findById(TEST_OWNER_ID)).willReturn(owner);
	}

	@Test
	void testInitCreationForm() throws Exception {
		mockMvc.perform(get("/owners/{ownerId}/pets/new", TEST_OWNER_ID))
			.andExpect(status().isOk())
			.andExpect(view().name("pets/createOrUpdatePetForm"))
			.andExpect(model().attributeExists("pet"));
	}

	@Test
	void testProcessCreationFormSuccess() throws Exception {
		mockMvc
			.perform(post("/owners/{ownerId}/pets/new", TEST_OWNER_ID).param("name", "Betty")
				.param("type", "hamster")
				.param("birthDate", "2015-02-12"))
			.andExpect(status().is3xxRedirection())
			.andExpect(view().name("redirect:/owners/{ownerId}"));
	}

	@Test
	void testProcessCreationFormHasErrors() throws Exception {
		mockMvc
			.perform(post("/owners/{ownerId}/pets/new", TEST_OWNER_ID).param("name", "Betty")
				.param("birthDate", "2015-02-12"))
			.andExpect(model().attributeHasNoErrors("owner"))
			.andExpect(model().attributeHasErrors("pet"))
			.andExpect(model().attributeHasFieldErrors("pet", "type"))
			.andExpect(model().attributeHasFieldErrorCode("pet", "type", "required"))
			.andExpect(status().isOk())
			.andExpect(view().name("pets/createOrUpdatePetForm"));
	}

	@Test
	void testInitUpdateForm() throws Exception {
		mockMvc.perform(get("/owners/{ownerId}/pets/{petId}/edit", TEST_OWNER_ID, TEST_PET_ID))
			.andExpect(status().isOk())
			.andExpect(model().attributeExists("pet"))
			.andExpect(view().name("pets/createOrUpdatePetForm"));
	}

	@Test
	void testProcessUpdateFormSuccess() throws Exception {
		mockMvc
			.perform(post("/owners/{ownerId}/pets/{petId}/edit", TEST_OWNER_ID, TEST_PET_ID).param("name", "Betty")
				.param("type", "hamster")
				.param("birthDate", "2015-02-12"))
			.andExpect(status().is3xxRedirection())
			.andExpect(view().name("redirect:/owners/{ownerId}"));
	}

	@Test
	void testProcessUpdateFormHasErrors() throws Exception {
		mockMvc
			.perform(post("/owners/{ownerId}/pets/{petId}/edit", TEST_OWNER_ID, TEST_PET_ID).param("name", "Betty")
				.param("birthDate", "2015/02/12"))
			.andExpect(model().attributeHasNoErrors("owner"))
			.andExpect(model().attributeHasErrors("pet"))
			.andExpect(status().isOk())
			.andExpect(view().name("pets/createOrUpdatePetForm"));
	}

}

../spring-petclinic/src/test/java/org/springframework/samples/petclinic/owner/PetTypeFormatterTests.java
/*
 * Copyright 2012-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.springframework.samples.petclinic.owner;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.BDDMockito.given;

import java.text.ParseException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Locale;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.condition.DisabledInNativeImage;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

/**
 * Test class for {@link PetTypeFormatter}
 *
 * @author Colin But
 */
@ExtendWith(MockitoExtension.class)
@DisabledInNativeImage
class PetTypeFormatterTests {

	@Mock
	private OwnerRepository pets;

	private PetTypeFormatter petTypeFormatter;

	@BeforeEach
	void setup() {
		this.petTypeFormatter = new PetTypeFormatter(pets);
	}

	@Test
	void testPrint() {
		PetType petType = new PetType();
		petType.setName("Hamster");
		String petTypeName = this.petTypeFormatter.print(petType, Locale.ENGLISH);
		assertThat(petTypeName).isEqualTo("Hamster");
	}

	@Test
	void shouldParse() throws ParseException {
		given(this.pets.findPetTypes()).willReturn(makePetTypes());
		PetType petType = petTypeFormatter.parse("Bird", Locale.ENGLISH);
		assertThat(petType.getName()).isEqualTo("Bird");
	}

	@Test
	void shouldThrowParseException() throws ParseException {
		given(this.pets.findPetTypes()).willReturn(makePetTypes());
		Assertions.assertThrows(ParseException.class, () -> {
			petTypeFormatter.parse("Fish", Locale.ENGLISH);
		});
	}

	/**
	 * Helper method to produce some sample pet types just for test purpose
	 * @return {@link Collection} of {@link PetType}
	 */
	private List<PetType> makePetTypes() {
		List<PetType> petTypes = new ArrayList<>();
		petTypes.add(new PetType() {
			{
				setName("Dog");
			}
		});
		petTypes.add(new PetType() {
			{
				setName("Bird");
			}
		});
		return petTypes;
	}

}

../spring-petclinic/src/test/java/org/springframework/samples/petclinic/owner/VisitControllerTests.java
/*
 * Copyright 2012-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.springframework.samples.petclinic.owner;

import static org.mockito.BDDMockito.given;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.model;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.view;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.condition.DisabledInNativeImage;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.aot.DisabledInAotMode;
import org.springframework.test.web.servlet.MockMvc;

/**
 * Test class for {@link VisitController}
 *
 * @author Colin But
 */
@WebMvcTest(VisitController.class)
@DisabledInNativeImage
@DisabledInAotMode
class VisitControllerTests {

	private static final int TEST_OWNER_ID = 1;

	private static final int TEST_PET_ID = 1;

	@Autowired
	private MockMvc mockMvc;

	@MockBean
	private OwnerRepository owners;

	@BeforeEach
	void init() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		owner.addPet(pet);
		pet.setId(TEST_PET_ID);
		given(this.owners.findById(TEST_OWNER_ID)).willReturn(owner);
	}

	@Test
	void testInitNewVisitForm() throws Exception {
		mockMvc.perform(get("/owners/{ownerId}/pets/{petId}/visits/new", TEST_OWNER_ID, TEST_PET_ID))
			.andExpect(status().isOk())
			.andExpect(view().name("pets/createOrUpdateVisitForm"));
	}

	@Test
	void testProcessNewVisitFormSuccess() throws Exception {
		mockMvc
			.perform(post("/owners/{ownerId}/pets/{petId}/visits/new", TEST_OWNER_ID, TEST_PET_ID)
				.param("name", "George")
				.param("description", "Visit Description"))
			.andExpect(status().is3xxRedirection())
			.andExpect(view().name("redirect:/owners/{ownerId}"));
	}

	@Test
	void testProcessNewVisitFormHasErrors() throws Exception {
		mockMvc
			.perform(post("/owners/{ownerId}/pets/{petId}/visits/new", TEST_OWNER_ID, TEST_PET_ID).param("name",
					"George"))
			.andExpect(model().attributeHasErrors("visit"))
			.andExpect(status().isOk())
			.andExpect(view().name("pets/createOrUpdateVisitForm"));
	}

}

../spring-petclinic/src/test/java/org/springframework/samples/petclinic/service/ClinicServiceTests.java
/*
 * Copyright 2012-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.springframework.samples.petclinic.service;

import static org.assertj.core.api.Assertions.assertThat;

import java.time.LocalDate;
import java.util.Collection;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase.Replace;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.samples.petclinic.owner.Owner;
import org.springframework.samples.petclinic.owner.OwnerRepository;
import org.springframework.samples.petclinic.owner.Pet;
import org.springframework.samples.petclinic.owner.PetType;
import org.springframework.samples.petclinic.owner.Visit;
import org.springframework.samples.petclinic.vet.Vet;
import org.springframework.samples.petclinic.vet.VetRepository;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/**
 * Integration test of the Service and the Repository layer.
 * <p>
 * ClinicServiceSpringDataJpaTests subclasses benefit from the following services provided
 * by the Spring TestContext Framework:
 * </p>
 * <ul>
 * <li><strong>Spring IoC container caching</strong> which spares us unnecessary set up
 * time between test execution.</li>
 * <li><strong>Dependency Injection</strong> of test fixture instances, meaning that we
 * don't need to perform application context lookups. See the use of
 * {@link Autowired @Autowired} on the <code> </code> instance variable, which uses
 * autowiring <em>by type</em>.
 * <li><strong>Transaction management</strong>, meaning each test method is executed in
 * its own transaction, which is automatically rolled back by default. Thus, even if tests
 * insert or otherwise change database state, there is no need for a teardown or cleanup
 * script.
 * <li>An {@link org.springframework.context.ApplicationContext ApplicationContext} is
 * also inherited and can be used for explicit bean lookup if necessary.</li>
 * </ul>
 *
 * @author Ken Krebs
 * @author Rod Johnson
 * @author Juergen Hoeller
 * @author Sam Brannen
 * @author Michael Isvy
 * @author Dave Syer
 */
@DataJpaTest(includeFilters = @ComponentScan.Filter(Service.class))
// Ensure that if the mysql profile is active we connect to the real database:
@AutoConfigureTestDatabase(replace = Replace.NONE)
// @TestPropertySource("/application-postgres.properties")
class ClinicServiceTests {

	@Autowired
	protected OwnerRepository owners;

	@Autowired
	protected VetRepository vets;

	Pageable pageable;

	@Test
	void shouldFindOwnersByLastName() {
		Page<Owner> owners = this.owners.findByLastName("Davis", pageable);
		assertThat(owners).hasSize(2);

		owners = this.owners.findByLastName("Daviss", pageable);
		assertThat(owners).isEmpty();
	}

	@Test
	void shouldFindSingleOwnerWithPet() {
		Owner owner = this.owners.findById(1);
		assertThat(owner.getLastName()).startsWith("Franklin");
		assertThat(owner.getPets()).hasSize(1);
		assertThat(owner.getPets().get(0).getType()).isNotNull();
		assertThat(owner.getPets().get(0).getType().getName()).isEqualTo("cat");
	}

	@Test
	@Transactional
	void shouldInsertOwner() {
		Page<Owner> owners = this.owners.findByLastName("Schultz", pageable);
		int found = (int) owners.getTotalElements();

		Owner owner = new Owner();
		owner.setFirstName("Sam");
		owner.setLastName("Schultz");
		owner.setAddress("4, Evans Street");
		owner.setCity("Wollongong");
		owner.setTelephone("4444444444");
		this.owners.save(owner);
		assertThat(owner.getId().longValue()).isNotEqualTo(0);

		owners = this.owners.findByLastName("Schultz", pageable);
		assertThat(owners.getTotalElements()).isEqualTo(found + 1);
	}

	@Test
	@Transactional
	void shouldUpdateOwner() {
		Owner owner = this.owners.findById(1);
		String oldLastName = owner.getLastName();
		String newLastName = oldLastName + "X";

		owner.setLastName(newLastName);
		this.owners.save(owner);

		// retrieving new name from database
		owner = this.owners.findById(1);
		assertThat(owner.getLastName()).isEqualTo(newLastName);
	}

	@Test
	void shouldFindAllPetTypes() {
		Collection<PetType> petTypes = this.owners.findPetTypes();

		PetType petType1 = EntityUtils.getById(petTypes, PetType.class, 1);
		assertThat(petType1.getName()).isEqualTo("cat");
		PetType petType4 = EntityUtils.getById(petTypes, PetType.class, 4);
		assertThat(petType4.getName()).isEqualTo("snake");
	}

	@Test
	@Transactional
	void shouldInsertPetIntoDatabaseAndGenerateId() {
		Owner owner6 = this.owners.findById(6);
		int found = owner6.getPets().size();

		Pet pet = new Pet();
		pet.setName("bowser");
		Collection<PetType> types = this.owners.findPetTypes();
		pet.setType(EntityUtils.getById(types, PetType.class, 2));
		pet.setBirthDate(LocalDate.now());
		owner6.addPet(pet);
		assertThat(owner6.getPets().size()).isEqualTo(found + 1);

		this.owners.save(owner6);

		owner6 = this.owners.findById(6);
		assertThat(owner6.getPets().size()).isEqualTo(found + 1);
		// checks that id has been generated
		pet = owner6.getPet("bowser");
		assertThat(pet.getId()).isNotNull();
	}

	@Test
	@Transactional
	void shouldUpdatePetName() throws Exception {
		Owner owner6 = this.owners.findById(6);
		Pet pet7 = owner6.getPet(7);
		String oldName = pet7.getName();

		String newName = oldName + "X";
		pet7.setName(newName);
		this.owners.save(owner6);

		owner6 = this.owners.findById(6);
		pet7 = owner6.getPet(7);
		assertThat(pet7.getName()).isEqualTo(newName);
	}

	@Test
	void shouldFindVets() {
		Collection<Vet> vets = this.vets.findAll();

		Vet vet = EntityUtils.getById(vets, Vet.class, 3);
		assertThat(vet.getLastName()).isEqualTo("Douglas");
		assertThat(vet.getNrOfSpecialties()).isEqualTo(2);
		assertThat(vet.getSpecialties().get(0).getName()).isEqualTo("dentistry");
		assertThat(vet.getSpecialties().get(1).getName()).isEqualTo("surgery");
	}

	@Test
	@Transactional
	void shouldAddNewVisitForPet() {
		Owner owner6 = this.owners.findById(6);
		Pet pet7 = owner6.getPet(7);
		int found = pet7.getVisits().size();
		Visit visit = new Visit();
		visit.setDescription("test");

		owner6.addVisit(pet7.getId(), visit);
		this.owners.save(owner6);

		owner6 = this.owners.findById(6);

		assertThat(pet7.getVisits()) //
			.hasSize(found + 1) //
			.allMatch(value -> value.getId() != null);
	}

	@Test
	void shouldFindVisitsByPetId() throws Exception {
		Owner owner6 = this.owners.findById(6);
		Pet pet7 = owner6.getPet(7);
		Collection<Visit> visits = pet7.getVisits();

		assertThat(visits) //
			.hasSize(2) //
			.element(0)
			.extracting(Visit::getDate)
			.isNotNull();
	}

}

../spring-petclinic/src/test/java/org/springframework/samples/petclinic/service/EntityUtils.java
/*
 * Copyright 2012-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.springframework.samples.petclinic.service;

import org.springframework.orm.ObjectRetrievalFailureException;
import org.springframework.samples.petclinic.model.BaseEntity;

import java.util.Collection;

/**
 * Utility methods for handling entities. Separate from the BaseEntity class mainly
 * because of dependency on the ORM-associated ObjectRetrievalFailureException.
 *
 * @author Juergen Hoeller
 * @author Sam Brannen
 * @see org.springframework.samples.petclinic.model.BaseEntity
 * @since 29.10.2003
 */
public abstract class EntityUtils {

	/**
	 * Look up the entity of the given class with the given id in the given collection.
	 * @param entities the collection to search
	 * @param entityClass the entity class to look up
	 * @param entityId the entity id to look up
	 * @return the found entity
	 * @throws ObjectRetrievalFailureException if the entity was not found
	 */
	public static <T extends BaseEntity> T getById(Collection<T> entities, Class<T> entityClass, int entityId)
			throws ObjectRetrievalFailureException {
		for (T entity : entities) {
			if (entity.getId() == entityId && entityClass.isInstance(entity)) {
				return entity;
			}
		}
		throw new ObjectRetrievalFailureException(entityClass, entityId);
	}

}

../spring-petclinic/src/test/java/org/springframework/samples/petclinic/system/CrashControllerIntegrationTests.java
/*
 * Copyright 2012-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.springframework.samples.petclinic.system;

import static org.assertj.core.api.Assertions.assertThat;
import static org.springframework.boot.test.context.SpringBootTest.WebEnvironment.RANDOM_PORT;

import java.util.List;
import java.util.Map;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;
import org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration;
import org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.RequestEntity;
import org.springframework.http.ResponseEntity;

/**
 * Integration Test for {@link CrashController}.
 *
 * @author Alex Lutz
 */
// NOT Waiting https://github.com/spring-projects/spring-boot/issues/5574
@SpringBootTest(webEnvironment = RANDOM_PORT,
		properties = { "server.error.include-message=ALWAYS", "management.endpoints.enabled-by-default=false" })
class CrashControllerIntegrationTests {

	@SpringBootApplication(exclude = { DataSourceAutoConfiguration.class,
			DataSourceTransactionManagerAutoConfiguration.class, HibernateJpaAutoConfiguration.class })
	static class TestConfiguration {

	}

	@Value(value = "${local.server.port}")
	private int port;

	@Autowired
	private TestRestTemplate rest;

	@Test
	void testTriggerExceptionJson() {
		ResponseEntity<Map<String, Object>> resp = rest.exchange(
				RequestEntity.get("http://localhost:" + port + "/oups").build(),
				new ParameterizedTypeReference<Map<String, Object>>() {
				});
		assertThat(resp).isNotNull();
		assertThat(resp.getStatusCode().is5xxServerError());
		assertThat(resp.getBody().containsKey("timestamp"));
		assertThat(resp.getBody().containsKey("status"));
		assertThat(resp.getBody().containsKey("error"));
		assertThat(resp.getBody()).containsEntry("message",
				"Expected: controller used to showcase what happens when an exception is thrown");
		assertThat(resp.getBody()).containsEntry("path", "/oups");
	}

	@Test
	void testTriggerExceptionHtml() {
		HttpHeaders headers = new HttpHeaders();
		headers.setAccept(List.of(MediaType.TEXT_HTML));
		ResponseEntity<String> resp = rest.exchange("http://localhost:" + port + "/oups", HttpMethod.GET,
				new HttpEntity<>(headers), String.class);
		assertThat(resp).isNotNull();
		assertThat(resp.getStatusCode().is5xxServerError());
		assertThat(resp.getBody()).isNotNull();
		// html:
		assertThat(resp.getBody()).containsSubsequence("<body>", "<h2>", "Something happened...", "</h2>", "<p>",
				"Expected:", "controller", "used", "to", "showcase", "what", "happens", "when", "an", "exception", "is",
				"thrown", "</p>", "</body>");
		// Not the whitelabel error page:
		assertThat(resp.getBody()).doesNotContain("Whitelabel Error Page",
				"This application has no explicit mapping for");
	}

}

../spring-petclinic/src/test/java/org/springframework/samples/petclinic/system/CrashControllerTests.java
/*
 * Copyright 2012-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.springframework.samples.petclinic.system;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

import org.junit.jupiter.api.Test;

/**
 * Test class for {@link CrashController}
 *
 * @author Colin But
 * @author Alex Lutz
 */
// Waiting https://github.com/spring-projects/spring-boot/issues/5574 ..good
// luck ((plain(st) UNIT test)! :)
class CrashControllerTests {

	CrashController testee = new CrashController();

	@Test
	void testTriggerException() throws Exception {
		RuntimeException thrown = assertThrows(RuntimeException.class, () -> {
			testee.triggerException();
		});

		assertEquals("Expected: controller used to showcase what happens when an exception is thrown",
				thrown.getMessage());
	}

}

../spring-petclinic/src/test/java/org/springframework/samples/petclinic/vet/VetControllerTests.java
/*
 * Copyright 2012-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.springframework.samples.petclinic.vet;

import org.assertj.core.util.Lists;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.condition.DisabledInNativeImage;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.springframework.http.MediaType;
import org.springframework.test.context.aot.DisabledInAotMode;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.ResultActions;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.BDDMockito.given;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

/**
 * Test class for the {@link VetController}
 */

@WebMvcTest(VetController.class)
@DisabledInNativeImage
@DisabledInAotMode
class VetControllerTests {

	@Autowired
	private MockMvc mockMvc;

	@MockBean
	private VetRepository vets;

	private Vet james() {
		Vet james = new Vet();
		james.setFirstName("James");
		james.setLastName("Carter");
		james.setId(1);
		return james;
	}

	private Vet helen() {
		Vet helen = new Vet();
		helen.setFirstName("Helen");
		helen.setLastName("Leary");
		helen.setId(2);
		Specialty radiology = new Specialty();
		radiology.setId(1);
		radiology.setName("radiology");
		helen.addSpecialty(radiology);
		return helen;
	}

	@BeforeEach
	void setup() {
		given(this.vets.findAll()).willReturn(Lists.newArrayList(james(), helen()));
		given(this.vets.findAll(any(Pageable.class)))
			.willReturn(new PageImpl<Vet>(Lists.newArrayList(james(), helen())));

	}

	@Test
	void testShowVetListHtml() throws Exception {

		mockMvc.perform(MockMvcRequestBuilders.get("/vets.html?page=1"))
			.andExpect(status().isOk())
			.andExpect(model().attributeExists("listVets"))
			.andExpect(view().name("vets/vetList"));

	}

	@Test
	void testShowResourcesVetList() throws Exception {
		ResultActions actions = mockMvc.perform(get("/vets").accept(MediaType.APPLICATION_JSON))
			.andExpect(status().isOk());
		actions.andExpect(content().contentType(MediaType.APPLICATION_JSON))
			.andExpect(jsonPath("$.vetList[0].id").value(1));
	}

}

../spring-petclinic/src/test/java/org/springframework/samples/petclinic/vet/VetTests.java
/*
 * Copyright 2012-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.springframework.samples.petclinic.vet;

import org.junit.jupiter.api.Test;
import org.springframework.util.SerializationUtils;

import static org.assertj.core.api.Assertions.assertThat;

/**
 * @author Dave Syer
 */
class VetTests {

	@Test
	void testSerialization() {
		Vet vet = new Vet();
		vet.setFirstName("Zaphod");
		vet.setLastName("Beeblebrox");
		vet.setId(123);
		@SuppressWarnings("deprecation")
		Vet other = (Vet) SerializationUtils.deserialize(SerializationUtils.serialize(vet));
		assertThat(other.getFirstName()).isEqualTo(vet.getFirstName());
		assertThat(other.getLastName()).isEqualTo(vet.getLastName());
		assertThat(other.getId()).isEqualTo(vet.getId());
	}

}

../spring-petclinic/build/generated/aotSources/org/springframework/aop/aspectj/annotation/AnnotationAwareAspectJAutoProxyCreator__BeanDefinitions.java
package org.springframework.aop.aspectj.annotation;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link AnnotationAwareAspectJAutoProxyCreator}.
 */
public class AnnotationAwareAspectJAutoProxyCreator__BeanDefinitions {
  /**
   * Get the bean definition for 'internalAutoProxyCreator'.
   */
  public static BeanDefinition getInternalAutoProxyCreatorBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(AnnotationAwareAspectJAutoProxyCreator.class);
    beanDefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
    beanDefinition.getPropertyValues().addPropertyValue("order", -2147483648);
    beanDefinition.getPropertyValues().addPropertyValue("proxyTargetClass", true);
    beanDefinition.setInstanceSupplier(AnnotationAwareAspectJAutoProxyCreator::new);
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/audit/AuditEventsEndpointAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.actuate.autoconfigure.audit;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link AuditEventsEndpointAutoConfiguration}.
 */
public class AuditEventsEndpointAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'auditEventsEndpointAutoConfiguration'.
   */
  public static BeanDefinition getAuditEventsEndpointAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(AuditEventsEndpointAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(AuditEventsEndpointAutoConfiguration::new);
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/availability/AvailabilityHealthContributorAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.actuate.autoconfigure.availability;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link AvailabilityHealthContributorAutoConfiguration}.
 */
public class AvailabilityHealthContributorAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'availabilityHealthContributorAutoConfiguration'.
   */
  public static BeanDefinition getAvailabilityHealthContributorAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(AvailabilityHealthContributorAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(AvailabilityHealthContributorAutoConfiguration::new);
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/beans/BeansEndpointAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.actuate.autoconfigure.beans;

import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.boot.actuate.beans.BeansEndpoint;
import org.springframework.context.ConfigurableApplicationContext;

/**
 * Bean definitions for {@link BeansEndpointAutoConfiguration}.
 */
public class BeansEndpointAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'beansEndpointAutoConfiguration'.
   */
  public static BeanDefinition getBeansEndpointAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(BeansEndpointAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(BeansEndpointAutoConfiguration::new);
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'beansEndpoint'.
   */
  private static BeanInstanceSupplier<BeansEndpoint> getBeansEndpointInstanceSupplier() {
    return BeanInstanceSupplier.<BeansEndpoint>forFactoryMethod(BeansEndpointAutoConfiguration.class, "beansEndpoint", ConfigurableApplicationContext.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(BeansEndpointAutoConfiguration.class).beansEndpoint(args.get(0)));
  }

  /**
   * Get the bean definition for 'beansEndpoint'.
   */
  public static BeanDefinition getBeansEndpointBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(BeansEndpoint.class);
    beanDefinition.setInstanceSupplier(getBeansEndpointInstanceSupplier());
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/cache/CachesEndpointAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.actuate.autoconfigure.cache;

import java.util.Map;
import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.boot.actuate.cache.CachesEndpoint;
import org.springframework.boot.actuate.cache.CachesEndpointWebExtension;

/**
 * Bean definitions for {@link CachesEndpointAutoConfiguration}.
 */
public class CachesEndpointAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'cachesEndpointAutoConfiguration'.
   */
  public static BeanDefinition getCachesEndpointAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(CachesEndpointAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(CachesEndpointAutoConfiguration::new);
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'cachesEndpoint'.
   */
  private static BeanInstanceSupplier<CachesEndpoint> getCachesEndpointInstanceSupplier() {
    return BeanInstanceSupplier.<CachesEndpoint>forFactoryMethod(CachesEndpointAutoConfiguration.class, "cachesEndpoint", Map.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(CachesEndpointAutoConfiguration.class).cachesEndpoint(args.get(0)));
  }

  /**
   * Get the bean definition for 'cachesEndpoint'.
   */
  public static BeanDefinition getCachesEndpointBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(CachesEndpoint.class);
    beanDefinition.setInstanceSupplier(getCachesEndpointInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'cachesEndpointWebExtension'.
   */
  private static BeanInstanceSupplier<CachesEndpointWebExtension> getCachesEndpointWebExtensionInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<CachesEndpointWebExtension>forFactoryMethod(CachesEndpointAutoConfiguration.class, "cachesEndpointWebExtension", CachesEndpoint.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(CachesEndpointAutoConfiguration.class).cachesEndpointWebExtension(args.get(0)));
  }

  /**
   * Get the bean definition for 'cachesEndpointWebExtension'.
   */
  public static BeanDefinition getCachesEndpointWebExtensionBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(CachesEndpointWebExtension.class);
    beanDefinition.setInstanceSupplier(getCachesEndpointWebExtensionInstanceSupplier());
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/condition/ConditionsReportEndpointAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.actuate.autoconfigure.condition;

import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.context.ConfigurableApplicationContext;

/**
 * Bean definitions for {@link ConditionsReportEndpointAutoConfiguration}.
 */
public class ConditionsReportEndpointAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'conditionsReportEndpointAutoConfiguration'.
   */
  public static BeanDefinition getConditionsReportEndpointAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(ConditionsReportEndpointAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(ConditionsReportEndpointAutoConfiguration::new);
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'conditionsReportEndpoint'.
   */
  private static BeanInstanceSupplier<ConditionsReportEndpoint> getConditionsReportEndpointInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<ConditionsReportEndpoint>forFactoryMethod(ConditionsReportEndpointAutoConfiguration.class, "conditionsReportEndpoint", ConfigurableApplicationContext.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(ConditionsReportEndpointAutoConfiguration.class).conditionsReportEndpoint(args.get(0)));
  }

  /**
   * Get the bean definition for 'conditionsReportEndpoint'.
   */
  public static BeanDefinition getConditionsReportEndpointBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(ConditionsReportEndpoint.class);
    beanDefinition.setInstanceSupplier(getConditionsReportEndpointInstanceSupplier());
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/context/properties/ConfigurationPropertiesReportEndpointAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.actuate.autoconfigure.context.properties;

import org.springframework.beans.factory.ObjectProvider;
import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.boot.actuate.context.properties.ConfigurationPropertiesReportEndpoint;
import org.springframework.boot.actuate.context.properties.ConfigurationPropertiesReportEndpointWebExtension;

/**
 * Bean definitions for {@link ConfigurationPropertiesReportEndpointAutoConfiguration}.
 */
public class ConfigurationPropertiesReportEndpointAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'configurationPropertiesReportEndpointAutoConfiguration'.
   */
  public static BeanDefinition getConfigurationPropertiesReportEndpointAutoConfigurationBeanDefinition(
      ) {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(ConfigurationPropertiesReportEndpointAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(ConfigurationPropertiesReportEndpointAutoConfiguration::new);
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'configurationPropertiesReportEndpoint'.
   */
  private static BeanInstanceSupplier<ConfigurationPropertiesReportEndpoint> getConfigurationPropertiesReportEndpointInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<ConfigurationPropertiesReportEndpoint>forFactoryMethod(ConfigurationPropertiesReportEndpointAutoConfiguration.class, "configurationPropertiesReportEndpoint", ConfigurationPropertiesReportEndpointProperties.class, ObjectProvider.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(ConfigurationPropertiesReportEndpointAutoConfiguration.class).configurationPropertiesReportEndpoint(args.get(0), args.get(1)));
  }

  /**
   * Get the bean definition for 'configurationPropertiesReportEndpoint'.
   */
  public static BeanDefinition getConfigurationPropertiesReportEndpointBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(ConfigurationPropertiesReportEndpoint.class);
    beanDefinition.setInstanceSupplier(getConfigurationPropertiesReportEndpointInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'configurationPropertiesReportEndpointWebExtension'.
   */
  private static BeanInstanceSupplier<ConfigurationPropertiesReportEndpointWebExtension> getConfigurationPropertiesReportEndpointWebExtensionInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<ConfigurationPropertiesReportEndpointWebExtension>forFactoryMethod(ConfigurationPropertiesReportEndpointAutoConfiguration.class, "configurationPropertiesReportEndpointWebExtension", ConfigurationPropertiesReportEndpoint.class, ConfigurationPropertiesReportEndpointProperties.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(ConfigurationPropertiesReportEndpointAutoConfiguration.class).configurationPropertiesReportEndpointWebExtension(args.get(0), args.get(1)));
  }

  /**
   * Get the bean definition for 'configurationPropertiesReportEndpointWebExtension'.
   */
  public static BeanDefinition getConfigurationPropertiesReportEndpointWebExtensionBeanDefinition(
      ) {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(ConfigurationPropertiesReportEndpointWebExtension.class);
    beanDefinition.setInstanceSupplier(getConfigurationPropertiesReportEndpointWebExtensionInstanceSupplier());
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/context/properties/ConfigurationPropertiesReportEndpointProperties__BeanDefinitions.java
package org.springframework.boot.actuate.autoconfigure.context.properties;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link ConfigurationPropertiesReportEndpointProperties}.
 */
public class ConfigurationPropertiesReportEndpointProperties__BeanDefinitions {
  /**
   * Get the bean definition for 'configurationPropertiesReportEndpointProperties'.
   */
  public static BeanDefinition getConfigurationPropertiesReportEndpointPropertiesBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(ConfigurationPropertiesReportEndpointProperties.class);
    beanDefinition.setInstanceSupplier(ConfigurationPropertiesReportEndpointProperties::new);
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/endpoint/EndpointAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.actuate.autoconfigure.endpoint;

import org.springframework.beans.factory.ObjectProvider;
import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.boot.actuate.endpoint.invoke.ParameterValueMapper;
import org.springframework.boot.actuate.endpoint.invoker.cache.CachingOperationInvokerAdvisor;
import org.springframework.core.env.Environment;

/**
 * Bean definitions for {@link EndpointAutoConfiguration}.
 */
public class EndpointAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'endpointAutoConfiguration'.
   */
  public static BeanDefinition getEndpointAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(EndpointAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(EndpointAutoConfiguration::new);
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'endpointOperationParameterMapper'.
   */
  private static BeanInstanceSupplier<ParameterValueMapper> getEndpointOperationParameterMapperInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<ParameterValueMapper>forFactoryMethod(EndpointAutoConfiguration.class, "endpointOperationParameterMapper", ObjectProvider.class, ObjectProvider.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(EndpointAutoConfiguration.class).endpointOperationParameterMapper(args.get(0), args.get(1)));
  }

  /**
   * Get the bean definition for 'endpointOperationParameterMapper'.
   */
  public static BeanDefinition getEndpointOperationParameterMapperBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(ParameterValueMapper.class);
    beanDefinition.setInstanceSupplier(getEndpointOperationParameterMapperInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'endpointCachingOperationInvokerAdvisor'.
   */
  private static BeanInstanceSupplier<CachingOperationInvokerAdvisor> getEndpointCachingOperationInvokerAdvisorInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<CachingOperationInvokerAdvisor>forFactoryMethod(EndpointAutoConfiguration.class, "endpointCachingOperationInvokerAdvisor", Environment.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(EndpointAutoConfiguration.class).endpointCachingOperationInvokerAdvisor(args.get(0)));
  }

  /**
   * Get the bean definition for 'endpointCachingOperationInvokerAdvisor'.
   */
  public static BeanDefinition getEndpointCachingOperationInvokerAdvisorBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(CachingOperationInvokerAdvisor.class);
    beanDefinition.setInstanceSupplier(getEndpointCachingOperationInvokerAdvisorInstanceSupplier());
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/endpoint/jackson/JacksonEndpointAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.actuate.autoconfigure.endpoint.jackson;

import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.boot.actuate.endpoint.jackson.EndpointObjectMapper;

/**
 * Bean definitions for {@link JacksonEndpointAutoConfiguration}.
 */
public class JacksonEndpointAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'jacksonEndpointAutoConfiguration'.
   */
  public static BeanDefinition getJacksonEndpointAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(JacksonEndpointAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(JacksonEndpointAutoConfiguration::new);
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'endpointObjectMapper'.
   */
  private static BeanInstanceSupplier<EndpointObjectMapper> getEndpointObjectMapperInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<EndpointObjectMapper>forFactoryMethod(JacksonEndpointAutoConfiguration.class, "endpointObjectMapper")
            .withGenerator((registeredBean) -> registeredBean.getBeanFactory().getBean(JacksonEndpointAutoConfiguration.class).endpointObjectMapper());
  }

  /**
   * Get the bean definition for 'endpointObjectMapper'.
   */
  public static BeanDefinition getEndpointObjectMapperBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(EndpointObjectMapper.class);
    beanDefinition.setInstanceSupplier(getEndpointObjectMapperInstanceSupplier());
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/endpoint/web/CorsEndpointProperties__BeanDefinitions.java
package org.springframework.boot.actuate.autoconfigure.endpoint.web;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link CorsEndpointProperties}.
 */
public class CorsEndpointProperties__BeanDefinitions {
  /**
   * Get the bean definition for 'corsEndpointProperties'.
   */
  public static BeanDefinition getCorsEndpointPropertiesBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(CorsEndpointProperties.class);
    beanDefinition.setInstanceSupplier(CorsEndpointProperties::new);
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/endpoint/web/ServletEndpointManagementContextConfiguration__BeanDefinitions.java
package org.springframework.boot.actuate.autoconfigure.endpoint.web;

import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.boot.actuate.autoconfigure.endpoint.expose.IncludeExcludeEndpointFilter;
import org.springframework.boot.actuate.endpoint.web.ExposableServletEndpoint;
import org.springframework.boot.actuate.endpoint.web.ServletEndpointRegistrar;
import org.springframework.boot.actuate.endpoint.web.annotation.ServletEndpointsSupplier;
import org.springframework.boot.autoconfigure.web.servlet.DispatcherServletPath;
import org.springframework.core.ResolvableType;

/**
 * Bean definitions for {@link ServletEndpointManagementContextConfiguration}.
 */
public class ServletEndpointManagementContextConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'servletEndpointManagementContextConfiguration'.
   */
  public static BeanDefinition getServletEndpointManagementContextConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(ServletEndpointManagementContextConfiguration.class);
    beanDefinition.setInstanceSupplier(ServletEndpointManagementContextConfiguration::new);
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'servletExposeExcludePropertyEndpointFilter'.
   */
  private static BeanInstanceSupplier<IncludeExcludeEndpointFilter> getServletExposeExcludePropertyEndpointFilterInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<IncludeExcludeEndpointFilter>forFactoryMethod(ServletEndpointManagementContextConfiguration.class, "servletExposeExcludePropertyEndpointFilter", WebEndpointProperties.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(ServletEndpointManagementContextConfiguration.class).servletExposeExcludePropertyEndpointFilter(args.get(0)));
  }

  /**
   * Get the bean definition for 'servletExposeExcludePropertyEndpointFilter'.
   */
  public static BeanDefinition getServletExposeExcludePropertyEndpointFilterBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(IncludeExcludeEndpointFilter.class);
    beanDefinition.setTargetType(ResolvableType.forClassWithGenerics(IncludeExcludeEndpointFilter.class, ExposableServletEndpoint.class));
    beanDefinition.setInstanceSupplier(getServletExposeExcludePropertyEndpointFilterInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Bean definitions for {@link ServletEndpointManagementContextConfiguration.WebMvcServletEndpointManagementContextConfiguration}.
   */
  public static class WebMvcServletEndpointManagementContextConfiguration {
    /**
     * Get the bean definition for 'webMvcServletEndpointManagementContextConfiguration'.
     */
    public static BeanDefinition getWebMvcServletEndpointManagementContextConfigurationBeanDefinition(
        ) {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(ServletEndpointManagementContextConfiguration.WebMvcServletEndpointManagementContextConfiguration.class);
      beanDefinition.setInstanceSupplier(ServletEndpointManagementContextConfiguration.WebMvcServletEndpointManagementContextConfiguration::new);
      return beanDefinition;
    }

    /**
     * Get the bean instance supplier for 'servletEndpointRegistrar'.
     */
    private static BeanInstanceSupplier<ServletEndpointRegistrar> getServletEndpointRegistrarInstanceSupplier(
        ) {
      return BeanInstanceSupplier.<ServletEndpointRegistrar>forFactoryMethod(ServletEndpointManagementContextConfiguration.WebMvcServletEndpointManagementContextConfiguration.class, "servletEndpointRegistrar", WebEndpointProperties.class, ServletEndpointsSupplier.class, DispatcherServletPath.class)
              .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(ServletEndpointManagementContextConfiguration.WebMvcServletEndpointManagementContextConfiguration.class).servletEndpointRegistrar(args.get(0), args.get(1), args.get(2)));
    }

    /**
     * Get the bean definition for 'servletEndpointRegistrar'.
     */
    public static BeanDefinition getServletEndpointRegistrarBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(ServletEndpointRegistrar.class);
      beanDefinition.setInstanceSupplier(getServletEndpointRegistrarInstanceSupplier());
      return beanDefinition;
    }
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/endpoint/web/WebEndpointAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.actuate.autoconfigure.endpoint.web;

import java.util.Collection;
import org.springframework.beans.factory.ObjectProvider;
import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.boot.actuate.autoconfigure.endpoint.expose.IncludeExcludeEndpointFilter;
import org.springframework.boot.actuate.endpoint.invoke.ParameterValueMapper;
import org.springframework.boot.actuate.endpoint.web.EndpointMediaTypes;
import org.springframework.boot.actuate.endpoint.web.ExposableWebEndpoint;
import org.springframework.boot.actuate.endpoint.web.PathMappedEndpoints;
import org.springframework.boot.actuate.endpoint.web.PathMapper;
import org.springframework.boot.actuate.endpoint.web.annotation.ControllerEndpointDiscoverer;
import org.springframework.boot.actuate.endpoint.web.annotation.ExposableControllerEndpoint;
import org.springframework.boot.actuate.endpoint.web.annotation.ServletEndpointDiscoverer;
import org.springframework.boot.actuate.endpoint.web.annotation.WebEndpointDiscoverer;
import org.springframework.context.ApplicationContext;
import org.springframework.core.ResolvableType;

/**
 * Bean definitions for {@link WebEndpointAutoConfiguration}.
 */
public class WebEndpointAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean instance supplier for 'org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointAutoConfiguration'.
   */
  private static BeanInstanceSupplier<WebEndpointAutoConfiguration> getWebEndpointAutoConfigurationInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<WebEndpointAutoConfiguration>forConstructor(ApplicationContext.class, WebEndpointProperties.class)
            .withGenerator((registeredBean, args) -> new WebEndpointAutoConfiguration(args.get(0), args.get(1)));
  }

  /**
   * Get the bean definition for 'webEndpointAutoConfiguration'.
   */
  public static BeanDefinition getWebEndpointAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(WebEndpointAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(getWebEndpointAutoConfigurationInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'webEndpointPathMapper'.
   */
  private static BeanInstanceSupplier<PathMapper> getWebEndpointPathMapperInstanceSupplier() {
    return BeanInstanceSupplier.<PathMapper>forFactoryMethod(WebEndpointAutoConfiguration.class, "webEndpointPathMapper")
            .withGenerator((registeredBean) -> registeredBean.getBeanFactory().getBean(WebEndpointAutoConfiguration.class).webEndpointPathMapper());
  }

  /**
   * Get the bean definition for 'webEndpointPathMapper'.
   */
  public static BeanDefinition getWebEndpointPathMapperBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(PathMapper.class);
    beanDefinition.setInstanceSupplier(getWebEndpointPathMapperInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'endpointMediaTypes'.
   */
  private static BeanInstanceSupplier<EndpointMediaTypes> getEndpointMediaTypesInstanceSupplier() {
    return BeanInstanceSupplier.<EndpointMediaTypes>forFactoryMethod(WebEndpointAutoConfiguration.class, "endpointMediaTypes")
            .withGenerator((registeredBean) -> registeredBean.getBeanFactory().getBean(WebEndpointAutoConfiguration.class).endpointMediaTypes());
  }

  /**
   * Get the bean definition for 'endpointMediaTypes'.
   */
  public static BeanDefinition getEndpointMediaTypesBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(EndpointMediaTypes.class);
    beanDefinition.setInstanceSupplier(getEndpointMediaTypesInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'webEndpointDiscoverer'.
   */
  private static BeanInstanceSupplier<WebEndpointDiscoverer> getWebEndpointDiscovererInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<WebEndpointDiscoverer>forFactoryMethod(WebEndpointAutoConfiguration.class, "webEndpointDiscoverer", ParameterValueMapper.class, EndpointMediaTypes.class, ObjectProvider.class, ObjectProvider.class, ObjectProvider.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(WebEndpointAutoConfiguration.class).webEndpointDiscoverer(args.get(0), args.get(1), args.get(2), args.get(3), args.get(4)));
  }

  /**
   * Get the bean definition for 'webEndpointDiscoverer'.
   */
  public static BeanDefinition getWebEndpointDiscovererBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(WebEndpointDiscoverer.class);
    beanDefinition.setInstanceSupplier(getWebEndpointDiscovererInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'controllerEndpointDiscoverer'.
   */
  private static BeanInstanceSupplier<ControllerEndpointDiscoverer> getControllerEndpointDiscovererInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<ControllerEndpointDiscoverer>forFactoryMethod(WebEndpointAutoConfiguration.class, "controllerEndpointDiscoverer", ObjectProvider.class, ObjectProvider.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(WebEndpointAutoConfiguration.class).controllerEndpointDiscoverer(args.get(0), args.get(1)));
  }

  /**
   * Get the bean definition for 'controllerEndpointDiscoverer'.
   */
  public static BeanDefinition getControllerEndpointDiscovererBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(ControllerEndpointDiscoverer.class);
    beanDefinition.setInstanceSupplier(getControllerEndpointDiscovererInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'pathMappedEndpoints'.
   */
  private static BeanInstanceSupplier<PathMappedEndpoints> getPathMappedEndpointsInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<PathMappedEndpoints>forFactoryMethod(WebEndpointAutoConfiguration.class, "pathMappedEndpoints", Collection.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(WebEndpointAutoConfiguration.class).pathMappedEndpoints(args.get(0)));
  }

  /**
   * Get the bean definition for 'pathMappedEndpoints'.
   */
  public static BeanDefinition getPathMappedEndpointsBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(PathMappedEndpoints.class);
    beanDefinition.setInstanceSupplier(getPathMappedEndpointsInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'webExposeExcludePropertyEndpointFilter'.
   */
  private static BeanInstanceSupplier<IncludeExcludeEndpointFilter> getWebExposeExcludePropertyEndpointFilterInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<IncludeExcludeEndpointFilter>forFactoryMethod(WebEndpointAutoConfiguration.class, "webExposeExcludePropertyEndpointFilter")
            .withGenerator((registeredBean) -> registeredBean.getBeanFactory().getBean(WebEndpointAutoConfiguration.class).webExposeExcludePropertyEndpointFilter());
  }

  /**
   * Get the bean definition for 'webExposeExcludePropertyEndpointFilter'.
   */
  public static BeanDefinition getWebExposeExcludePropertyEndpointFilterBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(IncludeExcludeEndpointFilter.class);
    beanDefinition.setTargetType(ResolvableType.forClassWithGenerics(IncludeExcludeEndpointFilter.class, ExposableWebEndpoint.class));
    beanDefinition.setInstanceSupplier(getWebExposeExcludePropertyEndpointFilterInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'controllerExposeExcludePropertyEndpointFilter'.
   */
  private static BeanInstanceSupplier<IncludeExcludeEndpointFilter> getControllerExposeExcludePropertyEndpointFilterInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<IncludeExcludeEndpointFilter>forFactoryMethod(WebEndpointAutoConfiguration.class, "controllerExposeExcludePropertyEndpointFilter")
            .withGenerator((registeredBean) -> registeredBean.getBeanFactory().getBean(WebEndpointAutoConfiguration.class).controllerExposeExcludePropertyEndpointFilter());
  }

  /**
   * Get the bean definition for 'controllerExposeExcludePropertyEndpointFilter'.
   */
  public static BeanDefinition getControllerExposeExcludePropertyEndpointFilterBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(IncludeExcludeEndpointFilter.class);
    beanDefinition.setTargetType(ResolvableType.forClassWithGenerics(IncludeExcludeEndpointFilter.class, ExposableControllerEndpoint.class));
    beanDefinition.setInstanceSupplier(getControllerExposeExcludePropertyEndpointFilterInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Bean definitions for {@link WebEndpointAutoConfiguration.WebEndpointServletConfiguration}.
   */
  public static class WebEndpointServletConfiguration {
    /**
     * Get the bean definition for 'webEndpointServletConfiguration'.
     */
    public static BeanDefinition getWebEndpointServletConfigurationBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(WebEndpointAutoConfiguration.WebEndpointServletConfiguration.class);
      beanDefinition.setInstanceSupplier(WebEndpointAutoConfiguration.WebEndpointServletConfiguration::new);
      return beanDefinition;
    }

    /**
     * Get the bean instance supplier for 'servletEndpointDiscoverer'.
     */
    private static BeanInstanceSupplier<ServletEndpointDiscoverer> getServletEndpointDiscovererInstanceSupplier(
        ) {
      return BeanInstanceSupplier.<ServletEndpointDiscoverer>forFactoryMethod(WebEndpointAutoConfiguration.WebEndpointServletConfiguration.class, "servletEndpointDiscoverer", ApplicationContext.class, ObjectProvider.class, ObjectProvider.class)
              .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(WebEndpointAutoConfiguration.WebEndpointServletConfiguration.class).servletEndpointDiscoverer(args.get(0), args.get(1), args.get(2)));
    }

    /**
     * Get the bean definition for 'servletEndpointDiscoverer'.
     */
    public static BeanDefinition getServletEndpointDiscovererBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(ServletEndpointDiscoverer.class);
      beanDefinition.setInstanceSupplier(getServletEndpointDiscovererInstanceSupplier());
      return beanDefinition;
    }
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/endpoint/web/WebEndpointProperties__BeanDefinitions.java
package org.springframework.boot.actuate.autoconfigure.endpoint.web;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link WebEndpointProperties}.
 */
public class WebEndpointProperties__BeanDefinitions {
  /**
   * Get the bean definition for 'webEndpointProperties'.
   */
  public static BeanDefinition getWebEndpointPropertiesBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(WebEndpointProperties.class);
    beanDefinition.setInstanceSupplier(WebEndpointProperties::new);
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/endpoint/web/servlet/WebMvcEndpointManagementContextConfiguration__BeanDefinitions.java
package org.springframework.boot.actuate.autoconfigure.endpoint.web.servlet;

import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.boot.actuate.autoconfigure.endpoint.web.CorsEndpointProperties;
import org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties;
import org.springframework.boot.actuate.endpoint.jackson.EndpointObjectMapper;
import org.springframework.boot.actuate.endpoint.web.EndpointMediaTypes;
import org.springframework.boot.actuate.endpoint.web.WebEndpointsSupplier;
import org.springframework.boot.actuate.endpoint.web.annotation.ControllerEndpointsSupplier;
import org.springframework.boot.actuate.endpoint.web.annotation.ServletEndpointsSupplier;
import org.springframework.boot.actuate.endpoint.web.servlet.ControllerEndpointHandlerMapping;
import org.springframework.boot.actuate.endpoint.web.servlet.WebMvcEndpointHandlerMapping;
import org.springframework.core.env.Environment;

/**
 * Bean definitions for {@link WebMvcEndpointManagementContextConfiguration}.
 */
public class WebMvcEndpointManagementContextConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'webMvcEndpointManagementContextConfiguration'.
   */
  public static BeanDefinition getWebMvcEndpointManagementContextConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(WebMvcEndpointManagementContextConfiguration.class);
    beanDefinition.setInstanceSupplier(WebMvcEndpointManagementContextConfiguration::new);
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'webEndpointServletHandlerMapping'.
   */
  private static BeanInstanceSupplier<WebMvcEndpointHandlerMapping> getWebEndpointServletHandlerMappingInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<WebMvcEndpointHandlerMapping>forFactoryMethod(WebMvcEndpointManagementContextConfiguration.class, "webEndpointServletHandlerMapping", WebEndpointsSupplier.class, ServletEndpointsSupplier.class, ControllerEndpointsSupplier.class, EndpointMediaTypes.class, CorsEndpointProperties.class, WebEndpointProperties.class, Environment.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(WebMvcEndpointManagementContextConfiguration.class).webEndpointServletHandlerMapping(args.get(0), args.get(1), args.get(2), args.get(3), args.get(4), args.get(5), args.get(6)));
  }

  /**
   * Get the bean definition for 'webEndpointServletHandlerMapping'.
   */
  public static BeanDefinition getWebEndpointServletHandlerMappingBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(WebMvcEndpointHandlerMapping.class);
    beanDefinition.setInstanceSupplier(getWebEndpointServletHandlerMappingInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'controllerEndpointHandlerMapping'.
   */
  private static BeanInstanceSupplier<ControllerEndpointHandlerMapping> getControllerEndpointHandlerMappingInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<ControllerEndpointHandlerMapping>forFactoryMethod(WebMvcEndpointManagementContextConfiguration.class, "controllerEndpointHandlerMapping", ControllerEndpointsSupplier.class, CorsEndpointProperties.class, WebEndpointProperties.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(WebMvcEndpointManagementContextConfiguration.class).controllerEndpointHandlerMapping(args.get(0), args.get(1), args.get(2)));
  }

  /**
   * Get the bean definition for 'controllerEndpointHandlerMapping'.
   */
  public static BeanDefinition getControllerEndpointHandlerMappingBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(ControllerEndpointHandlerMapping.class);
    beanDefinition.setInstanceSupplier(getControllerEndpointHandlerMappingInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'endpointObjectMapperWebMvcConfigurer'.
   */
  private static BeanInstanceSupplier<WebMvcEndpointManagementContextConfiguration.EndpointObjectMapperWebMvcConfigurer> getEndpointObjectMapperWebMvcConfigurerInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<WebMvcEndpointManagementContextConfiguration.EndpointObjectMapperWebMvcConfigurer>forFactoryMethod(WebMvcEndpointManagementContextConfiguration.class, "endpointObjectMapperWebMvcConfigurer", EndpointObjectMapper.class)
            .withGenerator((registeredBean, args) -> WebMvcEndpointManagementContextConfiguration.endpointObjectMapperWebMvcConfigurer(args.get(0)));
  }

  /**
   * Get the bean definition for 'endpointObjectMapperWebMvcConfigurer'.
   */
  public static BeanDefinition getEndpointObjectMapperWebMvcConfigurerBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(WebMvcEndpointManagementContextConfiguration.class);
    beanDefinition.setTargetType(WebMvcEndpointManagementContextConfiguration.EndpointObjectMapperWebMvcConfigurer.class);
    beanDefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
    beanDefinition.setInstanceSupplier(getEndpointObjectMapperWebMvcConfigurerInstanceSupplier());
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/env/EnvironmentEndpointAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.actuate.autoconfigure.env;

import org.springframework.beans.factory.ObjectProvider;
import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.boot.actuate.env.EnvironmentEndpoint;
import org.springframework.boot.actuate.env.EnvironmentEndpointWebExtension;
import org.springframework.core.env.Environment;

/**
 * Bean definitions for {@link EnvironmentEndpointAutoConfiguration}.
 */
public class EnvironmentEndpointAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'environmentEndpointAutoConfiguration'.
   */
  public static BeanDefinition getEnvironmentEndpointAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(EnvironmentEndpointAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(EnvironmentEndpointAutoConfiguration::new);
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'environmentEndpoint'.
   */
  private static BeanInstanceSupplier<EnvironmentEndpoint> getEnvironmentEndpointInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<EnvironmentEndpoint>forFactoryMethod(EnvironmentEndpointAutoConfiguration.class, "environmentEndpoint", Environment.class, EnvironmentEndpointProperties.class, ObjectProvider.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(EnvironmentEndpointAutoConfiguration.class).environmentEndpoint(args.get(0), args.get(1), args.get(2)));
  }

  /**
   * Get the bean definition for 'environmentEndpoint'.
   */
  public static BeanDefinition getEnvironmentEndpointBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(EnvironmentEndpoint.class);
    beanDefinition.setInstanceSupplier(getEnvironmentEndpointInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'environmentEndpointWebExtension'.
   */
  private static BeanInstanceSupplier<EnvironmentEndpointWebExtension> getEnvironmentEndpointWebExtensionInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<EnvironmentEndpointWebExtension>forFactoryMethod(EnvironmentEndpointAutoConfiguration.class, "environmentEndpointWebExtension", EnvironmentEndpoint.class, EnvironmentEndpointProperties.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(EnvironmentEndpointAutoConfiguration.class).environmentEndpointWebExtension(args.get(0), args.get(1)));
  }

  /**
   * Get the bean definition for 'environmentEndpointWebExtension'.
   */
  public static BeanDefinition getEnvironmentEndpointWebExtensionBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(EnvironmentEndpointWebExtension.class);
    beanDefinition.setInstanceSupplier(getEnvironmentEndpointWebExtensionInstanceSupplier());
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/env/EnvironmentEndpointProperties__BeanDefinitions.java
package org.springframework.boot.actuate.autoconfigure.env;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link EnvironmentEndpointProperties}.
 */
public class EnvironmentEndpointProperties__BeanDefinitions {
  /**
   * Get the bean definition for 'environmentEndpointProperties'.
   */
  public static BeanDefinition getEnvironmentEndpointPropertiesBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(EnvironmentEndpointProperties.class);
    beanDefinition.setInstanceSupplier(EnvironmentEndpointProperties::new);
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/health/HealthContributorAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.actuate.autoconfigure.health;

import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.boot.actuate.health.PingHealthIndicator;

/**
 * Bean definitions for {@link HealthContributorAutoConfiguration}.
 */
public class HealthContributorAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'healthContributorAutoConfiguration'.
   */
  public static BeanDefinition getHealthContributorAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(HealthContributorAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(HealthContributorAutoConfiguration::new);
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'pingHealthContributor'.
   */
  private static BeanInstanceSupplier<PingHealthIndicator> getPingHealthContributorInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<PingHealthIndicator>forFactoryMethod(HealthContributorAutoConfiguration.class, "pingHealthContributor")
            .withGenerator((registeredBean) -> registeredBean.getBeanFactory().getBean(HealthContributorAutoConfiguration.class).pingHealthContributor());
  }

  /**
   * Get the bean definition for 'pingHealthContributor'.
   */
  public static BeanDefinition getPingHealthContributorBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(PingHealthIndicator.class);
    beanDefinition.setInstanceSupplier(getPingHealthContributorInstanceSupplier());
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/health/HealthEndpointAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.actuate.autoconfigure.health;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link HealthEndpointAutoConfiguration}.
 */
public class HealthEndpointAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'healthEndpointAutoConfiguration'.
   */
  public static BeanDefinition getHealthEndpointAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(HealthEndpointAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(HealthEndpointAutoConfiguration::new);
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/health/HealthEndpointConfiguration__BeanDefinitions.java
package org.springframework.boot.actuate.autoconfigure.health;

import java.util.Map;
import org.springframework.beans.factory.ObjectProvider;
import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.boot.actuate.health.HealthContributorRegistry;
import org.springframework.boot.actuate.health.HealthEndpoint;
import org.springframework.boot.actuate.health.HealthEndpointGroups;
import org.springframework.boot.actuate.health.HttpCodeStatusMapper;
import org.springframework.boot.actuate.health.StatusAggregator;
import org.springframework.context.ApplicationContext;

/**
 * Bean definitions for {@link HealthEndpointConfiguration}.
 */
public class HealthEndpointConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'healthEndpointConfiguration'.
   */
  public static BeanDefinition getHealthEndpointConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(HealthEndpointConfiguration.class);
    beanDefinition.setInstanceSupplier(HealthEndpointConfiguration::new);
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'healthStatusAggregator'.
   */
  private static BeanInstanceSupplier<StatusAggregator> getHealthStatusAggregatorInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<StatusAggregator>forFactoryMethod(HealthEndpointConfiguration.class, "healthStatusAggregator", HealthEndpointProperties.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(HealthEndpointConfiguration.class).healthStatusAggregator(args.get(0)));
  }

  /**
   * Get the bean definition for 'healthStatusAggregator'.
   */
  public static BeanDefinition getHealthStatusAggregatorBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(StatusAggregator.class);
    beanDefinition.setInstanceSupplier(getHealthStatusAggregatorInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'healthHttpCodeStatusMapper'.
   */
  private static BeanInstanceSupplier<HttpCodeStatusMapper> getHealthHttpCodeStatusMapperInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<HttpCodeStatusMapper>forFactoryMethod(HealthEndpointConfiguration.class, "healthHttpCodeStatusMapper", HealthEndpointProperties.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(HealthEndpointConfiguration.class).healthHttpCodeStatusMapper(args.get(0)));
  }

  /**
   * Get the bean definition for 'healthHttpCodeStatusMapper'.
   */
  public static BeanDefinition getHealthHttpCodeStatusMapperBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(HttpCodeStatusMapper.class);
    beanDefinition.setInstanceSupplier(getHealthHttpCodeStatusMapperInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'healthEndpointGroups'.
   */
  private static BeanInstanceSupplier<HealthEndpointGroups> getHealthEndpointGroupsInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<HealthEndpointGroups>forFactoryMethod(HealthEndpointConfiguration.class, "healthEndpointGroups", ApplicationContext.class, HealthEndpointProperties.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(HealthEndpointConfiguration.class).healthEndpointGroups(args.get(0), args.get(1)));
  }

  /**
   * Get the bean definition for 'healthEndpointGroups'.
   */
  public static BeanDefinition getHealthEndpointGroupsBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(HealthEndpointGroups.class);
    beanDefinition.setInstanceSupplier(getHealthEndpointGroupsInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'healthContributorRegistry'.
   */
  private static BeanInstanceSupplier<HealthContributorRegistry> getHealthContributorRegistryInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<HealthContributorRegistry>forFactoryMethod(HealthEndpointConfiguration.class, "healthContributorRegistry", ApplicationContext.class, HealthEndpointGroups.class, Map.class, Map.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(HealthEndpointConfiguration.class).healthContributorRegistry(args.get(0), args.get(1), args.get(2), args.get(3)));
  }

  /**
   * Get the bean definition for 'healthContributorRegistry'.
   */
  public static BeanDefinition getHealthContributorRegistryBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(HealthContributorRegistry.class);
    beanDefinition.setInstanceSupplier(getHealthContributorRegistryInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'healthEndpointGroupMembershipValidator'.
   */
  private static BeanInstanceSupplier<HealthEndpointConfiguration.HealthEndpointGroupMembershipValidator> getHealthEndpointGroupMembershipValidatorInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<HealthEndpointConfiguration.HealthEndpointGroupMembershipValidator>forFactoryMethod(HealthEndpointConfiguration.class, "healthEndpointGroupMembershipValidator", HealthEndpointProperties.class, HealthContributorRegistry.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(HealthEndpointConfiguration.class).healthEndpointGroupMembershipValidator(args.get(0), args.get(1)));
  }

  /**
   * Get the bean definition for 'healthEndpointGroupMembershipValidator'.
   */
  public static BeanDefinition getHealthEndpointGroupMembershipValidatorBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(HealthEndpointConfiguration.HealthEndpointGroupMembershipValidator.class);
    beanDefinition.setInstanceSupplier(getHealthEndpointGroupMembershipValidatorInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'healthEndpoint'.
   */
  private static BeanInstanceSupplier<HealthEndpoint> getHealthEndpointInstanceSupplier() {
    return BeanInstanceSupplier.<HealthEndpoint>forFactoryMethod(HealthEndpointConfiguration.class, "healthEndpoint", HealthContributorRegistry.class, HealthEndpointGroups.class, HealthEndpointProperties.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(HealthEndpointConfiguration.class).healthEndpoint(args.get(0), args.get(1), args.get(2)));
  }

  /**
   * Get the bean definition for 'healthEndpoint'.
   */
  public static BeanDefinition getHealthEndpointBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(HealthEndpoint.class);
    beanDefinition.setInstanceSupplier(getHealthEndpointInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'healthEndpointGroupsBeanPostProcessor'.
   */
  private static BeanInstanceSupplier<HealthEndpointConfiguration.HealthEndpointGroupsBeanPostProcessor> getHealthEndpointGroupsBeanPostProcessorInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<HealthEndpointConfiguration.HealthEndpointGroupsBeanPostProcessor>forFactoryMethod(HealthEndpointConfiguration.class, "healthEndpointGroupsBeanPostProcessor", ObjectProvider.class)
            .withGenerator((registeredBean, args) -> HealthEndpointConfiguration.healthEndpointGroupsBeanPostProcessor(args.get(0)));
  }

  /**
   * Get the bean definition for 'healthEndpointGroupsBeanPostProcessor'.
   */
  public static BeanDefinition getHealthEndpointGroupsBeanPostProcessorBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(HealthEndpointConfiguration.class);
    beanDefinition.setTargetType(HealthEndpointConfiguration.HealthEndpointGroupsBeanPostProcessor.class);
    beanDefinition.setInstanceSupplier(getHealthEndpointGroupsBeanPostProcessorInstanceSupplier());
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/health/HealthEndpointProperties__BeanDefinitions.java
package org.springframework.boot.actuate.autoconfigure.health;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link HealthEndpointProperties}.
 */
public class HealthEndpointProperties__BeanDefinitions {
  /**
   * Get the bean definition for 'healthEndpointProperties'.
   */
  public static BeanDefinition getHealthEndpointPropertiesBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(HealthEndpointProperties.class);
    beanDefinition.setInstanceSupplier(HealthEndpointProperties::new);
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/health/HealthEndpointWebExtensionConfiguration__BeanDefinitions.java
package org.springframework.boot.actuate.autoconfigure.health;

import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.boot.actuate.endpoint.web.WebEndpointsSupplier;
import org.springframework.boot.actuate.endpoint.web.servlet.AdditionalHealthEndpointPathsWebMvcHandlerMapping;
import org.springframework.boot.actuate.health.HealthContributorRegistry;
import org.springframework.boot.actuate.health.HealthEndpointGroups;
import org.springframework.boot.actuate.health.HealthEndpointWebExtension;

/**
 * Bean definitions for {@link HealthEndpointWebExtensionConfiguration}.
 */
public class HealthEndpointWebExtensionConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'healthEndpointWebExtensionConfiguration'.
   */
  public static BeanDefinition getHealthEndpointWebExtensionConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(HealthEndpointWebExtensionConfiguration.class);
    beanDefinition.setInstanceSupplier(HealthEndpointWebExtensionConfiguration::new);
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'healthEndpointWebExtension'.
   */
  private static BeanInstanceSupplier<HealthEndpointWebExtension> getHealthEndpointWebExtensionInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<HealthEndpointWebExtension>forFactoryMethod(HealthEndpointWebExtensionConfiguration.class, "healthEndpointWebExtension", HealthContributorRegistry.class, HealthEndpointGroups.class, HealthEndpointProperties.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(HealthEndpointWebExtensionConfiguration.class).healthEndpointWebExtension(args.get(0), args.get(1), args.get(2)));
  }

  /**
   * Get the bean definition for 'healthEndpointWebExtension'.
   */
  public static BeanDefinition getHealthEndpointWebExtensionBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(HealthEndpointWebExtension.class);
    beanDefinition.setInstanceSupplier(getHealthEndpointWebExtensionInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Bean definitions for {@link HealthEndpointWebExtensionConfiguration.MvcAdditionalHealthEndpointPathsConfiguration}.
   */
  public static class MvcAdditionalHealthEndpointPathsConfiguration {
    /**
     * Get the bean definition for 'mvcAdditionalHealthEndpointPathsConfiguration'.
     */
    public static BeanDefinition getMvcAdditionalHealthEndpointPathsConfigurationBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(HealthEndpointWebExtensionConfiguration.MvcAdditionalHealthEndpointPathsConfiguration.class);
      beanDefinition.setInstanceSupplier(HealthEndpointWebExtensionConfiguration.MvcAdditionalHealthEndpointPathsConfiguration::new);
      return beanDefinition;
    }

    /**
     * Get the bean instance supplier for 'healthEndpointWebMvcHandlerMapping'.
     */
    private static BeanInstanceSupplier<AdditionalHealthEndpointPathsWebMvcHandlerMapping> getHealthEndpointWebMvcHandlerMappingInstanceSupplier(
        ) {
      return BeanInstanceSupplier.<AdditionalHealthEndpointPathsWebMvcHandlerMapping>forFactoryMethod(HealthEndpointWebExtensionConfiguration.MvcAdditionalHealthEndpointPathsConfiguration.class, "healthEndpointWebMvcHandlerMapping", WebEndpointsSupplier.class, HealthEndpointGroups.class)
              .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(HealthEndpointWebExtensionConfiguration.MvcAdditionalHealthEndpointPathsConfiguration.class).healthEndpointWebMvcHandlerMapping(args.get(0), args.get(1)));
    }

    /**
     * Get the bean definition for 'healthEndpointWebMvcHandlerMapping'.
     */
    public static BeanDefinition getHealthEndpointWebMvcHandlerMappingBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(AdditionalHealthEndpointPathsWebMvcHandlerMapping.class);
      beanDefinition.setInstanceSupplier(getHealthEndpointWebMvcHandlerMappingInstanceSupplier());
      return beanDefinition;
    }
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/info/InfoContributorAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.actuate.autoconfigure.info;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link InfoContributorAutoConfiguration}.
 */
public class InfoContributorAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'infoContributorAutoConfiguration'.
   */
  public static BeanDefinition getInfoContributorAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(InfoContributorAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(InfoContributorAutoConfiguration::new);
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/info/InfoContributorProperties__BeanDefinitions.java
package org.springframework.boot.actuate.autoconfigure.info;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link InfoContributorProperties}.
 */
public class InfoContributorProperties__BeanDefinitions {
  /**
   * Get the bean definition for 'infoContributorProperties'.
   */
  public static BeanDefinition getInfoContributorPropertiesBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(InfoContributorProperties.class);
    beanDefinition.setInstanceSupplier(InfoContributorProperties::new);
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/info/InfoEndpointAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.actuate.autoconfigure.info;

import org.springframework.beans.factory.ObjectProvider;
import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.boot.actuate.info.InfoEndpoint;

/**
 * Bean definitions for {@link InfoEndpointAutoConfiguration}.
 */
public class InfoEndpointAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'infoEndpointAutoConfiguration'.
   */
  public static BeanDefinition getInfoEndpointAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(InfoEndpointAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(InfoEndpointAutoConfiguration::new);
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'infoEndpoint'.
   */
  private static BeanInstanceSupplier<InfoEndpoint> getInfoEndpointInstanceSupplier() {
    return BeanInstanceSupplier.<InfoEndpoint>forFactoryMethod(InfoEndpointAutoConfiguration.class, "infoEndpoint", ObjectProvider.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(InfoEndpointAutoConfiguration.class).infoEndpoint(args.get(0)));
  }

  /**
   * Get the bean definition for 'infoEndpoint'.
   */
  public static BeanDefinition getInfoEndpointBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(InfoEndpoint.class);
    beanDefinition.setInstanceSupplier(getInfoEndpointInstanceSupplier());
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/jdbc/DataSourceHealthContributorAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.actuate.autoconfigure.jdbc;

import java.util.Map;
import org.springframework.beans.factory.ObjectProvider;
import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.boot.actuate.health.HealthContributor;

/**
 * Bean definitions for {@link DataSourceHealthContributorAutoConfiguration}.
 */
public class DataSourceHealthContributorAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean instance supplier for 'org.springframework.boot.actuate.autoconfigure.jdbc.DataSourceHealthContributorAutoConfiguration'.
   */
  private static BeanInstanceSupplier<DataSourceHealthContributorAutoConfiguration> getDataSourceHealthContributorAutoConfigurationInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<DataSourceHealthContributorAutoConfiguration>forConstructor(ObjectProvider.class)
            .withGenerator((registeredBean, args) -> new DataSourceHealthContributorAutoConfiguration(args.get(0)));
  }

  /**
   * Get the bean definition for 'dataSourceHealthContributorAutoConfiguration'.
   */
  public static BeanDefinition getDataSourceHealthContributorAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(DataSourceHealthContributorAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(getDataSourceHealthContributorAutoConfigurationInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'dbHealthContributor'.
   */
  private static BeanInstanceSupplier<HealthContributor> getDbHealthContributorInstanceSupplier() {
    return BeanInstanceSupplier.<HealthContributor>forFactoryMethod(DataSourceHealthContributorAutoConfiguration.class, "dbHealthContributor", Map.class, DataSourceHealthIndicatorProperties.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(DataSourceHealthContributorAutoConfiguration.class).dbHealthContributor(args.get(0), args.get(1)));
  }

  /**
   * Get the bean definition for 'dbHealthContributor'.
   */
  public static BeanDefinition getDbHealthContributorBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(HealthContributor.class);
    beanDefinition.setInstanceSupplier(getDbHealthContributorInstanceSupplier());
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/jdbc/DataSourceHealthIndicatorProperties__BeanDefinitions.java
package org.springframework.boot.actuate.autoconfigure.jdbc;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link DataSourceHealthIndicatorProperties}.
 */
public class DataSourceHealthIndicatorProperties__BeanDefinitions {
  /**
   * Get the bean definition for 'dataSourceHealthIndicatorProperties'.
   */
  public static BeanDefinition getDataSourceHealthIndicatorPropertiesBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(DataSourceHealthIndicatorProperties.class);
    beanDefinition.setInstanceSupplier(DataSourceHealthIndicatorProperties::new);
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/logging/LogFileWebEndpointAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.actuate.autoconfigure.logging;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link LogFileWebEndpointAutoConfiguration}.
 */
public class LogFileWebEndpointAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'logFileWebEndpointAutoConfiguration'.
   */
  public static BeanDefinition getLogFileWebEndpointAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(LogFileWebEndpointAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(LogFileWebEndpointAutoConfiguration::new);
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/logging/LogFileWebEndpointProperties__BeanDefinitions.java
package org.springframework.boot.actuate.autoconfigure.logging;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link LogFileWebEndpointProperties}.
 */
public class LogFileWebEndpointProperties__BeanDefinitions {
  /**
   * Get the bean definition for 'logFileWebEndpointProperties'.
   */
  public static BeanDefinition getLogFileWebEndpointPropertiesBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(LogFileWebEndpointProperties.class);
    beanDefinition.setInstanceSupplier(LogFileWebEndpointProperties::new);
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/logging/LoggersEndpointAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.actuate.autoconfigure.logging;

import org.springframework.beans.factory.ObjectProvider;
import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.boot.actuate.logging.LoggersEndpoint;
import org.springframework.boot.logging.LoggingSystem;

/**
 * Bean definitions for {@link LoggersEndpointAutoConfiguration}.
 */
public class LoggersEndpointAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'loggersEndpointAutoConfiguration'.
   */
  public static BeanDefinition getLoggersEndpointAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(LoggersEndpointAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(LoggersEndpointAutoConfiguration::new);
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'loggersEndpoint'.
   */
  private static BeanInstanceSupplier<LoggersEndpoint> getLoggersEndpointInstanceSupplier() {
    return BeanInstanceSupplier.<LoggersEndpoint>forFactoryMethod(LoggersEndpointAutoConfiguration.class, "loggersEndpoint", LoggingSystem.class, ObjectProvider.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(LoggersEndpointAutoConfiguration.class).loggersEndpoint(args.get(0), args.get(1)));
  }

  /**
   * Get the bean definition for 'loggersEndpoint'.
   */
  public static BeanDefinition getLoggersEndpointBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(LoggersEndpoint.class);
    beanDefinition.setInstanceSupplier(getLoggersEndpointInstanceSupplier());
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/management/HeapDumpWebEndpointAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.actuate.autoconfigure.management;

import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.boot.actuate.management.HeapDumpWebEndpoint;

/**
 * Bean definitions for {@link HeapDumpWebEndpointAutoConfiguration}.
 */
public class HeapDumpWebEndpointAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'heapDumpWebEndpointAutoConfiguration'.
   */
  public static BeanDefinition getHeapDumpWebEndpointAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(HeapDumpWebEndpointAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(HeapDumpWebEndpointAutoConfiguration::new);
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'heapDumpWebEndpoint'.
   */
  private static BeanInstanceSupplier<HeapDumpWebEndpoint> getHeapDumpWebEndpointInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<HeapDumpWebEndpoint>forFactoryMethod(HeapDumpWebEndpointAutoConfiguration.class, "heapDumpWebEndpoint")
            .withGenerator((registeredBean) -> registeredBean.getBeanFactory().getBean(HeapDumpWebEndpointAutoConfiguration.class).heapDumpWebEndpoint());
  }

  /**
   * Get the bean definition for 'heapDumpWebEndpoint'.
   */
  public static BeanDefinition getHeapDumpWebEndpointBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(HeapDumpWebEndpoint.class);
    beanDefinition.setInstanceSupplier(getHeapDumpWebEndpointInstanceSupplier());
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/management/ThreadDumpEndpointAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.actuate.autoconfigure.management;

import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.boot.actuate.management.ThreadDumpEndpoint;

/**
 * Bean definitions for {@link ThreadDumpEndpointAutoConfiguration}.
 */
public class ThreadDumpEndpointAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'threadDumpEndpointAutoConfiguration'.
   */
  public static BeanDefinition getThreadDumpEndpointAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(ThreadDumpEndpointAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(ThreadDumpEndpointAutoConfiguration::new);
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'dumpEndpoint'.
   */
  private static BeanInstanceSupplier<ThreadDumpEndpoint> getDumpEndpointInstanceSupplier() {
    return BeanInstanceSupplier.<ThreadDumpEndpoint>forFactoryMethod(ThreadDumpEndpointAutoConfiguration.class, "dumpEndpoint")
            .withGenerator((registeredBean) -> registeredBean.getBeanFactory().getBean(ThreadDumpEndpointAutoConfiguration.class).dumpEndpoint());
  }

  /**
   * Get the bean definition for 'dumpEndpoint'.
   */
  public static BeanDefinition getDumpEndpointBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(ThreadDumpEndpoint.class);
    beanDefinition.setInstanceSupplier(getDumpEndpointInstanceSupplier());
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/metrics/CompositeMeterRegistryAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.actuate.autoconfigure.metrics;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link CompositeMeterRegistryAutoConfiguration}.
 */
public class CompositeMeterRegistryAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'compositeMeterRegistryAutoConfiguration'.
   */
  public static BeanDefinition getCompositeMeterRegistryAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(CompositeMeterRegistryAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(CompositeMeterRegistryAutoConfiguration::new);
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/metrics/JvmMetricsAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.actuate.autoconfigure.metrics;

import io.micrometer.core.instrument.binder.jvm.ClassLoaderMetrics;
import io.micrometer.core.instrument.binder.jvm.JvmCompilationMetrics;
import io.micrometer.core.instrument.binder.jvm.JvmGcMetrics;
import io.micrometer.core.instrument.binder.jvm.JvmHeapPressureMetrics;
import io.micrometer.core.instrument.binder.jvm.JvmInfoMetrics;
import io.micrometer.core.instrument.binder.jvm.JvmMemoryMetrics;
import io.micrometer.core.instrument.binder.jvm.JvmThreadMetrics;
import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link JvmMetricsAutoConfiguration}.
 */
public class JvmMetricsAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'jvmMetricsAutoConfiguration'.
   */
  public static BeanDefinition getJvmMetricsAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(JvmMetricsAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(JvmMetricsAutoConfiguration::new);
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'jvmGcMetrics'.
   */
  private static BeanInstanceSupplier<JvmGcMetrics> getJvmGcMetricsInstanceSupplier() {
    return BeanInstanceSupplier.<JvmGcMetrics>forFactoryMethod(JvmMetricsAutoConfiguration.class, "jvmGcMetrics")
            .withGenerator((registeredBean) -> registeredBean.getBeanFactory().getBean(JvmMetricsAutoConfiguration.class).jvmGcMetrics());
  }

  /**
   * Get the bean definition for 'jvmGcMetrics'.
   */
  public static BeanDefinition getJvmGcMetricsBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(JvmGcMetrics.class);
    beanDefinition.setDestroyMethodNames("close");
    beanDefinition.setInstanceSupplier(getJvmGcMetricsInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'jvmHeapPressureMetrics'.
   */
  private static BeanInstanceSupplier<JvmHeapPressureMetrics> getJvmHeapPressureMetricsInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<JvmHeapPressureMetrics>forFactoryMethod(JvmMetricsAutoConfiguration.class, "jvmHeapPressureMetrics")
            .withGenerator((registeredBean) -> registeredBean.getBeanFactory().getBean(JvmMetricsAutoConfiguration.class).jvmHeapPressureMetrics());
  }

  /**
   * Get the bean definition for 'jvmHeapPressureMetrics'.
   */
  public static BeanDefinition getJvmHeapPressureMetricsBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(JvmHeapPressureMetrics.class);
    beanDefinition.setDestroyMethodNames("close");
    beanDefinition.setInstanceSupplier(getJvmHeapPressureMetricsInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'jvmMemoryMetrics'.
   */
  private static BeanInstanceSupplier<JvmMemoryMetrics> getJvmMemoryMetricsInstanceSupplier() {
    return BeanInstanceSupplier.<JvmMemoryMetrics>forFactoryMethod(JvmMetricsAutoConfiguration.class, "jvmMemoryMetrics")
            .withGenerator((registeredBean) -> registeredBean.getBeanFactory().getBean(JvmMetricsAutoConfiguration.class).jvmMemoryMetrics());
  }

  /**
   * Get the bean definition for 'jvmMemoryMetrics'.
   */
  public static BeanDefinition getJvmMemoryMetricsBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(JvmMemoryMetrics.class);
    beanDefinition.setInstanceSupplier(getJvmMemoryMetricsInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'jvmThreadMetrics'.
   */
  private static BeanInstanceSupplier<JvmThreadMetrics> getJvmThreadMetricsInstanceSupplier() {
    return BeanInstanceSupplier.<JvmThreadMetrics>forFactoryMethod(JvmMetricsAutoConfiguration.class, "jvmThreadMetrics")
            .withGenerator((registeredBean) -> registeredBean.getBeanFactory().getBean(JvmMetricsAutoConfiguration.class).jvmThreadMetrics());
  }

  /**
   * Get the bean definition for 'jvmThreadMetrics'.
   */
  public static BeanDefinition getJvmThreadMetricsBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(JvmThreadMetrics.class);
    beanDefinition.setInstanceSupplier(getJvmThreadMetricsInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'classLoaderMetrics'.
   */
  private static BeanInstanceSupplier<ClassLoaderMetrics> getClassLoaderMetricsInstanceSupplier() {
    return BeanInstanceSupplier.<ClassLoaderMetrics>forFactoryMethod(JvmMetricsAutoConfiguration.class, "classLoaderMetrics")
            .withGenerator((registeredBean) -> registeredBean.getBeanFactory().getBean(JvmMetricsAutoConfiguration.class).classLoaderMetrics());
  }

  /**
   * Get the bean definition for 'classLoaderMetrics'.
   */
  public static BeanDefinition getClassLoaderMetricsBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(ClassLoaderMetrics.class);
    beanDefinition.setInstanceSupplier(getClassLoaderMetricsInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'jvmInfoMetrics'.
   */
  private static BeanInstanceSupplier<JvmInfoMetrics> getJvmInfoMetricsInstanceSupplier() {
    return BeanInstanceSupplier.<JvmInfoMetrics>forFactoryMethod(JvmMetricsAutoConfiguration.class, "jvmInfoMetrics")
            .withGenerator((registeredBean) -> registeredBean.getBeanFactory().getBean(JvmMetricsAutoConfiguration.class).jvmInfoMetrics());
  }

  /**
   * Get the bean definition for 'jvmInfoMetrics'.
   */
  public static BeanDefinition getJvmInfoMetricsBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(JvmInfoMetrics.class);
    beanDefinition.setInstanceSupplier(getJvmInfoMetricsInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'jvmCompilationMetrics'.
   */
  private static BeanInstanceSupplier<JvmCompilationMetrics> getJvmCompilationMetricsInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<JvmCompilationMetrics>forFactoryMethod(JvmMetricsAutoConfiguration.class, "jvmCompilationMetrics")
            .withGenerator((registeredBean) -> registeredBean.getBeanFactory().getBean(JvmMetricsAutoConfiguration.class).jvmCompilationMetrics());
  }

  /**
   * Get the bean definition for 'jvmCompilationMetrics'.
   */
  public static BeanDefinition getJvmCompilationMetricsBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(JvmCompilationMetrics.class);
    beanDefinition.setInstanceSupplier(getJvmCompilationMetricsInstanceSupplier());
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/metrics/LogbackMetricsAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.actuate.autoconfigure.metrics;

import io.micrometer.core.instrument.binder.logging.LogbackMetrics;
import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link LogbackMetricsAutoConfiguration}.
 */
public class LogbackMetricsAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'logbackMetricsAutoConfiguration'.
   */
  public static BeanDefinition getLogbackMetricsAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(LogbackMetricsAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(LogbackMetricsAutoConfiguration::new);
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'logbackMetrics'.
   */
  private static BeanInstanceSupplier<LogbackMetrics> getLogbackMetricsInstanceSupplier() {
    return BeanInstanceSupplier.<LogbackMetrics>forFactoryMethod(LogbackMetricsAutoConfiguration.class, "logbackMetrics")
            .withGenerator((registeredBean) -> registeredBean.getBeanFactory().getBean(LogbackMetricsAutoConfiguration.class).logbackMetrics());
  }

  /**
   * Get the bean definition for 'logbackMetrics'.
   */
  public static BeanDefinition getLogbackMetricsBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(LogbackMetrics.class);
    beanDefinition.setDestroyMethodNames("close");
    beanDefinition.setInstanceSupplier(getLogbackMetricsInstanceSupplier());
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/metrics/MetricsAspectsAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.actuate.autoconfigure.metrics;

import io.micrometer.core.aop.CountedAspect;
import io.micrometer.core.aop.TimedAspect;
import io.micrometer.core.instrument.MeterRegistry;
import org.springframework.beans.factory.ObjectProvider;
import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link MetricsAspectsAutoConfiguration}.
 */
public class MetricsAspectsAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'metricsAspectsAutoConfiguration'.
   */
  public static BeanDefinition getMetricsAspectsAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(MetricsAspectsAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(MetricsAspectsAutoConfiguration::new);
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'countedAspect'.
   */
  private static BeanInstanceSupplier<CountedAspect> getCountedAspectInstanceSupplier() {
    return BeanInstanceSupplier.<CountedAspect>forFactoryMethod(MetricsAspectsAutoConfiguration.class, "countedAspect", MeterRegistry.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(MetricsAspectsAutoConfiguration.class).countedAspect(args.get(0)));
  }

  /**
   * Get the bean definition for 'countedAspect'.
   */
  public static BeanDefinition getCountedAspectBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(CountedAspect.class);
    beanDefinition.setInstanceSupplier(getCountedAspectInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'timedAspect'.
   */
  private static BeanInstanceSupplier<TimedAspect> getTimedAspectInstanceSupplier() {
    return BeanInstanceSupplier.<TimedAspect>forFactoryMethod(MetricsAspectsAutoConfiguration.class, "timedAspect", MeterRegistry.class, ObjectProvider.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(MetricsAspectsAutoConfiguration.class).timedAspect(args.get(0), args.get(1)));
  }

  /**
   * Get the bean definition for 'timedAspect'.
   */
  public static BeanDefinition getTimedAspectBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(TimedAspect.class);
    beanDefinition.setInstanceSupplier(getTimedAspectInstanceSupplier());
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/metrics/MetricsAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.actuate.autoconfigure.metrics;

import io.micrometer.core.instrument.Clock;
import org.springframework.beans.factory.ObjectProvider;
import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.context.ApplicationContext;

/**
 * Bean definitions for {@link MetricsAutoConfiguration}.
 */
public class MetricsAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'metricsAutoConfiguration'.
   */
  public static BeanDefinition getMetricsAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(MetricsAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(MetricsAutoConfiguration::new);
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'micrometerClock'.
   */
  private static BeanInstanceSupplier<Clock> getMicrometerClockInstanceSupplier() {
    return BeanInstanceSupplier.<Clock>forFactoryMethod(MetricsAutoConfiguration.class, "micrometerClock")
            .withGenerator((registeredBean) -> registeredBean.getBeanFactory().getBean(MetricsAutoConfiguration.class).micrometerClock());
  }

  /**
   * Get the bean definition for 'micrometerClock'.
   */
  public static BeanDefinition getMicrometerClockBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(Clock.class);
    beanDefinition.setInstanceSupplier(getMicrometerClockInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'meterRegistryPostProcessor'.
   */
  private static BeanInstanceSupplier<MeterRegistryPostProcessor> getMeterRegistryPostProcessorInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<MeterRegistryPostProcessor>forFactoryMethod(MetricsAutoConfiguration.class, "meterRegistryPostProcessor", ApplicationContext.class, ObjectProvider.class, ObjectProvider.class, ObjectProvider.class, ObjectProvider.class)
            .withGenerator((registeredBean, args) -> MetricsAutoConfiguration.meterRegistryPostProcessor(args.get(0), args.get(1), args.get(2), args.get(3), args.get(4)));
  }

  /**
   * Get the bean definition for 'meterRegistryPostProcessor'.
   */
  public static BeanDefinition getMeterRegistryPostProcessorBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(MetricsAutoConfiguration.class);
    beanDefinition.setTargetType(MeterRegistryPostProcessor.class);
    beanDefinition.setInstanceSupplier(getMeterRegistryPostProcessorInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'propertiesMeterFilter'.
   */
  private static BeanInstanceSupplier<PropertiesMeterFilter> getPropertiesMeterFilterInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<PropertiesMeterFilter>forFactoryMethod(MetricsAutoConfiguration.class, "propertiesMeterFilter", MetricsProperties.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(MetricsAutoConfiguration.class).propertiesMeterFilter(args.get(0)));
  }

  /**
   * Get the bean definition for 'propertiesMeterFilter'.
   */
  public static BeanDefinition getPropertiesMeterFilterBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(PropertiesMeterFilter.class);
    beanDefinition.setInstanceSupplier(getPropertiesMeterFilterInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'meterRegistryCloser'.
   */
  private static BeanInstanceSupplier<MetricsAutoConfiguration.MeterRegistryCloser> getMeterRegistryCloserInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<MetricsAutoConfiguration.MeterRegistryCloser>forFactoryMethod(MetricsAutoConfiguration.class, "meterRegistryCloser", ObjectProvider.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(MetricsAutoConfiguration.class).meterRegistryCloser(args.get(0)));
  }

  /**
   * Get the bean definition for 'meterRegistryCloser'.
   */
  public static BeanDefinition getMeterRegistryCloserBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(MetricsAutoConfiguration.MeterRegistryCloser.class);
    beanDefinition.setInstanceSupplier(getMeterRegistryCloserInstanceSupplier());
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/metrics/MetricsEndpointAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.actuate.autoconfigure.metrics;

import io.micrometer.core.instrument.MeterRegistry;
import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.boot.actuate.metrics.MetricsEndpoint;

/**
 * Bean definitions for {@link MetricsEndpointAutoConfiguration}.
 */
public class MetricsEndpointAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'metricsEndpointAutoConfiguration'.
   */
  public static BeanDefinition getMetricsEndpointAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(MetricsEndpointAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(MetricsEndpointAutoConfiguration::new);
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'metricsEndpoint'.
   */
  private static BeanInstanceSupplier<MetricsEndpoint> getMetricsEndpointInstanceSupplier() {
    return BeanInstanceSupplier.<MetricsEndpoint>forFactoryMethod(MetricsEndpointAutoConfiguration.class, "metricsEndpoint", MeterRegistry.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(MetricsEndpointAutoConfiguration.class).metricsEndpoint(args.get(0)));
  }

  /**
   * Get the bean definition for 'metricsEndpoint'.
   */
  public static BeanDefinition getMetricsEndpointBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(MetricsEndpoint.class);
    beanDefinition.setInstanceSupplier(getMetricsEndpointInstanceSupplier());
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/metrics/MetricsProperties__BeanDefinitions.java
package org.springframework.boot.actuate.autoconfigure.metrics;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link MetricsProperties}.
 */
public class MetricsProperties__BeanDefinitions {
  /**
   * Get the bean definition for 'metricsProperties'.
   */
  public static BeanDefinition getMetricsPropertiesBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(MetricsProperties.class);
    beanDefinition.setInstanceSupplier(MetricsProperties::new);
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/metrics/SystemMetricsAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.actuate.autoconfigure.metrics;

import io.micrometer.core.instrument.binder.system.FileDescriptorMetrics;
import io.micrometer.core.instrument.binder.system.ProcessorMetrics;
import io.micrometer.core.instrument.binder.system.UptimeMetrics;
import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.boot.actuate.metrics.system.DiskSpaceMetricsBinder;

/**
 * Bean definitions for {@link SystemMetricsAutoConfiguration}.
 */
public class SystemMetricsAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'systemMetricsAutoConfiguration'.
   */
  public static BeanDefinition getSystemMetricsAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(SystemMetricsAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(SystemMetricsAutoConfiguration::new);
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'uptimeMetrics'.
   */
  private static BeanInstanceSupplier<UptimeMetrics> getUptimeMetricsInstanceSupplier() {
    return BeanInstanceSupplier.<UptimeMetrics>forFactoryMethod(SystemMetricsAutoConfiguration.class, "uptimeMetrics")
            .withGenerator((registeredBean) -> registeredBean.getBeanFactory().getBean(SystemMetricsAutoConfiguration.class).uptimeMetrics());
  }

  /**
   * Get the bean definition for 'uptimeMetrics'.
   */
  public static BeanDefinition getUptimeMetricsBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(UptimeMetrics.class);
    beanDefinition.setInstanceSupplier(getUptimeMetricsInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'processorMetrics'.
   */
  private static BeanInstanceSupplier<ProcessorMetrics> getProcessorMetricsInstanceSupplier() {
    return BeanInstanceSupplier.<ProcessorMetrics>forFactoryMethod(SystemMetricsAutoConfiguration.class, "processorMetrics")
            .withGenerator((registeredBean) -> registeredBean.getBeanFactory().getBean(SystemMetricsAutoConfiguration.class).processorMetrics());
  }

  /**
   * Get the bean definition for 'processorMetrics'.
   */
  public static BeanDefinition getProcessorMetricsBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(ProcessorMetrics.class);
    beanDefinition.setInstanceSupplier(getProcessorMetricsInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'fileDescriptorMetrics'.
   */
  private static BeanInstanceSupplier<FileDescriptorMetrics> getFileDescriptorMetricsInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<FileDescriptorMetrics>forFactoryMethod(SystemMetricsAutoConfiguration.class, "fileDescriptorMetrics")
            .withGenerator((registeredBean) -> registeredBean.getBeanFactory().getBean(SystemMetricsAutoConfiguration.class).fileDescriptorMetrics());
  }

  /**
   * Get the bean definition for 'fileDescriptorMetrics'.
   */
  public static BeanDefinition getFileDescriptorMetricsBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(FileDescriptorMetrics.class);
    beanDefinition.setInstanceSupplier(getFileDescriptorMetricsInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'diskSpaceMetrics'.
   */
  private static BeanInstanceSupplier<DiskSpaceMetricsBinder> getDiskSpaceMetricsInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<DiskSpaceMetricsBinder>forFactoryMethod(SystemMetricsAutoConfiguration.class, "diskSpaceMetrics", MetricsProperties.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(SystemMetricsAutoConfiguration.class).diskSpaceMetrics(args.get(0)));
  }

  /**
   * Get the bean definition for 'diskSpaceMetrics'.
   */
  public static BeanDefinition getDiskSpaceMetricsBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(DiskSpaceMetricsBinder.class);
    beanDefinition.setInstanceSupplier(getDiskSpaceMetricsInstanceSupplier());
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/metrics/cache/CacheMeterBinderProvidersConfiguration__BeanDefinitions.java
package org.springframework.boot.actuate.autoconfigure.metrics.cache;

import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.boot.actuate.metrics.cache.CaffeineCacheMeterBinderProvider;
import org.springframework.boot.actuate.metrics.cache.JCacheCacheMeterBinderProvider;

/**
 * Bean definitions for {@link CacheMeterBinderProvidersConfiguration}.
 */
public class CacheMeterBinderProvidersConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'cacheMeterBinderProvidersConfiguration'.
   */
  public static BeanDefinition getCacheMeterBinderProvidersConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(CacheMeterBinderProvidersConfiguration.class);
    beanDefinition.setInstanceSupplier(CacheMeterBinderProvidersConfiguration::new);
    return beanDefinition;
  }

  /**
   * Bean definitions for {@link CacheMeterBinderProvidersConfiguration.JCacheCacheMeterBinderProviderConfiguration}.
   */
  public static class JCacheCacheMeterBinderProviderConfiguration {
    /**
     * Get the bean definition for 'jCacheCacheMeterBinderProviderConfiguration'.
     */
    public static BeanDefinition getJCacheCacheMeterBinderProviderConfigurationBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(CacheMeterBinderProvidersConfiguration.JCacheCacheMeterBinderProviderConfiguration.class);
      beanDefinition.setInstanceSupplier(CacheMeterBinderProvidersConfiguration.JCacheCacheMeterBinderProviderConfiguration::new);
      return beanDefinition;
    }

    /**
     * Get the bean instance supplier for 'jCacheCacheMeterBinderProvider'.
     */
    private static BeanInstanceSupplier<JCacheCacheMeterBinderProvider> getJCacheCacheMeterBinderProviderInstanceSupplier(
        ) {
      return BeanInstanceSupplier.<JCacheCacheMeterBinderProvider>forFactoryMethod(CacheMeterBinderProvidersConfiguration.JCacheCacheMeterBinderProviderConfiguration.class, "jCacheCacheMeterBinderProvider")
              .withGenerator((registeredBean) -> registeredBean.getBeanFactory().getBean(CacheMeterBinderProvidersConfiguration.JCacheCacheMeterBinderProviderConfiguration.class).jCacheCacheMeterBinderProvider());
    }

    /**
     * Get the bean definition for 'jCacheCacheMeterBinderProvider'.
     */
    public static BeanDefinition getJCacheCacheMeterBinderProviderBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(JCacheCacheMeterBinderProvider.class);
      beanDefinition.setInstanceSupplier(getJCacheCacheMeterBinderProviderInstanceSupplier());
      return beanDefinition;
    }
  }

  /**
   * Bean definitions for {@link CacheMeterBinderProvidersConfiguration.CaffeineCacheMeterBinderProviderConfiguration}.
   */
  public static class CaffeineCacheMeterBinderProviderConfiguration {
    /**
     * Get the bean definition for 'caffeineCacheMeterBinderProviderConfiguration'.
     */
    public static BeanDefinition getCaffeineCacheMeterBinderProviderConfigurationBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(CacheMeterBinderProvidersConfiguration.CaffeineCacheMeterBinderProviderConfiguration.class);
      beanDefinition.setInstanceSupplier(CacheMeterBinderProvidersConfiguration.CaffeineCacheMeterBinderProviderConfiguration::new);
      return beanDefinition;
    }

    /**
     * Get the bean instance supplier for 'caffeineCacheMeterBinderProvider'.
     */
    private static BeanInstanceSupplier<CaffeineCacheMeterBinderProvider> getCaffeineCacheMeterBinderProviderInstanceSupplier(
        ) {
      return BeanInstanceSupplier.<CaffeineCacheMeterBinderProvider>forFactoryMethod(CacheMeterBinderProvidersConfiguration.CaffeineCacheMeterBinderProviderConfiguration.class, "caffeineCacheMeterBinderProvider")
              .withGenerator((registeredBean) -> registeredBean.getBeanFactory().getBean(CacheMeterBinderProvidersConfiguration.CaffeineCacheMeterBinderProviderConfiguration.class).caffeineCacheMeterBinderProvider());
    }

    /**
     * Get the bean definition for 'caffeineCacheMeterBinderProvider'.
     */
    public static BeanDefinition getCaffeineCacheMeterBinderProviderBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(CaffeineCacheMeterBinderProvider.class);
      beanDefinition.setInstanceSupplier(getCaffeineCacheMeterBinderProviderInstanceSupplier());
      return beanDefinition;
    }
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/metrics/cache/CacheMetricsAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.actuate.autoconfigure.metrics.cache;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link CacheMetricsAutoConfiguration}.
 */
public class CacheMetricsAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'cacheMetricsAutoConfiguration'.
   */
  public static BeanDefinition getCacheMetricsAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(CacheMetricsAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(CacheMetricsAutoConfiguration::new);
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/metrics/cache/CacheMetricsRegistrarConfiguration__BeanDefinitions.java
package org.springframework.boot.actuate.autoconfigure.metrics.cache;

import io.micrometer.core.instrument.MeterRegistry;
import java.util.Collection;
import java.util.Map;
import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.boot.actuate.metrics.cache.CacheMetricsRegistrar;

/**
 * Bean definitions for {@link CacheMetricsRegistrarConfiguration}.
 */
public class CacheMetricsRegistrarConfiguration__BeanDefinitions {
  /**
   * Get the bean instance supplier for 'org.springframework.boot.actuate.autoconfigure.metrics.cache.CacheMetricsRegistrarConfiguration'.
   */
  private static BeanInstanceSupplier<CacheMetricsRegistrarConfiguration> getCacheMetricsRegistrarConfigurationInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<CacheMetricsRegistrarConfiguration>forConstructor(MeterRegistry.class, Collection.class, Map.class)
            .withGenerator((registeredBean, args) -> new CacheMetricsRegistrarConfiguration(args.get(0), args.get(1), args.get(2)));
  }

  /**
   * Get the bean definition for 'cacheMetricsRegistrarConfiguration'.
   */
  public static BeanDefinition getCacheMetricsRegistrarConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(CacheMetricsRegistrarConfiguration.class);
    beanDefinition.setInstanceSupplier(getCacheMetricsRegistrarConfigurationInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'cacheMetricsRegistrar'.
   */
  private static BeanInstanceSupplier<CacheMetricsRegistrar> getCacheMetricsRegistrarInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<CacheMetricsRegistrar>forFactoryMethod(CacheMetricsRegistrarConfiguration.class, "cacheMetricsRegistrar")
            .withGenerator((registeredBean) -> registeredBean.getBeanFactory().getBean(CacheMetricsRegistrarConfiguration.class).cacheMetricsRegistrar());
  }

  /**
   * Get the bean definition for 'cacheMetricsRegistrar'.
   */
  public static BeanDefinition getCacheMetricsRegistrarBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(CacheMetricsRegistrar.class);
    beanDefinition.setInstanceSupplier(getCacheMetricsRegistrarInstanceSupplier());
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/metrics/data/RepositoryMetricsAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.actuate.autoconfigure.metrics.data;

import org.springframework.beans.factory.ObjectProvider;
import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties;
import org.springframework.boot.actuate.metrics.data.DefaultRepositoryTagsProvider;
import org.springframework.boot.actuate.metrics.data.MetricsRepositoryMethodInvocationListener;
import org.springframework.boot.actuate.metrics.data.RepositoryTagsProvider;

/**
 * Bean definitions for {@link RepositoryMetricsAutoConfiguration}.
 */
public class RepositoryMetricsAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean instance supplier for 'org.springframework.boot.actuate.autoconfigure.metrics.data.RepositoryMetricsAutoConfiguration'.
   */
  private static BeanInstanceSupplier<RepositoryMetricsAutoConfiguration> getRepositoryMetricsAutoConfigurationInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<RepositoryMetricsAutoConfiguration>forConstructor(MetricsProperties.class)
            .withGenerator((registeredBean, args) -> new RepositoryMetricsAutoConfiguration(args.get(0)));
  }

  /**
   * Get the bean definition for 'repositoryMetricsAutoConfiguration'.
   */
  public static BeanDefinition getRepositoryMetricsAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(RepositoryMetricsAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(getRepositoryMetricsAutoConfigurationInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'repositoryTagsProvider'.
   */
  private static BeanInstanceSupplier<DefaultRepositoryTagsProvider> getRepositoryTagsProviderInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<DefaultRepositoryTagsProvider>forFactoryMethod(RepositoryMetricsAutoConfiguration.class, "repositoryTagsProvider")
            .withGenerator((registeredBean) -> registeredBean.getBeanFactory().getBean(RepositoryMetricsAutoConfiguration.class).repositoryTagsProvider());
  }

  /**
   * Get the bean definition for 'repositoryTagsProvider'.
   */
  public static BeanDefinition getRepositoryTagsProviderBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(DefaultRepositoryTagsProvider.class);
    beanDefinition.setInstanceSupplier(getRepositoryTagsProviderInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'metricsRepositoryMethodInvocationListener'.
   */
  private static BeanInstanceSupplier<MetricsRepositoryMethodInvocationListener> getMetricsRepositoryMethodInvocationListenerInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<MetricsRepositoryMethodInvocationListener>forFactoryMethod(RepositoryMetricsAutoConfiguration.class, "metricsRepositoryMethodInvocationListener", ObjectProvider.class, RepositoryTagsProvider.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(RepositoryMetricsAutoConfiguration.class).metricsRepositoryMethodInvocationListener(args.get(0), args.get(1)));
  }

  /**
   * Get the bean definition for 'metricsRepositoryMethodInvocationListener'.
   */
  public static BeanDefinition getMetricsRepositoryMethodInvocationListenerBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(MetricsRepositoryMethodInvocationListener.class);
    beanDefinition.setInstanceSupplier(getMetricsRepositoryMethodInvocationListenerInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'metricsRepositoryMethodInvocationListenerBeanPostProcessor'.
   */
  private static BeanInstanceSupplier<MetricsRepositoryMethodInvocationListenerBeanPostProcessor> getMetricsRepositoryMethodInvocationListenerBeanPostProcessorInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<MetricsRepositoryMethodInvocationListenerBeanPostProcessor>forFactoryMethod(RepositoryMetricsAutoConfiguration.class, "metricsRepositoryMethodInvocationListenerBeanPostProcessor", ObjectProvider.class)
            .withGenerator((registeredBean, args) -> RepositoryMetricsAutoConfiguration.metricsRepositoryMethodInvocationListenerBeanPostProcessor(args.get(0)));
  }

  /**
   * Get the bean definition for 'metricsRepositoryMethodInvocationListenerBeanPostProcessor'.
   */
  public static BeanDefinition getMetricsRepositoryMethodInvocationListenerBeanPostProcessorBeanDefinition(
      ) {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(RepositoryMetricsAutoConfiguration.class);
    beanDefinition.setTargetType(MetricsRepositoryMethodInvocationListenerBeanPostProcessor.class);
    beanDefinition.setInstanceSupplier(getMetricsRepositoryMethodInvocationListenerBeanPostProcessorInstanceSupplier());
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/metrics/export/simple/SimpleMetricsExportAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.actuate.autoconfigure.metrics.export.simple;

import io.micrometer.core.instrument.Clock;
import io.micrometer.core.instrument.simple.SimpleConfig;
import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link SimpleMetricsExportAutoConfiguration}.
 */
public class SimpleMetricsExportAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'simpleMetricsExportAutoConfiguration'.
   */
  public static BeanDefinition getSimpleMetricsExportAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(SimpleMetricsExportAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(SimpleMetricsExportAutoConfiguration::new);
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'simpleMeterRegistry'.
   */
  private static BeanInstanceSupplier<SimpleMeterRegistry> getSimpleMeterRegistryInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<SimpleMeterRegistry>forFactoryMethod(SimpleMetricsExportAutoConfiguration.class, "simpleMeterRegistry", SimpleConfig.class, Clock.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(SimpleMetricsExportAutoConfiguration.class).simpleMeterRegistry(args.get(0), args.get(1)));
  }

  /**
   * Get the bean definition for 'simpleMeterRegistry'.
   */
  public static BeanDefinition getSimpleMeterRegistryBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(SimpleMeterRegistry.class);
    beanDefinition.setDestroyMethodNames("close");
    beanDefinition.setInstanceSupplier(getSimpleMeterRegistryInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'simpleConfig'.
   */
  private static BeanInstanceSupplier<SimpleConfig> getSimpleConfigInstanceSupplier() {
    return BeanInstanceSupplier.<SimpleConfig>forFactoryMethod(SimpleMetricsExportAutoConfiguration.class, "simpleConfig", SimpleProperties.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(SimpleMetricsExportAutoConfiguration.class).simpleConfig(args.get(0)));
  }

  /**
   * Get the bean definition for 'simpleConfig'.
   */
  public static BeanDefinition getSimpleConfigBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(SimpleConfig.class);
    beanDefinition.setInstanceSupplier(getSimpleConfigInstanceSupplier());
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/metrics/export/simple/SimpleProperties__BeanDefinitions.java
package org.springframework.boot.actuate.autoconfigure.metrics.export.simple;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link SimpleProperties}.
 */
public class SimpleProperties__BeanDefinitions {
  /**
   * Get the bean definition for 'simpleProperties'.
   */
  public static BeanDefinition getSimplePropertiesBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(SimpleProperties.class);
    beanDefinition.setInstanceSupplier(SimpleProperties::new);
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/metrics/integration/IntegrationMetricsAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.actuate.autoconfigure.metrics.integration;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link IntegrationMetricsAutoConfiguration}.
 */
public class IntegrationMetricsAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'integrationMetricsAutoConfiguration'.
   */
  public static BeanDefinition getIntegrationMetricsAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(IntegrationMetricsAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(IntegrationMetricsAutoConfiguration::new);
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/metrics/jdbc/DataSourcePoolMetricsAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.actuate.autoconfigure.metrics.jdbc;

import java.util.Map;
import org.springframework.beans.factory.ObjectProvider;
import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link DataSourcePoolMetricsAutoConfiguration}.
 */
public class DataSourcePoolMetricsAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'dataSourcePoolMetricsAutoConfiguration'.
   */
  public static BeanDefinition getDataSourcePoolMetricsAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(DataSourcePoolMetricsAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(DataSourcePoolMetricsAutoConfiguration::new);
    return beanDefinition;
  }

  /**
   * Bean definitions for {@link DataSourcePoolMetricsAutoConfiguration.HikariDataSourceMetricsConfiguration}.
   */
  public static class HikariDataSourceMetricsConfiguration {
    /**
     * Get the bean definition for 'hikariDataSourceMetricsConfiguration'.
     */
    public static BeanDefinition getHikariDataSourceMetricsConfigurationBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(DataSourcePoolMetricsAutoConfiguration.HikariDataSourceMetricsConfiguration.class);
      beanDefinition.setInstanceSupplier(DataSourcePoolMetricsAutoConfiguration.HikariDataSourceMetricsConfiguration::new);
      return beanDefinition;
    }

    /**
     * Get the bean instance supplier for 'hikariDataSourceMeterBinder'.
     */
    private static BeanInstanceSupplier<DataSourcePoolMetricsAutoConfiguration.HikariDataSourceMetricsConfiguration.HikariDataSourceMeterBinder> getHikariDataSourceMeterBinderInstanceSupplier(
        ) {
      return BeanInstanceSupplier.<DataSourcePoolMetricsAutoConfiguration.HikariDataSourceMetricsConfiguration.HikariDataSourceMeterBinder>forFactoryMethod(DataSourcePoolMetricsAutoConfiguration.HikariDataSourceMetricsConfiguration.class, "hikariDataSourceMeterBinder", ObjectProvider.class)
              .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(DataSourcePoolMetricsAutoConfiguration.HikariDataSourceMetricsConfiguration.class).hikariDataSourceMeterBinder(args.get(0)));
    }

    /**
     * Get the bean definition for 'hikariDataSourceMeterBinder'.
     */
    public static BeanDefinition getHikariDataSourceMeterBinderBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(DataSourcePoolMetricsAutoConfiguration.HikariDataSourceMetricsConfiguration.HikariDataSourceMeterBinder.class);
      beanDefinition.setInstanceSupplier(getHikariDataSourceMeterBinderInstanceSupplier());
      return beanDefinition;
    }
  }

  /**
   * Bean definitions for {@link DataSourcePoolMetricsAutoConfiguration.DataSourcePoolMetadataMetricsConfiguration}.
   */
  public static class DataSourcePoolMetadataMetricsConfiguration {
    /**
     * Get the bean definition for 'dataSourcePoolMetadataMetricsConfiguration'.
     */
    public static BeanDefinition getDataSourcePoolMetadataMetricsConfigurationBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(DataSourcePoolMetricsAutoConfiguration.DataSourcePoolMetadataMetricsConfiguration.class);
      beanDefinition.setInstanceSupplier(DataSourcePoolMetricsAutoConfiguration.DataSourcePoolMetadataMetricsConfiguration::new);
      return beanDefinition;
    }

    /**
     * Get the bean instance supplier for 'dataSourcePoolMetadataMeterBinder'.
     */
    private static BeanInstanceSupplier<DataSourcePoolMetricsAutoConfiguration.DataSourcePoolMetadataMetricsConfiguration.DataSourcePoolMetadataMeterBinder> getDataSourcePoolMetadataMeterBinderInstanceSupplier(
        ) {
      return BeanInstanceSupplier.<DataSourcePoolMetricsAutoConfiguration.DataSourcePoolMetadataMetricsConfiguration.DataSourcePoolMetadataMeterBinder>forFactoryMethod(DataSourcePoolMetricsAutoConfiguration.DataSourcePoolMetadataMetricsConfiguration.class, "dataSourcePoolMetadataMeterBinder", Map.class, ObjectProvider.class)
              .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(DataSourcePoolMetricsAutoConfiguration.DataSourcePoolMetadataMetricsConfiguration.class).dataSourcePoolMetadataMeterBinder(args.get(0), args.get(1)));
    }

    /**
     * Get the bean definition for 'dataSourcePoolMetadataMeterBinder'.
     */
    public static BeanDefinition getDataSourcePoolMetadataMeterBinderBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(DataSourcePoolMetricsAutoConfiguration.DataSourcePoolMetadataMetricsConfiguration.DataSourcePoolMetadataMeterBinder.class);
      beanDefinition.setInstanceSupplier(getDataSourcePoolMetadataMeterBinderInstanceSupplier());
      return beanDefinition;
    }
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/metrics/startup/StartupTimeMetricsListenerAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.actuate.autoconfigure.metrics.startup;

import io.micrometer.core.instrument.MeterRegistry;
import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.boot.actuate.metrics.startup.StartupTimeMetricsListener;

/**
 * Bean definitions for {@link StartupTimeMetricsListenerAutoConfiguration}.
 */
public class StartupTimeMetricsListenerAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'startupTimeMetricsListenerAutoConfiguration'.
   */
  public static BeanDefinition getStartupTimeMetricsListenerAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(StartupTimeMetricsListenerAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(StartupTimeMetricsListenerAutoConfiguration::new);
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'startupTimeMetrics'.
   */
  private static BeanInstanceSupplier<StartupTimeMetricsListener> getStartupTimeMetricsInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<StartupTimeMetricsListener>forFactoryMethod(StartupTimeMetricsListenerAutoConfiguration.class, "startupTimeMetrics", MeterRegistry.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(StartupTimeMetricsListenerAutoConfiguration.class).startupTimeMetrics(args.get(0)));
  }

  /**
   * Get the bean definition for 'startupTimeMetrics'.
   */
  public static BeanDefinition getStartupTimeMetricsBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(StartupTimeMetricsListener.class);
    beanDefinition.setInstanceSupplier(getStartupTimeMetricsInstanceSupplier());
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/metrics/task/TaskExecutorMetricsAutoConfiguration__Autowiring.java
package org.springframework.boot.actuate.autoconfigure.metrics.task;

import io.micrometer.core.instrument.MeterRegistry;
import java.util.Map;
import org.springframework.beans.factory.aot.AutowiredMethodArgumentsResolver;
import org.springframework.beans.factory.support.RegisteredBean;

/**
 * Autowiring for {@link TaskExecutorMetricsAutoConfiguration}.
 */
public class TaskExecutorMetricsAutoConfiguration__Autowiring {
  /**
   * Apply the autowiring.
   */
  public static TaskExecutorMetricsAutoConfiguration apply(RegisteredBean registeredBean,
      TaskExecutorMetricsAutoConfiguration instance) {
    AutowiredMethodArgumentsResolver.forRequiredMethod("bindTaskExecutorsToRegistry", Map.class, MeterRegistry.class).resolve(registeredBean, args -> instance.bindTaskExecutorsToRegistry(args.get(0), args.get(1)));
    return instance;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/metrics/task/TaskExecutorMetricsAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.actuate.autoconfigure.metrics.task;

import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.InstanceSupplier;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.boot.LazyInitializationExcludeFilter;

/**
 * Bean definitions for {@link TaskExecutorMetricsAutoConfiguration}.
 */
public class TaskExecutorMetricsAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'taskExecutorMetricsAutoConfiguration'.
   */
  public static BeanDefinition getTaskExecutorMetricsAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(TaskExecutorMetricsAutoConfiguration.class);
    InstanceSupplier<TaskExecutorMetricsAutoConfiguration> instanceSupplier = InstanceSupplier.using(TaskExecutorMetricsAutoConfiguration::new);
    instanceSupplier = instanceSupplier.andThen(TaskExecutorMetricsAutoConfiguration__Autowiring::apply);
    beanDefinition.setInstanceSupplier(instanceSupplier);
    return beanDefinition;
  }

  /**
   * Get the bean definition for 'eagerTaskExecutorMetrics'.
   */
  public static BeanDefinition getEagerTaskExecutorMetricsBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(TaskExecutorMetricsAutoConfiguration.class);
    beanDefinition.setTargetType(LazyInitializationExcludeFilter.class);
    beanDefinition.setInstanceSupplier(BeanInstanceSupplier.<LazyInitializationExcludeFilter>forFactoryMethod(TaskExecutorMetricsAutoConfiguration.class, "eagerTaskExecutorMetrics").withGenerator((registeredBean) -> TaskExecutorMetricsAutoConfiguration.eagerTaskExecutorMetrics()));
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/metrics/web/tomcat/TomcatMetricsAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.actuate.autoconfigure.metrics.web.tomcat;

import io.micrometer.core.instrument.MeterRegistry;
import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.boot.actuate.metrics.web.tomcat.TomcatMetricsBinder;

/**
 * Bean definitions for {@link TomcatMetricsAutoConfiguration}.
 */
public class TomcatMetricsAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'tomcatMetricsAutoConfiguration'.
   */
  public static BeanDefinition getTomcatMetricsAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(TomcatMetricsAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(TomcatMetricsAutoConfiguration::new);
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'tomcatMetricsBinder'.
   */
  private static BeanInstanceSupplier<TomcatMetricsBinder> getTomcatMetricsBinderInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<TomcatMetricsBinder>forFactoryMethod(TomcatMetricsAutoConfiguration.class, "tomcatMetricsBinder", MeterRegistry.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(TomcatMetricsAutoConfiguration.class).tomcatMetricsBinder(args.get(0)));
  }

  /**
   * Get the bean definition for 'tomcatMetricsBinder'.
   */
  public static BeanDefinition getTomcatMetricsBinderBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(TomcatMetricsBinder.class);
    beanDefinition.setInstanceSupplier(getTomcatMetricsBinderInstanceSupplier());
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/observation/ObservationAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.actuate.autoconfigure.observation;

import io.micrometer.core.instrument.MeterRegistry;
import io.micrometer.core.instrument.observation.DefaultMeterObservationHandler;
import io.micrometer.observation.ObservationRegistry;
import io.micrometer.observation.aop.ObservedAspect;
import org.springframework.beans.factory.ObjectProvider;
import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link ObservationAutoConfiguration}.
 */
public class ObservationAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'observationAutoConfiguration'.
   */
  public static BeanDefinition getObservationAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(ObservationAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(ObservationAutoConfiguration::new);
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'observationRegistryPostProcessor'.
   */
  private static BeanInstanceSupplier<ObservationRegistryPostProcessor> getObservationRegistryPostProcessorInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<ObservationRegistryPostProcessor>forFactoryMethod(ObservationAutoConfiguration.class, "observationRegistryPostProcessor", ObjectProvider.class, ObjectProvider.class, ObjectProvider.class, ObjectProvider.class, ObjectProvider.class, ObjectProvider.class)
            .withGenerator((registeredBean, args) -> ObservationAutoConfiguration.observationRegistryPostProcessor(args.get(0), args.get(1), args.get(2), args.get(3), args.get(4), args.get(5)));
  }

  /**
   * Get the bean definition for 'observationRegistryPostProcessor'.
   */
  public static BeanDefinition getObservationRegistryPostProcessorBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(ObservationAutoConfiguration.class);
    beanDefinition.setTargetType(ObservationRegistryPostProcessor.class);
    beanDefinition.setInstanceSupplier(getObservationRegistryPostProcessorInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'observationRegistry'.
   */
  private static BeanInstanceSupplier<ObservationRegistry> getObservationRegistryInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<ObservationRegistry>forFactoryMethod(ObservationAutoConfiguration.class, "observationRegistry")
            .withGenerator((registeredBean) -> registeredBean.getBeanFactory().getBean(ObservationAutoConfiguration.class).observationRegistry());
  }

  /**
   * Get the bean definition for 'observationRegistry'.
   */
  public static BeanDefinition getObservationRegistryBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(ObservationRegistry.class);
    beanDefinition.setInstanceSupplier(getObservationRegistryInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'propertiesObservationFilter'.
   */
  private static BeanInstanceSupplier<PropertiesObservationFilterPredicate> getPropertiesObservationFilterInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<PropertiesObservationFilterPredicate>forFactoryMethod(ObservationAutoConfiguration.class, "propertiesObservationFilter", ObservationProperties.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(ObservationAutoConfiguration.class).propertiesObservationFilter(args.get(0)));
  }

  /**
   * Get the bean definition for 'propertiesObservationFilter'.
   */
  public static BeanDefinition getPropertiesObservationFilterBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(PropertiesObservationFilterPredicate.class);
    beanDefinition.setInstanceSupplier(getPropertiesObservationFilterInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Bean definitions for {@link ObservationAutoConfiguration.ObservedAspectConfiguration}.
   */
  public static class ObservedAspectConfiguration {
    /**
     * Get the bean definition for 'observedAspectConfiguration'.
     */
    public static BeanDefinition getObservedAspectConfigurationBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(ObservationAutoConfiguration.ObservedAspectConfiguration.class);
      beanDefinition.setInstanceSupplier(ObservationAutoConfiguration.ObservedAspectConfiguration::new);
      return beanDefinition;
    }

    /**
     * Get the bean instance supplier for 'observedAspect'.
     */
    private static BeanInstanceSupplier<ObservedAspect> getObservedAspectInstanceSupplier() {
      return BeanInstanceSupplier.<ObservedAspect>forFactoryMethod(ObservationAutoConfiguration.ObservedAspectConfiguration.class, "observedAspect", ObservationRegistry.class)
              .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(ObservationAutoConfiguration.ObservedAspectConfiguration.class).observedAspect(args.get(0)));
    }

    /**
     * Get the bean definition for 'observedAspect'.
     */
    public static BeanDefinition getObservedAspectBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(ObservedAspect.class);
      beanDefinition.setInstanceSupplier(getObservedAspectInstanceSupplier());
      return beanDefinition;
    }
  }

  /**
   * Bean definitions for {@link ObservationAutoConfiguration.OnlyMetricsConfiguration}.
   */
  public static class OnlyMetricsConfiguration {
    /**
     * Get the bean definition for 'onlyMetricsConfiguration'.
     */
    public static BeanDefinition getOnlyMetricsConfigurationBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(ObservationAutoConfiguration.OnlyMetricsConfiguration.class);
      beanDefinition.setInstanceSupplier(ObservationAutoConfiguration.OnlyMetricsConfiguration::new);
      return beanDefinition;
    }

    /**
     * Get the bean instance supplier for 'metricsObservationHandlerGrouping'.
     */
    private static BeanInstanceSupplier<ObservationHandlerGrouping> getMetricsObservationHandlerGroupingInstanceSupplier(
        ) {
      return BeanInstanceSupplier.<ObservationHandlerGrouping>forFactoryMethod(ObservationAutoConfiguration.OnlyMetricsConfiguration.class, "metricsObservationHandlerGrouping")
              .withGenerator((registeredBean) -> registeredBean.getBeanFactory().getBean(ObservationAutoConfiguration.OnlyMetricsConfiguration.class).metricsObservationHandlerGrouping());
    }

    /**
     * Get the bean definition for 'metricsObservationHandlerGrouping'.
     */
    public static BeanDefinition getMetricsObservationHandlerGroupingBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(ObservationHandlerGrouping.class);
      beanDefinition.setInstanceSupplier(getMetricsObservationHandlerGroupingInstanceSupplier());
      return beanDefinition;
    }
  }

  /**
   * Bean definitions for {@link ObservationAutoConfiguration.MeterObservationHandlerConfiguration}.
   */
  public static class MeterObservationHandlerConfiguration {
    /**
     * Get the bean definition for 'meterObservationHandlerConfiguration'.
     */
    public static BeanDefinition getMeterObservationHandlerConfigurationBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(ObservationAutoConfiguration.MeterObservationHandlerConfiguration.class);
      beanDefinition.setInstanceSupplier(ObservationAutoConfiguration.MeterObservationHandlerConfiguration::new);
      return beanDefinition;
    }

    /**
     * Bean definitions for {@link ObservationAutoConfiguration.MeterObservationHandlerConfiguration.OnlyMetricsMeterObservationHandlerConfiguration}.
     */
    public static class OnlyMetricsMeterObservationHandlerConfiguration {
      /**
       * Get the bean definition for 'onlyMetricsMeterObservationHandlerConfiguration'.
       */
      public static BeanDefinition getOnlyMetricsMeterObservationHandlerConfigurationBeanDefinition(
          ) {
        RootBeanDefinition beanDefinition = new RootBeanDefinition(ObservationAutoConfiguration.MeterObservationHandlerConfiguration.OnlyMetricsMeterObservationHandlerConfiguration.class);
        beanDefinition.setInstanceSupplier(ObservationAutoConfiguration.MeterObservationHandlerConfiguration.OnlyMetricsMeterObservationHandlerConfiguration::new);
        return beanDefinition;
      }

      /**
       * Get the bean instance supplier for 'defaultMeterObservationHandler'.
       */
      private static BeanInstanceSupplier<DefaultMeterObservationHandler> getDefaultMeterObservationHandlerInstanceSupplier(
          ) {
        return BeanInstanceSupplier.<DefaultMeterObservationHandler>forFactoryMethod(ObservationAutoConfiguration.MeterObservationHandlerConfiguration.OnlyMetricsMeterObservationHandlerConfiguration.class, "defaultMeterObservationHandler", MeterRegistry.class)
                .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(ObservationAutoConfiguration.MeterObservationHandlerConfiguration.OnlyMetricsMeterObservationHandlerConfiguration.class).defaultMeterObservationHandler(args.get(0)));
      }

      /**
       * Get the bean definition for 'defaultMeterObservationHandler'.
       */
      public static BeanDefinition getDefaultMeterObservationHandlerBeanDefinition() {
        RootBeanDefinition beanDefinition = new RootBeanDefinition(DefaultMeterObservationHandler.class);
        beanDefinition.setInstanceSupplier(getDefaultMeterObservationHandlerInstanceSupplier());
        return beanDefinition;
      }
    }
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/observation/ObservationProperties__BeanDefinitions.java
package org.springframework.boot.actuate.autoconfigure.observation;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link ObservationProperties}.
 */
public class ObservationProperties__BeanDefinitions {
  /**
   * Get the bean definition for 'observationProperties'.
   */
  public static BeanDefinition getObservationPropertiesBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(ObservationProperties.class);
    beanDefinition.setInstanceSupplier(ObservationProperties::new);
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/observation/web/client/HttpClientObservationsAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.actuate.autoconfigure.observation.web.client;

import io.micrometer.core.instrument.config.MeterFilter;
import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties;
import org.springframework.boot.actuate.autoconfigure.observation.ObservationProperties;

/**
 * Bean definitions for {@link HttpClientObservationsAutoConfiguration}.
 */
public class HttpClientObservationsAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'httpClientObservationsAutoConfiguration'.
   */
  public static BeanDefinition getHttpClientObservationsAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(HttpClientObservationsAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(HttpClientObservationsAutoConfiguration::new);
    return beanDefinition;
  }

  /**
   * Bean definitions for {@link HttpClientObservationsAutoConfiguration.MeterFilterConfiguration}.
   */
  public static class MeterFilterConfiguration {
    /**
     * Get the bean definition for 'meterFilterConfiguration'.
     */
    public static BeanDefinition getMeterFilterConfigurationBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(HttpClientObservationsAutoConfiguration.MeterFilterConfiguration.class);
      beanDefinition.setInstanceSupplier(HttpClientObservationsAutoConfiguration.MeterFilterConfiguration::new);
      return beanDefinition;
    }

    /**
     * Get the bean instance supplier for 'metricsHttpClientUriTagFilter'.
     */
    private static BeanInstanceSupplier<MeterFilter> getMetricsHttpClientUriTagFilterInstanceSupplier(
        ) {
      return BeanInstanceSupplier.<MeterFilter>forFactoryMethod(HttpClientObservationsAutoConfiguration.MeterFilterConfiguration.class, "metricsHttpClientUriTagFilter", ObservationProperties.class, MetricsProperties.class)
              .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(HttpClientObservationsAutoConfiguration.MeterFilterConfiguration.class).metricsHttpClientUriTagFilter(args.get(0), args.get(1)));
    }

    /**
     * Get the bean definition for 'metricsHttpClientUriTagFilter'.
     */
    public static BeanDefinition getMetricsHttpClientUriTagFilterBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(MeterFilter.class);
      beanDefinition.setInstanceSupplier(getMetricsHttpClientUriTagFilterInstanceSupplier());
      return beanDefinition;
    }
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/observation/web/client/RestClientObservationConfiguration__BeanDefinitions.java
package org.springframework.boot.actuate.autoconfigure.observation.web.client;

import io.micrometer.observation.ObservationRegistry;
import org.springframework.beans.factory.ObjectProvider;
import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.boot.actuate.autoconfigure.observation.ObservationProperties;
import org.springframework.boot.web.client.RestClientCustomizer;

/**
 * Bean definitions for {@link RestClientObservationConfiguration}.
 */
public class RestClientObservationConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'restClientObservationConfiguration'.
   */
  public static BeanDefinition getRestClientObservationConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(RestClientObservationConfiguration.class);
    beanDefinition.setInstanceSupplier(RestClientObservationConfiguration::new);
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'observationRestClientCustomizer'.
   */
  private static BeanInstanceSupplier<RestClientCustomizer> getObservationRestClientCustomizerInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<RestClientCustomizer>forFactoryMethod(RestClientObservationConfiguration.class, "observationRestClientCustomizer", ObservationRegistry.class, ObjectProvider.class, ObservationProperties.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(RestClientObservationConfiguration.class).observationRestClientCustomizer(args.get(0), args.get(1), args.get(2)));
  }

  /**
   * Get the bean definition for 'observationRestClientCustomizer'.
   */
  public static BeanDefinition getObservationRestClientCustomizerBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(RestClientCustomizer.class);
    beanDefinition.setInstanceSupplier(getObservationRestClientCustomizerInstanceSupplier());
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/observation/web/client/RestTemplateObservationConfiguration__BeanDefinitions.java
package org.springframework.boot.actuate.autoconfigure.observation.web.client;

import io.micrometer.observation.ObservationRegistry;
import org.springframework.beans.factory.ObjectProvider;
import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.boot.actuate.autoconfigure.observation.ObservationProperties;
import org.springframework.boot.actuate.metrics.web.client.ObservationRestTemplateCustomizer;

/**
 * Bean definitions for {@link RestTemplateObservationConfiguration}.
 */
public class RestTemplateObservationConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'restTemplateObservationConfiguration'.
   */
  public static BeanDefinition getRestTemplateObservationConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(RestTemplateObservationConfiguration.class);
    beanDefinition.setInstanceSupplier(RestTemplateObservationConfiguration::new);
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'observationRestTemplateCustomizer'.
   */
  private static BeanInstanceSupplier<ObservationRestTemplateCustomizer> getObservationRestTemplateCustomizerInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<ObservationRestTemplateCustomizer>forFactoryMethod(RestTemplateObservationConfiguration.class, "observationRestTemplateCustomizer", ObservationRegistry.class, ObjectProvider.class, ObservationProperties.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(RestTemplateObservationConfiguration.class).observationRestTemplateCustomizer(args.get(0), args.get(1), args.get(2)));
  }

  /**
   * Get the bean definition for 'observationRestTemplateCustomizer'.
   */
  public static BeanDefinition getObservationRestTemplateCustomizerBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(ObservationRestTemplateCustomizer.class);
    beanDefinition.setInstanceSupplier(getObservationRestTemplateCustomizerInstanceSupplier());
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/observation/web/servlet/WebMvcObservationAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.actuate.autoconfigure.observation.web.servlet;

import io.micrometer.core.instrument.config.MeterFilter;
import io.micrometer.observation.ObservationRegistry;
import org.springframework.beans.factory.ObjectProvider;
import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties;
import org.springframework.boot.actuate.autoconfigure.observation.ObservationProperties;
import org.springframework.boot.web.servlet.FilterRegistrationBean;
import org.springframework.core.ResolvableType;
import org.springframework.web.filter.ServerHttpObservationFilter;

/**
 * Bean definitions for {@link WebMvcObservationAutoConfiguration}.
 */
public class WebMvcObservationAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'webMvcObservationAutoConfiguration'.
   */
  public static BeanDefinition getWebMvcObservationAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(WebMvcObservationAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(WebMvcObservationAutoConfiguration::new);
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'webMvcObservationFilter'.
   */
  private static BeanInstanceSupplier<FilterRegistrationBean> getWebMvcObservationFilterInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<FilterRegistrationBean>forFactoryMethod(WebMvcObservationAutoConfiguration.class, "webMvcObservationFilter", ObservationRegistry.class, ObjectProvider.class, ObservationProperties.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(WebMvcObservationAutoConfiguration.class).webMvcObservationFilter(args.get(0), args.get(1), args.get(2)));
  }

  /**
   * Get the bean definition for 'webMvcObservationFilter'.
   */
  public static BeanDefinition getWebMvcObservationFilterBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(FilterRegistrationBean.class);
    beanDefinition.setTargetType(ResolvableType.forClassWithGenerics(FilterRegistrationBean.class, ServerHttpObservationFilter.class));
    beanDefinition.setInstanceSupplier(getWebMvcObservationFilterInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Bean definitions for {@link WebMvcObservationAutoConfiguration.MeterFilterConfiguration}.
   */
  public static class MeterFilterConfiguration {
    /**
     * Get the bean definition for 'meterFilterConfiguration'.
     */
    public static BeanDefinition getMeterFilterConfigurationBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(WebMvcObservationAutoConfiguration.MeterFilterConfiguration.class);
      beanDefinition.setInstanceSupplier(WebMvcObservationAutoConfiguration.MeterFilterConfiguration::new);
      return beanDefinition;
    }

    /**
     * Get the bean instance supplier for 'metricsHttpServerUriTagFilter'.
     */
    private static BeanInstanceSupplier<MeterFilter> getMetricsHttpServerUriTagFilterInstanceSupplier(
        ) {
      return BeanInstanceSupplier.<MeterFilter>forFactoryMethod(WebMvcObservationAutoConfiguration.MeterFilterConfiguration.class, "metricsHttpServerUriTagFilter", ObservationProperties.class, MetricsProperties.class)
              .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(WebMvcObservationAutoConfiguration.MeterFilterConfiguration.class).metricsHttpServerUriTagFilter(args.get(0), args.get(1)));
    }

    /**
     * Get the bean definition for 'metricsHttpServerUriTagFilter'.
     */
    public static BeanDefinition getMetricsHttpServerUriTagFilterBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(MeterFilter.class);
      beanDefinition.setInstanceSupplier(getMetricsHttpServerUriTagFilterInstanceSupplier());
      return beanDefinition;
    }
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/scheduling/ScheduledTasksEndpointAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.actuate.autoconfigure.scheduling;

import org.springframework.beans.factory.ObjectProvider;
import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.boot.actuate.scheduling.ScheduledTasksEndpoint;

/**
 * Bean definitions for {@link ScheduledTasksEndpointAutoConfiguration}.
 */
public class ScheduledTasksEndpointAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'scheduledTasksEndpointAutoConfiguration'.
   */
  public static BeanDefinition getScheduledTasksEndpointAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(ScheduledTasksEndpointAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(ScheduledTasksEndpointAutoConfiguration::new);
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'scheduledTasksEndpoint'.
   */
  private static BeanInstanceSupplier<ScheduledTasksEndpoint> getScheduledTasksEndpointInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<ScheduledTasksEndpoint>forFactoryMethod(ScheduledTasksEndpointAutoConfiguration.class, "scheduledTasksEndpoint", ObjectProvider.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(ScheduledTasksEndpointAutoConfiguration.class).scheduledTasksEndpoint(args.get(0)));
  }

  /**
   * Get the bean definition for 'scheduledTasksEndpoint'.
   */
  public static BeanDefinition getScheduledTasksEndpointBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(ScheduledTasksEndpoint.class);
    beanDefinition.setInstanceSupplier(getScheduledTasksEndpointInstanceSupplier());
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/scheduling/ScheduledTasksObservabilityAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.actuate.autoconfigure.scheduling;

import io.micrometer.observation.ObservationRegistry;
import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link ScheduledTasksObservabilityAutoConfiguration}.
 */
public class ScheduledTasksObservabilityAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'scheduledTasksObservabilityAutoConfiguration'.
   */
  public static BeanDefinition getScheduledTasksObservabilityAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(ScheduledTasksObservabilityAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(ScheduledTasksObservabilityAutoConfiguration::new);
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'observabilitySchedulingConfigurer'.
   */
  private static BeanInstanceSupplier<ScheduledTasksObservabilityAutoConfiguration.ObservabilitySchedulingConfigurer> getObservabilitySchedulingConfigurerInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<ScheduledTasksObservabilityAutoConfiguration.ObservabilitySchedulingConfigurer>forFactoryMethod(ScheduledTasksObservabilityAutoConfiguration.class, "observabilitySchedulingConfigurer", ObservationRegistry.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(ScheduledTasksObservabilityAutoConfiguration.class).observabilitySchedulingConfigurer(args.get(0)));
  }

  /**
   * Get the bean definition for 'observabilitySchedulingConfigurer'.
   */
  public static BeanDefinition getObservabilitySchedulingConfigurerBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(ScheduledTasksObservabilityAutoConfiguration.ObservabilitySchedulingConfigurer.class);
    beanDefinition.setInstanceSupplier(getObservabilitySchedulingConfigurerInstanceSupplier());
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/system/DiskSpaceHealthContributorAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.actuate.autoconfigure.system;

import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.boot.actuate.system.DiskSpaceHealthIndicator;

/**
 * Bean definitions for {@link DiskSpaceHealthContributorAutoConfiguration}.
 */
public class DiskSpaceHealthContributorAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'diskSpaceHealthContributorAutoConfiguration'.
   */
  public static BeanDefinition getDiskSpaceHealthContributorAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(DiskSpaceHealthContributorAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(DiskSpaceHealthContributorAutoConfiguration::new);
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'diskSpaceHealthIndicator'.
   */
  private static BeanInstanceSupplier<DiskSpaceHealthIndicator> getDiskSpaceHealthIndicatorInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<DiskSpaceHealthIndicator>forFactoryMethod(DiskSpaceHealthContributorAutoConfiguration.class, "diskSpaceHealthIndicator", DiskSpaceHealthIndicatorProperties.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(DiskSpaceHealthContributorAutoConfiguration.class).diskSpaceHealthIndicator(args.get(0)));
  }

  /**
   * Get the bean definition for 'diskSpaceHealthIndicator'.
   */
  public static BeanDefinition getDiskSpaceHealthIndicatorBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(DiskSpaceHealthIndicator.class);
    beanDefinition.setInstanceSupplier(getDiskSpaceHealthIndicatorInstanceSupplier());
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/system/DiskSpaceHealthIndicatorProperties__BeanDefinitions.java
package org.springframework.boot.actuate.autoconfigure.system;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link DiskSpaceHealthIndicatorProperties}.
 */
public class DiskSpaceHealthIndicatorProperties__BeanDefinitions {
  /**
   * Get the bean definition for 'diskSpaceHealthIndicatorProperties'.
   */
  public static BeanDefinition getDiskSpaceHealthIndicatorPropertiesBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(DiskSpaceHealthIndicatorProperties.class);
    beanDefinition.setInstanceSupplier(DiskSpaceHealthIndicatorProperties::new);
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/web/exchanges/HttpExchangesEndpointAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.actuate.autoconfigure.web.exchanges;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link HttpExchangesEndpointAutoConfiguration}.
 */
public class HttpExchangesEndpointAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'httpExchangesEndpointAutoConfiguration'.
   */
  public static BeanDefinition getHttpExchangesEndpointAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(HttpExchangesEndpointAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(HttpExchangesEndpointAutoConfiguration::new);
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/web/mappings/MappingsEndpointAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.actuate.autoconfigure.web.mappings;

import org.springframework.beans.factory.ObjectProvider;
import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.boot.actuate.web.mappings.MappingsEndpoint;
import org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider;
import org.springframework.boot.actuate.web.mappings.servlet.FiltersMappingDescriptionProvider;
import org.springframework.boot.actuate.web.mappings.servlet.ServletsMappingDescriptionProvider;
import org.springframework.context.ApplicationContext;

/**
 * Bean definitions for {@link MappingsEndpointAutoConfiguration}.
 */
public class MappingsEndpointAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'mappingsEndpointAutoConfiguration'.
   */
  public static BeanDefinition getMappingsEndpointAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(MappingsEndpointAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(MappingsEndpointAutoConfiguration::new);
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'mappingsEndpoint'.
   */
  private static BeanInstanceSupplier<MappingsEndpoint> getMappingsEndpointInstanceSupplier() {
    return BeanInstanceSupplier.<MappingsEndpoint>forFactoryMethod(MappingsEndpointAutoConfiguration.class, "mappingsEndpoint", ApplicationContext.class, ObjectProvider.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(MappingsEndpointAutoConfiguration.class).mappingsEndpoint(args.get(0), args.get(1)));
  }

  /**
   * Get the bean definition for 'mappingsEndpoint'.
   */
  public static BeanDefinition getMappingsEndpointBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(MappingsEndpoint.class);
    beanDefinition.setInstanceSupplier(getMappingsEndpointInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Bean definitions for {@link MappingsEndpointAutoConfiguration.ServletWebConfiguration}.
   */
  public static class ServletWebConfiguration {
    /**
     * Get the bean definition for 'servletWebConfiguration'.
     */
    public static BeanDefinition getServletWebConfigurationBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(MappingsEndpointAutoConfiguration.ServletWebConfiguration.class);
      beanDefinition.setInstanceSupplier(MappingsEndpointAutoConfiguration.ServletWebConfiguration::new);
      return beanDefinition;
    }

    /**
     * Get the bean instance supplier for 'servletMappingDescriptionProvider'.
     */
    private static BeanInstanceSupplier<ServletsMappingDescriptionProvider> getServletMappingDescriptionProviderInstanceSupplier(
        ) {
      return BeanInstanceSupplier.<ServletsMappingDescriptionProvider>forFactoryMethod(MappingsEndpointAutoConfiguration.ServletWebConfiguration.class, "servletMappingDescriptionProvider")
              .withGenerator((registeredBean) -> registeredBean.getBeanFactory().getBean(MappingsEndpointAutoConfiguration.ServletWebConfiguration.class).servletMappingDescriptionProvider());
    }

    /**
     * Get the bean definition for 'servletMappingDescriptionProvider'.
     */
    public static BeanDefinition getServletMappingDescriptionProviderBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(ServletsMappingDescriptionProvider.class);
      beanDefinition.setInstanceSupplier(getServletMappingDescriptionProviderInstanceSupplier());
      return beanDefinition;
    }

    /**
     * Get the bean instance supplier for 'filterMappingDescriptionProvider'.
     */
    private static BeanInstanceSupplier<FiltersMappingDescriptionProvider> getFilterMappingDescriptionProviderInstanceSupplier(
        ) {
      return BeanInstanceSupplier.<FiltersMappingDescriptionProvider>forFactoryMethod(MappingsEndpointAutoConfiguration.ServletWebConfiguration.class, "filterMappingDescriptionProvider")
              .withGenerator((registeredBean) -> registeredBean.getBeanFactory().getBean(MappingsEndpointAutoConfiguration.ServletWebConfiguration.class).filterMappingDescriptionProvider());
    }

    /**
     * Get the bean definition for 'filterMappingDescriptionProvider'.
     */
    public static BeanDefinition getFilterMappingDescriptionProviderBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(FiltersMappingDescriptionProvider.class);
      beanDefinition.setInstanceSupplier(getFilterMappingDescriptionProviderInstanceSupplier());
      return beanDefinition;
    }

    /**
     * Bean definitions for {@link MappingsEndpointAutoConfiguration.ServletWebConfiguration.SpringMvcConfiguration}.
     */
    public static class SpringMvcConfiguration {
      /**
       * Get the bean definition for 'springMvcConfiguration'.
       */
      public static BeanDefinition getSpringMvcConfigurationBeanDefinition() {
        RootBeanDefinition beanDefinition = new RootBeanDefinition(MappingsEndpointAutoConfiguration.ServletWebConfiguration.SpringMvcConfiguration.class);
        beanDefinition.setInstanceSupplier(MappingsEndpointAutoConfiguration.ServletWebConfiguration.SpringMvcConfiguration::new);
        return beanDefinition;
      }

      /**
       * Get the bean instance supplier for 'dispatcherServletMappingDescriptionProvider'.
       */
      private static BeanInstanceSupplier<DispatcherServletsMappingDescriptionProvider> getDispatcherServletMappingDescriptionProviderInstanceSupplier(
          ) {
        return BeanInstanceSupplier.<DispatcherServletsMappingDescriptionProvider>forFactoryMethod(MappingsEndpointAutoConfiguration.ServletWebConfiguration.SpringMvcConfiguration.class, "dispatcherServletMappingDescriptionProvider")
                .withGenerator((registeredBean) -> registeredBean.getBeanFactory().getBean(MappingsEndpointAutoConfiguration.ServletWebConfiguration.SpringMvcConfiguration.class).dispatcherServletMappingDescriptionProvider());
      }

      /**
       * Get the bean definition for 'dispatcherServletMappingDescriptionProvider'.
       */
      public static BeanDefinition getDispatcherServletMappingDescriptionProviderBeanDefinition() {
        RootBeanDefinition beanDefinition = new RootBeanDefinition(DispatcherServletsMappingDescriptionProvider.class);
        beanDefinition.setInstanceSupplier(getDispatcherServletMappingDescriptionProviderInstanceSupplier());
        return beanDefinition;
      }
    }
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/web/server/ManagementContextAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.actuate.autoconfigure.web.server;

import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.core.env.Environment;

/**
 * Bean definitions for {@link ManagementContextAutoConfiguration}.
 */
public class ManagementContextAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'managementContextAutoConfiguration'.
   */
  public static BeanDefinition getManagementContextAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(ManagementContextAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(ManagementContextAutoConfiguration::new);
    return beanDefinition;
  }

  /**
   * Bean definitions for {@link ManagementContextAutoConfiguration.SameManagementContextConfiguration}.
   */
  public static class SameManagementContextConfiguration {
    /**
     * Get the bean instance supplier for 'org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration$SameManagementContextConfiguration'.
     */
    private static BeanInstanceSupplier<ManagementContextAutoConfiguration.SameManagementContextConfiguration> getSameManagementContextConfigurationInstanceSupplier(
        ) {
      return BeanInstanceSupplier.<ManagementContextAutoConfiguration.SameManagementContextConfiguration>forConstructor(Environment.class)
              .withGenerator((registeredBean, args) -> new ManagementContextAutoConfiguration.SameManagementContextConfiguration(args.get(0)));
    }

    /**
     * Get the bean definition for 'sameManagementContextConfiguration'.
     */
    public static BeanDefinition getSameManagementContextConfigurationBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(ManagementContextAutoConfiguration.SameManagementContextConfiguration.class);
      beanDefinition.setInstanceSupplier(getSameManagementContextConfigurationInstanceSupplier());
      return beanDefinition;
    }

    /**
     * Bean definitions for {@link ManagementContextAutoConfiguration.SameManagementContextConfiguration.EnableSameManagementContextConfiguration}.
     */
    public static class EnableSameManagementContextConfiguration {
      /**
       * Get the bean definition for 'enableSameManagementContextConfiguration'.
       */
      public static BeanDefinition getEnableSameManagementContextConfigurationBeanDefinition() {
        RootBeanDefinition beanDefinition = new RootBeanDefinition(ManagementContextAutoConfiguration.SameManagementContextConfiguration.EnableSameManagementContextConfiguration.class);
        beanDefinition.setInstanceSupplier(ManagementContextAutoConfiguration.SameManagementContextConfiguration.EnableSameManagementContextConfiguration::new);
        return beanDefinition;
      }
    }
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/web/server/ManagementServerProperties__BeanDefinitions.java
package org.springframework.boot.actuate.autoconfigure.web.server;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link ManagementServerProperties}.
 */
public class ManagementServerProperties__BeanDefinitions {
  /**
   * Get the bean definition for 'managementServerProperties'.
   */
  public static BeanDefinition getManagementServerPropertiesBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(ManagementServerProperties.class);
    beanDefinition.setInstanceSupplier(ManagementServerProperties::new);
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/actuate/autoconfigure/web/servlet/ServletManagementContextAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.actuate.autoconfigure.web.servlet;

import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties;
import org.springframework.boot.actuate.autoconfigure.web.ManagementContextFactory;

/**
 * Bean definitions for {@link ServletManagementContextAutoConfiguration}.
 */
public class ServletManagementContextAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'servletManagementContextAutoConfiguration'.
   */
  public static BeanDefinition getServletManagementContextAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(ServletManagementContextAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(ServletManagementContextAutoConfiguration::new);
    return beanDefinition;
  }

  /**
   * Get the bean definition for 'servletWebChildContextFactory'.
   */
  public static BeanDefinition getServletWebChildContextFactoryBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(ServletManagementContextAutoConfiguration.class);
    beanDefinition.setTargetType(ManagementContextFactory.class);
    beanDefinition.setInstanceSupplier(BeanInstanceSupplier.<ManagementContextFactory>forFactoryMethod(ServletManagementContextAutoConfiguration.class, "servletWebChildContextFactory").withGenerator((registeredBean) -> ServletManagementContextAutoConfiguration.servletWebChildContextFactory()));
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'managementServletContext'.
   */
  private static BeanInstanceSupplier<ManagementServletContext> getManagementServletContextInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<ManagementServletContext>forFactoryMethod(ServletManagementContextAutoConfiguration.class, "managementServletContext", WebEndpointProperties.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(ServletManagementContextAutoConfiguration.class).managementServletContext(args.get(0)));
  }

  /**
   * Get the bean definition for 'managementServletContext'.
   */
  public static BeanDefinition getManagementServletContextBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(ManagementServletContext.class);
    beanDefinition.setInstanceSupplier(getManagementServletContextInstanceSupplier());
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/AutoConfigurationPackages__BeanDefinitions.java
package org.springframework.boot.autoconfigure;

import java.lang.String;
import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link AutoConfigurationPackages}.
 */
public class AutoConfigurationPackages__BeanDefinitions {
  /**
   * Bean definitions for {@link AutoConfigurationPackages.BasePackages}.
   */
  public static class BasePackages {
    /**
     * Get the bean instance supplier for 'org.springframework.boot.autoconfigure.AutoConfigurationPackages'.
     */
    private static BeanInstanceSupplier<AutoConfigurationPackages.BasePackages> getAutoConfigurationPackagesInstanceSupplier(
        ) {
      return BeanInstanceSupplier.<AutoConfigurationPackages.BasePackages>forConstructor(String[].class)
              .withGenerator((registeredBean, args) -> new AutoConfigurationPackages.BasePackages(args.get(0)));
    }

    /**
     * Get the bean definition for 'autoConfigurationPackages'.
     */
    public static BeanDefinition getAutoConfigurationPackagesBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(AutoConfigurationPackages.BasePackages.class);
      beanDefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
      beanDefinition.getConstructorArgumentValues().addIndexedArgumentValue(0, new String[] {"org.springframework.samples.petclinic"});
      beanDefinition.setInstanceSupplier(getAutoConfigurationPackagesInstanceSupplier());
      return beanDefinition;
    }
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/aop/AopAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.autoconfigure.aop;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link AopAutoConfiguration}.
 */
public class AopAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'aopAutoConfiguration'.
   */
  public static BeanDefinition getAopAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(AopAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(AopAutoConfiguration::new);
    return beanDefinition;
  }

  /**
   * Bean definitions for {@link AopAutoConfiguration.AspectJAutoProxyingConfiguration}.
   */
  public static class AspectJAutoProxyingConfiguration {
    /**
     * Get the bean definition for 'aspectJAutoProxyingConfiguration'.
     */
    public static BeanDefinition getAspectJAutoProxyingConfigurationBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(AopAutoConfiguration.AspectJAutoProxyingConfiguration.class);
      beanDefinition.setInstanceSupplier(AopAutoConfiguration.AspectJAutoProxyingConfiguration::new);
      return beanDefinition;
    }

    /**
     * Bean definitions for {@link AopAutoConfiguration.AspectJAutoProxyingConfiguration.CglibAutoProxyConfiguration}.
     */
    public static class CglibAutoProxyConfiguration {
      /**
       * Get the bean definition for 'cglibAutoProxyConfiguration'.
       */
      public static BeanDefinition getCglibAutoProxyConfigurationBeanDefinition() {
        RootBeanDefinition beanDefinition = new RootBeanDefinition(AopAutoConfiguration.AspectJAutoProxyingConfiguration.CglibAutoProxyConfiguration.class);
        beanDefinition.setInstanceSupplier(AopAutoConfiguration.AspectJAutoProxyingConfiguration.CglibAutoProxyConfiguration::new);
        return beanDefinition;
      }
    }
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/availability/ApplicationAvailabilityAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.autoconfigure.availability;

import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.boot.availability.ApplicationAvailabilityBean;

/**
 * Bean definitions for {@link ApplicationAvailabilityAutoConfiguration}.
 */
public class ApplicationAvailabilityAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'applicationAvailabilityAutoConfiguration'.
   */
  public static BeanDefinition getApplicationAvailabilityAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(ApplicationAvailabilityAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(ApplicationAvailabilityAutoConfiguration::new);
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'applicationAvailability'.
   */
  private static BeanInstanceSupplier<ApplicationAvailabilityBean> getApplicationAvailabilityInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<ApplicationAvailabilityBean>forFactoryMethod(ApplicationAvailabilityAutoConfiguration.class, "applicationAvailability")
            .withGenerator((registeredBean) -> registeredBean.getBeanFactory().getBean(ApplicationAvailabilityAutoConfiguration.class).applicationAvailability());
  }

  /**
   * Get the bean definition for 'applicationAvailability'.
   */
  public static BeanDefinition getApplicationAvailabilityBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(ApplicationAvailabilityBean.class);
    beanDefinition.setInstanceSupplier(getApplicationAvailabilityInstanceSupplier());
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/cache/CacheAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.autoconfigure.cache;

import org.springframework.beans.factory.ObjectProvider;
import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link CacheAutoConfiguration}.
 */
public class CacheAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'cacheAutoConfiguration'.
   */
  public static BeanDefinition getCacheAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(CacheAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(CacheAutoConfiguration::new);
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'cacheManagerCustomizers'.
   */
  private static BeanInstanceSupplier<CacheManagerCustomizers> getCacheManagerCustomizersInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<CacheManagerCustomizers>forFactoryMethod(CacheAutoConfiguration.class, "cacheManagerCustomizers", ObjectProvider.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(CacheAutoConfiguration.class).cacheManagerCustomizers(args.get(0)));
  }

  /**
   * Get the bean definition for 'cacheManagerCustomizers'.
   */
  public static BeanDefinition getCacheManagerCustomizersBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(CacheManagerCustomizers.class);
    beanDefinition.setInstanceSupplier(getCacheManagerCustomizersInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'cacheAutoConfigurationValidator'.
   */
  private static BeanInstanceSupplier<CacheAutoConfiguration.CacheManagerValidator> getCacheAutoConfigurationValidatorInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<CacheAutoConfiguration.CacheManagerValidator>forFactoryMethod(CacheAutoConfiguration.class, "cacheAutoConfigurationValidator", CacheProperties.class, ObjectProvider.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(CacheAutoConfiguration.class).cacheAutoConfigurationValidator(args.get(0), args.get(1)));
  }

  /**
   * Get the bean definition for 'cacheAutoConfigurationValidator'.
   */
  public static BeanDefinition getCacheAutoConfigurationValidatorBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(CacheAutoConfiguration.CacheManagerValidator.class);
    beanDefinition.setInstanceSupplier(getCacheAutoConfigurationValidatorInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Bean definitions for {@link CacheAutoConfiguration.CacheManagerEntityManagerFactoryDependsOnPostProcessor}.
   */
  public static class CacheManagerEntityManagerFactoryDependsOnPostProcessor {
    /**
     * Get the bean definition for 'cacheManagerEntityManagerFactoryDependsOnPostProcessor'.
     */
    public static BeanDefinition getCacheManagerEntityManagerFactoryDependsOnPostProcessorBeanDefinition(
        ) {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(CacheAutoConfiguration.CacheManagerEntityManagerFactoryDependsOnPostProcessor.class);
      beanDefinition.setInstanceSupplier(CacheAutoConfiguration.CacheManagerEntityManagerFactoryDependsOnPostProcessor::new);
      return beanDefinition;
    }
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/cache/CacheProperties__BeanDefinitions.java
package org.springframework.boot.autoconfigure.cache;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link CacheProperties}.
 */
public class CacheProperties__BeanDefinitions {
  /**
   * Get the bean definition for 'cacheProperties'.
   */
  public static BeanDefinition getCachePropertiesBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(CacheProperties.class);
    beanDefinition.setInstanceSupplier(CacheProperties::new);
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/cache/CaffeineCacheConfiguration__BeanDefinitions.java
package org.springframework.boot.autoconfigure.cache;

import org.springframework.beans.factory.ObjectProvider;
import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.cache.caffeine.CaffeineCacheManager;

/**
 * Bean definitions for {@link CaffeineCacheConfiguration}.
 */
public class CaffeineCacheConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'caffeineCacheConfiguration'.
   */
  public static BeanDefinition getCaffeineCacheConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(CaffeineCacheConfiguration.class);
    beanDefinition.setInstanceSupplier(CaffeineCacheConfiguration::new);
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'cacheManager'.
   */
  private static BeanInstanceSupplier<CaffeineCacheManager> getCacheManagerInstanceSupplier() {
    return BeanInstanceSupplier.<CaffeineCacheManager>forFactoryMethod(CaffeineCacheConfiguration.class, "cacheManager", CacheProperties.class, CacheManagerCustomizers.class, ObjectProvider.class, ObjectProvider.class, ObjectProvider.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(CaffeineCacheConfiguration.class).cacheManager(args.get(0), args.get(1), args.get(2), args.get(3), args.get(4)));
  }

  /**
   * Get the bean definition for 'cacheManager'.
   */
  public static BeanDefinition getCacheManagerBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(CaffeineCacheManager.class);
    beanDefinition.setInstanceSupplier(getCacheManagerInstanceSupplier());
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/context/ConfigurationPropertiesAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.autoconfigure.context;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link ConfigurationPropertiesAutoConfiguration}.
 */
public class ConfigurationPropertiesAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'configurationPropertiesAutoConfiguration'.
   */
  public static BeanDefinition getConfigurationPropertiesAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(ConfigurationPropertiesAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(ConfigurationPropertiesAutoConfiguration::new);
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/context/LifecycleAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.autoconfigure.context;

import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.context.support.DefaultLifecycleProcessor;

/**
 * Bean definitions for {@link LifecycleAutoConfiguration}.
 */
public class LifecycleAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'lifecycleAutoConfiguration'.
   */
  public static BeanDefinition getLifecycleAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(LifecycleAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(LifecycleAutoConfiguration::new);
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'lifecycleProcessor'.
   */
  private static BeanInstanceSupplier<DefaultLifecycleProcessor> getLifecycleProcessorInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<DefaultLifecycleProcessor>forFactoryMethod(LifecycleAutoConfiguration.class, "defaultLifecycleProcessor", LifecycleProperties.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(LifecycleAutoConfiguration.class).defaultLifecycleProcessor(args.get(0)));
  }

  /**
   * Get the bean definition for 'lifecycleProcessor'.
   */
  public static BeanDefinition getLifecycleProcessorBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(DefaultLifecycleProcessor.class);
    beanDefinition.setInstanceSupplier(getLifecycleProcessorInstanceSupplier());
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/context/LifecycleProperties__BeanDefinitions.java
package org.springframework.boot.autoconfigure.context;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link LifecycleProperties}.
 */
public class LifecycleProperties__BeanDefinitions {
  /**
   * Get the bean definition for 'lifecycleProperties'.
   */
  public static BeanDefinition getLifecyclePropertiesBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(LifecycleProperties.class);
    beanDefinition.setInstanceSupplier(LifecycleProperties::new);
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/context/MessageSourceAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.autoconfigure.context;

import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.context.MessageSource;

/**
 * Bean definitions for {@link MessageSourceAutoConfiguration}.
 */
public class MessageSourceAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'messageSourceAutoConfiguration'.
   */
  public static BeanDefinition getMessageSourceAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(MessageSourceAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(MessageSourceAutoConfiguration::new);
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'messageSourceProperties'.
   */
  private static BeanInstanceSupplier<MessageSourceProperties> getMessageSourcePropertiesInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<MessageSourceProperties>forFactoryMethod(MessageSourceAutoConfiguration.class, "messageSourceProperties")
            .withGenerator((registeredBean) -> registeredBean.getBeanFactory().getBean(MessageSourceAutoConfiguration.class).messageSourceProperties());
  }

  /**
   * Get the bean definition for 'messageSourceProperties'.
   */
  public static BeanDefinition getMessageSourcePropertiesBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(MessageSourceProperties.class);
    beanDefinition.setInstanceSupplier(getMessageSourcePropertiesInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'messageSource'.
   */
  private static BeanInstanceSupplier<MessageSource> getMessageSourceInstanceSupplier() {
    return BeanInstanceSupplier.<MessageSource>forFactoryMethod(MessageSourceAutoConfiguration.class, "messageSource", MessageSourceProperties.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(MessageSourceAutoConfiguration.class).messageSource(args.get(0)));
  }

  /**
   * Get the bean definition for 'messageSource'.
   */
  public static BeanDefinition getMessageSourceBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(MessageSource.class);
    beanDefinition.setInstanceSupplier(getMessageSourceInstanceSupplier());
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/context/PropertyPlaceholderAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.autoconfigure.context;

import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.context.support.PropertySourcesPlaceholderConfigurer;

/**
 * Bean definitions for {@link PropertyPlaceholderAutoConfiguration}.
 */
public class PropertyPlaceholderAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'propertyPlaceholderAutoConfiguration'.
   */
  public static BeanDefinition getPropertyPlaceholderAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(PropertyPlaceholderAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(PropertyPlaceholderAutoConfiguration::new);
    return beanDefinition;
  }

  /**
   * Get the bean definition for 'propertySourcesPlaceholderConfigurer'.
   */
  public static BeanDefinition getPropertySourcesPlaceholderConfigurerBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(PropertyPlaceholderAutoConfiguration.class);
    beanDefinition.setTargetType(PropertySourcesPlaceholderConfigurer.class);
    beanDefinition.setInstanceSupplier(BeanInstanceSupplier.<PropertySourcesPlaceholderConfigurer>forFactoryMethod(PropertyPlaceholderAutoConfiguration.class, "propertySourcesPlaceholderConfigurer").withGenerator((registeredBean) -> PropertyPlaceholderAutoConfiguration.propertySourcesPlaceholderConfigurer()));
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/dao/PersistenceExceptionTranslationAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.autoconfigure.dao;

import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.core.env.Environment;
import org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor;

/**
 * Bean definitions for {@link PersistenceExceptionTranslationAutoConfiguration}.
 */
public class PersistenceExceptionTranslationAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'persistenceExceptionTranslationAutoConfiguration'.
   */
  public static BeanDefinition getPersistenceExceptionTranslationAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(PersistenceExceptionTranslationAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(PersistenceExceptionTranslationAutoConfiguration::new);
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'persistenceExceptionTranslationPostProcessor'.
   */
  private static BeanInstanceSupplier<PersistenceExceptionTranslationPostProcessor> getPersistenceExceptionTranslationPostProcessorInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<PersistenceExceptionTranslationPostProcessor>forFactoryMethod(PersistenceExceptionTranslationAutoConfiguration.class, "persistenceExceptionTranslationPostProcessor", Environment.class)
            .withGenerator((registeredBean, args) -> PersistenceExceptionTranslationAutoConfiguration.persistenceExceptionTranslationPostProcessor(args.get(0)));
  }

  /**
   * Get the bean definition for 'persistenceExceptionTranslationPostProcessor'.
   */
  public static BeanDefinition getPersistenceExceptionTranslationPostProcessorBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(PersistenceExceptionTranslationAutoConfiguration.class);
    beanDefinition.setTargetType(PersistenceExceptionTranslationPostProcessor.class);
    beanDefinition.setInstanceSupplier(getPersistenceExceptionTranslationPostProcessorInstanceSupplier());
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/data/jpa/JpaRepositoriesAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.autoconfigure.data.jpa;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link JpaRepositoriesAutoConfiguration}.
 */
public class JpaRepositoriesAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'jpaRepositoriesAutoConfiguration'.
   */
  public static BeanDefinition getJpaRepositoriesAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(JpaRepositoriesAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(JpaRepositoriesAutoConfiguration::new);
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/data/web/SpringDataWebAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.autoconfigure.data.web;

import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.data.web.config.PageableHandlerMethodArgumentResolverCustomizer;
import org.springframework.data.web.config.SortHandlerMethodArgumentResolverCustomizer;

/**
 * Bean definitions for {@link SpringDataWebAutoConfiguration}.
 */
public class SpringDataWebAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean instance supplier for 'org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration'.
   */
  private static BeanInstanceSupplier<SpringDataWebAutoConfiguration> getSpringDataWebAutoConfigurationInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<SpringDataWebAutoConfiguration>forConstructor(SpringDataWebProperties.class)
            .withGenerator((registeredBean, args) -> new SpringDataWebAutoConfiguration(args.get(0)));
  }

  /**
   * Get the bean definition for 'springDataWebAutoConfiguration'.
   */
  public static BeanDefinition getSpringDataWebAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(SpringDataWebAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(getSpringDataWebAutoConfigurationInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'pageableCustomizer'.
   */
  private static BeanInstanceSupplier<PageableHandlerMethodArgumentResolverCustomizer> getPageableCustomizerInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<PageableHandlerMethodArgumentResolverCustomizer>forFactoryMethod(SpringDataWebAutoConfiguration.class, "pageableCustomizer")
            .withGenerator((registeredBean) -> registeredBean.getBeanFactory().getBean(SpringDataWebAutoConfiguration.class).pageableCustomizer());
  }

  /**
   * Get the bean definition for 'pageableCustomizer'.
   */
  public static BeanDefinition getPageableCustomizerBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(PageableHandlerMethodArgumentResolverCustomizer.class);
    beanDefinition.setInstanceSupplier(getPageableCustomizerInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'sortCustomizer'.
   */
  private static BeanInstanceSupplier<SortHandlerMethodArgumentResolverCustomizer> getSortCustomizerInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<SortHandlerMethodArgumentResolverCustomizer>forFactoryMethod(SpringDataWebAutoConfiguration.class, "sortCustomizer")
            .withGenerator((registeredBean) -> registeredBean.getBeanFactory().getBean(SpringDataWebAutoConfiguration.class).sortCustomizer());
  }

  /**
   * Get the bean definition for 'sortCustomizer'.
   */
  public static BeanDefinition getSortCustomizerBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(SortHandlerMethodArgumentResolverCustomizer.class);
    beanDefinition.setInstanceSupplier(getSortCustomizerInstanceSupplier());
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/data/web/SpringDataWebProperties__BeanDefinitions.java
package org.springframework.boot.autoconfigure.data.web;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link SpringDataWebProperties}.
 */
public class SpringDataWebProperties__BeanDefinitions {
  /**
   * Get the bean definition for 'springDataWebProperties'.
   */
  public static BeanDefinition getSpringDataWebPropertiesBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(SpringDataWebProperties.class);
    beanDefinition.setInstanceSupplier(SpringDataWebProperties::new);
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/http/HttpMessageConvertersAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.autoconfigure.http;

import org.springframework.beans.factory.ObjectProvider;
import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.core.env.Environment;
import org.springframework.http.converter.StringHttpMessageConverter;

/**
 * Bean definitions for {@link HttpMessageConvertersAutoConfiguration}.
 */
public class HttpMessageConvertersAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'httpMessageConvertersAutoConfiguration'.
   */
  public static BeanDefinition getHttpMessageConvertersAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(HttpMessageConvertersAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(HttpMessageConvertersAutoConfiguration::new);
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'messageConverters'.
   */
  private static BeanInstanceSupplier<HttpMessageConverters> getMessageConvertersInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<HttpMessageConverters>forFactoryMethod(HttpMessageConvertersAutoConfiguration.class, "messageConverters", ObjectProvider.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(HttpMessageConvertersAutoConfiguration.class).messageConverters(args.get(0)));
  }

  /**
   * Get the bean definition for 'messageConverters'.
   */
  public static BeanDefinition getMessageConvertersBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(HttpMessageConverters.class);
    beanDefinition.setInstanceSupplier(getMessageConvertersInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Bean definitions for {@link HttpMessageConvertersAutoConfiguration.StringHttpMessageConverterConfiguration}.
   */
  public static class StringHttpMessageConverterConfiguration {
    /**
     * Get the bean definition for 'stringHttpMessageConverterConfiguration'.
     */
    public static BeanDefinition getStringHttpMessageConverterConfigurationBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(HttpMessageConvertersAutoConfiguration.StringHttpMessageConverterConfiguration.class);
      beanDefinition.setInstanceSupplier(HttpMessageConvertersAutoConfiguration.StringHttpMessageConverterConfiguration::new);
      return beanDefinition;
    }

    /**
     * Get the bean instance supplier for 'stringHttpMessageConverter'.
     */
    private static BeanInstanceSupplier<StringHttpMessageConverter> getStringHttpMessageConverterInstanceSupplier(
        ) {
      return BeanInstanceSupplier.<StringHttpMessageConverter>forFactoryMethod(HttpMessageConvertersAutoConfiguration.StringHttpMessageConverterConfiguration.class, "stringHttpMessageConverter", Environment.class)
              .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(HttpMessageConvertersAutoConfiguration.StringHttpMessageConverterConfiguration.class).stringHttpMessageConverter(args.get(0)));
    }

    /**
     * Get the bean definition for 'stringHttpMessageConverter'.
     */
    public static BeanDefinition getStringHttpMessageConverterBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(StringHttpMessageConverter.class);
      beanDefinition.setInstanceSupplier(getStringHttpMessageConverterInstanceSupplier());
      return beanDefinition;
    }
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/http/JacksonHttpMessageConvertersConfiguration__BeanDefinitions.java
package org.springframework.boot.autoconfigure.http;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;

/**
 * Bean definitions for {@link JacksonHttpMessageConvertersConfiguration}.
 */
public class JacksonHttpMessageConvertersConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'jacksonHttpMessageConvertersConfiguration'.
   */
  public static BeanDefinition getJacksonHttpMessageConvertersConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(JacksonHttpMessageConvertersConfiguration.class);
    beanDefinition.setInstanceSupplier(JacksonHttpMessageConvertersConfiguration::new);
    return beanDefinition;
  }

  /**
   * Bean definitions for {@link JacksonHttpMessageConvertersConfiguration.MappingJackson2HttpMessageConverterConfiguration}.
   */
  public static class MappingJackson2HttpMessageConverterConfiguration {
    /**
     * Get the bean definition for 'mappingJackson2HttpMessageConverterConfiguration'.
     */
    public static BeanDefinition getMappingJacksonHttpMessageConverterConfigurationBeanDefinition(
        ) {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(JacksonHttpMessageConvertersConfiguration.MappingJackson2HttpMessageConverterConfiguration.class);
      beanDefinition.setInstanceSupplier(JacksonHttpMessageConvertersConfiguration.MappingJackson2HttpMessageConverterConfiguration::new);
      return beanDefinition;
    }

    /**
     * Get the bean instance supplier for 'mappingJackson2HttpMessageConverter'.
     */
    private static BeanInstanceSupplier<MappingJackson2HttpMessageConverter> getMappingJacksonHttpMessageConverterInstanceSupplier(
        ) {
      return BeanInstanceSupplier.<MappingJackson2HttpMessageConverter>forFactoryMethod(JacksonHttpMessageConvertersConfiguration.MappingJackson2HttpMessageConverterConfiguration.class, "mappingJackson2HttpMessageConverter", ObjectMapper.class)
              .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(JacksonHttpMessageConvertersConfiguration.MappingJackson2HttpMessageConverterConfiguration.class).mappingJackson2HttpMessageConverter(args.get(0)));
    }

    /**
     * Get the bean definition for 'mappingJackson2HttpMessageConverter'.
     */
    public static BeanDefinition getMappingJacksonHttpMessageConverterBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(MappingJackson2HttpMessageConverter.class);
      beanDefinition.setInstanceSupplier(getMappingJacksonHttpMessageConverterInstanceSupplier());
      return beanDefinition;
    }
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/info/ProjectInfoAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.autoconfigure.info;

import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link ProjectInfoAutoConfiguration}.
 */
public class ProjectInfoAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean instance supplier for 'org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration'.
   */
  private static BeanInstanceSupplier<ProjectInfoAutoConfiguration> getProjectInfoAutoConfigurationInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<ProjectInfoAutoConfiguration>forConstructor(ProjectInfoProperties.class)
            .withGenerator((registeredBean, args) -> new ProjectInfoAutoConfiguration(args.get(0)));
  }

  /**
   * Get the bean definition for 'projectInfoAutoConfiguration'.
   */
  public static BeanDefinition getProjectInfoAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(ProjectInfoAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(getProjectInfoAutoConfigurationInstanceSupplier());
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/info/ProjectInfoProperties__BeanDefinitions.java
package org.springframework.boot.autoconfigure.info;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link ProjectInfoProperties}.
 */
public class ProjectInfoProperties__BeanDefinitions {
  /**
   * Get the bean definition for 'projectInfoProperties'.
   */
  public static BeanDefinition getProjectInfoPropertiesBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(ProjectInfoProperties.class);
    beanDefinition.setInstanceSupplier(ProjectInfoProperties::new);
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.autoconfigure.jackson;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.module.paramnames.ParameterNamesModule;
import java.util.List;
import org.springframework.beans.factory.ObjectProvider;
import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.boot.jackson.JsonComponentModule;
import org.springframework.boot.jackson.JsonMixinModule;
import org.springframework.boot.jackson.JsonMixinModuleEntries;
import org.springframework.context.ApplicationContext;
import org.springframework.http.converter.json.Jackson2ObjectMapperBuilder;

/**
 * Bean definitions for {@link JacksonAutoConfiguration}.
 */
public class JacksonAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'jacksonAutoConfiguration'.
   */
  public static BeanDefinition getJacksonAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(JacksonAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(JacksonAutoConfiguration::new);
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'jsonComponentModule'.
   */
  private static BeanInstanceSupplier<JsonComponentModule> getJsonComponentModuleInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<JsonComponentModule>forFactoryMethod(JacksonAutoConfiguration.class, "jsonComponentModule")
            .withGenerator((registeredBean) -> registeredBean.getBeanFactory().getBean(JacksonAutoConfiguration.class).jsonComponentModule());
  }

  /**
   * Get the bean definition for 'jsonComponentModule'.
   */
  public static BeanDefinition getJsonComponentModuleBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(JsonComponentModule.class);
    beanDefinition.setInstanceSupplier(getJsonComponentModuleInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Bean definitions for {@link JacksonAutoConfiguration.JacksonObjectMapperBuilderConfiguration}.
   */
  public static class JacksonObjectMapperBuilderConfiguration {
    /**
     * Get the bean definition for 'jacksonObjectMapperBuilderConfiguration'.
     */
    public static BeanDefinition getJacksonObjectMapperBuilderConfigurationBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(JacksonAutoConfiguration.JacksonObjectMapperBuilderConfiguration.class);
      beanDefinition.setInstanceSupplier(JacksonAutoConfiguration.JacksonObjectMapperBuilderConfiguration::new);
      return beanDefinition;
    }

    /**
     * Get the bean instance supplier for 'jacksonObjectMapperBuilder'.
     */
    private static BeanInstanceSupplier<Jackson2ObjectMapperBuilder> getJacksonObjectMapperBuilderInstanceSupplier(
        ) {
      return BeanInstanceSupplier.<Jackson2ObjectMapperBuilder>forFactoryMethod(JacksonAutoConfiguration.JacksonObjectMapperBuilderConfiguration.class, "jacksonObjectMapperBuilder", ApplicationContext.class, List.class)
              .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(JacksonAutoConfiguration.JacksonObjectMapperBuilderConfiguration.class).jacksonObjectMapperBuilder(args.get(0), args.get(1)));
    }

    /**
     * Get the bean definition for 'jacksonObjectMapperBuilder'.
     */
    public static BeanDefinition getJacksonObjectMapperBuilderBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(Jackson2ObjectMapperBuilder.class);
      beanDefinition.setScope("prototype");
      beanDefinition.setInstanceSupplier(getJacksonObjectMapperBuilderInstanceSupplier());
      return beanDefinition;
    }
  }

  /**
   * Bean definitions for {@link JacksonAutoConfiguration.Jackson2ObjectMapperBuilderCustomizerConfiguration}.
   */
  public static class Jackson2ObjectMapperBuilderCustomizerConfiguration {
    /**
     * Get the bean definition for 'jackson2ObjectMapperBuilderCustomizerConfiguration'.
     */
    public static BeanDefinition getJacksonObjectMapperBuilderCustomizerConfigurationBeanDefinition(
        ) {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(JacksonAutoConfiguration.Jackson2ObjectMapperBuilderCustomizerConfiguration.class);
      beanDefinition.setInstanceSupplier(JacksonAutoConfiguration.Jackson2ObjectMapperBuilderCustomizerConfiguration::new);
      return beanDefinition;
    }

    /**
     * Get the bean instance supplier for 'standardJacksonObjectMapperBuilderCustomizer'.
     */
    private static BeanInstanceSupplier<JacksonAutoConfiguration.Jackson2ObjectMapperBuilderCustomizerConfiguration.StandardJackson2ObjectMapperBuilderCustomizer> getStandardJacksonObjectMapperBuilderCustomizerInstanceSupplier(
        ) {
      return BeanInstanceSupplier.<JacksonAutoConfiguration.Jackson2ObjectMapperBuilderCustomizerConfiguration.StandardJackson2ObjectMapperBuilderCustomizer>forFactoryMethod(JacksonAutoConfiguration.Jackson2ObjectMapperBuilderCustomizerConfiguration.class, "standardJacksonObjectMapperBuilderCustomizer", JacksonProperties.class, ObjectProvider.class)
              .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(JacksonAutoConfiguration.Jackson2ObjectMapperBuilderCustomizerConfiguration.class).standardJacksonObjectMapperBuilderCustomizer(args.get(0), args.get(1)));
    }

    /**
     * Get the bean definition for 'standardJacksonObjectMapperBuilderCustomizer'.
     */
    public static BeanDefinition getStandardJacksonObjectMapperBuilderCustomizerBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(JacksonAutoConfiguration.Jackson2ObjectMapperBuilderCustomizerConfiguration.StandardJackson2ObjectMapperBuilderCustomizer.class);
      beanDefinition.setInstanceSupplier(getStandardJacksonObjectMapperBuilderCustomizerInstanceSupplier());
      return beanDefinition;
    }
  }

  /**
   * Bean definitions for {@link JacksonAutoConfiguration.JacksonMixinConfiguration}.
   */
  public static class JacksonMixinConfiguration {
    /**
     * Get the bean definition for 'jacksonMixinConfiguration'.
     */
    public static BeanDefinition getJacksonMixinConfigurationBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(JacksonAutoConfiguration.JacksonMixinConfiguration.class);
      beanDefinition.setInstanceSupplier(JacksonAutoConfiguration.JacksonMixinConfiguration::new);
      return beanDefinition;
    }

    /**
     * Get the bean instance supplier for 'jsonMixinModule'.
     */
    private static BeanInstanceSupplier<JsonMixinModule> getJsonMixinModuleInstanceSupplier() {
      return BeanInstanceSupplier.<JsonMixinModule>forFactoryMethod(JacksonAutoConfiguration.JacksonMixinConfiguration.class, "jsonMixinModule", ApplicationContext.class, JsonMixinModuleEntries.class)
              .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(JacksonAutoConfiguration.JacksonMixinConfiguration.class).jsonMixinModule(args.get(0), args.get(1)));
    }

    /**
     * Get the bean definition for 'jsonMixinModule'.
     */
    public static BeanDefinition getJsonMixinModuleBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(JsonMixinModule.class);
      beanDefinition.setInstanceSupplier(getJsonMixinModuleInstanceSupplier());
      return beanDefinition;
    }
  }

  /**
   * Bean definitions for {@link JacksonAutoConfiguration.ParameterNamesModuleConfiguration}.
   */
  public static class ParameterNamesModuleConfiguration {
    /**
     * Get the bean definition for 'parameterNamesModuleConfiguration'.
     */
    public static BeanDefinition getParameterNamesModuleConfigurationBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(JacksonAutoConfiguration.ParameterNamesModuleConfiguration.class);
      beanDefinition.setInstanceSupplier(JacksonAutoConfiguration.ParameterNamesModuleConfiguration::new);
      return beanDefinition;
    }

    /**
     * Get the bean instance supplier for 'parameterNamesModule'.
     */
    private static BeanInstanceSupplier<ParameterNamesModule> getParameterNamesModuleInstanceSupplier(
        ) {
      return BeanInstanceSupplier.<ParameterNamesModule>forFactoryMethod(JacksonAutoConfiguration.ParameterNamesModuleConfiguration.class, "parameterNamesModule")
              .withGenerator((registeredBean) -> registeredBean.getBeanFactory().getBean(JacksonAutoConfiguration.ParameterNamesModuleConfiguration.class).parameterNamesModule());
    }

    /**
     * Get the bean definition for 'parameterNamesModule'.
     */
    public static BeanDefinition getParameterNamesModuleBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(ParameterNamesModule.class);
      beanDefinition.setInstanceSupplier(getParameterNamesModuleInstanceSupplier());
      return beanDefinition;
    }
  }

  /**
   * Bean definitions for {@link JacksonAutoConfiguration.JacksonObjectMapperConfiguration}.
   */
  public static class JacksonObjectMapperConfiguration {
    /**
     * Get the bean definition for 'jacksonObjectMapperConfiguration'.
     */
    public static BeanDefinition getJacksonObjectMapperConfigurationBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(JacksonAutoConfiguration.JacksonObjectMapperConfiguration.class);
      beanDefinition.setInstanceSupplier(JacksonAutoConfiguration.JacksonObjectMapperConfiguration::new);
      return beanDefinition;
    }

    /**
     * Get the bean instance supplier for 'jacksonObjectMapper'.
     */
    private static BeanInstanceSupplier<ObjectMapper> getJacksonObjectMapperInstanceSupplier() {
      return BeanInstanceSupplier.<ObjectMapper>forFactoryMethod(JacksonAutoConfiguration.JacksonObjectMapperConfiguration.class, "jacksonObjectMapper", Jackson2ObjectMapperBuilder.class)
              .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(JacksonAutoConfiguration.JacksonObjectMapperConfiguration.class).jacksonObjectMapper(args.get(0)));
    }

    /**
     * Get the bean definition for 'jacksonObjectMapper'.
     */
    public static BeanDefinition getJacksonObjectMapperBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(ObjectMapper.class);
      beanDefinition.setPrimary(true);
      beanDefinition.setInstanceSupplier(getJacksonObjectMapperInstanceSupplier());
      return beanDefinition;
    }
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/jackson/JacksonProperties__BeanDefinitions.java
package org.springframework.boot.autoconfigure.jackson;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link JacksonProperties}.
 */
public class JacksonProperties__BeanDefinitions {
  /**
   * Get the bean definition for 'jacksonProperties'.
   */
  public static BeanDefinition getJacksonPropertiesBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(JacksonProperties.class);
    beanDefinition.setInstanceSupplier(JacksonProperties::new);
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.autoconfigure.jdbc;

import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link DataSourceAutoConfiguration}.
 */
public class DataSourceAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'dataSourceAutoConfiguration'.
   */
  public static BeanDefinition getDataSourceAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(DataSourceAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(DataSourceAutoConfiguration::new);
    return beanDefinition;
  }

  /**
   * Bean definitions for {@link DataSourceAutoConfiguration.PooledDataSourceConfiguration}.
   */
  public static class PooledDataSourceConfiguration {
    /**
     * Get the bean definition for 'pooledDataSourceConfiguration'.
     */
    public static BeanDefinition getPooledDataSourceConfigurationBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(DataSourceAutoConfiguration.PooledDataSourceConfiguration.class);
      beanDefinition.setInstanceSupplier(DataSourceAutoConfiguration.PooledDataSourceConfiguration::new);
      return beanDefinition;
    }

    /**
     * Get the bean instance supplier for 'jdbcConnectionDetails'.
     */
    private static BeanInstanceSupplier<PropertiesJdbcConnectionDetails> getJdbcConnectionDetailsInstanceSupplier(
        ) {
      return BeanInstanceSupplier.<PropertiesJdbcConnectionDetails>forFactoryMethod(DataSourceAutoConfiguration.PooledDataSourceConfiguration.class, "jdbcConnectionDetails", DataSourceProperties.class)
              .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(DataSourceAutoConfiguration.PooledDataSourceConfiguration.class).jdbcConnectionDetails(args.get(0)));
    }

    /**
     * Get the bean definition for 'jdbcConnectionDetails'.
     */
    public static BeanDefinition getJdbcConnectionDetailsBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(PropertiesJdbcConnectionDetails.class);
      beanDefinition.setInstanceSupplier(getJdbcConnectionDetailsInstanceSupplier());
      return beanDefinition;
    }
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/jdbc/DataSourceConfiguration__BeanDefinitions.java
package org.springframework.boot.autoconfigure.jdbc;

import com.zaxxer.hikari.HikariDataSource;
import org.springframework.beans.factory.ObjectProvider;
import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link DataSourceConfiguration}.
 */
public class DataSourceConfiguration__BeanDefinitions {
  /**
   * Bean definitions for {@link DataSourceConfiguration.Hikari}.
   */
  public static class Hikari {
    /**
     * Get the bean definition for 'hikari'.
     */
    public static BeanDefinition getHikariBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(DataSourceConfiguration.Hikari.class);
      beanDefinition.setInstanceSupplier(DataSourceConfiguration.Hikari::new);
      return beanDefinition;
    }

    /**
     * Get the bean instance supplier for 'jdbcConnectionDetailsHikariBeanPostProcessor'.
     */
    private static BeanInstanceSupplier<HikariJdbcConnectionDetailsBeanPostProcessor> getJdbcConnectionDetailsHikariBeanPostProcessorInstanceSupplier(
        ) {
      return BeanInstanceSupplier.<HikariJdbcConnectionDetailsBeanPostProcessor>forFactoryMethod(DataSourceConfiguration.Hikari.class, "jdbcConnectionDetailsHikariBeanPostProcessor", ObjectProvider.class)
              .withGenerator((registeredBean, args) -> DataSourceConfiguration.Hikari.jdbcConnectionDetailsHikariBeanPostProcessor(args.get(0)));
    }

    /**
     * Get the bean definition for 'jdbcConnectionDetailsHikariBeanPostProcessor'.
     */
    public static BeanDefinition getJdbcConnectionDetailsHikariBeanPostProcessorBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(DataSourceConfiguration.Hikari.class);
      beanDefinition.setTargetType(HikariJdbcConnectionDetailsBeanPostProcessor.class);
      beanDefinition.setInstanceSupplier(getJdbcConnectionDetailsHikariBeanPostProcessorInstanceSupplier());
      return beanDefinition;
    }

    /**
     * Get the bean instance supplier for 'dataSource'.
     */
    private static BeanInstanceSupplier<HikariDataSource> getDataSourceInstanceSupplier() {
      return BeanInstanceSupplier.<HikariDataSource>forFactoryMethod(DataSourceConfiguration.Hikari.class, "dataSource", DataSourceProperties.class, JdbcConnectionDetails.class)
              .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(DataSourceConfiguration.Hikari.class).dataSource(args.get(0), args.get(1)));
    }

    /**
     * Get the bean definition for 'dataSource'.
     */
    public static BeanDefinition getDataSourceBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(HikariDataSource.class);
      beanDefinition.setDestroyMethodNames("close");
      beanDefinition.setInstanceSupplier(getDataSourceInstanceSupplier());
      return beanDefinition;
    }
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/jdbc/DataSourceJmxConfiguration__BeanDefinitions.java
package org.springframework.boot.autoconfigure.jdbc;

import javax.sql.DataSource;
import org.springframework.beans.factory.ObjectProvider;
import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link DataSourceJmxConfiguration}.
 */
public class DataSourceJmxConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'dataSourceJmxConfiguration'.
   */
  public static BeanDefinition getDataSourceJmxConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(DataSourceJmxConfiguration.class);
    beanDefinition.setInstanceSupplier(DataSourceJmxConfiguration::new);
    return beanDefinition;
  }

  /**
   * Bean definitions for {@link DataSourceJmxConfiguration.Hikari}.
   */
  public static class Hikari {
    /**
     * Get the bean instance supplier for 'org.springframework.boot.autoconfigure.jdbc.DataSourceJmxConfiguration$Hikari'.
     */
    private static BeanInstanceSupplier<DataSourceJmxConfiguration.Hikari> getHikariInstanceSupplier(
        ) {
      return BeanInstanceSupplier.<DataSourceJmxConfiguration.Hikari>forConstructor(DataSource.class, ObjectProvider.class)
              .withGenerator((registeredBean, args) -> new DataSourceJmxConfiguration.Hikari(args.get(0), args.get(1)));
    }

    /**
     * Get the bean definition for 'hikari'.
     */
    public static BeanDefinition getHikariBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(DataSourceJmxConfiguration.Hikari.class);
      beanDefinition.setInstanceSupplier(getHikariInstanceSupplier());
      return beanDefinition;
    }
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties__BeanDefinitions.java
package org.springframework.boot.autoconfigure.jdbc;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link DataSourceProperties}.
 */
public class DataSourceProperties__BeanDefinitions {
  /**
   * Get the bean definition for 'dataSourceProperties'.
   */
  public static BeanDefinition getDataSourcePropertiesBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(DataSourceProperties.class);
    beanDefinition.setInstanceSupplier(DataSourceProperties::new);
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/jdbc/DataSourceTransactionManagerAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.autoconfigure.jdbc;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link DataSourceTransactionManagerAutoConfiguration}.
 */
public class DataSourceTransactionManagerAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'dataSourceTransactionManagerAutoConfiguration'.
   */
  public static BeanDefinition getDataSourceTransactionManagerAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(DataSourceTransactionManagerAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(DataSourceTransactionManagerAutoConfiguration::new);
    return beanDefinition;
  }

  /**
   * Bean definitions for {@link DataSourceTransactionManagerAutoConfiguration.JdbcTransactionManagerConfiguration}.
   */
  public static class JdbcTransactionManagerConfiguration {
    /**
     * Get the bean definition for 'jdbcTransactionManagerConfiguration'.
     */
    public static BeanDefinition getJdbcTransactionManagerConfigurationBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(DataSourceTransactionManagerAutoConfiguration.JdbcTransactionManagerConfiguration.class);
      beanDefinition.setInstanceSupplier(DataSourceTransactionManagerAutoConfiguration.JdbcTransactionManagerConfiguration::new);
      return beanDefinition;
    }
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/jdbc/JdbcClientAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.autoconfigure.jdbc;

import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.simple.JdbcClient;

/**
 * Bean definitions for {@link JdbcClientAutoConfiguration}.
 */
public class JdbcClientAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'jdbcClientAutoConfiguration'.
   */
  public static BeanDefinition getJdbcClientAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(JdbcClientAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(JdbcClientAutoConfiguration::new);
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'jdbcClient'.
   */
  private static BeanInstanceSupplier<JdbcClient> getJdbcClientInstanceSupplier() {
    return BeanInstanceSupplier.<JdbcClient>forFactoryMethod(JdbcClientAutoConfiguration.class, "jdbcClient", NamedParameterJdbcTemplate.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(JdbcClientAutoConfiguration.class).jdbcClient(args.get(0)));
  }

  /**
   * Get the bean definition for 'jdbcClient'.
   */
  public static BeanDefinition getJdbcClientBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(JdbcClient.class);
    beanDefinition.setDependsOn("dataSourceScriptDatabaseInitializer");
    beanDefinition.setInstanceSupplier(getJdbcClientInstanceSupplier());
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/jdbc/JdbcProperties__BeanDefinitions.java
package org.springframework.boot.autoconfigure.jdbc;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link JdbcProperties}.
 */
public class JdbcProperties__BeanDefinitions {
  /**
   * Get the bean definition for 'jdbcProperties'.
   */
  public static BeanDefinition getJdbcPropertiesBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(JdbcProperties.class);
    beanDefinition.setInstanceSupplier(JdbcProperties::new);
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/jdbc/JdbcTemplateAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.autoconfigure.jdbc;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link JdbcTemplateAutoConfiguration}.
 */
public class JdbcTemplateAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'jdbcTemplateAutoConfiguration'.
   */
  public static BeanDefinition getJdbcTemplateAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(JdbcTemplateAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(JdbcTemplateAutoConfiguration::new);
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/jdbc/JdbcTemplateConfiguration__BeanDefinitions.java
package org.springframework.boot.autoconfigure.jdbc;

import javax.sql.DataSource;
import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.jdbc.core.JdbcTemplate;

/**
 * Bean definitions for {@link JdbcTemplateConfiguration}.
 */
public class JdbcTemplateConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'jdbcTemplateConfiguration'.
   */
  public static BeanDefinition getJdbcTemplateConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(JdbcTemplateConfiguration.class);
    beanDefinition.setInstanceSupplier(JdbcTemplateConfiguration::new);
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'jdbcTemplate'.
   */
  private static BeanInstanceSupplier<JdbcTemplate> getJdbcTemplateInstanceSupplier() {
    return BeanInstanceSupplier.<JdbcTemplate>forFactoryMethod(JdbcTemplateConfiguration.class, "jdbcTemplate", DataSource.class, JdbcProperties.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(JdbcTemplateConfiguration.class).jdbcTemplate(args.get(0), args.get(1)));
  }

  /**
   * Get the bean definition for 'jdbcTemplate'.
   */
  public static BeanDefinition getJdbcTemplateBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(JdbcTemplate.class);
    beanDefinition.setPrimary(true);
    beanDefinition.setDependsOn("dataSourceScriptDatabaseInitializer");
    beanDefinition.setInstanceSupplier(getJdbcTemplateInstanceSupplier());
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/jdbc/NamedParameterJdbcTemplateConfiguration__BeanDefinitions.java
package org.springframework.boot.autoconfigure.jdbc;

import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;

/**
 * Bean definitions for {@link NamedParameterJdbcTemplateConfiguration}.
 */
public class NamedParameterJdbcTemplateConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'namedParameterJdbcTemplateConfiguration'.
   */
  public static BeanDefinition getNamedParameterJdbcTemplateConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(NamedParameterJdbcTemplateConfiguration.class);
    beanDefinition.setInstanceSupplier(NamedParameterJdbcTemplateConfiguration::new);
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'namedParameterJdbcTemplate'.
   */
  private static BeanInstanceSupplier<NamedParameterJdbcTemplate> getNamedParameterJdbcTemplateInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<NamedParameterJdbcTemplate>forFactoryMethod(NamedParameterJdbcTemplateConfiguration.class, "namedParameterJdbcTemplate", JdbcTemplate.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(NamedParameterJdbcTemplateConfiguration.class).namedParameterJdbcTemplate(args.get(0)));
  }

  /**
   * Get the bean definition for 'namedParameterJdbcTemplate'.
   */
  public static BeanDefinition getNamedParameterJdbcTemplateBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(NamedParameterJdbcTemplate.class);
    beanDefinition.setPrimary(true);
    beanDefinition.setDependsOn("dataSourceScriptDatabaseInitializer");
    beanDefinition.setInstanceSupplier(getNamedParameterJdbcTemplateInstanceSupplier());
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/jdbc/metadata/DataSourcePoolMetadataProvidersConfiguration__BeanDefinitions.java
package org.springframework.boot.autoconfigure.jdbc.metadata;

import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.boot.jdbc.metadata.DataSourcePoolMetadataProvider;

/**
 * Bean definitions for {@link DataSourcePoolMetadataProvidersConfiguration}.
 */
public class DataSourcePoolMetadataProvidersConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'dataSourcePoolMetadataProvidersConfiguration'.
   */
  public static BeanDefinition getDataSourcePoolMetadataProvidersConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(DataSourcePoolMetadataProvidersConfiguration.class);
    beanDefinition.setInstanceSupplier(DataSourcePoolMetadataProvidersConfiguration::new);
    return beanDefinition;
  }

  /**
   * Bean definitions for {@link DataSourcePoolMetadataProvidersConfiguration.HikariPoolDataSourceMetadataProviderConfiguration}.
   */
  public static class HikariPoolDataSourceMetadataProviderConfiguration {
    /**
     * Get the bean definition for 'hikariPoolDataSourceMetadataProviderConfiguration'.
     */
    public static BeanDefinition getHikariPoolDataSourceMetadataProviderConfigurationBeanDefinition(
        ) {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(DataSourcePoolMetadataProvidersConfiguration.HikariPoolDataSourceMetadataProviderConfiguration.class);
      beanDefinition.setInstanceSupplier(DataSourcePoolMetadataProvidersConfiguration.HikariPoolDataSourceMetadataProviderConfiguration::new);
      return beanDefinition;
    }

    /**
     * Get the bean instance supplier for 'hikariPoolDataSourceMetadataProvider'.
     */
    private static BeanInstanceSupplier<DataSourcePoolMetadataProvider> getHikariPoolDataSourceMetadataProviderInstanceSupplier(
        ) {
      return BeanInstanceSupplier.<DataSourcePoolMetadataProvider>forFactoryMethod(DataSourcePoolMetadataProvidersConfiguration.HikariPoolDataSourceMetadataProviderConfiguration.class, "hikariPoolDataSourceMetadataProvider")
              .withGenerator((registeredBean) -> registeredBean.getBeanFactory().getBean(DataSourcePoolMetadataProvidersConfiguration.HikariPoolDataSourceMetadataProviderConfiguration.class).hikariPoolDataSourceMetadataProvider());
    }

    /**
     * Get the bean definition for 'hikariPoolDataSourceMetadataProvider'.
     */
    public static BeanDefinition getHikariPoolDataSourceMetadataProviderBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(DataSourcePoolMetadataProvider.class);
      beanDefinition.setInstanceSupplier(getHikariPoolDataSourceMetadataProviderInstanceSupplier());
      return beanDefinition;
    }
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.autoconfigure.orm.jpa;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link HibernateJpaAutoConfiguration}.
 */
public class HibernateJpaAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'hibernateJpaAutoConfiguration'.
   */
  public static BeanDefinition getHibernateJpaAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(HibernateJpaAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(HibernateJpaAutoConfiguration::new);
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaConfiguration__BeanDefinitions.java
package org.springframework.boot.autoconfigure.orm.jpa;

import javax.sql.DataSource;
import org.springframework.beans.factory.ObjectProvider;
import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link HibernateJpaConfiguration}.
 */
public class HibernateJpaConfiguration__BeanDefinitions {
  /**
   * Get the bean instance supplier for 'org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration'.
   */
  private static BeanInstanceSupplier<HibernateJpaConfiguration> getHibernateJpaConfigurationInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<HibernateJpaConfiguration>forConstructor(DataSource.class, JpaProperties.class, ConfigurableListableBeanFactory.class, ObjectProvider.class, HibernateProperties.class, ObjectProvider.class, ObjectProvider.class, ObjectProvider.class, ObjectProvider.class, ObjectProvider.class)
            .withGenerator((registeredBean, args) -> new HibernateJpaConfiguration(args.get(0), args.get(1), args.get(2), args.get(3), args.get(4), args.get(5), args.get(6), args.get(7), args.get(8), args.get(9)));
  }

  /**
   * Get the bean definition for 'hibernateJpaConfiguration'.
   */
  public static BeanDefinition getHibernateJpaConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(HibernateJpaConfiguration.class);
    beanDefinition.setInstanceSupplier(getHibernateJpaConfigurationInstanceSupplier());
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/orm/jpa/HibernateProperties__BeanDefinitions.java
package org.springframework.boot.autoconfigure.orm.jpa;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link HibernateProperties}.
 */
public class HibernateProperties__BeanDefinitions {
  /**
   * Get the bean definition for 'hibernateProperties'.
   */
  public static BeanDefinition getHibernatePropertiesBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(HibernateProperties.class);
    beanDefinition.setInstanceSupplier(HibernateProperties::new);
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/orm/jpa/JpaBaseConfiguration__BeanDefinitions.java
package org.springframework.boot.autoconfigure.orm.jpa;

import java.lang.String;
import java.util.List;
import org.springframework.beans.factory.ObjectProvider;
import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder;
import org.springframework.orm.jpa.JpaVendorAdapter;
import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;
import org.springframework.orm.jpa.persistenceunit.PersistenceManagedTypes;
import org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

/**
 * Bean definitions for {@link JpaBaseConfiguration}.
 */
public class JpaBaseConfiguration__BeanDefinitions {
  /**
   * Get the bean instance supplier for 'transactionManager'.
   */
  private static BeanInstanceSupplier<PlatformTransactionManager> getTransactionManagerInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<PlatformTransactionManager>forFactoryMethod(JpaBaseConfiguration.class, "transactionManager", ObjectProvider.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(JpaBaseConfiguration.class).transactionManager(args.get(0)));
  }

  /**
   * Get the bean definition for 'transactionManager'.
   */
  public static BeanDefinition getTransactionManagerBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(PlatformTransactionManager.class);
    beanDefinition.setInstanceSupplier(getTransactionManagerInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'jpaVendorAdapter'.
   */
  private static BeanInstanceSupplier<JpaVendorAdapter> getJpaVendorAdapterInstanceSupplier() {
    return BeanInstanceSupplier.<JpaVendorAdapter>forFactoryMethod(JpaBaseConfiguration.class, "jpaVendorAdapter")
            .withGenerator((registeredBean) -> registeredBean.getBeanFactory().getBean(JpaBaseConfiguration.class).jpaVendorAdapter());
  }

  /**
   * Get the bean definition for 'jpaVendorAdapter'.
   */
  public static BeanDefinition getJpaVendorAdapterBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(JpaVendorAdapter.class);
    beanDefinition.setInstanceSupplier(getJpaVendorAdapterInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'entityManagerFactoryBuilder'.
   */
  private static BeanInstanceSupplier<EntityManagerFactoryBuilder> getEntityManagerFactoryBuilderInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<EntityManagerFactoryBuilder>forFactoryMethod(JpaBaseConfiguration.class, "entityManagerFactoryBuilder", JpaVendorAdapter.class, ObjectProvider.class, ObjectProvider.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(JpaBaseConfiguration.class).entityManagerFactoryBuilder(args.get(0), args.get(1), args.get(2)));
  }

  /**
   * Get the bean definition for 'entityManagerFactoryBuilder'.
   */
  public static BeanDefinition getEntityManagerFactoryBuilderBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(EntityManagerFactoryBuilder.class);
    beanDefinition.setInstanceSupplier(getEntityManagerFactoryBuilderInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'entityManagerFactory'.
   */
  private static BeanInstanceSupplier<LocalContainerEntityManagerFactoryBean> getEntityManagerFactoryInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<LocalContainerEntityManagerFactoryBean>forFactoryMethod(JpaBaseConfiguration.class, "entityManagerFactory", EntityManagerFactoryBuilder.class, PersistenceManagedTypes.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(JpaBaseConfiguration.class).entityManagerFactory(args.get(0), args.get(1)));
  }

  /**
   * Get the bean definition for 'entityManagerFactory'.
   */
  public static BeanDefinition getEntityManagerFactoryBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(LocalContainerEntityManagerFactoryBean.class);
    beanDefinition.setPrimary(true);
    beanDefinition.setDependsOn("cacheManager","dataSourceScriptDatabaseInitializer");
    beanDefinition.setInstanceSupplier(getEntityManagerFactoryInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Bean definitions for {@link JpaBaseConfiguration.PersistenceManagedTypesConfiguration}.
   */
  public static class PersistenceManagedTypesConfiguration {
    /**
     * Get the bean definition for 'persistenceManagedTypesConfiguration'.
     */
    public static BeanDefinition getPersistenceManagedTypesConfigurationBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(JpaBaseConfiguration.PersistenceManagedTypesConfiguration.class);
      beanDefinition.setInstanceSupplier(JpaBaseConfiguration.PersistenceManagedTypesConfiguration::new);
      return beanDefinition;
    }

    /**
     * Get the bean instance for 'persistenceManagedTypes'.
     */
    private static PersistenceManagedTypes getPersistenceManagedTypesInstance() {
      List<String> managedClassNames = List.of("org.springframework.samples.petclinic.model.BaseEntity", "org.springframework.samples.petclinic.model.NamedEntity", "org.springframework.samples.petclinic.model.Person", "org.springframework.samples.petclinic.owner.Owner", "org.springframework.samples.petclinic.owner.Pet", "org.springframework.samples.petclinic.owner.PetType", "org.springframework.samples.petclinic.owner.Visit", "org.springframework.samples.petclinic.vet.Specialty", "org.springframework.samples.petclinic.vet.Vet");
      List<String> managedPackages = List.of();
      return PersistenceManagedTypes.of(managedClassNames, managedPackages);
    }

    /**
     * Get the bean definition for 'persistenceManagedTypes'.
     */
    public static BeanDefinition getPersistenceManagedTypesBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(JpaBaseConfiguration.PersistenceManagedTypesConfiguration.class);
      beanDefinition.setTargetType(PersistenceManagedTypes.class);
      beanDefinition.setPrimary(true);
      beanDefinition.setInstanceSupplier(PersistenceManagedTypesConfiguration::getPersistenceManagedTypesInstance);
      return beanDefinition;
    }
  }

  /**
   * Bean definitions for {@link JpaBaseConfiguration.JpaWebConfiguration}.
   */
  public static class JpaWebConfiguration {
    /**
     * Get the bean instance supplier for 'org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration'.
     */
    private static BeanInstanceSupplier<JpaBaseConfiguration.JpaWebConfiguration> getJpaWebConfigurationInstanceSupplier(
        ) {
      return BeanInstanceSupplier.<JpaBaseConfiguration.JpaWebConfiguration>forConstructor(JpaProperties.class)
              .withGenerator((registeredBean, args) -> new JpaBaseConfiguration.JpaWebConfiguration(args.get(0)));
    }

    /**
     * Get the bean definition for 'jpaWebConfiguration'.
     */
    public static BeanDefinition getJpaWebConfigurationBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(JpaBaseConfiguration.JpaWebConfiguration.class);
      beanDefinition.setInstanceSupplier(getJpaWebConfigurationInstanceSupplier());
      return beanDefinition;
    }

    /**
     * Get the bean instance supplier for 'openEntityManagerInViewInterceptor'.
     */
    private static BeanInstanceSupplier<OpenEntityManagerInViewInterceptor> getOpenEntityManagerInViewInterceptorInstanceSupplier(
        ) {
      return BeanInstanceSupplier.<OpenEntityManagerInViewInterceptor>forFactoryMethod(JpaBaseConfiguration.JpaWebConfiguration.class, "openEntityManagerInViewInterceptor")
              .withGenerator((registeredBean) -> registeredBean.getBeanFactory().getBean(JpaBaseConfiguration.JpaWebConfiguration.class).openEntityManagerInViewInterceptor());
    }

    /**
     * Get the bean definition for 'openEntityManagerInViewInterceptor'.
     */
    public static BeanDefinition getOpenEntityManagerInViewInterceptorBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(OpenEntityManagerInViewInterceptor.class);
      beanDefinition.setInstanceSupplier(getOpenEntityManagerInViewInterceptorInstanceSupplier());
      return beanDefinition;
    }

    /**
     * Get the bean instance supplier for 'openEntityManagerInViewInterceptorConfigurer'.
     */
    private static BeanInstanceSupplier<WebMvcConfigurer> getOpenEntityManagerInViewInterceptorConfigurerInstanceSupplier(
        ) {
      return BeanInstanceSupplier.<WebMvcConfigurer>forFactoryMethod(JpaBaseConfiguration.JpaWebConfiguration.class, "openEntityManagerInViewInterceptorConfigurer", OpenEntityManagerInViewInterceptor.class)
              .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(JpaBaseConfiguration.JpaWebConfiguration.class).openEntityManagerInViewInterceptorConfigurer(args.get(0)));
    }

    /**
     * Get the bean definition for 'openEntityManagerInViewInterceptorConfigurer'.
     */
    public static BeanDefinition getOpenEntityManagerInViewInterceptorConfigurerBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(WebMvcConfigurer.class);
      beanDefinition.setInstanceSupplier(getOpenEntityManagerInViewInterceptorConfigurerInstanceSupplier());
      return beanDefinition;
    }
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/orm/jpa/JpaProperties__BeanDefinitions.java
package org.springframework.boot.autoconfigure.orm.jpa;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link JpaProperties}.
 */
public class JpaProperties__BeanDefinitions {
  /**
   * Get the bean definition for 'jpaProperties'.
   */
  public static BeanDefinition getJpaPropertiesBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(JpaProperties.class);
    beanDefinition.setInstanceSupplier(JpaProperties::new);
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration__BeanDefinitions.java
package org.springframework.boot.autoconfigure.sql.init;

import javax.sql.DataSource;
import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link DataSourceInitializationConfiguration}.
 */
public class DataSourceInitializationConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'dataSourceInitializationConfiguration'.
   */
  public static BeanDefinition getDataSourceInitializationConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(DataSourceInitializationConfiguration.class);
    beanDefinition.setInstanceSupplier(DataSourceInitializationConfiguration::new);
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'dataSourceScriptDatabaseInitializer'.
   */
  private static BeanInstanceSupplier<SqlDataSourceScriptDatabaseInitializer> getDataSourceScriptDatabaseInitializerInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<SqlDataSourceScriptDatabaseInitializer>forFactoryMethod(DataSourceInitializationConfiguration.class, "dataSourceScriptDatabaseInitializer", DataSource.class, SqlInitializationProperties.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(DataSourceInitializationConfiguration.class).dataSourceScriptDatabaseInitializer(args.get(0), args.get(1)));
  }

  /**
   * Get the bean definition for 'dataSourceScriptDatabaseInitializer'.
   */
  public static BeanDefinition getDataSourceScriptDatabaseInitializerBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(SqlDataSourceScriptDatabaseInitializer.class);
    beanDefinition.setInstanceSupplier(getDataSourceScriptDatabaseInitializerInstanceSupplier());
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/sql/init/SqlInitializationAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.autoconfigure.sql.init;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link SqlInitializationAutoConfiguration}.
 */
public class SqlInitializationAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'sqlInitializationAutoConfiguration'.
   */
  public static BeanDefinition getSqlInitializationAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(SqlInitializationAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(SqlInitializationAutoConfiguration::new);
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/sql/init/SqlInitializationProperties__BeanDefinitions.java
package org.springframework.boot.autoconfigure.sql.init;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link SqlInitializationProperties}.
 */
public class SqlInitializationProperties__BeanDefinitions {
  /**
   * Get the bean definition for 'sqlInitializationProperties'.
   */
  public static BeanDefinition getSqlInitializationPropertiesBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(SqlInitializationProperties.class);
    beanDefinition.setInstanceSupplier(SqlInitializationProperties::new);
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/ssl/SslAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.autoconfigure.ssl;

import org.springframework.beans.factory.ObjectProvider;
import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.boot.ssl.DefaultSslBundleRegistry;

/**
 * Bean definitions for {@link SslAutoConfiguration}.
 */
public class SslAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean instance supplier for 'org.springframework.boot.autoconfigure.ssl.SslAutoConfiguration'.
   */
  private static BeanInstanceSupplier<SslAutoConfiguration> getSslAutoConfigurationInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<SslAutoConfiguration>forConstructor(SslProperties.class)
            .withGenerator((registeredBean, args) -> new SslAutoConfiguration(args.get(0)));
  }

  /**
   * Get the bean definition for 'sslAutoConfiguration'.
   */
  public static BeanDefinition getSslAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(SslAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(getSslAutoConfigurationInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'fileWatcher'.
   */
  private static BeanInstanceSupplier<FileWatcher> getFileWatcherInstanceSupplier() {
    return BeanInstanceSupplier.<FileWatcher>forFactoryMethod(SslAutoConfiguration.class, "fileWatcher")
            .withGenerator((registeredBean) -> registeredBean.getBeanFactory().getBean(SslAutoConfiguration.class).fileWatcher());
  }

  /**
   * Get the bean definition for 'fileWatcher'.
   */
  public static BeanDefinition getFileWatcherBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(FileWatcher.class);
    beanDefinition.setDestroyMethodNames("close");
    beanDefinition.setInstanceSupplier(getFileWatcherInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'sslPropertiesSslBundleRegistrar'.
   */
  private static BeanInstanceSupplier<SslPropertiesBundleRegistrar> getSslPropertiesSslBundleRegistrarInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<SslPropertiesBundleRegistrar>forFactoryMethod(SslAutoConfiguration.class, "sslPropertiesSslBundleRegistrar", FileWatcher.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(SslAutoConfiguration.class).sslPropertiesSslBundleRegistrar(args.get(0)));
  }

  /**
   * Get the bean definition for 'sslPropertiesSslBundleRegistrar'.
   */
  public static BeanDefinition getSslPropertiesSslBundleRegistrarBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(SslPropertiesBundleRegistrar.class);
    beanDefinition.setInstanceSupplier(getSslPropertiesSslBundleRegistrarInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'sslBundleRegistry'.
   */
  private static BeanInstanceSupplier<DefaultSslBundleRegistry> getSslBundleRegistryInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<DefaultSslBundleRegistry>forFactoryMethod(SslAutoConfiguration.class, "sslBundleRegistry", ObjectProvider.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(SslAutoConfiguration.class).sslBundleRegistry(args.get(0)));
  }

  /**
   * Get the bean definition for 'sslBundleRegistry'.
   */
  public static BeanDefinition getSslBundleRegistryBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(DefaultSslBundleRegistry.class);
    beanDefinition.setInstanceSupplier(getSslBundleRegistryInstanceSupplier());
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/ssl/SslProperties__BeanDefinitions.java
package org.springframework.boot.autoconfigure.ssl;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link SslProperties}.
 */
public class SslProperties__BeanDefinitions {
  /**
   * Get the bean definition for 'sslProperties'.
   */
  public static BeanDefinition getSslPropertiesBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(SslProperties.class);
    beanDefinition.setInstanceSupplier(SslProperties::new);
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/task/TaskExecutionAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.autoconfigure.task;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link TaskExecutionAutoConfiguration}.
 */
public class TaskExecutionAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'taskExecutionAutoConfiguration'.
   */
  public static BeanDefinition getTaskExecutionAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(TaskExecutionAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(TaskExecutionAutoConfiguration::new);
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/task/TaskExecutionProperties__BeanDefinitions.java
package org.springframework.boot.autoconfigure.task;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link TaskExecutionProperties}.
 */
public class TaskExecutionProperties__BeanDefinitions {
  /**
   * Get the bean definition for 'taskExecutionProperties'.
   */
  public static BeanDefinition getTaskExecutionPropertiesBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(TaskExecutionProperties.class);
    beanDefinition.setInstanceSupplier(TaskExecutionProperties::new);
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/task/TaskExecutorConfigurations__BeanDefinitions.java
package org.springframework.boot.autoconfigure.task;

import java.lang.SuppressWarnings;
import org.springframework.beans.factory.ObjectProvider;
import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.boot.task.SimpleAsyncTaskExecutorBuilder;
import org.springframework.boot.task.TaskExecutorBuilder;
import org.springframework.boot.task.ThreadPoolTaskExecutorBuilder;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;

/**
 * Bean definitions for {@link TaskExecutorConfigurations}.
 */
public class TaskExecutorConfigurations__BeanDefinitions {
  /**
   * Bean definitions for {@link TaskExecutorConfigurations.TaskExecutorBuilderConfiguration}.
   */
  public static class TaskExecutorBuilderConfiguration {
    /**
     * Get the bean definition for 'taskExecutorBuilderConfiguration'.
     */
    public static BeanDefinition getTaskExecutorBuilderConfigurationBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(TaskExecutorConfigurations.TaskExecutorBuilderConfiguration.class);
      beanDefinition.setInstanceSupplier(TaskExecutorConfigurations.TaskExecutorBuilderConfiguration::new);
      return beanDefinition;
    }

    /**
     * Get the bean instance supplier for 'taskExecutorBuilder'.
     */
    @SuppressWarnings("removal")
    private static BeanInstanceSupplier<TaskExecutorBuilder> getTaskExecutorBuilderInstanceSupplier(
        ) {
      return BeanInstanceSupplier.<TaskExecutorBuilder>forFactoryMethod(TaskExecutorConfigurations.TaskExecutorBuilderConfiguration.class, "taskExecutorBuilder", TaskExecutionProperties.class, ObjectProvider.class, ObjectProvider.class)
              .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(TaskExecutorConfigurations.TaskExecutorBuilderConfiguration.class).taskExecutorBuilder(args.get(0), args.get(1), args.get(2)));
    }

    /**
     * Get the bean definition for 'taskExecutorBuilder'.
     */
    @SuppressWarnings("removal")
    public static BeanDefinition getTaskExecutorBuilderBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(TaskExecutorBuilder.class);
      beanDefinition.setInstanceSupplier(getTaskExecutorBuilderInstanceSupplier());
      return beanDefinition;
    }
  }

  /**
   * Bean definitions for {@link TaskExecutorConfigurations.TaskExecutorConfiguration}.
   */
  public static class TaskExecutorConfiguration {
    /**
     * Get the bean definition for 'taskExecutorConfiguration'.
     */
    public static BeanDefinition getTaskExecutorConfigurationBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(TaskExecutorConfigurations.TaskExecutorConfiguration.class);
      beanDefinition.setInstanceSupplier(TaskExecutorConfigurations.TaskExecutorConfiguration::new);
      return beanDefinition;
    }

    /**
     * Get the bean instance supplier for 'applicationTaskExecutor'.
     */
    @SuppressWarnings("removal")
    private static BeanInstanceSupplier<ThreadPoolTaskExecutor> getApplicationTaskExecutorInstanceSupplier(
        ) {
      return BeanInstanceSupplier.<ThreadPoolTaskExecutor>forFactoryMethod(TaskExecutorConfigurations.TaskExecutorConfiguration.class, "applicationTaskExecutor", TaskExecutorBuilder.class, ObjectProvider.class)
              .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(TaskExecutorConfigurations.TaskExecutorConfiguration.class).applicationTaskExecutor(args.get(0), args.get(1)));
    }

    /**
     * Get the bean definition for 'applicationTaskExecutor'.
     */
    public static BeanDefinition getApplicationTaskExecutorBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(ThreadPoolTaskExecutor.class);
      beanDefinition.setLazyInit(true);
      beanDefinition.setInstanceSupplier(getApplicationTaskExecutorInstanceSupplier());
      return beanDefinition;
    }
  }

  /**
   * Bean definitions for {@link TaskExecutorConfigurations.ThreadPoolTaskExecutorBuilderConfiguration}.
   */
  public static class ThreadPoolTaskExecutorBuilderConfiguration {
    /**
     * Get the bean definition for 'threadPoolTaskExecutorBuilderConfiguration'.
     */
    public static BeanDefinition getThreadPoolTaskExecutorBuilderConfigurationBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(TaskExecutorConfigurations.ThreadPoolTaskExecutorBuilderConfiguration.class);
      beanDefinition.setInstanceSupplier(TaskExecutorConfigurations.ThreadPoolTaskExecutorBuilderConfiguration::new);
      return beanDefinition;
    }

    /**
     * Get the bean instance supplier for 'threadPoolTaskExecutorBuilder'.
     */
    private static BeanInstanceSupplier<ThreadPoolTaskExecutorBuilder> getThreadPoolTaskExecutorBuilderInstanceSupplier(
        ) {
      return BeanInstanceSupplier.<ThreadPoolTaskExecutorBuilder>forFactoryMethod(TaskExecutorConfigurations.ThreadPoolTaskExecutorBuilderConfiguration.class, "threadPoolTaskExecutorBuilder", TaskExecutionProperties.class, ObjectProvider.class, ObjectProvider.class, ObjectProvider.class)
              .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(TaskExecutorConfigurations.ThreadPoolTaskExecutorBuilderConfiguration.class).threadPoolTaskExecutorBuilder(args.get(0), args.get(1), args.get(2), args.get(3)));
    }

    /**
     * Get the bean definition for 'threadPoolTaskExecutorBuilder'.
     */
    public static BeanDefinition getThreadPoolTaskExecutorBuilderBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(ThreadPoolTaskExecutorBuilder.class);
      beanDefinition.setInstanceSupplier(getThreadPoolTaskExecutorBuilderInstanceSupplier());
      return beanDefinition;
    }
  }

  /**
   * Bean definitions for {@link TaskExecutorConfigurations.SimpleAsyncTaskExecutorBuilderConfiguration}.
   */
  public static class SimpleAsyncTaskExecutorBuilderConfiguration {
    /**
     * Get the bean instance supplier for 'org.springframework.boot.autoconfigure.task.TaskExecutorConfigurations$SimpleAsyncTaskExecutorBuilderConfiguration'.
     */
    private static BeanInstanceSupplier<TaskExecutorConfigurations.SimpleAsyncTaskExecutorBuilderConfiguration> getSimpleAsyncTaskExecutorBuilderConfigurationInstanceSupplier(
        ) {
      return BeanInstanceSupplier.<TaskExecutorConfigurations.SimpleAsyncTaskExecutorBuilderConfiguration>forConstructor(TaskExecutionProperties.class, ObjectProvider.class, ObjectProvider.class)
              .withGenerator((registeredBean, args) -> new TaskExecutorConfigurations.SimpleAsyncTaskExecutorBuilderConfiguration(args.get(0), args.get(1), args.get(2)));
    }

    /**
     * Get the bean definition for 'simpleAsyncTaskExecutorBuilderConfiguration'.
     */
    public static BeanDefinition getSimpleAsyncTaskExecutorBuilderConfigurationBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(TaskExecutorConfigurations.SimpleAsyncTaskExecutorBuilderConfiguration.class);
      beanDefinition.setInstanceSupplier(getSimpleAsyncTaskExecutorBuilderConfigurationInstanceSupplier());
      return beanDefinition;
    }

    /**
     * Get the bean instance supplier for 'simpleAsyncTaskExecutorBuilder'.
     */
    private static BeanInstanceSupplier<SimpleAsyncTaskExecutorBuilder> getSimpleAsyncTaskExecutorBuilderInstanceSupplier(
        ) {
      return BeanInstanceSupplier.<SimpleAsyncTaskExecutorBuilder>forFactoryMethod(TaskExecutorConfigurations.SimpleAsyncTaskExecutorBuilderConfiguration.class, "simpleAsyncTaskExecutorBuilder")
              .withGenerator((registeredBean) -> registeredBean.getBeanFactory().getBean(TaskExecutorConfigurations.SimpleAsyncTaskExecutorBuilderConfiguration.class).simpleAsyncTaskExecutorBuilder());
    }

    /**
     * Get the bean definition for 'simpleAsyncTaskExecutorBuilder'.
     */
    public static BeanDefinition getSimpleAsyncTaskExecutorBuilderBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(SimpleAsyncTaskExecutorBuilder.class);
      beanDefinition.setInstanceSupplier(getSimpleAsyncTaskExecutorBuilderInstanceSupplier());
      return beanDefinition;
    }
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/task/TaskSchedulingAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.autoconfigure.task;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link TaskSchedulingAutoConfiguration}.
 */
public class TaskSchedulingAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'taskSchedulingAutoConfiguration'.
   */
  public static BeanDefinition getTaskSchedulingAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(TaskSchedulingAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(TaskSchedulingAutoConfiguration::new);
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/task/TaskSchedulingConfigurations__BeanDefinitions.java
package org.springframework.boot.autoconfigure.task;

import java.lang.SuppressWarnings;
import org.springframework.beans.factory.ObjectProvider;
import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.boot.task.SimpleAsyncTaskSchedulerBuilder;
import org.springframework.boot.task.TaskSchedulerBuilder;
import org.springframework.boot.task.ThreadPoolTaskSchedulerBuilder;

/**
 * Bean definitions for {@link TaskSchedulingConfigurations}.
 */
public class TaskSchedulingConfigurations__BeanDefinitions {
  /**
   * Bean definitions for {@link TaskSchedulingConfigurations.ThreadPoolTaskSchedulerBuilderConfiguration}.
   */
  public static class ThreadPoolTaskSchedulerBuilderConfiguration {
    /**
     * Get the bean definition for 'threadPoolTaskSchedulerBuilderConfiguration'.
     */
    public static BeanDefinition getThreadPoolTaskSchedulerBuilderConfigurationBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(TaskSchedulingConfigurations.ThreadPoolTaskSchedulerBuilderConfiguration.class);
      beanDefinition.setInstanceSupplier(TaskSchedulingConfigurations.ThreadPoolTaskSchedulerBuilderConfiguration::new);
      return beanDefinition;
    }

    /**
     * Get the bean instance supplier for 'threadPoolTaskSchedulerBuilder'.
     */
    private static BeanInstanceSupplier<ThreadPoolTaskSchedulerBuilder> getThreadPoolTaskSchedulerBuilderInstanceSupplier(
        ) {
      return BeanInstanceSupplier.<ThreadPoolTaskSchedulerBuilder>forFactoryMethod(TaskSchedulingConfigurations.ThreadPoolTaskSchedulerBuilderConfiguration.class, "threadPoolTaskSchedulerBuilder", TaskSchedulingProperties.class, ObjectProvider.class, ObjectProvider.class)
              .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(TaskSchedulingConfigurations.ThreadPoolTaskSchedulerBuilderConfiguration.class).threadPoolTaskSchedulerBuilder(args.get(0), args.get(1), args.get(2)));
    }

    /**
     * Get the bean definition for 'threadPoolTaskSchedulerBuilder'.
     */
    public static BeanDefinition getThreadPoolTaskSchedulerBuilderBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(ThreadPoolTaskSchedulerBuilder.class);
      beanDefinition.setInstanceSupplier(getThreadPoolTaskSchedulerBuilderInstanceSupplier());
      return beanDefinition;
    }
  }

  /**
   * Bean definitions for {@link TaskSchedulingConfigurations.TaskSchedulerBuilderConfiguration}.
   */
  public static class TaskSchedulerBuilderConfiguration {
    /**
     * Get the bean definition for 'taskSchedulerBuilderConfiguration'.
     */
    public static BeanDefinition getTaskSchedulerBuilderConfigurationBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(TaskSchedulingConfigurations.TaskSchedulerBuilderConfiguration.class);
      beanDefinition.setInstanceSupplier(TaskSchedulingConfigurations.TaskSchedulerBuilderConfiguration::new);
      return beanDefinition;
    }

    /**
     * Get the bean instance supplier for 'taskSchedulerBuilder'.
     */
    @SuppressWarnings("removal")
    private static BeanInstanceSupplier<TaskSchedulerBuilder> getTaskSchedulerBuilderInstanceSupplier(
        ) {
      return BeanInstanceSupplier.<TaskSchedulerBuilder>forFactoryMethod(TaskSchedulingConfigurations.TaskSchedulerBuilderConfiguration.class, "taskSchedulerBuilder", TaskSchedulingProperties.class, ObjectProvider.class)
              .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(TaskSchedulingConfigurations.TaskSchedulerBuilderConfiguration.class).taskSchedulerBuilder(args.get(0), args.get(1)));
    }

    /**
     * Get the bean definition for 'taskSchedulerBuilder'.
     */
    @SuppressWarnings("removal")
    public static BeanDefinition getTaskSchedulerBuilderBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(TaskSchedulerBuilder.class);
      beanDefinition.setInstanceSupplier(getTaskSchedulerBuilderInstanceSupplier());
      return beanDefinition;
    }
  }

  /**
   * Bean definitions for {@link TaskSchedulingConfigurations.SimpleAsyncTaskSchedulerBuilderConfiguration}.
   */
  public static class SimpleAsyncTaskSchedulerBuilderConfiguration {
    /**
     * Get the bean instance supplier for 'org.springframework.boot.autoconfigure.task.TaskSchedulingConfigurations$SimpleAsyncTaskSchedulerBuilderConfiguration'.
     */
    private static BeanInstanceSupplier<TaskSchedulingConfigurations.SimpleAsyncTaskSchedulerBuilderConfiguration> getSimpleAsyncTaskSchedulerBuilderConfigurationInstanceSupplier(
        ) {
      return BeanInstanceSupplier.<TaskSchedulingConfigurations.SimpleAsyncTaskSchedulerBuilderConfiguration>forConstructor(TaskSchedulingProperties.class, ObjectProvider.class)
              .withGenerator((registeredBean, args) -> new TaskSchedulingConfigurations.SimpleAsyncTaskSchedulerBuilderConfiguration(args.get(0), args.get(1)));
    }

    /**
     * Get the bean definition for 'simpleAsyncTaskSchedulerBuilderConfiguration'.
     */
    public static BeanDefinition getSimpleAsyncTaskSchedulerBuilderConfigurationBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(TaskSchedulingConfigurations.SimpleAsyncTaskSchedulerBuilderConfiguration.class);
      beanDefinition.setInstanceSupplier(getSimpleAsyncTaskSchedulerBuilderConfigurationInstanceSupplier());
      return beanDefinition;
    }

    /**
     * Get the bean instance supplier for 'simpleAsyncTaskSchedulerBuilder'.
     */
    private static BeanInstanceSupplier<SimpleAsyncTaskSchedulerBuilder> getSimpleAsyncTaskSchedulerBuilderInstanceSupplier(
        ) {
      return BeanInstanceSupplier.<SimpleAsyncTaskSchedulerBuilder>forFactoryMethod(TaskSchedulingConfigurations.SimpleAsyncTaskSchedulerBuilderConfiguration.class, "simpleAsyncTaskSchedulerBuilder")
              .withGenerator((registeredBean) -> registeredBean.getBeanFactory().getBean(TaskSchedulingConfigurations.SimpleAsyncTaskSchedulerBuilderConfiguration.class).simpleAsyncTaskSchedulerBuilder());
    }

    /**
     * Get the bean definition for 'simpleAsyncTaskSchedulerBuilder'.
     */
    public static BeanDefinition getSimpleAsyncTaskSchedulerBuilderBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(SimpleAsyncTaskSchedulerBuilder.class);
      beanDefinition.setInstanceSupplier(getSimpleAsyncTaskSchedulerBuilderInstanceSupplier());
      return beanDefinition;
    }
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/task/TaskSchedulingProperties__BeanDefinitions.java
package org.springframework.boot.autoconfigure.task;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link TaskSchedulingProperties}.
 */
public class TaskSchedulingProperties__BeanDefinitions {
  /**
   * Get the bean definition for 'taskSchedulingProperties'.
   */
  public static BeanDefinition getTaskSchedulingPropertiesBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(TaskSchedulingProperties.class);
    beanDefinition.setInstanceSupplier(TaskSchedulingProperties::new);
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/thymeleaf/TemplateEngineConfigurations__BeanDefinitions.java
package org.springframework.boot.autoconfigure.thymeleaf;

import org.springframework.beans.factory.ObjectProvider;
import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.thymeleaf.spring6.SpringTemplateEngine;

/**
 * Bean definitions for {@link TemplateEngineConfigurations}.
 */
public class TemplateEngineConfigurations__BeanDefinitions {
  /**
   * Bean definitions for {@link TemplateEngineConfigurations.DefaultTemplateEngineConfiguration}.
   */
  public static class DefaultTemplateEngineConfiguration {
    /**
     * Get the bean definition for 'defaultTemplateEngineConfiguration'.
     */
    public static BeanDefinition getDefaultTemplateEngineConfigurationBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(TemplateEngineConfigurations.DefaultTemplateEngineConfiguration.class);
      beanDefinition.setInstanceSupplier(TemplateEngineConfigurations.DefaultTemplateEngineConfiguration::new);
      return beanDefinition;
    }

    /**
     * Get the bean instance supplier for 'templateEngine'.
     */
    private static BeanInstanceSupplier<SpringTemplateEngine> getTemplateEngineInstanceSupplier() {
      return BeanInstanceSupplier.<SpringTemplateEngine>forFactoryMethod(TemplateEngineConfigurations.DefaultTemplateEngineConfiguration.class, "templateEngine", ThymeleafProperties.class, ObjectProvider.class, ObjectProvider.class)
              .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(TemplateEngineConfigurations.DefaultTemplateEngineConfiguration.class).templateEngine(args.get(0), args.get(1), args.get(2)));
    }

    /**
     * Get the bean definition for 'templateEngine'.
     */
    public static BeanDefinition getTemplateEngineBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(SpringTemplateEngine.class);
      beanDefinition.setInstanceSupplier(getTemplateEngineInstanceSupplier());
      return beanDefinition;
    }
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.autoconfigure.thymeleaf;

import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.context.ApplicationContext;
import org.thymeleaf.spring6.SpringTemplateEngine;
import org.thymeleaf.spring6.templateresolver.SpringResourceTemplateResolver;
import org.thymeleaf.spring6.view.ThymeleafViewResolver;

/**
 * Bean definitions for {@link ThymeleafAutoConfiguration}.
 */
public class ThymeleafAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'thymeleafAutoConfiguration'.
   */
  public static BeanDefinition getThymeleafAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(ThymeleafAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(ThymeleafAutoConfiguration::new);
    return beanDefinition;
  }

  /**
   * Bean definitions for {@link ThymeleafAutoConfiguration.ThymeleafWebMvcConfiguration}.
   */
  public static class ThymeleafWebMvcConfiguration {
    /**
     * Get the bean definition for 'thymeleafWebMvcConfiguration'.
     */
    public static BeanDefinition getThymeleafWebMvcConfigurationBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(ThymeleafAutoConfiguration.ThymeleafWebMvcConfiguration.class);
      beanDefinition.setInstanceSupplier(ThymeleafAutoConfiguration.ThymeleafWebMvcConfiguration::new);
      return beanDefinition;
    }

    /**
     * Bean definitions for {@link ThymeleafAutoConfiguration.ThymeleafWebMvcConfiguration.ThymeleafViewResolverConfiguration}.
     */
    public static class ThymeleafViewResolverConfiguration {
      /**
       * Get the bean definition for 'thymeleafViewResolverConfiguration'.
       */
      public static BeanDefinition getThymeleafViewResolverConfigurationBeanDefinition() {
        RootBeanDefinition beanDefinition = new RootBeanDefinition(ThymeleafAutoConfiguration.ThymeleafWebMvcConfiguration.ThymeleafViewResolverConfiguration.class);
        beanDefinition.setInstanceSupplier(ThymeleafAutoConfiguration.ThymeleafWebMvcConfiguration.ThymeleafViewResolverConfiguration::new);
        return beanDefinition;
      }

      /**
       * Get the bean instance supplier for 'thymeleafViewResolver'.
       */
      private static BeanInstanceSupplier<ThymeleafViewResolver> getThymeleafViewResolverInstanceSupplier(
          ) {
        return BeanInstanceSupplier.<ThymeleafViewResolver>forFactoryMethod(ThymeleafAutoConfiguration.ThymeleafWebMvcConfiguration.ThymeleafViewResolverConfiguration.class, "thymeleafViewResolver", ThymeleafProperties.class, SpringTemplateEngine.class)
                .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(ThymeleafAutoConfiguration.ThymeleafWebMvcConfiguration.ThymeleafViewResolverConfiguration.class).thymeleafViewResolver(args.get(0), args.get(1)));
      }

      /**
       * Get the bean definition for 'thymeleafViewResolver'.
       */
      public static BeanDefinition getThymeleafViewResolverBeanDefinition() {
        RootBeanDefinition beanDefinition = new RootBeanDefinition(ThymeleafViewResolver.class);
        beanDefinition.setInstanceSupplier(getThymeleafViewResolverInstanceSupplier());
        return beanDefinition;
      }
    }
  }

  /**
   * Bean definitions for {@link ThymeleafAutoConfiguration.DefaultTemplateResolverConfiguration}.
   */
  public static class DefaultTemplateResolverConfiguration {
    /**
     * Get the bean instance supplier for 'org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$DefaultTemplateResolverConfiguration'.
     */
    private static BeanInstanceSupplier<ThymeleafAutoConfiguration.DefaultTemplateResolverConfiguration> getDefaultTemplateResolverConfigurationInstanceSupplier(
        ) {
      return BeanInstanceSupplier.<ThymeleafAutoConfiguration.DefaultTemplateResolverConfiguration>forConstructor(ThymeleafProperties.class, ApplicationContext.class)
              .withGenerator((registeredBean, args) -> new ThymeleafAutoConfiguration.DefaultTemplateResolverConfiguration(args.get(0), args.get(1)));
    }

    /**
     * Get the bean definition for 'defaultTemplateResolverConfiguration'.
     */
    public static BeanDefinition getDefaultTemplateResolverConfigurationBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(ThymeleafAutoConfiguration.DefaultTemplateResolverConfiguration.class);
      beanDefinition.setInstanceSupplier(getDefaultTemplateResolverConfigurationInstanceSupplier());
      return beanDefinition;
    }

    /**
     * Get the bean instance supplier for 'defaultTemplateResolver'.
     */
    private static BeanInstanceSupplier<SpringResourceTemplateResolver> getDefaultTemplateResolverInstanceSupplier(
        ) {
      return BeanInstanceSupplier.<SpringResourceTemplateResolver>forFactoryMethod(ThymeleafAutoConfiguration.DefaultTemplateResolverConfiguration.class, "defaultTemplateResolver")
              .withGenerator((registeredBean) -> registeredBean.getBeanFactory().getBean(ThymeleafAutoConfiguration.DefaultTemplateResolverConfiguration.class).defaultTemplateResolver());
    }

    /**
     * Get the bean definition for 'defaultTemplateResolver'.
     */
    public static BeanDefinition getDefaultTemplateResolverBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(SpringResourceTemplateResolver.class);
      beanDefinition.setInstanceSupplier(getDefaultTemplateResolverInstanceSupplier());
      return beanDefinition;
    }
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafProperties__BeanDefinitions.java
package org.springframework.boot.autoconfigure.thymeleaf;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link ThymeleafProperties}.
 */
public class ThymeleafProperties__BeanDefinitions {
  /**
   * Get the bean definition for 'thymeleafProperties'.
   */
  public static BeanDefinition getThymeleafPropertiesBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(ThymeleafProperties.class);
    beanDefinition.setInstanceSupplier(ThymeleafProperties::new);
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/transaction/TransactionAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.autoconfigure.transaction;

import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.support.TransactionTemplate;

/**
 * Bean definitions for {@link TransactionAutoConfiguration}.
 */
public class TransactionAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'transactionAutoConfiguration'.
   */
  public static BeanDefinition getTransactionAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(TransactionAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(TransactionAutoConfiguration::new);
    return beanDefinition;
  }

  /**
   * Bean definitions for {@link TransactionAutoConfiguration.TransactionTemplateConfiguration}.
   */
  public static class TransactionTemplateConfiguration {
    /**
     * Get the bean definition for 'transactionTemplateConfiguration'.
     */
    public static BeanDefinition getTransactionTemplateConfigurationBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(TransactionAutoConfiguration.TransactionTemplateConfiguration.class);
      beanDefinition.setInstanceSupplier(TransactionAutoConfiguration.TransactionTemplateConfiguration::new);
      return beanDefinition;
    }

    /**
     * Get the bean instance supplier for 'transactionTemplate'.
     */
    private static BeanInstanceSupplier<TransactionTemplate> getTransactionTemplateInstanceSupplier(
        ) {
      return BeanInstanceSupplier.<TransactionTemplate>forFactoryMethod(TransactionAutoConfiguration.TransactionTemplateConfiguration.class, "transactionTemplate", PlatformTransactionManager.class)
              .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(TransactionAutoConfiguration.TransactionTemplateConfiguration.class).transactionTemplate(args.get(0)));
    }

    /**
     * Get the bean definition for 'transactionTemplate'.
     */
    public static BeanDefinition getTransactionTemplateBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(TransactionTemplate.class);
      beanDefinition.setInstanceSupplier(getTransactionTemplateInstanceSupplier());
      return beanDefinition;
    }
  }

  /**
   * Bean definitions for {@link TransactionAutoConfiguration.EnableTransactionManagementConfiguration}.
   */
  public static class EnableTransactionManagementConfiguration {
    /**
     * Get the bean definition for 'enableTransactionManagementConfiguration'.
     */
    public static BeanDefinition getEnableTransactionManagementConfigurationBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(TransactionAutoConfiguration.EnableTransactionManagementConfiguration.class);
      beanDefinition.setInstanceSupplier(TransactionAutoConfiguration.EnableTransactionManagementConfiguration::new);
      return beanDefinition;
    }

    /**
     * Bean definitions for {@link TransactionAutoConfiguration.EnableTransactionManagementConfiguration.CglibAutoProxyConfiguration}.
     */
    public static class CglibAutoProxyConfiguration {
      /**
       * Get the bean definition for 'cglibAutoProxyConfiguration'.
       */
      public static BeanDefinition getCglibAutoProxyConfigurationBeanDefinition() {
        RootBeanDefinition beanDefinition = new RootBeanDefinition(TransactionAutoConfiguration.EnableTransactionManagementConfiguration.CglibAutoProxyConfiguration.class);
        beanDefinition.setInstanceSupplier(TransactionAutoConfiguration.EnableTransactionManagementConfiguration.CglibAutoProxyConfiguration::new);
        return beanDefinition;
      }
    }
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/transaction/TransactionManagerCustomizationAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.autoconfigure.transaction;

import org.springframework.beans.factory.ObjectProvider;
import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link TransactionManagerCustomizationAutoConfiguration}.
 */
public class TransactionManagerCustomizationAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'transactionManagerCustomizationAutoConfiguration'.
   */
  public static BeanDefinition getTransactionManagerCustomizationAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(TransactionManagerCustomizationAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(TransactionManagerCustomizationAutoConfiguration::new);
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'platformTransactionManagerCustomizers'.
   */
  private static BeanInstanceSupplier<TransactionManagerCustomizers> getPlatformTransactionManagerCustomizersInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<TransactionManagerCustomizers>forFactoryMethod(TransactionManagerCustomizationAutoConfiguration.class, "platformTransactionManagerCustomizers", ObjectProvider.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(TransactionManagerCustomizationAutoConfiguration.class).platformTransactionManagerCustomizers(args.get(0)));
  }

  /**
   * Get the bean definition for 'platformTransactionManagerCustomizers'.
   */
  public static BeanDefinition getPlatformTransactionManagerCustomizersBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(TransactionManagerCustomizers.class);
    beanDefinition.setInstanceSupplier(getPlatformTransactionManagerCustomizersInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'transactionExecutionListeners'.
   */
  private static BeanInstanceSupplier<ExecutionListenersTransactionManagerCustomizer> getTransactionExecutionListenersInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<ExecutionListenersTransactionManagerCustomizer>forFactoryMethod(TransactionManagerCustomizationAutoConfiguration.class, "transactionExecutionListeners", ObjectProvider.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(TransactionManagerCustomizationAutoConfiguration.class).transactionExecutionListeners(args.get(0)));
  }

  /**
   * Get the bean definition for 'transactionExecutionListeners'.
   */
  public static BeanDefinition getTransactionExecutionListenersBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(ExecutionListenersTransactionManagerCustomizer.class);
    beanDefinition.setInstanceSupplier(getTransactionExecutionListenersInstanceSupplier());
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/transaction/TransactionProperties__BeanDefinitions.java
package org.springframework.boot.autoconfigure.transaction;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link TransactionProperties}.
 */
public class TransactionProperties__BeanDefinitions {
  /**
   * Get the bean definition for 'transactionProperties'.
   */
  public static BeanDefinition getTransactionPropertiesBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(TransactionProperties.class);
    beanDefinition.setInstanceSupplier(TransactionProperties::new);
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/transaction/jta/JtaAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.autoconfigure.transaction.jta;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link JtaAutoConfiguration}.
 */
public class JtaAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'jtaAutoConfiguration'.
   */
  public static BeanDefinition getJtaAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(JtaAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(JtaAutoConfiguration::new);
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/validation/ValidationAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.autoconfigure.validation;

import org.springframework.beans.factory.ObjectProvider;
import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.context.ApplicationContext;
import org.springframework.core.env.Environment;
import org.springframework.validation.beanvalidation.LocalValidatorFactoryBean;
import org.springframework.validation.beanvalidation.MethodValidationPostProcessor;

/**
 * Bean definitions for {@link ValidationAutoConfiguration}.
 */
public class ValidationAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'validationAutoConfiguration'.
   */
  public static BeanDefinition getValidationAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(ValidationAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(ValidationAutoConfiguration::new);
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'defaultValidator'.
   */
  private static BeanInstanceSupplier<LocalValidatorFactoryBean> getDefaultValidatorInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<LocalValidatorFactoryBean>forFactoryMethod(ValidationAutoConfiguration.class, "defaultValidator", ApplicationContext.class, ObjectProvider.class)
            .withGenerator((registeredBean, args) -> ValidationAutoConfiguration.defaultValidator(args.get(0), args.get(1)));
  }

  /**
   * Get the bean definition for 'defaultValidator'.
   */
  public static BeanDefinition getDefaultValidatorBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(ValidationAutoConfiguration.class);
    beanDefinition.setTargetType(LocalValidatorFactoryBean.class);
    beanDefinition.setPrimary(true);
    beanDefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
    beanDefinition.setInstanceSupplier(getDefaultValidatorInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'methodValidationPostProcessor'.
   */
  private static BeanInstanceSupplier<MethodValidationPostProcessor> getMethodValidationPostProcessorInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<MethodValidationPostProcessor>forFactoryMethod(ValidationAutoConfiguration.class, "methodValidationPostProcessor", Environment.class, ObjectProvider.class, ObjectProvider.class)
            .withGenerator((registeredBean, args) -> ValidationAutoConfiguration.methodValidationPostProcessor(args.get(0), args.get(1), args.get(2)));
  }

  /**
   * Get the bean definition for 'methodValidationPostProcessor'.
   */
  public static BeanDefinition getMethodValidationPostProcessorBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(ValidationAutoConfiguration.class);
    beanDefinition.setTargetType(MethodValidationPostProcessor.class);
    beanDefinition.setInstanceSupplier(getMethodValidationPostProcessorInstanceSupplier());
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/web/ServerProperties__BeanDefinitions.java
package org.springframework.boot.autoconfigure.web;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link ServerProperties}.
 */
public class ServerProperties__BeanDefinitions {
  /**
   * Get the bean definition for 'serverProperties'.
   */
  public static BeanDefinition getServerPropertiesBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(ServerProperties.class);
    beanDefinition.setInstanceSupplier(ServerProperties::new);
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/web/WebProperties__BeanDefinitions.java
package org.springframework.boot.autoconfigure.web;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link WebProperties}.
 */
public class WebProperties__BeanDefinitions {
  /**
   * Get the bean definition for 'webProperties'.
   */
  public static BeanDefinition getWebPropertiesBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(WebProperties.class);
    beanDefinition.setInstanceSupplier(WebProperties::new);
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/web/client/RestClientAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.autoconfigure.web.client;

import org.springframework.beans.factory.ObjectProvider;
import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.boot.ssl.SslBundles;
import org.springframework.web.client.RestClient;

/**
 * Bean definitions for {@link RestClientAutoConfiguration}.
 */
public class RestClientAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'restClientAutoConfiguration'.
   */
  public static BeanDefinition getRestClientAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(RestClientAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(RestClientAutoConfiguration::new);
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'httpMessageConvertersRestClientCustomizer'.
   */
  private static BeanInstanceSupplier<HttpMessageConvertersRestClientCustomizer> getHttpMessageConvertersRestClientCustomizerInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<HttpMessageConvertersRestClientCustomizer>forFactoryMethod(RestClientAutoConfiguration.class, "httpMessageConvertersRestClientCustomizer", ObjectProvider.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(RestClientAutoConfiguration.class).httpMessageConvertersRestClientCustomizer(args.get(0)));
  }

  /**
   * Get the bean definition for 'httpMessageConvertersRestClientCustomizer'.
   */
  public static BeanDefinition getHttpMessageConvertersRestClientCustomizerBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(HttpMessageConvertersRestClientCustomizer.class);
    beanDefinition.setInstanceSupplier(getHttpMessageConvertersRestClientCustomizerInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'restClientSsl'.
   */
  private static BeanInstanceSupplier<AutoConfiguredRestClientSsl> getRestClientSslInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<AutoConfiguredRestClientSsl>forFactoryMethod(RestClientAutoConfiguration.class, "restClientSsl", SslBundles.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(RestClientAutoConfiguration.class).restClientSsl(args.get(0)));
  }

  /**
   * Get the bean definition for 'restClientSsl'.
   */
  public static BeanDefinition getRestClientSslBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(AutoConfiguredRestClientSsl.class);
    beanDefinition.setInstanceSupplier(getRestClientSslInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'restClientBuilderConfigurer'.
   */
  private static BeanInstanceSupplier<RestClientBuilderConfigurer> getRestClientBuilderConfigurerInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<RestClientBuilderConfigurer>forFactoryMethod(RestClientAutoConfiguration.class, "restClientBuilderConfigurer", ObjectProvider.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(RestClientAutoConfiguration.class).restClientBuilderConfigurer(args.get(0)));
  }

  /**
   * Get the bean definition for 'restClientBuilderConfigurer'.
   */
  public static BeanDefinition getRestClientBuilderConfigurerBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(RestClientBuilderConfigurer.class);
    beanDefinition.setInstanceSupplier(getRestClientBuilderConfigurerInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'restClientBuilder'.
   */
  private static BeanInstanceSupplier<RestClient.Builder> getRestClientBuilderInstanceSupplier() {
    return BeanInstanceSupplier.<RestClient.Builder>forFactoryMethod(RestClientAutoConfiguration.class, "restClientBuilder", RestClientBuilderConfigurer.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(RestClientAutoConfiguration.class).restClientBuilder(args.get(0)));
  }

  /**
   * Get the bean definition for 'restClientBuilder'.
   */
  public static BeanDefinition getRestClientBuilderBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(RestClient.Builder.class);
    beanDefinition.setScope("prototype");
    beanDefinition.setInstanceSupplier(getRestClientBuilderInstanceSupplier());
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/web/client/RestTemplateAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.autoconfigure.web.client;

import org.springframework.beans.factory.ObjectProvider;
import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.boot.web.client.RestTemplateBuilder;

/**
 * Bean definitions for {@link RestTemplateAutoConfiguration}.
 */
public class RestTemplateAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'restTemplateAutoConfiguration'.
   */
  public static BeanDefinition getRestTemplateAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(RestTemplateAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(RestTemplateAutoConfiguration::new);
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'restTemplateBuilderConfigurer'.
   */
  private static BeanInstanceSupplier<RestTemplateBuilderConfigurer> getRestTemplateBuilderConfigurerInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<RestTemplateBuilderConfigurer>forFactoryMethod(RestTemplateAutoConfiguration.class, "restTemplateBuilderConfigurer", ObjectProvider.class, ObjectProvider.class, ObjectProvider.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(RestTemplateAutoConfiguration.class).restTemplateBuilderConfigurer(args.get(0), args.get(1), args.get(2)));
  }

  /**
   * Get the bean definition for 'restTemplateBuilderConfigurer'.
   */
  public static BeanDefinition getRestTemplateBuilderConfigurerBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(RestTemplateBuilderConfigurer.class);
    beanDefinition.setLazyInit(true);
    beanDefinition.setInstanceSupplier(getRestTemplateBuilderConfigurerInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'restTemplateBuilder'.
   */
  private static BeanInstanceSupplier<RestTemplateBuilder> getRestTemplateBuilderInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<RestTemplateBuilder>forFactoryMethod(RestTemplateAutoConfiguration.class, "restTemplateBuilder", RestTemplateBuilderConfigurer.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(RestTemplateAutoConfiguration.class).restTemplateBuilder(args.get(0)));
  }

  /**
   * Get the bean definition for 'restTemplateBuilder'.
   */
  public static BeanDefinition getRestTemplateBuilderBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(RestTemplateBuilder.class);
    beanDefinition.setLazyInit(true);
    beanDefinition.setInstanceSupplier(getRestTemplateBuilderInstanceSupplier());
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/web/embedded/EmbeddedWebServerFactoryCustomizerAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.autoconfigure.web.embedded;

import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.boot.autoconfigure.web.ServerProperties;
import org.springframework.core.env.Environment;

/**
 * Bean definitions for {@link EmbeddedWebServerFactoryCustomizerAutoConfiguration}.
 */
public class EmbeddedWebServerFactoryCustomizerAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'embeddedWebServerFactoryCustomizerAutoConfiguration'.
   */
  public static BeanDefinition getEmbeddedWebServerFactoryCustomizerAutoConfigurationBeanDefinition(
      ) {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(EmbeddedWebServerFactoryCustomizerAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(EmbeddedWebServerFactoryCustomizerAutoConfiguration::new);
    return beanDefinition;
  }

  /**
   * Bean definitions for {@link EmbeddedWebServerFactoryCustomizerAutoConfiguration.TomcatWebServerFactoryCustomizerConfiguration}.
   */
  public static class TomcatWebServerFactoryCustomizerConfiguration {
    /**
     * Get the bean definition for 'tomcatWebServerFactoryCustomizerConfiguration'.
     */
    public static BeanDefinition getTomcatWebServerFactoryCustomizerConfigurationBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(EmbeddedWebServerFactoryCustomizerAutoConfiguration.TomcatWebServerFactoryCustomizerConfiguration.class);
      beanDefinition.setInstanceSupplier(EmbeddedWebServerFactoryCustomizerAutoConfiguration.TomcatWebServerFactoryCustomizerConfiguration::new);
      return beanDefinition;
    }

    /**
     * Get the bean instance supplier for 'tomcatWebServerFactoryCustomizer'.
     */
    private static BeanInstanceSupplier<TomcatWebServerFactoryCustomizer> getTomcatWebServerFactoryCustomizerInstanceSupplier(
        ) {
      return BeanInstanceSupplier.<TomcatWebServerFactoryCustomizer>forFactoryMethod(EmbeddedWebServerFactoryCustomizerAutoConfiguration.TomcatWebServerFactoryCustomizerConfiguration.class, "tomcatWebServerFactoryCustomizer", Environment.class, ServerProperties.class)
              .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(EmbeddedWebServerFactoryCustomizerAutoConfiguration.TomcatWebServerFactoryCustomizerConfiguration.class).tomcatWebServerFactoryCustomizer(args.get(0), args.get(1)));
    }

    /**
     * Get the bean definition for 'tomcatWebServerFactoryCustomizer'.
     */
    public static BeanDefinition getTomcatWebServerFactoryCustomizerBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(TomcatWebServerFactoryCustomizer.class);
      beanDefinition.setInstanceSupplier(getTomcatWebServerFactoryCustomizerInstanceSupplier());
      return beanDefinition;
    }
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/web/servlet/DispatcherServletAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.autoconfigure.web.servlet;

import org.springframework.beans.factory.ObjectProvider;
import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.web.servlet.DispatcherServlet;

/**
 * Bean definitions for {@link DispatcherServletAutoConfiguration}.
 */
public class DispatcherServletAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'dispatcherServletAutoConfiguration'.
   */
  public static BeanDefinition getDispatcherServletAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(DispatcherServletAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(DispatcherServletAutoConfiguration::new);
    return beanDefinition;
  }

  /**
   * Bean definitions for {@link DispatcherServletAutoConfiguration.DispatcherServletRegistrationConfiguration}.
   */
  public static class DispatcherServletRegistrationConfiguration {
    /**
     * Get the bean definition for 'dispatcherServletRegistrationConfiguration'.
     */
    public static BeanDefinition getDispatcherServletRegistrationConfigurationBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(DispatcherServletAutoConfiguration.DispatcherServletRegistrationConfiguration.class);
      beanDefinition.setInstanceSupplier(DispatcherServletAutoConfiguration.DispatcherServletRegistrationConfiguration::new);
      return beanDefinition;
    }

    /**
     * Get the bean instance supplier for 'dispatcherServletRegistration'.
     */
    private static BeanInstanceSupplier<DispatcherServletRegistrationBean> getDispatcherServletRegistrationInstanceSupplier(
        ) {
      return BeanInstanceSupplier.<DispatcherServletRegistrationBean>forFactoryMethod(DispatcherServletAutoConfiguration.DispatcherServletRegistrationConfiguration.class, "dispatcherServletRegistration", DispatcherServlet.class, WebMvcProperties.class, ObjectProvider.class)
              .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(DispatcherServletAutoConfiguration.DispatcherServletRegistrationConfiguration.class).dispatcherServletRegistration(args.get(0), args.get(1), args.get(2)));
    }

    /**
     * Get the bean definition for 'dispatcherServletRegistration'.
     */
    public static BeanDefinition getDispatcherServletRegistrationBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(DispatcherServletRegistrationBean.class);
      beanDefinition.setInstanceSupplier(getDispatcherServletRegistrationInstanceSupplier());
      return beanDefinition;
    }
  }

  /**
   * Bean definitions for {@link DispatcherServletAutoConfiguration.DispatcherServletConfiguration}.
   */
  public static class DispatcherServletConfiguration {
    /**
     * Get the bean definition for 'dispatcherServletConfiguration'.
     */
    public static BeanDefinition getDispatcherServletConfigurationBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(DispatcherServletAutoConfiguration.DispatcherServletConfiguration.class);
      beanDefinition.setInstanceSupplier(DispatcherServletAutoConfiguration.DispatcherServletConfiguration::new);
      return beanDefinition;
    }

    /**
     * Get the bean instance supplier for 'dispatcherServlet'.
     */
    private static BeanInstanceSupplier<DispatcherServlet> getDispatcherServletInstanceSupplier() {
      return BeanInstanceSupplier.<DispatcherServlet>forFactoryMethod(DispatcherServletAutoConfiguration.DispatcherServletConfiguration.class, "dispatcherServlet", WebMvcProperties.class)
              .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(DispatcherServletAutoConfiguration.DispatcherServletConfiguration.class).dispatcherServlet(args.get(0)));
    }

    /**
     * Get the bean definition for 'dispatcherServlet'.
     */
    public static BeanDefinition getDispatcherServletBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(DispatcherServlet.class);
      beanDefinition.setInstanceSupplier(getDispatcherServletInstanceSupplier());
      return beanDefinition;
    }
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/web/servlet/HttpEncodingAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.autoconfigure.web.servlet;

import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.boot.autoconfigure.web.ServerProperties;
import org.springframework.web.filter.CharacterEncodingFilter;

/**
 * Bean definitions for {@link HttpEncodingAutoConfiguration}.
 */
public class HttpEncodingAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean instance supplier for 'org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration'.
   */
  private static BeanInstanceSupplier<HttpEncodingAutoConfiguration> getHttpEncodingAutoConfigurationInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<HttpEncodingAutoConfiguration>forConstructor(ServerProperties.class)
            .withGenerator((registeredBean, args) -> new HttpEncodingAutoConfiguration(args.get(0)));
  }

  /**
   * Get the bean definition for 'httpEncodingAutoConfiguration'.
   */
  public static BeanDefinition getHttpEncodingAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(HttpEncodingAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(getHttpEncodingAutoConfigurationInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'characterEncodingFilter'.
   */
  private static BeanInstanceSupplier<CharacterEncodingFilter> getCharacterEncodingFilterInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<CharacterEncodingFilter>forFactoryMethod(HttpEncodingAutoConfiguration.class, "characterEncodingFilter")
            .withGenerator((registeredBean) -> registeredBean.getBeanFactory().getBean(HttpEncodingAutoConfiguration.class).characterEncodingFilter());
  }

  /**
   * Get the bean definition for 'characterEncodingFilter'.
   */
  public static BeanDefinition getCharacterEncodingFilterBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(CharacterEncodingFilter.class);
    beanDefinition.setInstanceSupplier(getCharacterEncodingFilterInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'localeCharsetMappingsCustomizer'.
   */
  private static BeanInstanceSupplier<HttpEncodingAutoConfiguration.LocaleCharsetMappingsCustomizer> getLocaleCharsetMappingsCustomizerInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<HttpEncodingAutoConfiguration.LocaleCharsetMappingsCustomizer>forFactoryMethod(HttpEncodingAutoConfiguration.class, "localeCharsetMappingsCustomizer")
            .withGenerator((registeredBean) -> registeredBean.getBeanFactory().getBean(HttpEncodingAutoConfiguration.class).localeCharsetMappingsCustomizer());
  }

  /**
   * Get the bean definition for 'localeCharsetMappingsCustomizer'.
   */
  public static BeanDefinition getLocaleCharsetMappingsCustomizerBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(HttpEncodingAutoConfiguration.LocaleCharsetMappingsCustomizer.class);
    beanDefinition.setInstanceSupplier(getLocaleCharsetMappingsCustomizerInstanceSupplier());
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/web/servlet/MultipartAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.autoconfigure.web.servlet;

import jakarta.servlet.MultipartConfigElement;
import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.web.multipart.support.StandardServletMultipartResolver;

/**
 * Bean definitions for {@link MultipartAutoConfiguration}.
 */
public class MultipartAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean instance supplier for 'org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration'.
   */
  private static BeanInstanceSupplier<MultipartAutoConfiguration> getMultipartAutoConfigurationInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<MultipartAutoConfiguration>forConstructor(MultipartProperties.class)
            .withGenerator((registeredBean, args) -> new MultipartAutoConfiguration(args.get(0)));
  }

  /**
   * Get the bean definition for 'multipartAutoConfiguration'.
   */
  public static BeanDefinition getMultipartAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(MultipartAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(getMultipartAutoConfigurationInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'multipartConfigElement'.
   */
  private static BeanInstanceSupplier<MultipartConfigElement> getMultipartConfigElementInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<MultipartConfigElement>forFactoryMethod(MultipartAutoConfiguration.class, "multipartConfigElement")
            .withGenerator((registeredBean) -> registeredBean.getBeanFactory().getBean(MultipartAutoConfiguration.class).multipartConfigElement());
  }

  /**
   * Get the bean definition for 'multipartConfigElement'.
   */
  public static BeanDefinition getMultipartConfigElementBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(MultipartConfigElement.class);
    beanDefinition.setInstanceSupplier(getMultipartConfigElementInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'multipartResolver'.
   */
  private static BeanInstanceSupplier<StandardServletMultipartResolver> getMultipartResolverInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<StandardServletMultipartResolver>forFactoryMethod(MultipartAutoConfiguration.class, "multipartResolver")
            .withGenerator((registeredBean) -> registeredBean.getBeanFactory().getBean(MultipartAutoConfiguration.class).multipartResolver());
  }

  /**
   * Get the bean definition for 'multipartResolver'.
   */
  public static BeanDefinition getMultipartResolverBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(StandardServletMultipartResolver.class);
    beanDefinition.setInstanceSupplier(getMultipartResolverInstanceSupplier());
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/web/servlet/MultipartProperties__BeanDefinitions.java
package org.springframework.boot.autoconfigure.web.servlet;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link MultipartProperties}.
 */
public class MultipartProperties__BeanDefinitions {
  /**
   * Get the bean definition for 'multipartProperties'.
   */
  public static BeanDefinition getMultipartPropertiesBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(MultipartProperties.class);
    beanDefinition.setInstanceSupplier(MultipartProperties::new);
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/web/servlet/ServletWebServerFactoryAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.autoconfigure.web.servlet;

import org.springframework.beans.factory.ObjectProvider;
import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.boot.autoconfigure.web.ServerProperties;

/**
 * Bean definitions for {@link ServletWebServerFactoryAutoConfiguration}.
 */
public class ServletWebServerFactoryAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'servletWebServerFactoryAutoConfiguration'.
   */
  public static BeanDefinition getServletWebServerFactoryAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(ServletWebServerFactoryAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(ServletWebServerFactoryAutoConfiguration::new);
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'servletWebServerFactoryCustomizer'.
   */
  private static BeanInstanceSupplier<ServletWebServerFactoryCustomizer> getServletWebServerFactoryCustomizerInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<ServletWebServerFactoryCustomizer>forFactoryMethod(ServletWebServerFactoryAutoConfiguration.class, "servletWebServerFactoryCustomizer", ServerProperties.class, ObjectProvider.class, ObjectProvider.class, ObjectProvider.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(ServletWebServerFactoryAutoConfiguration.class).servletWebServerFactoryCustomizer(args.get(0), args.get(1), args.get(2), args.get(3)));
  }

  /**
   * Get the bean definition for 'servletWebServerFactoryCustomizer'.
   */
  public static BeanDefinition getServletWebServerFactoryCustomizerBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(ServletWebServerFactoryCustomizer.class);
    beanDefinition.setInstanceSupplier(getServletWebServerFactoryCustomizerInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'tomcatServletWebServerFactoryCustomizer'.
   */
  private static BeanInstanceSupplier<TomcatServletWebServerFactoryCustomizer> getTomcatServletWebServerFactoryCustomizerInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<TomcatServletWebServerFactoryCustomizer>forFactoryMethod(ServletWebServerFactoryAutoConfiguration.class, "tomcatServletWebServerFactoryCustomizer", ServerProperties.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(ServletWebServerFactoryAutoConfiguration.class).tomcatServletWebServerFactoryCustomizer(args.get(0)));
  }

  /**
   * Get the bean definition for 'tomcatServletWebServerFactoryCustomizer'.
   */
  public static BeanDefinition getTomcatServletWebServerFactoryCustomizerBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(TomcatServletWebServerFactoryCustomizer.class);
    beanDefinition.setInstanceSupplier(getTomcatServletWebServerFactoryCustomizerInstanceSupplier());
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/web/servlet/ServletWebServerFactoryConfiguration__BeanDefinitions.java
package org.springframework.boot.autoconfigure.web.servlet;

import org.springframework.beans.factory.ObjectProvider;
import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory;

/**
 * Bean definitions for {@link ServletWebServerFactoryConfiguration}.
 */
public class ServletWebServerFactoryConfiguration__BeanDefinitions {
  /**
   * Bean definitions for {@link ServletWebServerFactoryConfiguration.EmbeddedTomcat}.
   */
  public static class EmbeddedTomcat {
    /**
     * Get the bean definition for 'embeddedTomcat'.
     */
    public static BeanDefinition getEmbeddedTomcatBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(ServletWebServerFactoryConfiguration.EmbeddedTomcat.class);
      beanDefinition.setInstanceSupplier(ServletWebServerFactoryConfiguration.EmbeddedTomcat::new);
      return beanDefinition;
    }

    /**
     * Get the bean instance supplier for 'tomcatServletWebServerFactory'.
     */
    private static BeanInstanceSupplier<TomcatServletWebServerFactory> getTomcatServletWebServerFactoryInstanceSupplier(
        ) {
      return BeanInstanceSupplier.<TomcatServletWebServerFactory>forFactoryMethod(ServletWebServerFactoryConfiguration.EmbeddedTomcat.class, "tomcatServletWebServerFactory", ObjectProvider.class, ObjectProvider.class, ObjectProvider.class)
              .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(ServletWebServerFactoryConfiguration.EmbeddedTomcat.class).tomcatServletWebServerFactory(args.get(0), args.get(1), args.get(2)));
    }

    /**
     * Get the bean definition for 'tomcatServletWebServerFactory'.
     */
    public static BeanDefinition getTomcatServletWebServerFactoryBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(TomcatServletWebServerFactory.class);
      beanDefinition.setInstanceSupplier(getTomcatServletWebServerFactoryInstanceSupplier());
      return beanDefinition;
    }
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfiguration_EnableWebMvcConfiguration__Autowiring.java
package org.springframework.boot.autoconfigure.web.servlet;

import java.util.List;
import org.springframework.beans.factory.aot.AutowiredMethodArgumentsResolver;
import org.springframework.beans.factory.support.RegisteredBean;

/**
 * Autowiring for {@link WebMvcAutoConfiguration.EnableWebMvcConfiguration}.
 */
public class WebMvcAutoConfiguration_EnableWebMvcConfiguration__Autowiring {
  /**
   * Apply the autowiring.
   */
  public static WebMvcAutoConfiguration.EnableWebMvcConfiguration apply(
      RegisteredBean registeredBean, WebMvcAutoConfiguration.EnableWebMvcConfiguration instance) {
    AutowiredMethodArgumentsResolver.forMethod("setConfigurers", List.class).resolve(registeredBean, args -> instance.setConfigurers(args.get(0)));
    return instance;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.autoconfigure.web.servlet;

import java.lang.SuppressWarnings;
import org.springframework.beans.factory.BeanFactory;
import org.springframework.beans.factory.ListableBeanFactory;
import org.springframework.beans.factory.ObjectProvider;
import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.InstanceSupplier;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.boot.autoconfigure.web.WebProperties;
import org.springframework.boot.web.servlet.filter.OrderedFormContentFilter;
import org.springframework.context.ApplicationContext;
import org.springframework.format.support.FormattingConversionService;
import org.springframework.validation.Validator;
import org.springframework.web.accept.ContentNegotiationManager;
import org.springframework.web.filter.RequestContextFilter;
import org.springframework.web.servlet.FlashMapManager;
import org.springframework.web.servlet.LocaleResolver;
import org.springframework.web.servlet.ThemeResolver;
import org.springframework.web.servlet.resource.ResourceUrlProvider;
import org.springframework.web.servlet.view.ContentNegotiatingViewResolver;
import org.springframework.web.servlet.view.InternalResourceViewResolver;

/**
 * Bean definitions for {@link WebMvcAutoConfiguration}.
 */
public class WebMvcAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'webMvcAutoConfiguration'.
   */
  public static BeanDefinition getWebMvcAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(WebMvcAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(WebMvcAutoConfiguration::new);
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'formContentFilter'.
   */
  private static BeanInstanceSupplier<OrderedFormContentFilter> getFormContentFilterInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<OrderedFormContentFilter>forFactoryMethod(WebMvcAutoConfiguration.class, "formContentFilter")
            .withGenerator((registeredBean) -> registeredBean.getBeanFactory().getBean(WebMvcAutoConfiguration.class).formContentFilter());
  }

  /**
   * Get the bean definition for 'formContentFilter'.
   */
  public static BeanDefinition getFormContentFilterBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(OrderedFormContentFilter.class);
    beanDefinition.setInstanceSupplier(getFormContentFilterInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Bean definitions for {@link WebMvcAutoConfiguration.WebMvcAutoConfigurationAdapter}.
   */
  public static class WebMvcAutoConfigurationAdapter {
    /**
     * Get the bean instance supplier for 'org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter'.
     */
    private static BeanInstanceSupplier<WebMvcAutoConfiguration.WebMvcAutoConfigurationAdapter> getWebMvcAutoConfigurationAdapterInstanceSupplier(
        ) {
      return BeanInstanceSupplier.<WebMvcAutoConfiguration.WebMvcAutoConfigurationAdapter>forConstructor(WebProperties.class, WebMvcProperties.class, ListableBeanFactory.class, ObjectProvider.class, ObjectProvider.class, ObjectProvider.class, ObjectProvider.class)
              .withGenerator((registeredBean, args) -> new WebMvcAutoConfiguration.WebMvcAutoConfigurationAdapter(args.get(0), args.get(1), args.get(2), args.get(3), args.get(4), args.get(5), args.get(6)));
    }

    /**
     * Get the bean definition for 'webMvcAutoConfigurationAdapter'.
     */
    public static BeanDefinition getWebMvcAutoConfigurationAdapterBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(WebMvcAutoConfiguration.WebMvcAutoConfigurationAdapter.class);
      beanDefinition.setInstanceSupplier(getWebMvcAutoConfigurationAdapterInstanceSupplier());
      return beanDefinition;
    }

    /**
     * Get the bean instance supplier for 'defaultViewResolver'.
     */
    private static BeanInstanceSupplier<InternalResourceViewResolver> getDefaultViewResolverInstanceSupplier(
        ) {
      return BeanInstanceSupplier.<InternalResourceViewResolver>forFactoryMethod(WebMvcAutoConfiguration.WebMvcAutoConfigurationAdapter.class, "defaultViewResolver")
              .withGenerator((registeredBean) -> registeredBean.getBeanFactory().getBean(WebMvcAutoConfiguration.WebMvcAutoConfigurationAdapter.class).defaultViewResolver());
    }

    /**
     * Get the bean definition for 'defaultViewResolver'.
     */
    public static BeanDefinition getDefaultViewResolverBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(InternalResourceViewResolver.class);
      beanDefinition.setInstanceSupplier(getDefaultViewResolverInstanceSupplier());
      return beanDefinition;
    }

    /**
     * Get the bean instance supplier for 'viewResolver'.
     */
    private static BeanInstanceSupplier<ContentNegotiatingViewResolver> getViewResolverInstanceSupplier(
        ) {
      return BeanInstanceSupplier.<ContentNegotiatingViewResolver>forFactoryMethod(WebMvcAutoConfiguration.WebMvcAutoConfigurationAdapter.class, "viewResolver", BeanFactory.class)
              .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(WebMvcAutoConfiguration.WebMvcAutoConfigurationAdapter.class).viewResolver(args.get(0)));
    }

    /**
     * Get the bean definition for 'viewResolver'.
     */
    public static BeanDefinition getViewResolverBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(ContentNegotiatingViewResolver.class);
      beanDefinition.setInstanceSupplier(getViewResolverInstanceSupplier());
      return beanDefinition;
    }

    /**
     * Get the bean definition for 'requestContextFilter'.
     */
    public static BeanDefinition getRequestContextFilterBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(WebMvcAutoConfiguration.WebMvcAutoConfigurationAdapter.class);
      beanDefinition.setTargetType(RequestContextFilter.class);
      beanDefinition.setInstanceSupplier(BeanInstanceSupplier.<RequestContextFilter>forFactoryMethod(WebMvcAutoConfiguration.WebMvcAutoConfigurationAdapter.class, "requestContextFilter").withGenerator((registeredBean) -> WebMvcAutoConfiguration.WebMvcAutoConfigurationAdapter.requestContextFilter()));
      return beanDefinition;
    }
  }

  /**
   * Bean definitions for {@link WebMvcAutoConfiguration.EnableWebMvcConfiguration}.
   */
  public static class EnableWebMvcConfiguration {
    /**
     * Get the bean instance supplier for 'org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration'.
     */
    private static BeanInstanceSupplier<WebMvcAutoConfiguration.EnableWebMvcConfiguration> getEnableWebMvcConfigurationInstanceSupplier(
        ) {
      return BeanInstanceSupplier.<WebMvcAutoConfiguration.EnableWebMvcConfiguration>forConstructor(WebMvcProperties.class, WebProperties.class, ObjectProvider.class, ObjectProvider.class, ListableBeanFactory.class)
              .withGenerator((registeredBean, args) -> new WebMvcAutoConfiguration.EnableWebMvcConfiguration(args.get(0), args.get(1), args.get(2), args.get(3), args.get(4)));
    }

    /**
     * Get the bean definition for 'enableWebMvcConfiguration'.
     */
    public static BeanDefinition getEnableWebMvcConfigurationBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(WebMvcAutoConfiguration.EnableWebMvcConfiguration.class);
      InstanceSupplier<WebMvcAutoConfiguration.EnableWebMvcConfiguration> instanceSupplier = getEnableWebMvcConfigurationInstanceSupplier();
      instanceSupplier = instanceSupplier.andThen(WebMvcAutoConfiguration_EnableWebMvcConfiguration__Autowiring::apply);
      beanDefinition.setInstanceSupplier(instanceSupplier);
      return beanDefinition;
    }

    /**
     * Get the bean instance supplier for 'welcomePageHandlerMapping'.
     */
    private static BeanInstanceSupplier<WelcomePageHandlerMapping> getWelcomePageHandlerMappingInstanceSupplier(
        ) {
      return BeanInstanceSupplier.<WelcomePageHandlerMapping>forFactoryMethod(WebMvcAutoConfiguration.EnableWebMvcConfiguration.class, "welcomePageHandlerMapping", ApplicationContext.class, FormattingConversionService.class, ResourceUrlProvider.class)
              .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(WebMvcAutoConfiguration.EnableWebMvcConfiguration.class).welcomePageHandlerMapping(args.get(0), args.get(1), args.get(2)));
    }

    /**
     * Get the bean definition for 'welcomePageHandlerMapping'.
     */
    public static BeanDefinition getWelcomePageHandlerMappingBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(WelcomePageHandlerMapping.class);
      beanDefinition.setInstanceSupplier(getWelcomePageHandlerMappingInstanceSupplier());
      return beanDefinition;
    }

    /**
     * Get the bean instance supplier for 'welcomePageNotAcceptableHandlerMapping'.
     */
    private static BeanInstanceSupplier<WelcomePageNotAcceptableHandlerMapping> getWelcomePageNotAcceptableHandlerMappingInstanceSupplier(
        ) {
      return BeanInstanceSupplier.<WelcomePageNotAcceptableHandlerMapping>forFactoryMethod(WebMvcAutoConfiguration.EnableWebMvcConfiguration.class, "welcomePageNotAcceptableHandlerMapping", ApplicationContext.class, FormattingConversionService.class, ResourceUrlProvider.class)
              .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(WebMvcAutoConfiguration.EnableWebMvcConfiguration.class).welcomePageNotAcceptableHandlerMapping(args.get(0), args.get(1), args.get(2)));
    }

    /**
     * Get the bean definition for 'welcomePageNotAcceptableHandlerMapping'.
     */
    public static BeanDefinition getWelcomePageNotAcceptableHandlerMappingBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(WelcomePageNotAcceptableHandlerMapping.class);
      beanDefinition.setInstanceSupplier(getWelcomePageNotAcceptableHandlerMappingInstanceSupplier());
      return beanDefinition;
    }

    /**
     * Get the bean instance supplier for 'localeResolver'.
     */
    private static BeanInstanceSupplier<LocaleResolver> getLocaleResolverInstanceSupplier() {
      return BeanInstanceSupplier.<LocaleResolver>forFactoryMethod(WebMvcAutoConfiguration.EnableWebMvcConfiguration.class, "localeResolver")
              .withGenerator((registeredBean) -> registeredBean.getBeanFactory().getBean(WebMvcAutoConfiguration.EnableWebMvcConfiguration.class).localeResolver());
    }

    /**
     * Get the bean definition for 'localeResolver'.
     */
    public static BeanDefinition getLocaleResolverBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(LocaleResolver.class);
      beanDefinition.setInstanceSupplier(getLocaleResolverInstanceSupplier());
      return beanDefinition;
    }

    /**
     * Get the bean instance supplier for 'themeResolver'.
     */
    @SuppressWarnings("deprecation")
    private static BeanInstanceSupplier<ThemeResolver> getThemeResolverInstanceSupplier() {
      return BeanInstanceSupplier.<ThemeResolver>forFactoryMethod(WebMvcAutoConfiguration.EnableWebMvcConfiguration.class, "themeResolver")
              .withGenerator((registeredBean) -> registeredBean.getBeanFactory().getBean(WebMvcAutoConfiguration.EnableWebMvcConfiguration.class).themeResolver());
    }

    /**
     * Get the bean definition for 'themeResolver'.
     */
    @SuppressWarnings("deprecation")
    public static BeanDefinition getThemeResolverBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(ThemeResolver.class);
      beanDefinition.setInstanceSupplier(getThemeResolverInstanceSupplier());
      return beanDefinition;
    }

    /**
     * Get the bean instance supplier for 'flashMapManager'.
     */
    private static BeanInstanceSupplier<FlashMapManager> getFlashMapManagerInstanceSupplier() {
      return BeanInstanceSupplier.<FlashMapManager>forFactoryMethod(WebMvcAutoConfiguration.EnableWebMvcConfiguration.class, "flashMapManager")
              .withGenerator((registeredBean) -> registeredBean.getBeanFactory().getBean(WebMvcAutoConfiguration.EnableWebMvcConfiguration.class).flashMapManager());
    }

    /**
     * Get the bean definition for 'flashMapManager'.
     */
    public static BeanDefinition getFlashMapManagerBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(FlashMapManager.class);
      beanDefinition.setInstanceSupplier(getFlashMapManagerInstanceSupplier());
      return beanDefinition;
    }

    /**
     * Get the bean instance supplier for 'mvcConversionService'.
     */
    private static BeanInstanceSupplier<FormattingConversionService> getMvcConversionServiceInstanceSupplier(
        ) {
      return BeanInstanceSupplier.<FormattingConversionService>forFactoryMethod(WebMvcAutoConfiguration.EnableWebMvcConfiguration.class, "mvcConversionService")
              .withGenerator((registeredBean) -> registeredBean.getBeanFactory().getBean(WebMvcAutoConfiguration.EnableWebMvcConfiguration.class).mvcConversionService());
    }

    /**
     * Get the bean definition for 'mvcConversionService'.
     */
    public static BeanDefinition getMvcConversionServiceBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(FormattingConversionService.class);
      beanDefinition.setInstanceSupplier(getMvcConversionServiceInstanceSupplier());
      return beanDefinition;
    }

    /**
     * Get the bean instance supplier for 'mvcValidator'.
     */
    private static BeanInstanceSupplier<Validator> getMvcValidatorInstanceSupplier() {
      return BeanInstanceSupplier.<Validator>forFactoryMethod(WebMvcAutoConfiguration.EnableWebMvcConfiguration.class, "mvcValidator")
              .withGenerator((registeredBean) -> registeredBean.getBeanFactory().getBean(WebMvcAutoConfiguration.EnableWebMvcConfiguration.class).mvcValidator());
    }

    /**
     * Get the bean definition for 'mvcValidator'.
     */
    public static BeanDefinition getMvcValidatorBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(Validator.class);
      beanDefinition.setInstanceSupplier(getMvcValidatorInstanceSupplier());
      return beanDefinition;
    }

    /**
     * Get the bean instance supplier for 'mvcContentNegotiationManager'.
     */
    private static BeanInstanceSupplier<ContentNegotiationManager> getMvcContentNegotiationManagerInstanceSupplier(
        ) {
      return BeanInstanceSupplier.<ContentNegotiationManager>forFactoryMethod(WebMvcAutoConfiguration.EnableWebMvcConfiguration.class, "mvcContentNegotiationManager")
              .withGenerator((registeredBean) -> registeredBean.getBeanFactory().getBean(WebMvcAutoConfiguration.EnableWebMvcConfiguration.class).mvcContentNegotiationManager());
    }

    /**
     * Get the bean definition for 'mvcContentNegotiationManager'.
     */
    public static BeanDefinition getMvcContentNegotiationManagerBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(ContentNegotiationManager.class);
      beanDefinition.setInstanceSupplier(getMvcContentNegotiationManagerInstanceSupplier());
      return beanDefinition;
    }
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/web/servlet/WebMvcProperties__BeanDefinitions.java
package org.springframework.boot.autoconfigure.web.servlet;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link WebMvcProperties}.
 */
public class WebMvcProperties__BeanDefinitions {
  /**
   * Get the bean definition for 'webMvcProperties'.
   */
  public static BeanDefinition getWebMvcPropertiesBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(WebMvcProperties.class);
    beanDefinition.setInstanceSupplier(WebMvcProperties::new);
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/web/servlet/error/ErrorMvcAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.autoconfigure.web.servlet.error;

import org.springframework.beans.factory.ObjectProvider;
import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.boot.autoconfigure.web.ServerProperties;
import org.springframework.boot.autoconfigure.web.WebProperties;
import org.springframework.boot.autoconfigure.web.servlet.DispatcherServletPath;
import org.springframework.boot.web.servlet.error.DefaultErrorAttributes;
import org.springframework.boot.web.servlet.error.ErrorAttributes;
import org.springframework.context.ApplicationContext;

/**
 * Bean definitions for {@link ErrorMvcAutoConfiguration}.
 */
public class ErrorMvcAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean instance supplier for 'org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration'.
   */
  private static BeanInstanceSupplier<ErrorMvcAutoConfiguration> getErrorMvcAutoConfigurationInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<ErrorMvcAutoConfiguration>forConstructor(ServerProperties.class)
            .withGenerator((registeredBean, args) -> new ErrorMvcAutoConfiguration(args.get(0)));
  }

  /**
   * Get the bean definition for 'errorMvcAutoConfiguration'.
   */
  public static BeanDefinition getErrorMvcAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(ErrorMvcAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(getErrorMvcAutoConfigurationInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'errorAttributes'.
   */
  private static BeanInstanceSupplier<DefaultErrorAttributes> getErrorAttributesInstanceSupplier() {
    return BeanInstanceSupplier.<DefaultErrorAttributes>forFactoryMethod(ErrorMvcAutoConfiguration.class, "errorAttributes")
            .withGenerator((registeredBean) -> registeredBean.getBeanFactory().getBean(ErrorMvcAutoConfiguration.class).errorAttributes());
  }

  /**
   * Get the bean definition for 'errorAttributes'.
   */
  public static BeanDefinition getErrorAttributesBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(DefaultErrorAttributes.class);
    beanDefinition.setInstanceSupplier(getErrorAttributesInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'basicErrorController'.
   */
  private static BeanInstanceSupplier<BasicErrorController> getBasicErrorControllerInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<BasicErrorController>forFactoryMethod(ErrorMvcAutoConfiguration.class, "basicErrorController", ErrorAttributes.class, ObjectProvider.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(ErrorMvcAutoConfiguration.class).basicErrorController(args.get(0), args.get(1)));
  }

  /**
   * Get the bean definition for 'basicErrorController'.
   */
  public static BeanDefinition getBasicErrorControllerBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(BasicErrorController.class);
    beanDefinition.setInstanceSupplier(getBasicErrorControllerInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'errorPageCustomizer'.
   */
  private static BeanInstanceSupplier<ErrorMvcAutoConfiguration.ErrorPageCustomizer> getErrorPageCustomizerInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<ErrorMvcAutoConfiguration.ErrorPageCustomizer>forFactoryMethod(ErrorMvcAutoConfiguration.class, "errorPageCustomizer", DispatcherServletPath.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(ErrorMvcAutoConfiguration.class).errorPageCustomizer(args.get(0)));
  }

  /**
   * Get the bean definition for 'errorPageCustomizer'.
   */
  public static BeanDefinition getErrorPageCustomizerBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(ErrorMvcAutoConfiguration.ErrorPageCustomizer.class);
    beanDefinition.setInstanceSupplier(getErrorPageCustomizerInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean definition for 'preserveErrorControllerTargetClassPostProcessor'.
   */
  public static BeanDefinition getPreserveErrorControllerTargetClassPostProcessorBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(ErrorMvcAutoConfiguration.class);
    beanDefinition.setTargetType(ErrorMvcAutoConfiguration.PreserveErrorControllerTargetClassPostProcessor.class);
    beanDefinition.setInstanceSupplier(BeanInstanceSupplier.<ErrorMvcAutoConfiguration.PreserveErrorControllerTargetClassPostProcessor>forFactoryMethod(ErrorMvcAutoConfiguration.class, "preserveErrorControllerTargetClassPostProcessor").withGenerator((registeredBean) -> ErrorMvcAutoConfiguration.preserveErrorControllerTargetClassPostProcessor()));
    return beanDefinition;
  }

  /**
   * Bean definitions for {@link ErrorMvcAutoConfiguration.DefaultErrorViewResolverConfiguration}.
   */
  public static class DefaultErrorViewResolverConfiguration {
    /**
     * Get the bean instance supplier for 'org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$DefaultErrorViewResolverConfiguration'.
     */
    private static BeanInstanceSupplier<ErrorMvcAutoConfiguration.DefaultErrorViewResolverConfiguration> getDefaultErrorViewResolverConfigurationInstanceSupplier(
        ) {
      return BeanInstanceSupplier.<ErrorMvcAutoConfiguration.DefaultErrorViewResolverConfiguration>forConstructor(ApplicationContext.class, WebProperties.class)
              .withGenerator((registeredBean, args) -> new ErrorMvcAutoConfiguration.DefaultErrorViewResolverConfiguration(args.get(0), args.get(1)));
    }

    /**
     * Get the bean definition for 'defaultErrorViewResolverConfiguration'.
     */
    public static BeanDefinition getDefaultErrorViewResolverConfigurationBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(ErrorMvcAutoConfiguration.DefaultErrorViewResolverConfiguration.class);
      beanDefinition.setInstanceSupplier(getDefaultErrorViewResolverConfigurationInstanceSupplier());
      return beanDefinition;
    }

    /**
     * Get the bean instance supplier for 'conventionErrorViewResolver'.
     */
    private static BeanInstanceSupplier<DefaultErrorViewResolver> getConventionErrorViewResolverInstanceSupplier(
        ) {
      return BeanInstanceSupplier.<DefaultErrorViewResolver>forFactoryMethod(ErrorMvcAutoConfiguration.DefaultErrorViewResolverConfiguration.class, "conventionErrorViewResolver")
              .withGenerator((registeredBean) -> registeredBean.getBeanFactory().getBean(ErrorMvcAutoConfiguration.DefaultErrorViewResolverConfiguration.class).conventionErrorViewResolver());
    }

    /**
     * Get the bean definition for 'conventionErrorViewResolver'.
     */
    public static BeanDefinition getConventionErrorViewResolverBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(DefaultErrorViewResolver.class);
      beanDefinition.setInstanceSupplier(getConventionErrorViewResolverInstanceSupplier());
      return beanDefinition;
    }
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/autoconfigure/websocket/servlet/WebSocketServletAutoConfiguration__BeanDefinitions.java
package org.springframework.boot.autoconfigure.websocket.servlet;

import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link WebSocketServletAutoConfiguration}.
 */
public class WebSocketServletAutoConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'webSocketServletAutoConfiguration'.
   */
  public static BeanDefinition getWebSocketServletAutoConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(WebSocketServletAutoConfiguration.class);
    beanDefinition.setInstanceSupplier(WebSocketServletAutoConfiguration::new);
    return beanDefinition;
  }

  /**
   * Bean definitions for {@link WebSocketServletAutoConfiguration.TomcatWebSocketConfiguration}.
   */
  public static class TomcatWebSocketConfiguration {
    /**
     * Get the bean definition for 'tomcatWebSocketConfiguration'.
     */
    public static BeanDefinition getTomcatWebSocketConfigurationBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(WebSocketServletAutoConfiguration.TomcatWebSocketConfiguration.class);
      beanDefinition.setInstanceSupplier(WebSocketServletAutoConfiguration.TomcatWebSocketConfiguration::new);
      return beanDefinition;
    }

    /**
     * Get the bean instance supplier for 'websocketServletWebServerCustomizer'.
     */
    private static BeanInstanceSupplier<TomcatWebSocketServletWebServerCustomizer> getWebsocketServletWebServerCustomizerInstanceSupplier(
        ) {
      return BeanInstanceSupplier.<TomcatWebSocketServletWebServerCustomizer>forFactoryMethod(WebSocketServletAutoConfiguration.TomcatWebSocketConfiguration.class, "websocketServletWebServerCustomizer")
              .withGenerator((registeredBean) -> registeredBean.getBeanFactory().getBean(WebSocketServletAutoConfiguration.TomcatWebSocketConfiguration.class).websocketServletWebServerCustomizer());
    }

    /**
     * Get the bean definition for 'websocketServletWebServerCustomizer'.
     */
    public static BeanDefinition getWebsocketServletWebServerCustomizerBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(TomcatWebSocketServletWebServerCustomizer.class);
      beanDefinition.setInstanceSupplier(getWebsocketServletWebServerCustomizerInstanceSupplier());
      return beanDefinition;
    }
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/context/properties/BoundConfigurationProperties__BeanDefinitions.java
package org.springframework.boot.context.properties;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link BoundConfigurationProperties}.
 */
public class BoundConfigurationProperties__BeanDefinitions {
  /**
   * Get the bean definition for 'boundConfigurationProperties'.
   */
  public static BeanDefinition getBoundConfigurationPropertiesBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(BoundConfigurationProperties.class);
    beanDefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
    beanDefinition.setInstanceSupplier(BoundConfigurationProperties::new);
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/context/properties/ConfigurationPropertiesBinder__BeanDefinitions.java
package org.springframework.boot.context.properties;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link ConfigurationPropertiesBinder}.
 */
public class ConfigurationPropertiesBinder__BeanDefinitions {
  /**
   * Bean definitions for {@link ConfigurationPropertiesBinder.ConfigurationPropertiesBinderFactory}.
   */
  public static class ConfigurationPropertiesBinderFactory {
    /**
     * Get the bean definition for 'internalConfigurationPropertiesBinder'.
     */
    public static BeanDefinition getInternalConfigurationPropertiesBinderBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(ConfigurationPropertiesBinder.ConfigurationPropertiesBinderFactory.class);
      beanDefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
      beanDefinition.setInstanceSupplier(ConfigurationPropertiesBinder.ConfigurationPropertiesBinderFactory::new);
      return beanDefinition;
    }
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor__BeanDefinitions.java
package org.springframework.boot.context.properties;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link ConfigurationPropertiesBindingPostProcessor}.
 */
public class ConfigurationPropertiesBindingPostProcessor__BeanDefinitions {
  /**
   * Get the bean definition for 'configurationPropertiesBindingPostProcessor'.
   */
  public static BeanDefinition getConfigurationPropertiesBindingPostProcessorBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(ConfigurationPropertiesBindingPostProcessor.class);
    beanDefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
    beanDefinition.setInstanceSupplier(ConfigurationPropertiesBindingPostProcessor::new);
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/jackson/JsonMixinModuleEntries__BeanDefinitions.java
package org.springframework.boot.jackson;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link JsonMixinModuleEntries}.
 */
public class JsonMixinModuleEntries__BeanDefinitions {
  /**
   * Get the bean instance for 'jsonMixinModuleEntries'.
   */
  private static JsonMixinModuleEntries getJsonMixinModuleEntriesInstance() {
    return JsonMixinModuleEntries.create((mixins) -> {
    } );
  }

  /**
   * Get the bean definition for 'jsonMixinModuleEntries'.
   */
  public static BeanDefinition getJsonMixinModuleEntriesBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition("org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonMixinConfiguration");
    beanDefinition.setTargetType(JsonMixinModuleEntries.class);
    beanDefinition.setInstanceSupplier(JsonMixinModuleEntries__BeanDefinitions::getJsonMixinModuleEntriesInstance);
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/sql/init/dependency/DatabaseInitializationDependencyConfigurer__BeanDefinitions.java
package org.springframework.boot.sql.init.dependency;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link DatabaseInitializationDependencyConfigurer}.
 */
public class DatabaseInitializationDependencyConfigurer__BeanDefinitions {
  /**
   * Bean definitions for {@link DatabaseInitializationDependencyConfigurer.DependsOnDatabaseInitializationPostProcessor}.
   */
  public static class DependsOnDatabaseInitializationPostProcessor {
    /**
     * Get the bean definition for 'dependsOnDatabaseInitializationPostProcessor'.
     */
    public static BeanDefinition getDependsOnDatabaseInitializationPostProcessorBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(DatabaseInitializationDependencyConfigurer.DependsOnDatabaseInitializationPostProcessor.class);
      beanDefinition.setInstanceSupplier(DatabaseInitializationDependencyConfigurer.DependsOnDatabaseInitializationPostProcessor::new);
      return beanDefinition;
    }
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/validation/beanvalidation/MethodValidationExcludeFilter__BeanDefinitions.java
package org.springframework.boot.validation.beanvalidation;

import java.lang.Class;
import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.boot.context.properties.ConfigurationProperties;

/**
 * Bean definitions for {@link MethodValidationExcludeFilter}.
 */
public class MethodValidationExcludeFilter__BeanDefinitions {
  /**
   * Get the bean instance supplier for 'org.springframework.boot.context.properties.EnableConfigurationPropertiesRegistrar.methodValidationExcludeFilter'.
   */
  private static BeanInstanceSupplier<MethodValidationExcludeFilter> getMethodValidationExcludeFilterInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<MethodValidationExcludeFilter>forFactoryMethod(MethodValidationExcludeFilter.class, "byAnnotation", Class.class)
            .withGenerator((registeredBean, args) -> MethodValidationExcludeFilter.byAnnotation(args.get(0)));
  }

  /**
   * Get the bean definition for 'methodValidationExcludeFilter'.
   */
  public static BeanDefinition getMethodValidationExcludeFilterBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(MethodValidationExcludeFilter.class);
    beanDefinition.setTargetType(MethodValidationExcludeFilter.class);
    beanDefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
    beanDefinition.getConstructorArgumentValues().addIndexedArgumentValue(0, ConfigurationProperties.class);
    beanDefinition.setInstanceSupplier(getMethodValidationExcludeFilterInstanceSupplier());
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/web/server/ErrorPageRegistrarBeanPostProcessor__BeanDefinitions.java
package org.springframework.boot.web.server;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link ErrorPageRegistrarBeanPostProcessor}.
 */
public class ErrorPageRegistrarBeanPostProcessor__BeanDefinitions {
  /**
   * Get the bean definition for 'errorPageRegistrarBeanPostProcessor'.
   */
  public static BeanDefinition getErrorPageRegistrarBeanPostProcessorBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(ErrorPageRegistrarBeanPostProcessor.class);
    beanDefinition.setSynthetic(true);
    beanDefinition.setInstanceSupplier(ErrorPageRegistrarBeanPostProcessor::new);
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/boot/web/server/WebServerFactoryCustomizerBeanPostProcessor__BeanDefinitions.java
package org.springframework.boot.web.server;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link WebServerFactoryCustomizerBeanPostProcessor}.
 */
public class WebServerFactoryCustomizerBeanPostProcessor__BeanDefinitions {
  /**
   * Get the bean definition for 'webServerFactoryCustomizerBeanPostProcessor'.
   */
  public static BeanDefinition getWebServerFactoryCustomizerBeanPostProcessorBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(WebServerFactoryCustomizerBeanPostProcessor.class);
    beanDefinition.setSynthetic(true);
    beanDefinition.setInstanceSupplier(WebServerFactoryCustomizerBeanPostProcessor::new);
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/cache/annotation/ProxyCachingConfiguration__Autowiring.java
package org.springframework.cache.annotation;

import org.springframework.beans.factory.ObjectProvider;
import org.springframework.beans.factory.aot.AutowiredMethodArgumentsResolver;
import org.springframework.beans.factory.support.RegisteredBean;

/**
 * Autowiring for {@link ProxyCachingConfiguration}.
 */
public class ProxyCachingConfiguration__Autowiring {
  /**
   * Apply the autowiring.
   */
  public static ProxyCachingConfiguration apply(RegisteredBean registeredBean,
      ProxyCachingConfiguration instance) {
    AutowiredMethodArgumentsResolver.forRequiredMethod("setConfigurers", ObjectProvider.class).resolve(registeredBean, args -> instance.setConfigurers(args.get(0)));
    return instance;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/cache/annotation/ProxyCachingConfiguration__BeanDefinitions.java
package org.springframework.cache.annotation;

import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.InstanceSupplier;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.cache.interceptor.BeanFactoryCacheOperationSourceAdvisor;
import org.springframework.cache.interceptor.CacheInterceptor;
import org.springframework.cache.interceptor.CacheOperationSource;

/**
 * Bean definitions for {@link ProxyCachingConfiguration}.
 */
public class ProxyCachingConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'proxyCachingConfiguration'.
   */
  public static BeanDefinition getProxyCachingConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(ProxyCachingConfiguration.class);
    beanDefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
    InstanceSupplier<ProxyCachingConfiguration> instanceSupplier = InstanceSupplier.using(ProxyCachingConfiguration::new);
    instanceSupplier = instanceSupplier.andThen(ProxyCachingConfiguration__Autowiring::apply);
    beanDefinition.setInstanceSupplier(instanceSupplier);
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'org.springframework.cache.config.internalCacheAdvisor'.
   */
  private static BeanInstanceSupplier<BeanFactoryCacheOperationSourceAdvisor> getInternalCacheAdvisorInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<BeanFactoryCacheOperationSourceAdvisor>forFactoryMethod(ProxyCachingConfiguration.class, "cacheAdvisor", CacheOperationSource.class, CacheInterceptor.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(ProxyCachingConfiguration.class).cacheAdvisor(args.get(0), args.get(1)));
  }

  /**
   * Get the bean definition for 'internalCacheAdvisor'.
   */
  public static BeanDefinition getInternalCacheAdvisorBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(BeanFactoryCacheOperationSourceAdvisor.class);
    beanDefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
    beanDefinition.setInstanceSupplier(getInternalCacheAdvisorInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'cacheOperationSource'.
   */
  private static BeanInstanceSupplier<CacheOperationSource> getCacheOperationSourceInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<CacheOperationSource>forFactoryMethod(ProxyCachingConfiguration.class, "cacheOperationSource")
            .withGenerator((registeredBean) -> registeredBean.getBeanFactory().getBean(ProxyCachingConfiguration.class).cacheOperationSource());
  }

  /**
   * Get the bean definition for 'cacheOperationSource'.
   */
  public static BeanDefinition getCacheOperationSourceBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(CacheOperationSource.class);
    beanDefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
    beanDefinition.setInstanceSupplier(getCacheOperationSourceInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'cacheInterceptor'.
   */
  private static BeanInstanceSupplier<CacheInterceptor> getCacheInterceptorInstanceSupplier() {
    return BeanInstanceSupplier.<CacheInterceptor>forFactoryMethod(ProxyCachingConfiguration.class, "cacheInterceptor", CacheOperationSource.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(ProxyCachingConfiguration.class).cacheInterceptor(args.get(0)));
  }

  /**
   * Get the bean definition for 'cacheInterceptor'.
   */
  public static BeanDefinition getCacheInterceptorBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(CacheInterceptor.class);
    beanDefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
    beanDefinition.setInstanceSupplier(getCacheInterceptorInstanceSupplier());
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/cache/jcache/config/AbstractJCacheConfiguration__BeanDefinitions.java
package org.springframework.cache.jcache.config;

import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.cache.jcache.interceptor.JCacheOperationSource;

/**
 * Bean definitions for {@link AbstractJCacheConfiguration}.
 */
public class AbstractJCacheConfiguration__BeanDefinitions {
  /**
   * Get the bean instance supplier for 'jCacheOperationSource'.
   */
  private static BeanInstanceSupplier<JCacheOperationSource> getJCacheOperationSourceInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<JCacheOperationSource>forFactoryMethod(AbstractJCacheConfiguration.class, "cacheOperationSource")
            .withGenerator((registeredBean) -> registeredBean.getBeanFactory().getBean(AbstractJCacheConfiguration.class).cacheOperationSource());
  }

  /**
   * Get the bean definition for 'jCacheOperationSource'.
   */
  public static BeanDefinition getJCacheOperationSourceBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(JCacheOperationSource.class);
    beanDefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
    beanDefinition.setInstanceSupplier(getJCacheOperationSourceInstanceSupplier());
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/cache/jcache/config/ProxyJCacheConfiguration__Autowiring.java
package org.springframework.cache.jcache.config;

import org.springframework.beans.factory.ObjectProvider;
import org.springframework.beans.factory.aot.AutowiredMethodArgumentsResolver;
import org.springframework.beans.factory.support.RegisteredBean;

/**
 * Autowiring for {@link ProxyJCacheConfiguration}.
 */
public class ProxyJCacheConfiguration__Autowiring {
  /**
   * Apply the autowiring.
   */
  public static ProxyJCacheConfiguration apply(RegisteredBean registeredBean,
      ProxyJCacheConfiguration instance) {
    AutowiredMethodArgumentsResolver.forRequiredMethod("setConfigurers", ObjectProvider.class).resolveAndInvoke(registeredBean, instance);
    return instance;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/cache/jcache/config/ProxyJCacheConfiguration__BeanDefinitions.java
package org.springframework.cache.jcache.config;

import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.InstanceSupplier;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.cache.jcache.interceptor.BeanFactoryJCacheOperationSourceAdvisor;
import org.springframework.cache.jcache.interceptor.JCacheInterceptor;
import org.springframework.cache.jcache.interceptor.JCacheOperationSource;

/**
 * Bean definitions for {@link ProxyJCacheConfiguration}.
 */
public class ProxyJCacheConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'proxyJCacheConfiguration'.
   */
  public static BeanDefinition getProxyJCacheConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(ProxyJCacheConfiguration.class);
    beanDefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
    InstanceSupplier<ProxyJCacheConfiguration> instanceSupplier = InstanceSupplier.using(ProxyJCacheConfiguration::new);
    instanceSupplier = instanceSupplier.andThen(ProxyJCacheConfiguration__Autowiring::apply);
    beanDefinition.setInstanceSupplier(instanceSupplier);
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'org.springframework.cache.config.internalJCacheAdvisor'.
   */
  private static BeanInstanceSupplier<BeanFactoryJCacheOperationSourceAdvisor> getInternalJCacheAdvisorInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<BeanFactoryJCacheOperationSourceAdvisor>forFactoryMethod(ProxyJCacheConfiguration.class, "cacheAdvisor", JCacheOperationSource.class, JCacheInterceptor.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(ProxyJCacheConfiguration.class).cacheAdvisor(args.get(0), args.get(1)));
  }

  /**
   * Get the bean definition for 'internalJCacheAdvisor'.
   */
  public static BeanDefinition getInternalJCacheAdvisorBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(BeanFactoryJCacheOperationSourceAdvisor.class);
    beanDefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
    beanDefinition.setInstanceSupplier(getInternalJCacheAdvisorInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'jCacheInterceptor'.
   */
  private static BeanInstanceSupplier<JCacheInterceptor> getJCacheInterceptorInstanceSupplier() {
    return BeanInstanceSupplier.<JCacheInterceptor>forFactoryMethod(ProxyJCacheConfiguration.class, "cacheInterceptor", JCacheOperationSource.class)
            .withGenerator((registeredBean, args) -> registeredBean.getBeanFactory().getBean(ProxyJCacheConfiguration.class).cacheInterceptor(args.get(0)));
  }

  /**
   * Get the bean definition for 'jCacheInterceptor'.
   */
  public static BeanDefinition getJCacheInterceptorBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(JCacheInterceptor.class);
    beanDefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
    beanDefinition.setInstanceSupplier(getJCacheInterceptorInstanceSupplier());
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/context/event/DefaultEventListenerFactory__BeanDefinitions.java
package org.springframework.context.event;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link DefaultEventListenerFactory}.
 */
public class DefaultEventListenerFactory__BeanDefinitions {
  /**
   * Get the bean definition for 'internalEventListenerFactory'.
   */
  public static BeanDefinition getInternalEventListenerFactoryBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(DefaultEventListenerFactory.class);
    beanDefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
    beanDefinition.setInstanceSupplier(DefaultEventListenerFactory::new);
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/context/event/EventListenerMethodProcessor__BeanDefinitions.java
package org.springframework.context.event;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link EventListenerMethodProcessor}.
 */
public class EventListenerMethodProcessor__BeanDefinitions {
  /**
   * Get the bean definition for 'internalEventListenerProcessor'.
   */
  public static BeanDefinition getInternalEventListenerProcessorBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(EventListenerMethodProcessor.class);
    beanDefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
    beanDefinition.setInstanceSupplier(EventListenerMethodProcessor::new);
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/data/jpa/mapping/JpaMetamodelMappingContext__BeanDefinitions.java
package org.springframework.data.jpa.mapping;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.data.jpa.repository.config.JpaMetamodelMappingContextFactoryBean;

/**
 * Bean definitions for {@link JpaMetamodelMappingContext}.
 */
public class JpaMetamodelMappingContext__BeanDefinitions {
  /**
   * Get the bean definition for 'jpaMappingContext'.
   */
  public static BeanDefinition getJpaMappingContextBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(JpaMetamodelMappingContextFactoryBean.class);
    beanDefinition.setLazyInit(true);
    beanDefinition.setInstanceSupplier(JpaMetamodelMappingContextFactoryBean::new);
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/data/jpa/repository/support/DefaultJpaContext__BeanDefinitions.java
package org.springframework.data.jpa.repository.support;

import java.util.Set;
import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link DefaultJpaContext}.
 */
public class DefaultJpaContext__BeanDefinitions {
  /**
   * Get the bean instance supplier for 'jpaContext'.
   */
  private static BeanInstanceSupplier<DefaultJpaContext> getJpaContextInstanceSupplier() {
    return BeanInstanceSupplier.<DefaultJpaContext>forConstructor(Set.class)
            .withGenerator((registeredBean, args) -> new DefaultJpaContext(args.get(0)));
  }

  /**
   * Get the bean definition for 'jpaContext'.
   */
  public static BeanDefinition getJpaContextBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(DefaultJpaContext.class);
    beanDefinition.setLazyInit(true);
    beanDefinition.setInstanceSupplier(getJpaContextInstanceSupplier());
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/data/jpa/repository/support/EntityManagerBeanDefinitionRegistrarPostProcessor__BeanDefinitions.java
package org.springframework.data.jpa.repository.support;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link EntityManagerBeanDefinitionRegistrarPostProcessor}.
 */
public class EntityManagerBeanDefinitionRegistrarPostProcessor__BeanDefinitions {
  /**
   * Get the bean definition for 'emBeanDefinitionRegistrarPostProcessor'.
   */
  public static BeanDefinition getEmBeanDefinitionRegistrarPostProcessorBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(EntityManagerBeanDefinitionRegistrarPostProcessor.class);
    beanDefinition.setLazyInit(true);
    beanDefinition.setInstanceSupplier(EntityManagerBeanDefinitionRegistrarPostProcessor::new);
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/data/jpa/repository/support/JpaEvaluationContextExtension__BeanDefinitions.java
package org.springframework.data.jpa.repository.support;

import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link JpaEvaluationContextExtension}.
 */
public class JpaEvaluationContextExtension__BeanDefinitions {
  /**
   * Get the bean instance supplier for 'org.springframework.data.jpa.repository.support.JpaEvaluationContextExtension'.
   */
  private static BeanInstanceSupplier<JpaEvaluationContextExtension> getJpaEvaluationContextExtensionInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<JpaEvaluationContextExtension>forConstructor(char.class)
            .withGenerator((registeredBean, args) -> new JpaEvaluationContextExtension(args.get(0)));
  }

  /**
   * Get the bean definition for 'jpaEvaluationContextExtension'.
   */
  public static BeanDefinition getJpaEvaluationContextExtensionBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(JpaEvaluationContextExtension.class);
    beanDefinition.getConstructorArgumentValues().addIndexedArgumentValue(0, '\\');
    beanDefinition.setInstanceSupplier(getJpaEvaluationContextExtensionInstanceSupplier());
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/data/jpa/repository/support/JpaRepositoryFactoryBean__Autowiring.java
package org.springframework.data.jpa.repository.support;

import org.springframework.beans.factory.ObjectProvider;
import org.springframework.beans.factory.aot.AutowiredMethodArgumentsResolver;
import org.springframework.beans.factory.support.RegisteredBean;
import org.springframework.data.jpa.repository.query.JpaQueryMethodFactory;

/**
 * Autowiring for {@link JpaRepositoryFactoryBean}.
 */
public class JpaRepositoryFactoryBean__Autowiring {
  /**
   * Apply the autowiring.
   */
  public static JpaRepositoryFactoryBean apply(RegisteredBean registeredBean,
      JpaRepositoryFactoryBean instance) {
    AutowiredMethodArgumentsResolver.forRequiredMethod("setEntityPathResolver", ObjectProvider.class).resolve(registeredBean, args -> instance.setEntityPathResolver(args.get(0)));
    AutowiredMethodArgumentsResolver.forRequiredMethod("setQueryMethodFactory", JpaQueryMethodFactory.class).resolve(registeredBean, args -> instance.setQueryMethodFactory(args.get(0)));
    return instance;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/data/jpa/repository/support/JpaRepositoryFactoryBean__Autowiring1.java
package org.springframework.data.jpa.repository.support;

import org.springframework.beans.factory.ObjectProvider;
import org.springframework.beans.factory.aot.AutowiredMethodArgumentsResolver;
import org.springframework.beans.factory.support.RegisteredBean;
import org.springframework.data.jpa.repository.query.JpaQueryMethodFactory;

/**
 * Autowiring for {@link JpaRepositoryFactoryBean}.
 */
public class JpaRepositoryFactoryBean__Autowiring1 {
  /**
   * Apply the autowiring.
   */
  public static JpaRepositoryFactoryBean apply(RegisteredBean registeredBean,
      JpaRepositoryFactoryBean instance) {
    AutowiredMethodArgumentsResolver.forRequiredMethod("setEntityPathResolver", ObjectProvider.class).resolve(registeredBean, args -> instance.setEntityPathResolver(args.get(0)));
    AutowiredMethodArgumentsResolver.forRequiredMethod("setQueryMethodFactory", JpaQueryMethodFactory.class).resolve(registeredBean, args -> instance.setQueryMethodFactory(args.get(0)));
    return instance;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/data/jpa/util/JpaMetamodelCacheCleanup__BeanDefinitions.java
package org.springframework.data.jpa.util;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link JpaMetamodelCacheCleanup}.
 */
public class JpaMetamodelCacheCleanup__BeanDefinitions {
  /**
   * Get the bean definition for 'jpaMetamodelCacheCleanup'.
   */
  public static BeanDefinition getJpaMetamodelCacheCleanupBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(JpaMetamodelCacheCleanup.class);
    beanDefinition.setInstanceSupplier(JpaMetamodelCacheCleanup::new);
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/data/repository/core/support/PropertiesBasedNamedQueries__BeanDefinitions.java
package org.springframework.data.repository.core.support;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.data.repository.config.PropertiesBasedNamedQueriesFactoryBean;

/**
 * Bean definitions for {@link PropertiesBasedNamedQueries}.
 */
public class PropertiesBasedNamedQueries__BeanDefinitions {
  /**
   * Get the bean definition for 'named-queries#0'.
   */
  public static BeanDefinition getNamedqueriesBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(PropertiesBasedNamedQueriesFactoryBean.class);
    beanDefinition.getPropertyValues().addPropertyValue("locations", "classpath*:META-INF/jpa-named-queries.properties");
    beanDefinition.getPropertyValues().addPropertyValue("ignoreResourceNotFound", true);
    beanDefinition.setInstanceSupplier(PropertiesBasedNamedQueriesFactoryBean::new);
    return beanDefinition;
  }

  /**
   * Get the bean definition for 'named-queries#1'.
   */
  public static BeanDefinition getNamedqueriesBeanDefinition1() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(PropertiesBasedNamedQueriesFactoryBean.class);
    beanDefinition.getPropertyValues().addPropertyValue("locations", "classpath*:META-INF/jpa-named-queries.properties");
    beanDefinition.getPropertyValues().addPropertyValue("ignoreResourceNotFound", true);
    beanDefinition.setInstanceSupplier(PropertiesBasedNamedQueriesFactoryBean::new);
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/data/repository/core/support/RepositoryComposition__BeanDefinitions.java
package org.springframework.data.repository.core.support;

import java.util.Collections;
import java.util.List;
import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.core.ResolvableType;

/**
 * Bean definitions for {@link RepositoryComposition}.
 */
public class RepositoryComposition__BeanDefinitions {
  /**
   * Bean definitions for {@link RepositoryComposition.RepositoryFragments}.
   */
  public static class RepositoryFragments {
    /**
     * Get the bean instance supplier for 'jpa.OwnerRepository.fragments#0'.
     */
    private static BeanInstanceSupplier<RepositoryFragmentsFactoryBean> getFragmentsInstanceSupplier(
        ) {
      return BeanInstanceSupplier.<RepositoryFragmentsFactoryBean>forConstructor(List.class)
              .withGenerator((registeredBean, args) -> new RepositoryFragmentsFactoryBean(args.get(0)));
    }

    /**
     * Get the bean definition for 'fragments#0'.
     */
    public static BeanDefinition getFragmentsBeanDefinition() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(RepositoryFragmentsFactoryBean.class);
      beanDefinition.setTargetType(ResolvableType.forClass(RepositoryFragmentsFactoryBean.class));
      beanDefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
      beanDefinition.getConstructorArgumentValues().addIndexedArgumentValue(0, Collections.emptyList());
      beanDefinition.setInstanceSupplier(getFragmentsInstanceSupplier());
      return beanDefinition;
    }

    /**
     * Get the bean instance supplier for 'jpa.VetRepository.fragments#0'.
     */
    private static BeanInstanceSupplier<RepositoryFragmentsFactoryBean> getFragmentsInstanceSupplier1(
        ) {
      return BeanInstanceSupplier.<RepositoryFragmentsFactoryBean>forConstructor(List.class)
              .withGenerator((registeredBean, args) -> new RepositoryFragmentsFactoryBean(args.get(0)));
    }

    /**
     * Get the bean definition for 'fragments#0'.
     */
    public static BeanDefinition getFragmentsBeanDefinition1() {
      RootBeanDefinition beanDefinition = new RootBeanDefinition(RepositoryFragmentsFactoryBean.class);
      beanDefinition.setTargetType(ResolvableType.forClass(RepositoryFragmentsFactoryBean.class));
      beanDefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
      beanDefinition.getConstructorArgumentValues().addIndexedArgumentValue(0, Collections.emptyList());
      beanDefinition.setInstanceSupplier(getFragmentsInstanceSupplier1());
      return beanDefinition;
    }
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/data/web/config/ProjectingArgumentResolverRegistrar__BeanDefinitions.java
package org.springframework.data.web.config;

import org.springframework.beans.factory.ObjectFactory;
import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link ProjectingArgumentResolverRegistrar}.
 */
public class ProjectingArgumentResolverRegistrar__BeanDefinitions {
  /**
   * Get the bean definition for 'projectingArgumentResolverRegistrar'.
   */
  public static BeanDefinition getProjectingArgumentResolverRegistrarBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(ProjectingArgumentResolverRegistrar.class);
    beanDefinition.setInstanceSupplier(ProjectingArgumentResolverRegistrar::new);
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'projectingArgumentResolverBeanPostProcessor'.
   */
  private static BeanInstanceSupplier<ProjectingArgumentResolverRegistrar.ProjectingArgumentResolverBeanPostProcessor> getProjectingArgumentResolverBeanPostProcessorInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<ProjectingArgumentResolverRegistrar.ProjectingArgumentResolverBeanPostProcessor>forFactoryMethod(ProjectingArgumentResolverRegistrar.class, "projectingArgumentResolverBeanPostProcessor", ObjectFactory.class)
            .withGenerator((registeredBean, args) -> ProjectingArgumentResolverRegistrar.projectingArgumentResolverBeanPostProcessor(args.get(0)));
  }

  /**
   * Get the bean definition for 'projectingArgumentResolverBeanPostProcessor'.
   */
  public static BeanDefinition getProjectingArgumentResolverBeanPostProcessorBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(ProjectingArgumentResolverRegistrar.class);
    beanDefinition.setTargetType(ProjectingArgumentResolverRegistrar.ProjectingArgumentResolverBeanPostProcessor.class);
    beanDefinition.setInstanceSupplier(getProjectingArgumentResolverBeanPostProcessorInstanceSupplier());
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/data/web/config/SpringDataJacksonConfiguration__BeanDefinitions.java
package org.springframework.data.web.config;

import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.data.geo.GeoModule;

/**
 * Bean definitions for {@link SpringDataJacksonConfiguration}.
 */
public class SpringDataJacksonConfiguration__BeanDefinitions {
  /**
   * Get the bean definition for 'springDataJacksonConfiguration'.
   */
  public static BeanDefinition getSpringDataJacksonConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(SpringDataJacksonConfiguration.class);
    beanDefinition.setInstanceSupplier(SpringDataJacksonConfiguration::new);
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'jacksonGeoModule'.
   */
  private static BeanInstanceSupplier<GeoModule> getJacksonGeoModuleInstanceSupplier() {
    return BeanInstanceSupplier.<GeoModule>forFactoryMethod(SpringDataJacksonConfiguration.class, "jacksonGeoModule")
            .withGenerator((registeredBean) -> registeredBean.getBeanFactory().getBean(SpringDataJacksonConfiguration.class).jacksonGeoModule());
  }

  /**
   * Get the bean definition for 'jacksonGeoModule'.
   */
  public static BeanDefinition getJacksonGeoModuleBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(GeoModule.class);
    beanDefinition.setInstanceSupplier(getJacksonGeoModuleInstanceSupplier());
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/data/web/config/SpringDataWebConfiguration__BeanDefinitions.java
package org.springframework.data.web.config;

import org.springframework.beans.factory.ObjectFactory;
import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.context.ApplicationContext;
import org.springframework.data.web.OffsetScrollPositionHandlerMethodArgumentResolver;
import org.springframework.data.web.PageableHandlerMethodArgumentResolver;
import org.springframework.data.web.SortHandlerMethodArgumentResolver;

/**
 * Bean definitions for {@link SpringDataWebConfiguration}.
 */
public class SpringDataWebConfiguration__BeanDefinitions {
  /**
   * Get the bean instance supplier for 'org.springframework.data.web.config.SpringDataWebConfiguration'.
   */
  private static BeanInstanceSupplier<SpringDataWebConfiguration> getSpringDataWebConfigurationInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<SpringDataWebConfiguration>forConstructor(ApplicationContext.class, ObjectFactory.class)
            .withGenerator((registeredBean, args) -> new SpringDataWebConfiguration(args.get(0), args.get(1)));
  }

  /**
   * Get the bean definition for 'springDataWebConfiguration'.
   */
  public static BeanDefinition getSpringDataWebConfigurationBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(SpringDataWebConfiguration.class);
    beanDefinition.setInstanceSupplier(getSpringDataWebConfigurationInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'pageableResolver'.
   */
  private static BeanInstanceSupplier<PageableHandlerMethodArgumentResolver> getPageableResolverInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<PageableHandlerMethodArgumentResolver>forFactoryMethod(SpringDataWebConfiguration.class, "pageableResolver")
            .withGenerator((registeredBean) -> registeredBean.getBeanFactory().getBean(SpringDataWebConfiguration.class).pageableResolver());
  }

  /**
   * Get the bean definition for 'pageableResolver'.
   */
  public static BeanDefinition getPageableResolverBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(PageableHandlerMethodArgumentResolver.class);
    beanDefinition.setInstanceSupplier(getPageableResolverInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'sortResolver'.
   */
  private static BeanInstanceSupplier<SortHandlerMethodArgumentResolver> getSortResolverInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<SortHandlerMethodArgumentResolver>forFactoryMethod(SpringDataWebConfiguration.class, "sortResolver")
            .withGenerator((registeredBean) -> registeredBean.getBeanFactory().getBean(SpringDataWebConfiguration.class).sortResolver());
  }

  /**
   * Get the bean definition for 'sortResolver'.
   */
  public static BeanDefinition getSortResolverBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(SortHandlerMethodArgumentResolver.class);
    beanDefinition.setInstanceSupplier(getSortResolverInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'offsetResolver'.
   */
  private static BeanInstanceSupplier<OffsetScrollPositionHandlerMethodArgumentResolver> getOffsetResolverInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<OffsetScrollPositionHandlerMethodArgumentResolver>forFactoryMethod(SpringDataWebConfiguration.class, "offsetResolver")
            .withGenerator((registeredBean) -> registeredBean.getBeanFactory().getBean(SpringDataWebConfiguration.class).offsetResolver());
  }

  /**
   * Get the bean definition for 'offsetResolver'.
   */
  public static BeanDefinition getOffsetResolverBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(OffsetScrollPositionHandlerMethodArgumentResolver.class);
    beanDefinition.setInstanceSupplier(getOffsetResolverInstanceSupplier());
    return beanDefinition;
  }
}

../spring-petclinic/build/generated/aotSources/org/springframework/orm/jpa/SharedEntityManagerCreator__BeanDefinitions.java
package org.springframework.orm.jpa;

import jakarta.persistence.EntityManager;
import jakarta.persistence.EntityManagerFactory;
import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.config.RuntimeBeanReference;
import org.springframework.beans.factory.support.AutowireCandidateQualifier;
import org.springframework.beans.factory.support.RootBeanDefinition;

/**
 * Bean definitions for {@link SharedEntityManagerCreator}.
 */
public class SharedEntityManagerCreator__BeanDefinitions {
  /**
   * Get the bean instance supplier for 'jpaSharedEM_entityManagerFactory'.
   */
  private static BeanInstanceSupplier<EntityManager> getJpaSharedEMentityManagerFactoryInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<EntityManager>forFactoryMethod(SharedEntityManagerCreator.class, "createSharedEntityManager", EntityManagerFactory.class)
            .withGenerator((registeredBean, args) -> SharedEntityManagerCreator.createSharedEntityManager(args.get(0)));
  }

  /**
   * Get the bean definition for 'jpaSharedEM_entityManagerFactory'.
   */
  public static BeanDefinition getJpaSharedEMentityManagerFactoryBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(SharedEntityManagerCreator.class);
    beanDefinition.setTargetType(EntityManager.class);
    beanDefinition.setAutowireCandidate(false);
    beanDefinition.setRole(BeanDefinition.ROLE_SUPPORT);
    beanDefinition.setDestroyMethodNames("close");
    beanDefinition.getConstructorArgumentValues().addIndexedArgumentValue(0, new RuntimeBeanReference("entityManagerFactory"));
    beanDefinition.setInstanceSupplier(getJpaSharedEMentityManagerFactoryInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Get the bean instance supplier for 'jpaSharedEM_AWC_entityManagerFactory'.
   */
  private static BeanInstanceSupplier<EntityManager> getJpaSharedEMAWCentityManagerFactoryInstanceSupplier(
      ) {
    return BeanInstanceSupplier.<EntityManager>forFactoryMethod(SharedEntityManagerCreator.class, "createSharedEntityManager", EntityManagerFactory.class)
            .withGenerator((registeredBean, args) -> SharedEntityManagerCreator.createSharedEntityManager(args.get(0)));
  }

  /**
   * Get the bean definition for 'jpaSharedEM_AWC_entityManagerFactory'.
   */
  public static BeanDefinition getJpaSharedEMAWCentityManagerFactoryBeanDefinition() {
    RootBeanDefinition beanDefinition = new RootBeanDefinition(SharedEntityManagerCreator.class);
    beanDefinition.setTargetType(EntityManager.class);
    beanDefinition.setPrimary(true);
    beanDefinition.setLazyInit(true);
    beanDefinition.setDestroyMethodNames("close");
    beanDefinition.getConstructorArgumentValues().addIndexedArgumentValue(0, new RuntimeBeanReference("entityManagerFactory"));
    beanDefinition.addQualifier(new AutowireCandidateQualifier("org.springframework.beans.factory.annotation.Qualifier", "entityManagerFactory"));
    beanDefinition.setInstanceSupplier(getJpaSharedEMAWCentityManagerFactoryInstanceSupplier());
    return beanDefinition;
  }
}

../spring-petclinic/build/reports/tests/test/js/report.js
(function (window, document) {
    "use strict";

    var tabs = {};

    function changeElementClass(element, classValue) {
        if (element.getAttribute("className")) {
            element.setAttribute("className", classValue);
        } else {
            element.setAttribute("class", classValue);
        }
    }

    function getClassAttribute(element) {
        if (element.getAttribute("className")) {
            return element.getAttribute("className");
        } else {
            return element.getAttribute("class");
        }
    }

    function addClass(element, classValue) {
        changeElementClass(element, getClassAttribute(element) + " " + classValue);
    }

    function removeClass(element, classValue) {
        changeElementClass(element, getClassAttribute(element).replace(classValue, ""));
    }

    function initTabs() {
        var container = document.getElementById("tabs");

        tabs.tabs = findTabs(container);
        tabs.titles = findTitles(tabs.tabs);
        tabs.headers = findHeaders(container);
        tabs.select = select;
        tabs.deselectAll = deselectAll;
        tabs.select(0);

        return true;
    }

    function getCheckBox() {
        return document.getElementById("line-wrapping-toggle");
    }

    function getLabelForCheckBox() {
        return document.getElementById("label-for-line-wrapping-toggle");
    }

    function findCodeBlocks() {
        var spans = document.getElementById("tabs").getElementsByTagName("span");
        var codeBlocks = [];
        for (var i = 0; i < spans.length; ++i) {
            if (spans[i].className.indexOf("code") >= 0) {
                codeBlocks.push(spans[i]);
            }
        }
        return codeBlocks;
    }

    function forAllCodeBlocks(operation) {
        var codeBlocks = findCodeBlocks();

        for (var i = 0; i < codeBlocks.length; ++i) {
            operation(codeBlocks[i], "wrapped");
        }
    }

    function toggleLineWrapping() {
        var checkBox = getCheckBox();

        if (checkBox.checked) {
            forAllCodeBlocks(addClass);
        } else {
            forAllCodeBlocks(removeClass);
        }
    }

    function initControls() {
        if (findCodeBlocks().length > 0) {
            var checkBox = getCheckBox();
            var label = getLabelForCheckBox();

            checkBox.onclick = toggleLineWrapping;
            checkBox.checked = false;

            removeClass(label, "hidden");
         }
    }

    function switchTab() {
        var id = this.id.substr(1);

        for (var i = 0; i < tabs.tabs.length; i++) {
            if (tabs.tabs[i].id === id) {
                tabs.select(i);
                break;
            }
        }

        return false;
    }

    function select(i) {
        this.deselectAll();

        changeElementClass(this.tabs[i], "tab selected");
        changeElementClass(this.headers[i], "selected");

        while (this.headers[i].firstChild) {
            this.headers[i].removeChild(this.headers[i].firstChild);
        }

        var h2 = document.createElement("H2");

        h2.appendChild(document.createTextNode(this.titles[i]));
        this.headers[i].appendChild(h2);
    }

    function deselectAll() {
        for (var i = 0; i < this.tabs.length; i++) {
            changeElementClass(this.tabs[i], "tab deselected");
            changeElementClass(this.headers[i], "deselected");

            while (this.headers[i].firstChild) {
                this.headers[i].removeChild(this.headers[i].firstChild);
            }

            var a = document.createElement("A");

            a.setAttribute("id", "ltab" + i);
            a.setAttribute("href", "#tab" + i);
            a.onclick = switchTab;
            a.appendChild(document.createTextNode(this.titles[i]));

            this.headers[i].appendChild(a);
        }
    }

    function findTabs(container) {
        return findChildElements(container, "DIV", "tab");
    }

    function findHeaders(container) {
        var owner = findChildElements(container, "UL", "tabLinks");
        return findChildElements(owner[0], "LI", null);
    }

    function findTitles(tabs) {
        var titles = [];

        for (var i = 0; i < tabs.length; i++) {
            var tab = tabs[i];
            var header = findChildElements(tab, "H2", null)[0];

            header.parentNode.removeChild(header);

            if (header.innerText) {
                titles.push(header.innerText);
            } else {
                titles.push(header.textContent);
            }
        }

        return titles;
    }

    function findChildElements(container, name, targetClass) {
        var elements = [];
        var children = container.childNodes;

        for (var i = 0; i < children.length; i++) {
            var child = children.item(i);

            if (child.nodeType === 1 && child.nodeName === name) {
                if (targetClass && child.className.indexOf(targetClass) < 0) {
                    continue;
                }

                elements.push(child);
            }
        }

        return elements;
    }

    // Entry point.

    window.onload = function() {
        initTabs();
        initControls();
    };
} (window, window.document));
