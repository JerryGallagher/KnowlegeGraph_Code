node_1|node_2|edge|chunk_id|node_3|node_4
holdingdata.java|orderdatajsf.java|Both classes are related to handling and displaying holding and order data for users, respectively.|1bf14da7123a4002bd93831e3197c10b||
loginvalidator.java|jsfloginfilter.java|Both classes are involved in user authentication for accessing the web application's resources and functionality.|1bf14da7123a4002bd93831e3197c10b||
marketsummaryjsf.java|quotejsf.java|Both classes provide users with market summary and quote information, respectively.|1bf14da7123a4002bd93831e3197c10b||
portfoliojsf.java|tradeappjsf.java|Both classes enable users to view their portfolios and execute trades, respectively.|1bf14da7123a4002bd93831e3197c10b||
ee7-web|/src/main/java|is a directory containing Java source code files for the daytrader EE7 web application.|4474977af7974b63aaf6c2b01529b3d0||
daytrader7|/projects/sample.daytrader7|is the directory where the source code of version 7 of the daytrader web application is stored, with 'sample' being a possible prefix for project names.|4474977af7974b63aaf6c2b01529b3d0||
pingservlet2jndi.java|ee7-web|is a file containing Java source code for a web servlet named PingServlet2JNDI in the EE7 web application directory.|4474977af7974b63aaf6c2b01529b3d0||
pingservlet2jsp.java|ee7-web|is a file containing Java source code for a web servlet named PingServlet2Jsp in the EE7 web application directory.|4474977af7974b63aaf6c2b01529b3d0||
pingservlet2pdf.java|ee7-web|is a file containing Java source code for a web servlet named PingServlet2PDF in the EE7 web application directory.|4474977af7974b63aaf6c2b01529b3d0||
pingservlet2servlet.java|ee7-web|is a file containing Java source code for a web servlet named PingServlet2Servlet in the EE7 web application directory.|4474977af7974b63aaf6c2b01529b3d0||
pingservlet2servletrcv.java|ee7-web|is a file containing Java source code for a class called PingServlet2ServletRcv in the EE7 web application directory.|4474977af7974b63aaf6c2b01529b3d0||
pingservlet30async.java|ee7-web|is a file containing Java source code for a web servlet named PingServlet30Async in the EE7 web application directory.|4474977af7974b63aaf6c2b01529b3d0||
pingservlet31async.java|ee7-web|is a file containing Java source code for a web servlet named PingServlet31Async in the EE7 web application directory.|4474977af7974b63aaf6c2b01529b3d0||
pingservlet31asyncread.java|ee7-web|is a file containing Java source code for a class called PingServlet31AsyncRead in the EE7 web application directory.|4474977af7974b63aaf6c2b01529b3d0||
pingservletcdi.java|ee7-web|is a file containing Java source code for a web servlet named PingServletCDI in the EE7 web application directory.|4474977af7974b63aaf6c2b01529b3d0||
pingservletcdibeanmanagerviacdicurrent.java|ee7-web|is a file containing Java source code for a class called PingServletCDIBeanManagerViaCDICurrent in the EE7 web application directory.|4474977af7974b63aaf6c2b01529b3d0||
daytrader|ee7-web|is a directory containing the source code of the daytrader web application, which is part of the EE7 web application directory.|4474977af7974b63aaf6c2b01529b3d0||
src|daytrader|is a subdirectory within the daytrader web application directory containing its source code files.|4474977af7974b63aaf6c2b01529b3d0||
main|src|is a subdirectory within the 'src' directory of the daytrader web application, where Java source code files for this project are usually stored.|4474977af7974b63aaf6c2b01529b3d0||
java|main|is a subdirectory inside the 'main' directory of the 'src' directory of the daytrader web application, where Java source code files for this project are kept.|4474977af7974b63aaf6c2b01529b3d0||
ee7-web|/home/jerry/projects/sample.daytrader7/daytrader-ee7-web|is a directory containing the source code for the DayTrader web application in EE7 Web profile|ae8149e1905244eb903a98aa0676f3b5||
pingwebsocketjson|ee7-web|is located inside the directory 'ee7-web'|ae8149e1905244eb903a98aa0676f3b5||
pingwebsockettextasync|ee7-web|is located inside the directory 'ee7-web'|ae8149e1905244eb903a98aa0676f3b5||
pingwebsockettextsync|ee7-web|is located inside the directory 'ee7-web'|ae8149e1905244eb903a98aa0676f3b5||
pingservlet2entity|/home/jerry/projects/sample.daytrader7/daytrader-ee7-web|is a Java class located inside the directory 'daytrader-ee7-web'|ae8149e1905244eb903a98aa0676f3b5||
pingservlet2mdbqueue|/home/jerry/projects/sample.daytrader7/daytrader-ee7-web|is a Java class located inside the directory 'daytrader-ee7-web'|ae8149e1905244eb903a98aa0676f3b5||
pingservlet2mdbtopic|/home/jerry/projects/sample.daytrader7/daytrader-ee7-web|is a Java class located inside the directory 'daytrader-ee7-web'|ae8149e1905244eb903a98aa0676f3b5||
pingservlet2session2cmrone2many|/home/jerry/projects/sample.daytrader7/daytrader-ee7-web|is a Java class located inside the directory 'daytrader-ee7-web'|ae8149e1905244eb903a98aa0676f3b5||
pingservlet2session2cmrone2one|/home/jerry/projects/sample.daytrader7/daytrader-ee7-web|is a Java class located inside the directory 'daytrader-ee7-web'|ae8149e1905244eb903a98aa0676f3b5||
pingservlet2session2entity|/home/jerry/projects/sample.daytrader7/daytrader-ee7-web|is a Java class located inside the directory 'daytrader-ee7-web'|ae8149e1905244eb903a98aa0676f3b5||
pingservlet2session2entity2jsp|/home/jerry/projects/sample.daytrader7/daytrader-ee7-web|is a Java class located inside the directory 'daytrader-ee7-web'|ae8149e1905244eb903a98aa0676f3b5||
pingservlet2session2entitycollection.java|daytrader-ee7-web|The file 'PingServlet2Session2EntityCollection.java' is a part of the project 'daytrader-ee7-web'|1fe1d074b0ec4be28f2d1bde6f4cd07c||
pingservlet2session2entitycollection.java|java|The file 'PingServlet2Session2EntityCollection.java' is written in the programming language 'Java'|1fe1d074b0ec4be28f2d1bde6f4cd07c||
pingservlet2sessionlocal.java|pingservlet2session2entitycollection.java|The file 'PingServlet2SessionLocal.java' is also a part of the project 'daytrader-ee7-web', and is closely related to 'PingServlet2Session2EntityCollection.java'|1fe1d074b0ec4be28f2d1bde6f4cd07c||
pingservlet2sessionremote.java|pingservlet2sessionlocal.java|The file 'PingServlet2SessionRemote.java' is also a part of the project 'daytrader-ee7-web', and is related to 'PingServlet2SessionLocal.java'|1fe1d074b0ec4be28f2d1bde6f4cd07c||
pingservlet2twophase.java|java|The file 'PingServlet2TwoPhase.java' is written in the programming language 'Java'|1fe1d074b0ec4be28f2d1bde6f4cd07c||
actiondecoder.java|actionmessage.java|The class 'ActionDecoder.java' decodes messages of type 'ActionMessage.java'|1fe1d074b0ec4be28f2d1bde6f4cd07c||
jsondecoder.java|jsonencoder.java|The classes 'JsonDecoder.java' and 'JsonEncoder.java' are both used for encoding and decoding JSON messages|1fe1d074b0ec4be28f2d1bde6f4cd07c||
jsonmessage.java|marketsummarywebsocket.java|The class 'JsonMessage.java' is used to send and receive JSON messages in the 'MarketSummaryWebSocket.java' class|1fe1d074b0ec4be28f2d1bde6f4cd07c||
com.ibm.websphere.samples.daytrader.web|recentstockchangelist|is a part of the com.ibm.websphere.samples.daytrader.web package.|815cc6d5673a43a294126ec254331274||
com.ibm.websphere.samples.daytrader.web|ordersalertfilter|is a part of the com.ibm.websphere.samples.daytrader.web package.|815cc6d5673a43a294126ec254331274||
com.ibm.websphere.samples.daytrader.tradeaction|tradeservices|both are classes related to trade actions in Daytrader web application.|815cc6d5673a43a294126ec254331274||
license|apache license, version 2.0|is related to licensing information provided for the software distributed with Daytrader web application.|815cc6d5673a43a294126ec254331274||
com.ibm.websphere.samples.daytrader.web|filter|is a class used as a filter in the Daytrader web application.|815cc6d5673a43a294126ec254331274||
filterchain|filterconfig|both FilterChain and FilterConfig are interfaces related to configuring filters in the Daytrader web application, while HttpServletRequest and ServletResponse are classes used to represent requests and responses respectively.|815cc6d5673a43a294126ec254331274|HttpServletRequest|ServletResponse
collection|tradeservices|TradeServices can be accessed through a Collection in the Daytrader web application.|815cc6d5673a43a294126ec254331274||
ordersalertfilter|closedorders|is used to retrieve closed orders for a specific userID. The filter checks if the userID is provided and extracts the related Collection of closed orders using TradeServices and TradeAction classes. If the collection size is greater than zero, it sets the attribute 'closedOrders' in the request object.|424bf5706d4d4504bbb4b88d202e1eb4||
testservlet|daytrader-ee7-web|is a Java class file located in the directory '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/' which is part of the larger 'daytrader-ee7-web' project.|424bf5706d4d4504bbb4b88d202e1eb4||
testservlet|http get requests|Process incoming HTTP GET requests is a task performed by TestServlet for handling HTTP GET requests.|330a4a4f034747e49250553dcfd9baf9||
httpservlet|httpservletrequest|TestServlet, which extends HttpServlet, receives and processes HTTP requests through HttpServletRequest.|330a4a4f034747e49250553dcfd9baf9||
httpservlet|httpservletresponse|TestServlet, which extends HttpServlet, sends a response to the client using HttpServletResponse.|330a4a4f034747e49250553dcfd9baf9||
http get requests|httpservletrequest|HTTP GET requests are received by TestServlet through HttpServletRequest.|330a4a4f034747e49250553dcfd9baf9||
httpservletresponse|http response|TestServlet sends an HTTP response to the client using HttpServletResponse.|330a4a4f034747e49250553dcfd9baf9||
tradeconfig|com.ibm.websphere.samples.daytrader.tradeconfig|TestServlet can be configured through TradeConfig, which is a utility class provided by the DayTrader sample application.|330a4a4f034747e49250553dcfd9baf9||
log|com.ibm.websphere.samples.daytrader.log|TestServlet can log messages using Log, which is a utility class provided by the DayTrader sample application.|330a4a4f034747e49250553dcfd9baf9||
daytrader sample application|com.ibm.websphere.samples.daytrader|TestServlet can use classes from the DayTrader sample application, such as TradeAction and util.|330a4a4f034747e49250553dcfd9baf9||
tradeappservlet|httpservlet|TradeAppServlet is a subclass of HttpServlet.|3087f8d3b8a74fd0915fb1b8788b163d||
performtask|httpservletrequest|performTask is called by the HTTP request object (HttpServletRequest).|3087f8d3b8a74fd0915fb1b8788b163d||
performtask|httpservletresponse|The response from the servlet (HttpServletResponse) is returned after performTask completes.|3087f8d3b8a74fd0915fb1b8788b163d||
req|httpservletrequest|req is an instance of HttpServletRequest.|3087f8d3b8a74fd0915fb1b8788b163d||
resp|httpservletresponse|resp is an instance of HttpServletResponse.|3087f8d3b8a74fd0915fb1b8788b163d||
tradeconfig|direct|TradeConfig.runTimeMode is set to DIRECT.|3087f8d3b8a74fd0915fb1b8788b163d||
new tradeaction().createquote|s:i|createQuote creates a quote with the symbol s:i and other parameters.|3087f8d3b8a74fd0915fb1b8788b163d||
tradeaction|register|register registers a new account with the specified parameters.|3087f8d3b8a74fd0915fb1b8788b163d||
user1|password|user1 and password are used as arguments for register.|3087f8d3b8a74fd0915fb1b8788b163d||
new tradeaction().buy|s:1|buy creates an order with the symbol s:1 and other parameters.|3087f8d3b8a74fd0915fb1b8788b163d||
tradeaction|user1|The method buy() of the TradeAction class is called with 'user1' as its first argument.|ef79325cb6c845e69664bb454acf8940||
s:2|200.0|The string value 's:2' and the float value 200.0 are passed as arguments to the buy() method of the TradeAction class for 'user1'.|ef79325cb6c845e69664bb454acf8940||
thread|5000|The Thread class is invoked with 5000 milliseconds as its argument to execute a time-consuming task.|ef79325cb6c845e69664bb454acf8940||
tradeaction|getaccountdata|The method getAccountData() of the TradeAction class is called without any arguments for 'user1'.|ef79325cb6c845e69664bb454acf8940||
accountdata|resp.getwriter()|The accountData variable, which holds the account data for 'user1', is written to the PrintWriter object named resp.getWriter().|ef79325cb6c845e69664bb454acf8940||
tradeaction|getholdings|The method getHoldings() of the TradeAction class is called without any arguments for 'user1'.|ef79325cb6c845e69664bb454acf8940||
holdingdatabeans|log.printcollection()|The Collection object named holdingDataBeans, which holds the holding data for 'user1', is passed as an argument to the Log.printCollection() method.|ef79325cb6c845e69664bb454acf8940||
servletcontext|getrequestdispatcher()|The ServletContext class is invoked with getRequestDispatcher() as its method to include a file named tradehome.jsp.|ef79325cb6c845e69664bb454acf8940||
daytrader|web application|The Daytrader is a web application that can be accessed by users. It is developed using the WebServlet annotation, which is used to map HTTP requests to specific servlets.|21512a4af2a3475d8069778c10816996||
daytrader|samples|The Daytrader is a sample web application provided by IBM for demonstration purposes. It includes various features such as customer management, order processing, and product catalog.|21512a4af2a3475d8069778c10816996||
daytrader|web server|The Daytrader can be deployed on any web server that supports Servlet 3.0 specification, such as IBM WebSphere Application Server or Apache Tomcat.|21512a4af2a3475d8069778c10816996||
daytrader|java|The Daytrader is implemented in Java programming language, which enables it to run on multiple platforms and operating systems.|21512a4af2a3475d8069778c10816996||
web application|http requests|A web application receives HTTP requests from clients, which are processed by the corresponding servlets or filters. The Daytrader handles various types of HTTP requests such as GET, POST, and DELETE.|21512a4af2a3475d8069778c10816996||
web application|session management|A web application provides session management functionality to maintain the state of client sessions across multiple requests. The Daytrader uses HttpSession interface to manage user sessions and store session data.|21512a4af2a3475d8069778c10816996||
web application|javaserver pages (jsp)|A web application can use JSP technology to generate dynamic HTML content based on user requests. The Daytrader uses JSP files for displaying user interfaces and executing business logic.|21512a4af2a3475d8069778c10816996||
web application|javaserver faces (jsf)|A web application can use JSF technology to provide rich user interfaces and data-binding functionality. The Daytrader uses JSF components for creating user interfaces with minimal Java code.|21512a4af2a3475d8069778c10816996||
web application|java servlet api|A web application can use the Java Servlet API to handle HTTP requests and responses. The Daytrader uses servlets for implementing business logic, such as customer management or product catalog.|21512a4af2a3475d8069778c10816996||
web application|java persistence api (jpa)|A web application can use JPA technology to persist and retrieve data from a relational database. The Daytrader uses JPA to manage customer, order, and product entities in the database.|21512a4af2a3475d8069778c10816996||
web application|javaserver pages standard tag library (jstl)|A web application can use JSTL technology to provide a set of standard tags for manipulating data and iterating over collections. The Daytrader uses JSTL tags for displaying lists, loops, and conditions in JSP files.|21512a4af2a3475d8069778c10816996||
web application|javaserver faces resource bundle (jsf-rb)|A web application can use JSF-RB technology to provide a mechanism for internationalization and localization of user interfaces. The Daytrader uses JSF-RB to support multiple languages and regional formats.|21512a4af2a3475d8069778c10816996||
web application|java naming and directory interface (jndi)|A web application can use JNDI technology to access various resources such as database connections, messaging queues, and mail sessions. The Daytrader uses JNDI to connect to the database and load configuration data from the environment.|21512a4af2a3475d8069778c10816996||
web application|javamail api|A web application can use JavaMail API to send and receive email messages. The Daytrader uses JavaMail to generate notification emails for order processing and product delivery.|21512a4af2a3475d8069778c10816996||
web application|java message service (jms)|A web application can use JMS technology to send and receive messages between distributed applications. The Daytrader uses JMS to support asynchronous processing of orders and products.|21512a4af2a3475d8069778c10816996||
web application|java server pages expression language (el)|A web application can use EL technology to provide a simple and concise syntax for expressing dynamic content in JSP files. The Daytrader uses EL to bind variables and expressions to the user interface.|21512a4af2a3475d8069778c10816996||
web application|java server pages standard tag library (jstl)|A web application can use JSTL technology to provide a set of standard tags for manipulating data and iterating over collections. The Daytrader uses JSTL tags for displaying lists, loops, and conditions in JSP files.|21512a4af2a3475d8069778c10816996||
web application|java database connectivity (jdbc)|A web application can use JDBC technology to access relational databases using a standard interface. The Daytrader uses JDBC to retrieve and store data in the database.|21512a4af2a3475d8069778c10816996||
web application|java persistence api (jpa)|A web application can use JPA technology to provide a standardized way of accessing and manipulating persistent objects. The Daytrader uses JPA to manage customer, order, and product entities in the database.|21512a4af2a3475d8069778c10816996||
web application|java server pages standard tag library (jstl)|A web application can use JSTL technology to provide a set of standard tags for manipulating data and iterating over collections. The Daytrader uses JSTL tags for displaying lists, loops, and conditions in JSP files.|21512a4af2a3475d8069778c10816996||
web application|javaserver faces (jsf)|A web application can use JSF technology to provide rich user interfaces and data-binding functionality. The Daytrader uses JSF components for creating user interfaces with minimal Java code.|21512a4af2a3475d8069778c10816996||
web application|javaserver faces resource bundle (jsf-rb)|A web application can use JSF-RB technology to provide a mechanism for internationalization and localization of user interfaces. The Daytrader uses JSF-RB to support multiple languages and regional formats.|21512a4af2a3475d8069778c10816996||
web application|java server pages expression language (el)|A web application can use EL technology to provide a simple and concise syntax for expressing dynamic content in JSP files. The Daytrader uses EL to bind variables and expressions to the user interface.|21512a4af2a3475d8069778c10816996||
web application|java server pages standard tag library (jstl)|A web application can use JSTL technology to provide a set of standard tags for manipulating data and iterating over collections. The Daytrader uses JSTL tags for displaying lists, loops, and conditions in JSP files.|21512a4af2a3475d8069778c10816996||
web application|javaserver faces (jsf)|A web application can use JSF technology to provide rich user interfaces and data-binding functionality. The Daytrader uses JSF components for creating user interfaces with minimal Java code.|21512a4af2a3475d8069778c10816996||
web application|javaserver faces resource bundle (jsf-rb)|A web application can use JSF-RB technology to provide a mechanism for internationalization and localization of user interfaces. The Daytrader uses JSF-RB to support multiple languages and regional formats.|21512a4af2a3475d8069778c10816996||
web application|java server pages expression language (el)|A web application can use EL technology to provide a simple and concise syntax for expressing dynamic content in JSP files. The Daytrader uses EL to bind variables and expressions to the user interface.|21512a4af2a3475d8069778c10816996||
web application|java server pages standard tag library (jstl)|A web application can use JSTL technology to provide a set of standard tags for manipulating data and iterating over collections. The Daytrader uses JSTL tags for displaying lists, loops, and conditions in JSP files.|21512a4af2a3475d8069778c10816996||
web application|javaserver faces (jsf)|A web application can use JSF technology to provide rich user interfaces and data-binding functionality. The Daytrader uses JSF components for creating user interfaces with minimal Java code.|21512a4af2a3475d8069778c10816996||
web application|javaserver faces resource bundle (jsf-rb)|A web application can use JSF-RB technology to provide a mechanism for internationalization and localization of user interfaces. The Daytrader uses JSF-RB to support multiple languages and regional formats.|21512a4af2a3475d8069778c10816996||
web application|java server pages expression language (el)|A web application can use EL technology to provide a simple and concise syntax for expressing dynamic content in JSP files. The Daytrader uses EL to bind variables and expressions to the user interface.|21512a4af2a3475d8069778c10816996||
web application|java server pages standard tag library (jstl)|A web application can use JSTL technology to provide a set of standard tags for manipulating data and iterating over collections. The Daytrader uses JSTL tags for displaying lists, loops, and conditions in JSP files.|21512a4af2a3475d8069778c10816996||
web application|javaserver faces (jsf)|A web application can use JSF technology to provide rich user interfaces and data-binding functionality. The Daytrader uses JSF components for creating user interfaces with minimal Java code.|21512a4af2a3475d8069778c10816996||
web application|javaserver faces resource bundle (jsf-rb)|A web application can use JSF-RB technology to provide a mechanism for internationalization and localization of user interfaces. The Daytrader uses JSF-RB to support multiple languages and regional formats.|21512a4af2a3475d8069778c10816996||
web application|java server pages expression language (el)|A web application can use EL technology to provide a simple and concise syntax for expressing dynamic content in JSP files. The Daytrader uses EL to bind variables and expressions to the user interface.|21512a4af2a3475d8069778c10816996||
web application|java server pages standard tag library (jstl)|A web application can use JSTL technology to provide a set of standard tags for manipulating data and iterating over collections. The Daytrader uses JSTL tags for displaying lists, loops, and conditions in JSP files.|21512a4af2a3475d8069778c10816996||
web application|javaserver faces (jsf)|A web application can use JSF technology to provide rich user interfaces and data-binding functionality. The Daytrader uses JSF components for creating user interfaces with minimal Java code.|21512a4af2a3475d8069778c10816996||
web application|javaserver faces resource bundle (jsf-rb)|A web application can use JSF-RB technology to provide a mechanism for internationalization and localization of user interfaces. The Daytrader uses JSF-RB to support multiple languages and regional formats.|21512a4af2a3475d8069778c10816996||
web application|java server pages expression language (el)|A web application can use EL technology to provide a simple and concise syntax for expressing dynamic content in JSP files. The Daytrader uses EL to bind variables and expressions to the user interface.|21512a4af2a3475d8069778c10816996||
web application|java server pages standard tag library (jstl)|A web application can use JSTL technology to provide a set of standard tags for manipulating data and iterating over collections. The Daytrader uses JSTL tags for displaying lists, loops, and conditions in JSP files.|21512a4af2a3475d8069778c10816996||
web application|javaserver faces (jsf)|A web application can use JSF technology to provide rich user interfaces and data-binding functionality. The Daytrader uses JSF components for creating user interfaces with minimal Java code.|21512a4af2a3475d8069778c10816996||
web application|javaserver faces resource bundle (jsf-rb)|A web application can use JSF-RB technology to provide a mechanism for internationalization and localization of user interfaces. The Daytrader uses JSF-RB to support multiple languages and regional formats.|21512a4af2a3475d8069778c10816996||
web application|java server pages expression language (el)|A web application can use EL technology to provide a simple and concise syntax for expressing dynamic content in JSP files. The Daytrader uses EL to bind variables and expressions to the user interface.|21512a4af2a3475d8069778c10816996||
web application|java server pages standard tag library (jstl)|A web application can use JSTL technology to provide a set of standard tags for manipulating data and iterating over collections. The Daytrader uses JSTL tags for displaying lists, loops, and conditions in JSP files.|21512a4af2a3475d8069778c10816996||
web application|javaserver faces (jsf)|A web application can use JSF technology to provide rich user interfaces and data-binding functionality. The Daytrader uses JSF components for creating user interfaces with minimal Java code.|21512a4af2a3475d8069778c10816996||
web application|javaserver faces resource bundle (jsf-rb)|A web application can use JSF-RB technology to provide a mechanism for internationalization and localization of user interfaces. The Daytrader uses JSF-RB to support multiple languages and regional formats.|21512a4af2a3475d8069778c10816996||
web application|java server pages expression language (el)|A web application can use EL technology to provide a simple and concise syntax for expressing dynamic content in JSP files. The Daytrader uses EL to bind variables and expressions to the user interface.|21512a4af2a3475d8069778c10816996||
web application|java server pages standard tag library (jstl)|A web application can use JSTL technology to provide a set of standard tags for manipulating data and iterating over collections. The Daytrader uses JSTL tags for displaying lists, loops, and conditions in JSP files.|21512a4af2a3475d8069778c10816996||
web application|javaserver faces (jsf)|A web application can use JSF technology to provide rich user interfaces and data-binding functionality. The Daytrader uses JSF components for creating user interfaces with minimal Java code.|21512a4af2a3475d8069778c10816996||
web application|javaserver faces resource bundle (jsf-rb)|A web application can use JSF-RB technology to provide a mechanism for internationalization and localization of user interfaces. The Daytrader uses JSF-RB to support multiple languages and regional formats.|21512a4af2a3475d8069778c10816996||
web application|java server pages expression language (el)|A web application can use EL technology to provide a simple and concise syntax for expressing dynamic content in JSP files. The Daytrader uses EL to bind variables and expressions to the user interface.|21512a4af2a3475d8069778c10816996||
web application|java server pages standard tag library (jstl)|A web application can use JSTL technology to provide a set of standard tags for manipulating data and iterating over collections. The Daytrader uses JSTL tags for displaying lists, loops, and conditions in JSP files.|21512a4af2a3475d8069778c10816996||
tradeappservlet|httpservlet|TradeAppServlet is a subclass of HttpServlet.|1d354d393c06468282b0442d327bb123||
servletconfiguration|servletconfig|servletConfiguration is an object of type ServletConfig.|1d354d393c06468282b0442d327bb123||
httpservlet|httpservlet|HttpServlet is a subclass of HttpServlet.|1d354d393c06468282b0442d327bb123||
go trade!|tradeappservlet|Go Trade! links to TradeAppServlet.|1d354d393c06468282b0442d327bb123||
web interface|tradeappservlet|TradeAppServlet provides the standard web interface to Trade.|1d354d393c06468282b0442d327bb123||
web load generator|sophisticated web load generator|Driving benchmark load using this interface requires a sophisticated web load generator that is capable of filling HTML forms and posting dynamic data.|1d354d393c06468282b0442d327bb123||
tradedirect|tradeappservlet:init -- error initializing tradedirect|try { // TODO: Uncomment this once split-tier issue is resolved // TradeDirect.init(); } catch (Exception e) {|1d354d393c06468282b0442d327bb123||
configparam|tradeconfig|TradeConfig.setConfigParam(parm, value)|1d354d393c06468282b0442d327bb123||
enumeration|enumeration of initparameternames|while (en.hasMoreElements()) {|1d354d393c06468282b0442d327bb123||
tradeappservlet|httpservlet|TradeAppServlet is a subclass of HttpServlet|ea22295736484bd0b6f446c01705e647||
tradeappservlet|servlet|TradeAppServlet is an instance of servlet|ea22295736484bd0b6f446c01705e647||
performtask|tradeappservlet|performTask() is a method of TradeAppServlet|ea22295736484bd0b6f446c01705e647||
action|request|action is a parameter passed in request|ea22295736484bd0b6f446c01705e647||
userid|null|userID is initially null|ea22295736484bd0b6f446c01705e647||
tsaction|tradeservletaction|tsAction is an instance of TradeServletAction|ea22295736484bd0b6f446c01705e647||
action|req|used in the same sentence to extract data from HTTP request|dd9beb0c69c148d5b9080a1b766840b6||
action|userid|both used to authenticate user's identity|dd9beb0c69c148d5b9080a1b766840b6||
userid|session|"stored in session and retrieved using getAttribute(""uidBean"")"|dd9beb0c69c148d5b9080a1b766840b6||
userid|logged in|User is logged into the application|53580e66e44e42f7885ae8b179822d17||
tradeappservlet|service error|The TradeAppServlet may encounter an error during service execution, which will be displayed to the user.|53580e66e44e42f7885ae8b179822d17||
userid|not logged in|If the user ID is null, it indicates that the user is not currently logged into the application.|53580e66e44e42f7885ae8b179822d17||
action|quotes|The user initiated a request for quotes with the specified symbols.|53580e66e44e42f7885ae8b179822d17||
symbols|quotes|The user provided one or more stock symbols to retrieve live market data for.|53580e66e44e42f7885ae8b179822d17||
userid|buy|The user initiated a request to purchase shares of the specified stock with the specified quantity.|53580e66e44e42f7885ae8b179822d17||
symbol|buy|The user provided the stock symbol for the security they wish to buy.|53580e66e44e42f7885ae8b179822d17||
quantity|buy|The user specified the number of shares they wish to purchase.|53580e66e44e42f7885ae8b179822d17||
holdingid|sell|The holding ID is used to identify a specific security position that the user wishes to sell.|53580e66e44e42f7885ae8b179822d17||
action|portfolio|The user requested to view their current portfolio of holdings.|53580e66e44e42f7885ae8b179822d17||
action|portfolionoedge|A variant of the 'portfolio' action that does not display any additional information, such as market data or charts, which may impact performance or cause edge cases in certain trading strategies.|53580e66e44e42f7885ae8b179822d17||
userid|logout|The user initiated a request to log out of the application.|53580e66e44e42f7885ae8b179822d17||
home||The 'Home' page provides an overview of the user's current trading positions and any relevant market data.|53580e66e44e42f7885ae8b179822d17||
action|account|The user requested to view or modify their account information, such as password or contact details.|53580e66e44e42f7885ae8b179822d17||
password|update_profile|The user provided a new password to update their account credentials.|53580e66e44e42f7885ae8b179822d17||
cpassword|update_profile|The user confirmed their new password during the account update process.|53580e66e44e42f7885ae8b179822d17||
fullname|update_profile|The user provided a new full name to update their contact details.|53580e66e44e42f7885ae8b179822d17||
address|update_profile|The user provided a new address to update their contact details.|53580e66e44e42f7885ae8b179822d17||
creditcard|update_profile|The user provided a new credit card number to update their payment information.|53580e66e44e42f7885ae8b179822d17||
email|update_profile|The user provided a new email address to update their contact details or for communication purposes.|53580e66e44e42f7885ae8b179822d17||
daytrader|web|both 'daytrader' and 'web' appear in the package statement of the TradeBuildDB.java file, implying a relationship between the DayTrader application and its web component|65b614e9d40d496e849e6c0f7f796b86||
tradeappservlet|action|the 'TradeAppServlet' class in this file handles requests based on a specified 'action'|65b614e9d40d496e849e6c0f7f796b86||
password.trim()|"cpassword == null ? """" : cpassword.trim()"|both 'password' and 'cpassword' are being trimmed in this block of code, possibly for input validation purposes|65b614e9d40d496e849e6c0f7f796b86||
email.trim()|"email == null ? """" : email.trim()"|both 'email' and its optional counterpart are being trimmed in this block of code, possibly for input validation purposes|65b614e9d40d496e849e6c0f7f796b86||
userid|tsaction.domarketsummary(ctx, req, resp, userid)|the 'userID' is being passed as an argument to the 'tsAction.doMarketSummary' method, indicating that this method might be associated with market summary generation for a specific user|65b614e9d40d496e849e6c0f7f796b86||
tradeappservlet|invalid action|an error message containing 'Invalid Action=' is being displayed by the TradeAppServlet class, suggesting that this class might be responsible for handling invalid requests based on a specified 'action'|65b614e9d40d496e849e6c0f7f796b86||
tradebuilddb.java|/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/tradebuilddb.java|both 'TradeBuildDB.java' and its file path appear in this context, indicating that this Java class is located at the specified location|65b614e9d40d496e849e6c0f7f796b86||
tradebuilddb|direct mode|The TradeBuildDB process is being executed in direct mode, which is faster.|7896cd9d4c824d6dba77b3b73e5a36d8||
tradedirect|tradebuilddb|TradeDirect is used to build the DayTrader database during the TradeBuildDB process.|7896cd9d4c824d6dba77b3b73e5a36d8||
tradestatistics|tradebuilddb|The statistics feature of TradeStatistics is being disabled during the TradeBuildDB process.|7896cd9d4c824d6dba77b3b73e5a36d8||
em|out|A message with a header and an embedded element is printed to the output stream during the TradeBuildDB process.|7896cd9d4c824d6dba77b3b73e5a36d8||
out.println|em|The println() method of the out object is being used to write a message to the output stream, which is initiated by the Em element.|7896cd9d4c824d6dba77b3b73e5a36d8||
ddlfile|tradebuilddb|The ddlFile variable is being used in the TradeBuildDB process to parse and fill SQL commands into a buffer.|7896cd9d4c824d6dba77b3b73e5a36d8||
parseddltobuffer|ddlfile|The parseDDLToBuffer() method is being used to parse the DDL file specified by the ddlFile variable.|7896cd9d4c824d6dba77b3b73e5a36d8||
sqlbuffer|parseddltobuffer|The sqlBuffer object is being filled with SQL commands parsed from the DDL file during the TradeBuildDB process.|7896cd9d4c824d6dba77b3b73e5a36d8||
daytrader tables|success|The method recreateDBTables(sqlBuffer, out) returns a boolean value representing success or failure of dropping and recreating the DayTrader tables. If success is true, it indicates that the DayTrader tables have been successfully created.|3521f0a1d0464257be430a3d1c2b1851||
daytrader tables|database consistency|The method recreateDBTables(sqlBuffer, out) checks for database consistency before dropping and recreating the DayTrader tables. If the database is not consistent, an error message is displayed and the function returns.|3521f0a1d0464257be430a3d1c2b1851||
daytrader application|repopulate daytrader database link|The output message suggests stopping and restarting the DayTrader application (or the application server) after dropping and recreating the DayTrader tables. The user is then instructed to use the 'Repopulate Daytrader Database' link to populate the database.|3521f0a1d0464257be430a3d1c2b1851||
tradebuilddb|max_quotes|is invoking the getMAX_QUOTES() method to retrieve the maximum number of quotes to be created.|67c7356fdedf4c95bf9594141a1fef0e||
tradedirect|resettrade|method used in an attempt to delete all Trade users and Trade Quotes. Arguments passed: boolean flag indicating complete deletion of all users and quotes.|67c7356fdedf4c95bf9594141a1fef0e||
log|error|logging error messages using this logger object for both the unsuccessful delete operation and failed attempts to create quotes. Arguments passed: exception object and an error message explaining the reason for inability to perform operation.|67c7356fdedf4c95bf9594141a1fef0e||
symbol|i|for loop iterating through integer values from 0 to MAX_QUOTES, setting symbol variable accordingly. Symbol format: s followed by a 3-digit number.|67c7356fdedf4c95bf9594141a1fef0e||
companyname|i|for loop iterating through integer values from 0 to MAX_QUOTES, setting company name variable accordingly. Company Name format: S followed by the corresponding digit number and Incorporated.|67c7356fdedf4c95bf9594141a1fef0e||
tradedirect|createquote|method used to create MAX_QUOTES quotes with their respective symbols and company names. Arguments passed: symbol, company name, initial price value.|67c7356fdedf4c95bf9594141a1fef0e||
out|print|used for printing ellipses in the console output to indicate progress while populating trade db with quotes. Used with the 'for' loop to print only every 10th quote.|67c7356fdedf4c95bf9594141a1fef0e||
out|println|used for printing new line and blank spaces in console output to separate sections of code. Used with the 'for' loop to print only every 100th quote.|67c7356fdedf4c95bf9594141a1fef0e||
out|<br>|used for printing new line and blank spaces in console output to separate sections of code. Used before the 'for' loop and after it.|67c7356fdedf4c95bf9594141a1fef0e||
tradebuilddb|parseddltobuffer|TradeBuildDB contains the method parseDDLToBuffer to read and parse DDL statements from a file.|cc50b7b10949485e898dcb6c97a2455c||
inputstream|ddlfile|The variable ddlFile in the parseDDLToBuffer method is of type InputStream, used to read data from a file or input source.|cc50b7b10949485e898dcb6c97a2455c||
bufferedreader|br|Inside the parseDDLToBuffer method, an object of BufferedReader class is created using InputStreamReader to read data from the file in a buffer.|cc50b7b10949485e898dcb6c97a2455c||
arraylist<string>|sqlbuffer|The sql statements read from the input file are stored in an ArrayList of type String called sqlBuffer with an initial capacity of 30.|cc50b7b10949485e898dcb6c97a2455c||
stringbuilder|sql|Inside the while loop, a StringBuilder object named sql is used to concatenate the SQL statements read from the file. The semicolon separator at the end of each SQL statement is replaced by a space to store multiple SQL statements in the same variable.|cc50b7b10949485e898dcb6c97a2455c||
string|sql|The StringBuilder object sql contains the concatenated SQL statements read from the input file.|cc50b7b10949485e898dcb6c97a2455c||
tradebuilddb|sampledb|In the provided context, 'TradeBuildDB' and 'SampleDB' do not directly relate to each other.|a949ff4bd3bf4d99b6b91dbcaf9354b5||
java.lang.string[]|args|In the provided context, 'java.lang.String[]' and 'args' are parameters passed to the 'main' method of the 'TradeBuildDB' class.|a949ff4bd3bf4d99b6b91dbcaf9354b5||
new tradebuilddb()|tradebuilddb|In the provided context, 'new TradeBuildDB()' is creating a new instance of the 'TradeBuildDB' class.|a949ff4bd3bf4d99b6b91dbcaf9354b5||
com.ibm.websphere.samples.daytrader.web|tradeconfigservlet|In the provided context, 'com.ibm.websphere.samples.daytrader.web' and 'TradeConfigServlet' belong to the same package.|a949ff4bd3bf4d99b6b91dbcaf9354b5||
/home/jerry/projects/sample.daytrader7|daytrader-ee7-web|In the provided context, '/home/jerry/projects/sample.daytrader7' and 'daytrader-ee7-web' are both present in the same directory structure.|a949ff4bd3bf4d99b6b91dbcaf9354b5||
daytrader-ee7-web|src|In the provided context, 'daytrader-ee7-web' and 'src' are both part of the directory structure.|a949ff4bd3bf4d99b6b91dbcaf9354b5||
com.ibm.websphere.samples.daytrader.web|tradeconfigservlet|In the provided context, 'com.ibm.websphere.samples.daytrader.web' and 'TradeConfigServlet' are both part of the same package.|a949ff4bd3bf4d99b6b91dbcaf9354b5||
java.servlet.servletconfig|servletconfig|In the provided context, 'java.servlet.ServletConfig' and 'ServletConfig' refer to the same entity.|a949ff4bd3bf4d99b6b91dbcaf9354b5||
javax.servlet.servletexception|servletexception|In the provided context, 'javax.servlet.ServletException' and 'ServletException' refer to the same exception class.|a949ff4bd3bf4d99b6b91dbcaf9354b5||
java.io.ioexception|ioexception|In the provided context, 'java.io.IOException' and 'IOException' refer to the same exception class.|a949ff4bd3bf4d99b6b91dbcaf9354b5||
javax.servlet.http.httpservletrequest|httpservletrequest|In the provided context, 'javax.servlet.http.HttpServletRequest' and 'HttpServletRequest' refer to the same request entity.|a949ff4bd3bf4d99b6b91dbcaf9354b5||
javax.servlet.http.httpservletresponse|httpservletresponse|In the provided context, 'javax.servlet.http.HttpServletResponse' and 'HttpServletResponse' refer to the same response entity.|a949ff4bd3bf4d99b6b91dbcaf9354b5||
com.ibm.websphere.samples.daytrader.beans.runstatsdatabean|runstatsdatabean|In the provided context, 'com.ibm.websphere.samples.daytrader.beans.RunStatsDataBean' and 'RunStatsDataBean' refer to the same data bean class.|a949ff4bd3bf4d99b6b91dbcaf9354b5||
com.ibm.websphere.samples.daytrader.direct|tradedirect|In the provided context, 'com.ibm.websphere.samples.daytrader.direct' and 'TradeDirect' belong to the same package.|a949ff4bd3bf4d99b6b91dbcaf9354b5||
com.ibm.websphere.samples.daytrader.util|log|In the provided context, 'com.ibm.websphere.samples.daytrader.util' and 'Log' belong to the same package.|a949ff4bd3bf4d99b6b91dbcaf9354b5||
com.ibm.websphere.samples.daytrader.util|tradeconfig|In the provided context, 'com.ibm.websphere.samples.daytrader.util' and 'TradeConfig' belong to the same package.|a949ff4bd3bf4d99b6b91dbcaf9354b5||
tradeconfigservlet|httpservlet|TradeConfigServlet is a subclass of HttpServlet.|45c1dfa6a16b48deba629720a3baff0c||
tradeconfigservlet|webservlet annotation|TradeConfigServlet is annotated with @WebServlet to provide a servlet interface for adjusting DayTrader runtime parameters.|45c1dfa6a16b48deba629720a3baff0c||
tradeconfigservlet|httpservletrequest|TradeConfigServlet receives HttpServletRequest and returns HttpServletResponse in the doConfigDisplay() method.|45c1dfa6a16b48deba629720a3baff0c|HttpServletResponse|
doconfigdisplay() method|req attribute|The req attribute is used to set attributes for the TradeConfig bean and display the current Trade runtime configuration in the doConfigDisplay() method.|45c1dfa6a16b48deba629720a3baff0c||
tradeconfigservlet|servletcontext|TradeConfigServlet retrieves the ServletContext object to obtain a RequestDispatcher and include a page in the doConfigDisplay() method.|45c1dfa6a16b48deba629720a3baff0c||
tradeconfigservlet|tradeconfig|TradeConfigServlet creates a new instance of TradeConfig to hold all configuration and runtime parameters for the Trade application in the doConfigDisplay() method.|45c1dfa6a16b48deba629720a3baff0c||
tradeconfig|config.jsp page|TradeConfig is passed the config.jsp page to display the current Trade runtime configuration in the init() method of TradeConfigServlet.|45c1dfa6a16b48deba629720a3baff0c||
traderesetcompletion|successfuloperation|The message 'Trade Reset completed successfully' indicates a successful operation. This is followed by setting the attributes for runStatsData, tradeConfig, and results.|43c99ad647b84ec6ba4be00eb15564b2||
runstatsdata|traderesetcompletion|The variable 'runStatsData' is assigned a new instance of RunStatsDataBean after successfully resetting the trade.|43c99ad647b84ec6ba4be00eb15564b2||
tradeconfig|traderesetcompletion|The variable 'tradeConfig' is set with the updated configuration after successfully resetting the trade.|43c99ad647b84ec6ba4be00eb15564b2||
results|traderesetcompletion|The variable 'results' is assigned a new string after successfully resetting the trade, which contains the message and any other relevant information.|43c99ad647b84ec6ba4be00eb15564b2||
status|results|The variable 'status' is set with the value of 'results' after successfully resetting the trade.|43c99ad647b84ec6ba4be00eb15564b2||
requestdispatcher|stats_page|The request dispatcher for STATS_PAGE is invoked, which shows the updated statistics and configuration information.|43c99ad647b84ec6ba4be00eb15564b2||
tradeconfig|currentconfigstr|The current configuration is included in a string variable 'currentConfigStr'.|43c99ad647b84ec6ba4be00eb15564b2||
results|doconfigupdate|Inside the method 'doConfigUpdate', a new string variable 'results' is assigned.|43c99ad647b84ec6ba4be00eb15564b2||
maxquotes|tradeconfig|TradeConfig object contains a property called MaxQuotes that stores the maximum number of quotes allowed in the system.|5415e3263678443cac58fd4877fc023f||
max_quotes|tradeconfig|The TradeConfig.setMAX_QUOTES(int) method is used to set the value of MAX_QUOTES property in the TradeConfig object, which stores the maximum number of quotes allowed in the system.|5415e3263678443cac58fd4877fc023f||
parm|"req.getparameter(""maxquotes"")"|"The ""MaxQuotes"" parameter passed in the request is extracted using the getParameter() method of req object."|5415e3263678443cac58fd4877fc023f||
max_users|tradeconfig|The TradeConfig.setMAX_USERS(int) method is used to set the value of MAX_USERS property in the TradeConfig object, which stores the maximum number of users allowed in the system.|5415e3263678443cac58fd4877fc023f||
parm|"req.getparameter(""maxusers"")"|"The ""MaxUsers"" parameter passed in the request is extracted using the getParameter() method of req object."|5415e3263678443cac58fd4877fc023f||
node_1|node_2|edge|chunk_id|node_3|node_4
percentsenttowebsocket|integer|is parsed into integer value for configuration purpose|bd72635237cd49e7ade911c52b043b82||
currentconfigstr|percentsenttowebsocket|is included in the string representation of current config|bd72635237cd49e7ade911c52b043b82||
tradeconfig.setpercentsenttowebsocket(integer.parseint(parm))|currentconfigstr|is executed before updating currentConfigStr|bd72635237cd49e7ade911c52b043b82||
log.error|reverting to current value|is executed when exception occurs while setting percentSentToWebsocket|bd72635237cd49e7ade911c52b043b82||
parm|integer|is parsed into integer value for configuration purpose but an exception occurred|bd72635237cd49e7ade911c52b043b82||
currentconfigstr|enablelongrun|is included in the string representation of current config|bd72635237cd49e7ade911c52b043b82||
"req.getparameter(""enablelongrun"")"|tradeconfig.setlongrun(true)|is executed when EnableLongRun parameter is passed|bd72635237cd49e7ade911c52b043b82||
currentconfigstr|displayorderalerts|is included in the string representation of current config|bd72635237cd49e7ade911c52b043b82||
"req.getparameter(""displayorderalerts"")"|tradeconfig.setdisplayorderalerts(true)|is executed when DisplayOrderAlerts parameter is passed|bd72635237cd49e7ade911c52b043b82||
log.settrace(false)|log.setactiontrace(false)|is executed when neither enableTrace nor enableActionTrace parameter is passed|bd72635237cd49e7ade911c52b043b82|enableTrace|enableActionTrace
"req.getparameter(""enabletrace"")"|log.settrace(true)|is executed when EnableTrace parameter is passed|bd72635237cd49e7ade911c52b043b82||
log.setactiontrace(false)|enableactiontrace|is executed when enableActionTrace parameter is passed but not EnableTrace|bd72635237cd49e7ade911c52b043b82|"req.getParameter(""EnableActionTrace"")"|
currentconfigstr|log.settrace(true)|is included in the string representation of current config|bd72635237cd49e7ade911c52b043b82||
currentconfigstr|log.setactiontrace(false)|is included in the string representation of current config|bd72635237cd49e7ade911c52b043b82||
servlet|httpservlet|HttpServlet is a type of Servlet.|d58f77919b3b4174aabb7d33f8eb096b||
urlpatterns|/scenario|URLPatterns specify the URL that invokes this servlet.|d58f77919b3b4174aabb7d33f8eb096b||
init()|servlet initialization method|The init() method is called during the initialization of the Servlet.|d58f77919b3b4174aabb7d33f8eb096b||
config.getinitparameternames()|enumeration<string>|This method returns an enumeration containing the names of all the initialization parameters for this servlet.|d58f77919b3b4174aabb7d33f8eb096b||
enumeration|while loop|The while loop iterates through the initialization parameters and stores them in TradeConfig using setConfigParam() method.|d58f77919b3b4174aabb7d33f8eb096b||
tradescenarioservlet|servlet information|Returns a string that contains information about TradeScenarioServlet|a8b15cdc28de4f50b22e0e5ad9270991||
getservletinfo|tradescenarioservlet| getServletInfo method of TradeScenarioServlet|a8b15cdc28de4f50b22e0e5ad9270991||
doget|tradescenarioservlet|Process incoming HTTP GET requests|a8b15cdc28de4f50b22e0e5ad9270991||
request|doget|Object that encapsulates the request to the servlet|a8b15cdc28de4f50b22e0e5ad9270991||
response|doget|Object that encapsulates the response from the servlet|a8b15cdc28de4f50b22e0e5ad9270991||
performtask|tradescenarioservlet|Main service method for TradeScenarioServlet|a8b15cdc28de4f50b22e0e5ad9270991||
request|performtask|Object that encapsulates the request to the servlet|a8b15cdc28de4f50b22e0e5ad9270991||
response|performtask|Object that encapsulates the response from the servlet|a8b15cdc28de4f50b22e0e5ad9270991||
char|action| ' '; |a8b15cdc28de4f50b22e0e5ad9270991||
tradescenarioservlet|resp|The variable resp represents the HTTP response object for serving requests to TradeAppServlet.|8109e068615e460ab9d47a669c3fa261||
req|disppath|The parameter dispPath is obtained from the request object req while generating a full dispatch path to TradeAppServlet.|8109e068615e460ab9d47a669c3fa261||
userid|null|The variable userID is initialized as null in this context.|8109e068615e460ab9d47a669c3fa261||
action|scenarioaction|The parameter scenarioAction obtained from the request object req is assigned to the variable action for further processing.|8109e068615e460ab9d47a669c3fa261||
string|userid|The data type of the variable userID is specified as String.|8109e068615e460ab9d47a669c3fa261||
if|scenarioaction != null && scenarioaction.length() >= 1|An if statement is used to check whether the parameter scenarioAction obtained from the request object req is not null and its length is greater than or equal to 1.|8109e068615e460ab9d47a669c3fa261||
action|scenarioaction.charat(0)|The variable action is assigned the first character of the parameter scenarioAction obtained from the request object req.|8109e068615e460ab9d47a669c3fa261||
tradeappservlet|taspathprefix|is a private static final string in the TradeAppServlet class, which is used as the URL path prefix for dispatching to TradeAppServlet.|cad459f2fa084145b427969192a0f2a9||
tradeaction|tradeservices|both are interfaces related to trading actions in DayTrader web application, where TradeServices provides methods to perform trading operations and TradeAction interface is implemented by various trading actions.|cad459f2fa084145b427969192a0f2a9||
accountdatabean|tradeservices|both are related entities in DayTrader web application, where AccountDataBean represents the details of an account and TradeServices provides methods to manipulate account data.|cad459f2fa084145b427969192a0f2a9||
httpservletrequest|tradeappservlet|an instance of HttpServletRequest is passed to the TradeAppServlet class as a parameter in its service method, which is used to extract information about the request made by the client.|cad459f2fa084145b427969192a0f2a9||
httpservletresponse|tradeappservlet|an instance of HttpServletResponse is returned by the TradeAppServlet class from its service method, which is used to send a response back to the client.|cad459f2fa084145b427969192a0f2a9||
httpsession|tradeappservlet|an instance of HttpSession can be obtained from the TradeAppServlet class via the HttpServletRequest object, which is used to store user-specific data during a session.|cad459f2fa084145b427969192a0f2a9||
servletcontext|tradeappservlet|the current ServletContext can be obtained from the TradeAppServlet class via the HttpServletRequest object, which provides access to the web application's environment.|cad459f2fa084145b427969192a0f2a9||
bigdecimal|tradeaction interface|an instance of BigDecimal can be passed as a parameter to some methods defined in the TradeAction interface, which is used for performing financial calculations in DayTrader web application.|cad459f2fa084145b427969192a0f2a9||
collection|tradeservices interface|a Collection of entities can be returned by some methods defined in the TradeServices interface, such as List<AccountDataBean> getAllAccounts() or Set<String> getAllStockTickers().|cad459f2fa084145b427969192a0f2a9||
iterator|collection|an Iterator over the elements in a Collection can be obtained by calling its iterator() method, which is used for traversing through the elements in a Collection.|cad459f2fa084145b427969192a0f2a9||
tradeservices|taction|The variable tAction is assigned a new instance of TradeAction within the TradeServletAction constructor.|d978806bfe4a4336a226c8e1922b131a||
tradeaction|accountdata|The method getAccountData is called on the TradeAction object to retrieve AccountDataBean for a given userID.|d978806bfe4a4336a226c8e1922b131a||
tradeaction|accountprofiledata|The method getAccountProfileData is called on the TradeAction object to retrieve AccountProfileDataBean for a given userID.|d978806bfe4a4336a226c8e1922b131a||
taction|orderdatabeans|The variable orderDataBeans is assigned the result of calling the getOrders method on the TradeAction object for a given userID, with the boolean parameter TradeConfig.getLongRun() set to false.|d978806bfe4a4336a226c8e1922b131a||
tradeservletaction.doaccount(...)|user|is executed with a user as an argument|4eb33ba29f0343878e8673a3af120ff1||
tradeservletaction.doaccount(...)|exception|can be thrown in this method|4eb33ba29f0343878e8673a3af120ff1||
userid|tradeconfig.getpage(tradeconfig.account_page)|is passed as a parameter to setAttribute and requestDispatch methods|4eb33ba29f0343878e8673a3af120ff1||
results|userid|can be associated with userID through the results variable|4eb33ba29f0343878e8673a3af120ff1||
req.setattribute|accountdata|is used to set attribute for accountData variable|4eb33ba29f0343878e8673a3af120ff1||
req.setattribute|accountprofiledata|is used to set attribute for accountProfileData variable|4eb33ba29f0343878e8673a3af120ff1||
req.setattribute|orderdatabeans|is used to set attribute for orderDataBeans variable|4eb33ba29f0343878e8673a3af120ff1||
tradeconfig.getpage(tradeconfig.account_page)|requestdispatch|is passed as a parameter to requestDispatch method|4eb33ba29f0343878e8673a3af120ff1||
trade account jsp|user profile information|The Trade Account JSP is used to update the User Profile information such as address, email, etc.|f66afa2d13624091947bf30e45277f13||
user|trade account jsp|The User can access and update their profile information through the Trade Account JSP.|f66afa2d13624091947bf30e45277f13||
servletcontext|trade account jsp|The Trade Account JSP is accessed and used within the context of a ServletContext.|f66afa2d13624091947bf30e45277f13||
httpservletrequest|trade account jsp|The Trade Account JSP receives data from an HttpServletRequest object in order to update the User Profile information.|f66afa2d13624091947bf30e45277f13||
httpservletresponse|trade account jsp|After updating the User Profile information, the Trade Account JSP returns a response to an HttpServletResponse object.|f66afa2d13624091947bf30e45277f13||
userid|user profile information|The user's ID is used to identify their profile information when updating it through the Trade Account JSP.|f66afa2d13624091947bf30e45277f13||
password|user profile information|When updating their User Profile information, the user can choose to change their password as well.|f66afa2d13624091947bf30e45277f13||
cpassword|password|The user is required to confirm their new password when updating it through the Trade Account JSP.|f66afa2d13624091947bf30e45277f13||
fullname|user profile information|The full name of the User can be updated through the Trade Account JSP.|f66afa2d13624091947bf30e45277f13||
address|user profile information|The User's address information can also be updated through the Trade Account JSP.|f66afa2d13624091947bf30e45277f13||
creditcard|user profile information|If desired, the User can update their credit card information through the Trade Account JSP as well.|f66afa2d13624091947bf30e45277f13||
email|user profile information|The email address associated with a User's account can also be updated through the Trade Account JSP.|f66afa2d13624091947bf30e45277f13||
doupdate|accountprofiledata|The boolean variable doUpdate is used to verify if the input data should be updated or not. The AccountProfileDataBean object contains the user's profile information that needs to be updated.|3643d10119ca412ab503d330f06258fc||
password|cpassword|The password and confirmation password are compared to check if they match. If they don't match, an error message is set.|3643d10119ca412ab503d330f06258fc||
password|updateaccountprofile|The updated password is passed as a parameter to the updateAccountProfile method of the TradeAction class.|3643d10119ca412ab503d330f06258fc||
fullname|results|If the full name field is empty, an error message is set and the update is not performed.|3643d10119ca412ab503d330f06258fc||
address|results|Similar to fullName, if the address field is empty, an error message is set and the update is not performed.|3643d10119ca412ab503d330f06258fc||
creditcard|results|Similar to fullName and address, if the credit card number field is empty, an error message is set and the update is not performed.|3643d10119ca412ab503d330f06258fc||
email|results|Similar to fullName, address, and creditcard, if the email address field is empty, an error message is set and the update is not performed.|3643d10119ca412ab503d330f06258fc||
userid|results|The user's ID is used to identify which profile information needs to be updated. If the user's ID is invalid, an error message is set and the update is not performed.|3643d10119ca412ab503d330f06258fc||
tradeservletaction.doaccount(...)|userid|The TradeServletAction class's doAccount method is called with the user's ID and other necessary parameters to update their profile information.|3643d10119ca412ab503d330f06258fc||
exception|tradeservletaction.doaccountupdate(...)|If an exception occurs during the account profile update process, it is logged with an error page thrown.|3643d10119ca412ab503d330f06258fc||
dobuy|servletcontext ctx|is a method called in this class to perform buying action for the given trader|586ac326b6cf418b923aa2db2408032d||
dobuy|httpservletrequest req|is passed as an argument in this method|586ac326b6cf418b923aa2db2408032d||
dobuy|httpservletresponse resp|is passed as an argument in this method|586ac326b6cf418b923aa2db2408032d||
dobuy|string userid|is a parameter passed to the buy() method of TradeAction class|586ac326b6cf418b923aa2db2408032d||
dobuy|string symbol|is a parameter passed to the buy() method of TradeAction class|586ac326b6cf418b923aa2db2408032d||
dobuy|string quantity|is a parameter passed to the buy() method of TradeAction class|586ac326b6cf418b923aa2db2408032d||
buy|tradeaction taction|is a method called in this class to perform buying action for the given trader|586ac326b6cf418b923aa2db2408032d||
buy|string userid|is a parameter passed to the buy() method of TradeAction class|586ac326b6cf418b923aa2db2408032d||
buy|string symbol|is a parameter passed to the buy() method of TradeAction class|586ac326b6cf418b923aa2db2408032d||
buy|double quantity|is a parameter passed to the buy() method of TradeAction class|586ac326b6cf418b923aa2db2408032d||
orderdatabean orderdata|taction.buy()|returns an OrderDataBean object containing details of the trade executed|586ac326b6cf418b923aa2db2408032d||
req.setattribute|accountdata|is used to set an attribute for the request object in order to pass data between servlets or JSPs.|e3708864eac34885bc05f0bfcb8ab87a||
req.setattribute|holdingdatabeans|is used to set an attribute for the request object in order to pass data between servlets or JSPs.|e3708864eac34885bc05f0bfcb8ab87a||
edge caching|req.setattribute|is used to implement edge caching, which involves caching frequently accessed data at the edge of a network instead of the origin server.|e3708864eac34885bc05f0bfcb8ab87a||
marketsummarydata|req.setattribute|is used to set an attribute for the request object in order to pass data between servlets or JSPs.|e3708864eac34885bc05f0bfcb8ab87a||
results|accountdata|may contain information related to the user's account, such as their balances and transactions.|e3708864eac34885bc05f0bfcb8ab87a||
results|holdingdatabeans|may contain information about the user's investments or holdings, such as stock prices and dividends.|e3708864eac34885bc05f0bfcb8ab87a||
req.setattribute|marketsummarydata|is used to set an attribute for the request object in order to pass data between servlets or JSPs.|e3708864eac34885bc05f0bfcb8ab87a||
results|results|may contain the results of a search or query, such as a list of stocks or news articles related to a particular keyword or company.|e3708864eac34885bc05f0bfcb8ab87a||
tradeservletaction.dohome|exception|caught in a catch block for the doHome method of TradeServletAction.|ba4442b8daa94a05af5e2de5970155f5||
tradeservletaction.dohome|userid|is a parameter passed to the requestDispatch method called after all try-catch blocks in the doHome method.|ba4442b8daa94a05af5e2de5970155f5||
tradeconfig.getpage|home_page|is used to retrieve the URL for the home page of the application.|ba4442b8daa94a05af5e2de5970155f5||
results|userid|is a key in the request scope, used to store search results. It is concatenated with the string 'Could not find account for + userID' and displayed as an error message.|ba4442b8daa94a05af5e2de5970155f5||
results|tradeconfig.getpage(tradeconfig.home_page)|is passed to the requestDispatch method, which forwards the user to a new page rather than throwing a 500 error.|ba4442b8daa94a05af5e2de5970155f5||
exception|500 error|would be thrown if the Exception caught in the last catch block was not handled.|ba4442b8daa94a05af5e2de5970155f5||
userid|tradeconfig.getpage(tradeconfig.home_page)|is passed to the requestDispatch method, which forwards the user to a new page rather than throwing a 500 error.|ba4442b8daa94a05af5e2de5970155f5||
results|userid|is concatenated with the string 'Could not find account for + userID' and displayed as an error message.|ba4442b8daa94a05af5e2de5970155f5||
login|trade user|is the action being performed on a Trade User in this context. The user ID and password are supplied to authenticate the user.|c3141b93c1d245079fd401c36f789a0a||
trade home jsp|trade config|is related to as it is being passed to the Trade Config in this context to retrieve the page for displaying after login.|c3141b93c1d245079fd401c36f789a0a||
ctx|req|are all being passed as parameters to the method doLogin, indicating they are related to each other and the action of logging in.|c3141b93c1d245079fd401c36f789a0a|resp|
userid|passwd|are all being used in the method doLogin, indicating they are related to each other and the action of logging in.|c3141b93c1d245079fd401c36f789a0a|tAction|
results|ctx|are both being returned as parameters from doLogin, indicating they are related to each other and the context of login.|c3141b93c1d245079fd401c36f789a0a|req|
results|userid|relation between results and userID is that userID is used to retrieve specific account information for the purposes of trading, which in turn affects the overall results.|78dcd0327c664c7e8a68a9c89a43acbf||
results|req|results are passed through the request object during the processing of this servlet action.|78dcd0327c664c7e8a68a9c89a43acbf||
results|resp|the results are also included in the response object for transmission back to the client.|78dcd0327c664c7e8a68a9c89a43acbf||
userid|"results + ""
could not find account for+"""|if the user's account cannot be found, an error message is appended to the results string and returned.|78dcd0327c664c7e8a68a9c89a43acbf||
userid|"log.log(""tradeservletaction.dologin(...)"", ""error finding account for+"" + userid + "","""|the inability to locate the requested user's account is logged as an error with a level of 3, indicating that it can be handled but may still cause issues.|78dcd0327c664c7e8a68a9c89a43acbf||
passwd|"log.error(""tradeservletaction.dologin(...)"" + ""exception logging in user"" + userid + ""with password"" + passwd, e)"|an exception related to the user's password is also logged as an error and forwarded on to a new page due to being classified as a user error.|78dcd0327c664c7e8a68a9c89a43acbf||
logout|userid|The user with the specified ID will be logged out.|956088cb1a954b1581ff18f61157b647||
taction|logout|The 'logout' method is called on the 'tAction' object to perform the logout operation.|956088cb1a954b1581ff18f61157b647||
user|portfolio|The collection of user holdings is being walked through to create a list of quotes.|78845ecd346c40f2987ea45d2388a060||
holdingdatabeans|quotes|Each holding in the collection of user holdings has a quote associated with it, and these quotes are being added to a list.|78845ecd346c40f2987ea45d2388a060||
holdingdatabean|quotedatabean|A HoldingDataBean contains information about a user's holding in a particular security, and a QuoteDataBean contains information about the current price of that security.|78845ecd346c40f2987ea45d2388a060||
tradeconfig.portfolio_page|results|The user's portfolio and the list of quotes for their holdings are being set as attributes to be displayed on a web page.|78845ecd346c40f2987ea45d2388a060||
tradeconfig.getpage(...)|requestdispatch|The TradeConfig class is used to retrieve the appropriate web page for displaying the user's portfolio and quotes, and the requestDispatch method is called to forward the user to that page.|78845ecd346c40f2987ea45d2388a060||
tradeservletaction.doportfolio(...)|results|A message is being set as an attribute for display on the web page, indicating whether the user's portfolio is empty.|78845ecd346c40f2987ea45d2388a060||
tradeservletaction.doportfolio(...)|holdingdatabeans|An iterator is being used to iterate through a list of HoldingDataBean objects for the user's holdings.|78845ecd346c40f2987ea45d2388a060||
tradeservletaction.doportfolio(...)|holdingdata|Each HoldingDataBean object contains information about a specific holding in the user's portfolio.|78845ecd346c40f2987ea45d2388a060||
tradeservletaction.doportfolio(...)|quoteid|Each HoldingDataBean object contains an identifier for the associated quote.|78845ecd346c40f2987ea45d2388a060||
taction.getquote(...)|quotedata|The tAction object is being used to retrieve a QuoteDataBean object for the specified quoteID.|78845ecd346c40f2987ea45d2388a060||
quote|stock symbol|In the doQuotes method, the stock symbol is used to retrieve the current quote. The Quote and stock symbol are related as the former requires the latter for its retrieval.|b6e60739045a4a34b58cda25d18ef348||
trade quote jsp|display|The Trade Quote JSP is dispatched to display the current quote retrieved through doQuotes method.|b6e60739045a4a34b58cda25d18ef348||
userid||The userID is not explicitly used in this context, but it may be required for some other functionalities.|b6e60739045a4a34b58cda25d18ef348||
doregister|servletcontext|method called within the doRegister method|963ada451a09450fb9be9235a1aa0007||
ctx|servletcontext|parameter passed to doRegister method|963ada451a09450fb9be9235a1aa0007||
req|httpservletrequest|parameter passed to doRegister method|963ada451a09450fb9be9235a1aa0007||
resp|httpservletresponse|parameter passed to doRegister method|963ada451a09450fb9be9235a1aa0007||
userid|string|parameter passed to doRegister method|963ada451a09450fb9be9235a1aa0007||
passwd|string|parameter passed to doRegister method|963ada451a09450fb9be9235a1aa0007||
cpasswd|string|parameter passed to doRegister method|963ada451a09450fb9be9235a1aa0007||
fullname|string|parameter passed to doRegister method|963ada451a09450fb9be9235a1aa0007||
ccn|string|parameter passed to doRegister method|963ada451a09450fb9be9235a1aa0007||
openbalancestring|string|parameter passed to doRegister method|963ada451a09450fb9be9235a1aa0007||
email|string|parameter passed to doRegister method|963ada451a09450fb9be9235a1aa0007||
address|string|parameter passed to doRegister method|963ada451a09450fb9be9235a1aa0007||
results|string|local variable in doRegister method|963ada451a09450fb9be9235a1aa0007||
try|java keyword for try block|control flow statement in doRegister method|963ada451a09450fb9be9235a1aa0007||
passwd|string|condition to validate passwords match|963ada451a09450fb9be9235a1aa0007||
cpasswd|string|condition to validate passwords match|963ada451a09450fb9be9235a1aa0007||
passwd.equals(cpasswd)|expression for checking passwords match|condition to validate passwords match|963ada451a09450fb9be9235a1aa0007||
passwd.length() >= 1|expression for validating password length|condition to validate password length|963ada451a09450fb9be9235a1aa0007||
registration operation|operation succeeded|The 'Registration operation' leads to a successful 'Operation succeeded' in the given context.|39c7ee543993420ca52351450ff25deb||
registration operation|operation failed|The 'Registration operation' may lead to an 'Operation failed' if certain conditions are not met, as observed in the given context.|39c7ee543993420ca52351450ff25deb||
passwords|matched|In order for a successful 'Registration operation', the 'Passwords' need to match each other, as stated in the given context.|39c7ee543993420ca52351450ff25deb||
passwords|did not match|If the 'Passwords' do not match each other, it leads to a failure in the 'Registration operation', as observed in the given context.|39c7ee543993420ca52351450ff25deb||
account databean|creation|After a successful 'Registration operation', an 'Account DataBean' is created, as per the given context.|39c7ee543993420ca52351450ff25deb||
account id|generated|During the creation of an 'Account DataBean', a unique 'Account ID' is generated, as stated in the given context.|39c7ee543993420ca52351450ff25deb||
node_1|node_2|edge|chunk_id|node_3
tradewebcontextlistener|servletcontextlistener|is a specific implementation of the ServletContextListener interface in Java Servlets programming paradigm|338c33f8e6d44d5da3508f80130eb269|
contextinitialized|servletcontextevent|is an event triggered when a servlet context is initialized|338c33f8e6d44d5da3508f80130eb269|
tradedirect|trade|refers to a direct communication channel used for trading in the DayTrader sample application provided by IBM WebSphere|338c33f8e6d44d5da3508f80130eb269|
tradeconfig|tradedirect|is used to configure the TradeDirect component in the DayTrader sample application provided by IBM WebSphere|338c33f8e6d44d5da3508f80130eb269|
log|trace|refers to a logging mechanism provided by the DayTrader sample application provided by IBM WebSphere that allows developers to output debugging information during runtime|338c33f8e6d44d5da3508f80130eb269|
daytrader.properties|properties|The file 'daytrader.properties' is loaded from the resource '/properties/daytrader.properties' within the servlet context, which is an instance of class Properties.|1c2b023f492c460eab9b41cf38955097|
properties|inputstream|The InputStream 'stream' is obtained by calling the method getResourceAsStream() on the ServletContext object.|1c2b023f492c460eab9b41cf38955097|
props|properties|The class Properties is used to load properties from a resource stream.|1c2b023f492c460eab9b41cf38955097|
"integer.parseint(prop.getproperty(""runtimemode""))"|tradeconfig.setruntimemode()|The integer value of the property 'runtimeMode' is parsed and assigned to the member variable runTimeMode of class TradeConfig using the method setRunTimeMode(). |1c2b023f492c460eab9b41cf38955097|
"boolean.parseboolean(prop.getproperty(""useremoteejbinterface""))"|tradeconfig.setuseremoteejbinterface()|The boolean value of the property 'useRemoteEJBInterface' is parsed and assigned to the member variable useRemoteEJBInterface of class TradeConfig using the method setUseRemoteEJBInterface(). |1c2b023f492c460eab9b41cf38955097|
"integer.parseint(prop.getproperty(""orderprocessingmode""))"|tradeconfig.setorderprocessingmode()|The integer value of the property 'orderProcessingMode' is parsed and assigned to the member variable orderProcessingMode of class TradeConfig using the method setOrderProcessingMode(). |1c2b023f492c460eab9b41cf38955097|
"integer.parseint(prop.getproperty(""webinterface""))"|tradeconfig.setwebinterface()|The integer value of the property 'webInterface' is parsed and assigned to the member variable webInterface of class TradeConfig using the method setWebInterface(). |1c2b023f492c460eab9b41cf38955097|
"integer.parseint(prop.getproperty(""maxusers""))"|tradeconfig.setmax_users()|The integer value of the property 'maxUsers' is parsed and assigned to the member variable MAX_USERS of class TradeConfig using the method setMAX_USERS(). |1c2b023f492c460eab9b41cf38955097|
"integer.parseint(prop.getproperty(""maxquotes""))"|tradeconfig.setmax_quotes()|The integer value of the property 'maxQuotes' is parsed and assigned to the member variable MAX_QUOTES of class TradeConfig using the method setMAX_QUOTES(). |1c2b023f492c460eab9b41cf38955097|
com.ibm.websphere.samples.daytrader.web.jsf|accountdatajsf|is a class within the package com.ibm.websphere.samples.daytrader.web.jsf|876ba33686c04b17ae71d01cc25d75ba|
com.ibm.websphere.samples.daytrader|daytrader7|is a project in which the package com.ibm.websphere.samples.daytrader is contained|876ba33686c04b17ae71d01cc25d75ba|
java|java|is a programming language used to write the class AccountDataJSF|876ba33686c04b17ae71d01cc25d75ba|
tradeaction|com.ibm.websphere.samples.daytrader.entities.orderdatabean|is a method or operation that can be performed on an OrderDataBean, as specified by the interface TradeAction|876ba33686c04b17ae71d01cc25d75ba|
accountdatabean|com.ibm.websphere.samples.daytrader.entities|is a package within which the class AccountDataBean is contained|876ba33686c04b17ae71d01cc25d75ba|
collection|iterator|is an interface implemented by Collection to provide iterable access to its elements, and by Iterator to provide access to these elements one at a time|876ba33686c04b17ae71d01cc25d75ba|
externalcontext|httpservletrequest|is an interface implemented by ExternalContext to provide access to context-specific information and functionality, and by HttpServletRequest to provide access to request parameters|876ba33686c04b17ae71d01cc25d75ba|
httpsession|externalcontext|is a map used to store data associated with a session, as accessed through ExternalContext|876ba33686c04b17ae71d01cc25d75ba|
financialutils|tradeconfig|are classes that provide financial utility functions and trade configuration respectively, and are used within the package com.ibm.websphere.samples.daytrader|876ba33686c04b17ae71d01cc25d75ba|
bigdecimal|date|are Java data types used to represent decimal numbers and dates respectively, as used within the class AccountDataJSF|876ba33686c04b17ae71d01cc25d75ba|
accountdatajsf|externalcontext|is a component of|54715e79203c45df8fa8d47489002888|
accountdatajsf|tradeaction|has a reference to|54715e79203c45df8fa8d47489002888|
accountid|accountdatajsf|is a property of|54715e79203c45df8fa8d47489002888|
creationdate|accountdatajsf|is a property of|54715e79203c45df8fa8d47489002888|
sessioncreationdate|accountdatajsf|is a property of|54715e79203c45df8fa8d47489002888|
currenttime|accountdatajsf|is a property of|54715e79203c45df8fa8d47489002888|
profileid|accountdatajsf|is a property of|54715e79203c45df8fa8d47489002888|
balance|accountdatajsf|has a value of|54715e79203c45df8fa8d47489002888|
openbalance|accountdatajsf|is a property of|54715e79203c45df8fa8d47489002888|
numberholdings|accountdatajsf|is a property of|54715e79203c45df8fa8d47489002888|
holdingstotal|accountdatajsf|calculated based on|54715e79203c45df8fa8d47489002888|
sumofcashholdings|accountdatajsf|calculated based on|54715e79203c45df8fa8d47489002888|
gain|accountdatajsf|is a property of|54715e79203c45df8fa8d47489002888|
gainpercent|accountdatajsf|calculated based on|54715e79203c45df8fa8d47489002888|
closedorders|accountdatajsf|contains a collection of|54715e79203c45df8fa8d47489002888|
allorders|accountdatajsf|is a property of|54715e79203c45df8fa8d47489002888|
numberoforders|accountdatajsf|calculated based on|54715e79203c45df8fa8d47489002888|
numberoforderrows|accountdatajsf|is a property of|54715e79203c45df8fa8d47489002888|
sessioncreationdate|httpsession|is stored in|54715e79203c45df8fa8d47489002888|
userid|tradeaction|uses to fetch|54715e79203c45df8fa8d47489002888|
closedorders|tradeaction|fetches a collection of|54715e79203c45df8fa8d47489002888|
holdingdatabeans|tradeaction|fetches a collection of|54715e79203c45df8fa8d47489002888|
doaccountdata|context|is part of|acd2902883f5412aa41daaaa9ea754bd|
setsessioncreationdate|session|has attribute|acd2902883f5412aa41daaaa9ea754bd|
getsessioncreationdate|session|provides access to attribute|acd2902883f5412aa41daaaa9ea754bd|
setcurrenttime|currenttime|has attribute|acd2902883f5412aa41daaaa9ea754bd|
getcurrenttime|currenttime|provides access to attribute|acd2902883f5412aa41daaaa9ea754bd|
setprofileid|profileid|has attribute|acd2902883f5412aa41daaaa9ea754bd|
getprofileid|profileid|provides access to attribute|acd2902883f5412aa41daaaa9ea754bd|
setaccountid|accountdata|has attribute|acd2902883f5412aa41daaaa9ea754bd|
getaccountid|accountdata|provides access to attribute|acd2902883f5412aa41daaaa9ea754bd|
setcreationdate|accountdata|has attribute|acd2902883f5412aa41daaaa9ea754bd|
getcreationdate|accountdata|provides access to attribute|acd2902883f5412aa41daaaa9ea754bd|
setlogincount|accountdata|has attribute|acd2902883f5412aa41daaaa9ea754bd|
getlogincount|accountdata|provides access to attribute|acd2902883f5412aa41daaaa9ea754bd|
setlogoutcount|accountdata|has attribute|acd2902883f5412aa41daaaa9ea754bd|
getlogoutcount|accountdata|provides access to attribute|acd2902883f5412aa41daaaa9ea754bd|
setlastlogin|accountdata|has attribute|acd2902883f5412aa41daaaa9ea754bd|
getlastlogin|accountdata|provides access to attribute|acd2902883f5412aa41daaaa9ea754bd|
setopenbalance|balance|has attribute|acd2902883f5412aa41daaaa9ea754bd|
getopenbalance|balance|provides access to attribute|acd2902883f5412aa41daaaa9ea754bd|
setbalance|holdingstotal|adds|acd2902883f5412aa41daaaa9ea754bd|
getbalance|holdingstotal|is calculated based on|acd2902883f5412aa41daaaa9ea754bd|
setnumberholdings|holdingdatabeans|is the count of|acd2902883f5412aa41daaaa9ea754bd|
getnumberholdings|holdingdatabeans|provides access to count of|acd2902883f5412aa41daaaa9ea754bd|
setholdingstotal|financialutils.computeholdingstotal(holdingdatabeans)|is calculated based on|acd2902883f5412aa41daaaa9ea754bd|
setsumofcashholdings|balance|adds|acd2902883f5412aa41daaaa9ea754bd|
getsumofcashholdings|balance|provides access to calculated sum of cash holdings|acd2902883f5412aa41daaaa9ea754bd|
setgain|sumofcashholdings|is calculated based on|acd2902883f5412aa41daaaa9ea754bd|
setgainpercent|openbalance|is calculated based on|acd2902883f5412aa41daaaa9ea754bd|
getprofileid|profileid|method getProfileID returns the ID of the user's profile|98f6cc12ceb24380aa360a6cfffeaa3c|
setprofileid|profileid|method setProfileID sets the ID of the user's profile|98f6cc12ceb24380aa360a6cfffeaa3c|
getaccountid|accountid|method getAccountID returns the ID of the user's account|98f6cc12ceb24380aa360a6cfffeaa3c|
setaccountid|accountid|method setAccountID sets the ID of the user's account|98f6cc12ceb24380aa360a6cfffeaa3c|
getcreationdate|creationdate|method getCreationDate returns the date when the user created their profile|98f6cc12ceb24380aa360a6cfffeaa3c|
setcreationdate|creationdate|method setCreationDate sets the creation date of the user's profile|98f6cc12ceb24380aa360a6cfffeaa3c|
getlogincount|logincount|method getLoginCount returns the number of times the user has logged in|98f6cc12ceb24380aa360a6cfffeaa3c|
setlogincount|logincount|method setLoginCount sets the login count for the user's profile|98f6cc12ceb24380aa360a6cfffeaa3c|
getbalance|balance|method getBalance returns the user's account balance|98f6cc12ceb24380aa360a6cfffeaa3c|
setbalance|balance|method setBalance sets the user's account balance|98f6cc12ceb24380aa360a6cfffeaa3c|
getopenbalance|openbalance|method getOpenBalance returns the user's open balance (before any transactions)|98f6cc12ceb24380aa360a6cfffeaa3c|
setopenbalance|openbalance|method setOpenBalance sets the user's open balance|98f6cc12ceb24380aa360a6cfffeaa3c|
getholdingstotal|holdingstotal|method getHoldingsTotal returns the total value of all the user's holdings|98f6cc12ceb24380aa360a6cfffeaa3c|
setholdingstotal|holdingstotal|method setHoldingsTotal sets the total value of all the user's holdings|98f6cc12ceb24380aa360a6cfffeaa3c|
getsumofcashholdings|sumofcashholdings|method getSumOfCashHoldings returns the total value of all the user's cash holdings|98f6cc12ceb24380aa360a6cfffeaa3c|
setsumofcashholdings|sumofcashholdings|method setSumOfCashHoldings sets the total value of all the user's cash holdings|98f6cc12ceb24380aa360a6cfffeaa3c|
getgain|gain|method getGain returns the profit or loss on the user's investments|98f6cc12ceb24380aa360a6cfffeaa3c|
setgain|gain|method setGain sets the profit or loss on the user's investments|98f6cc12ceb24380aa360a6cfffeaa3c|
getgainpercent|gainpercent|method getGainPercent returns the percentage gain or loss on the user's investments (rounded to 2 decimal places)|98f6cc12ceb24380aa360a6cfffeaa3c|
getgainpercent|gainpercent|method in the class to get the percentage of gain|2b903cf856e54529ac56e13acf9ffdd3|
numberholdings|integer|data member of type Integer to store the number of holdings|2b903cf856e54529ac56e13acf9ffdd3|
setnumberholdings|numberholdings|method to set the value of the numberHoldings data member|2b903cf856e54529ac56e13acf9ffdd3|
getnumberholdings|numberholdings|method to get the value of the numberHoldings data member|2b903cf856e54529ac56e13acf9ffdd3|
closedorders|orderdata[]|data member of type OrderData[] to store closed orders|2b903cf856e54529ac56e13acf9ffdd3|
setclosedorders|closedorders|method to set the value of the closedOrders data member|2b903cf856e54529ac56e13acf9ffdd3|
getclosedorders|closedorders|method to get the value of the closedOrders data member|2b903cf856e54529ac56e13acf9ffdd3|
lastlogin|date|data member of type Date to store the last login time|2b903cf856e54529ac56e13acf9ffdd3|
setlastlogin|lastlogin|method to set the value of the lastLogin data member|2b903cf856e54529ac56e13acf9ffdd3|
getlastlogin|lastlogin|method to get the value of the lastLogin data member|2b903cf856e54529ac56e13acf9ffdd3|
logoutcount|int|data member of type int to store the number of logouts|2b903cf856e54529ac56e13acf9ffdd3|
setlogoutcount|logoutcount|method to set the value of the logoutCount data member|2b903cf856e54529ac56e13acf9ffdd3|
getlogoutcount|logoutcount|method to get the value of the logoutCount data member|2b903cf856e54529ac56e13acf9ffdd3|
allorders|orderdata[]|data member of type OrderData[] to store all orders|2b903cf856e54529ac56e13acf9ffdd3|
setallorders|allorders|method to set the value of the allOrders data member|2b903cf856e54529ac56e13acf9ffdd3|
getallorders|allorders|method to get the value of the allOrders data member|2b903cf856e54529ac56e13acf9ffdd3|
gainhtml|getgainhtml|method in the class to generate HTML code for the gain amount|2b903cf856e54529ac56e13acf9ffdd3|
gainpercenthtml|getgainpercenthtml|method in the class to generate HTML code for the percentage of gain|2b903cf856e54529ac56e13acf9ffdd3|
numberoforderrows|integer|data member of type Integer to store the number of order rows|2b903cf856e54529ac56e13acf9ffdd3|
setnumberoforderrows|numberoforderrows|method to set the value of the numberOfOrderRows data member|2b903cf856e54529ac56e13acf9ffdd3|
getnumberoforderrows|numberoforderrows|method to get the value of the numberOfOrderRows data member|2b903cf856e54529ac56e13acf9ffdd3|
numberoforders|integer|data member of type Integer to store the total number of orders|2b903cf856e54529ac56e13acf9ffdd3|
setnumberoforders|numberoforders|method to set the value of the numberOfOrders data member|2b903cf856e54529ac56e13acf9ffdd3|
getnumberoforders|numberoforders|method to get the value of the numberOfOrders data member|2b903cf856e54529ac56e13acf9ffdd3|
externalcontextproducer|producefacesexternalcontext|produceFacesExternalContext is a method of ExternalContextProducer class which produces an instance of ExternalContext.|1ea883f833bf4d7a8437c4c96bd013cc|
externalcontext|getcurrentinstance|getCurrentInstance is a static method of FacesContext class which returns the current context instance of ExternalContext.|1ea883f833bf4d7a8437c4c96bd013cc|
facescontext|getcurrentinstance|getCurrentInstance is a static method of FacesContext class which returns the current instance of FacesContext.|1ea883f833bf4d7a8437c4c96bd013cc|
facescontext|getexternalcontext|getExternalContext is a method of FacesContext class which returns an ExternalContext object that provides access to server-side resources specific to the current request.|1ea883f833bf4d7a8437c4c96bd013cc|
holdingdata|sessionscoped|HoldingData is annotated with the SessionScoped annotation, which indicates that it has a session-scoped context.|61e1bf177f9d449c936c04d7da86fffd|
holdingdata|named|HoldingData is annotated with the Named annotation, which allows it to be referenced by name instead of its full class name.|61e1bf177f9d449c936c04d7da86fffd|
holdingdata|serializable|HoldingData implements the Serializable interface, which allows it to be serialized and deserialized across a network.|61e1bf177f9d449c936c04d7da86fffd|
holdingid|integer|The holdingID variable of type Integer is declared in the HoldingData class.|61e1bf177f9d449c936c04d7da86fffd|
quantity|double|The quantity variable of type double is declared in the HoldingData class.|61e1bf177f9d449c936c04d7da86fffd|
purchaseprice|bigdecimal|The purchasePrice variable of type BigDecimal is declared in the HoldingData class.|61e1bf177f9d449c936c04d7da86fffd|
purchasedate|date|The purchaseDate variable of type Date is declared in the HoldingData class.|61e1bf177f9d449c936c04d7da86fffd|
quoteid|string|The quoteID variable of type String is declared in the HoldingData class.|61e1bf177f9d449c936c04d7da86fffd|
price|bigdecimal|The price variable of type BigDecimal is declared in the class that contains the code snippet provided. It's possible that this variable belongs to a different class.|61e1bf177f9d449c936c04d7da86fffd|
basis|bigdecimal|The basis variable of type BigDecimal is declared in the HoldingData class.|61e1bf177f9d449c936c04d7da86fffd|
financialutils|com.ibm.websphere.samples.daytrader.util.financialutils|The FinancialUtils class, which provides financial utilities, is imported into the HoldingData class.|61e1bf177f9d449c936c04d7da86fffd|
purchaseprice|price|The property 'price' represents the current price of the security, while the property 'purchasePrice' represents the price at which it was purchased.|0c2ef20e277b488eac416dce1aeca07a|
purchasedate|holdingid|The 'holdingID' is associated with a specific transaction that occurred on the date specified in 'purchaseDate'.|0c2ef20e277b488eac416dce1aeca07a|
quoteid|price|The price of a security, as represented by the property 'price', is determined based on its unique identifier, which can be found in the 'quoteID'.|0c2ef20e277b488eac416dce1aeca07a|
basis|marketvalue|The market value of a security, as denoted by the property 'marketValue', is calculated based on its acquisition cost, which can be found in the 'basis'.|0c2ef20e277b488eac416dce1aeca07a|
quantity|holdingid|The quantity of a security, as represented by the property 'quantity', is associated with a specific transaction that can be identified by its corresponding 'holdingID'.|0c2ef20e277b488eac416dce1aeca07a|
getgain|gain|is a method in the context class that returns the value of the 'gain' variable.|816dc46befa944a1a767f4868754a9c9|
gainhtml|gain|is a method in the context class that returns an HTML representation of the 'gain' variable using FinancialUtils.printGainHTML().|816dc46befa944a1a767f4868754a9c9|
daytrader7|sample|is a part of the context project name 'daytrader7', which contains samples represented by 'sample'.|816dc46befa944a1a767f4868754a9c9|
jsfloginfilter|filtername|is the name given to this filter in the JavaServer Faces (JSF) framework, used for login authentication.|816dc46befa944a1a767f4868754a9c9|
urlpatterns|*.faces|is a URL pattern that this filter applies to in order to provide login authentication for JSF files with the .faces extension.|816dc46befa944a1a767f4868754a9c9|
loginvalidator|validator|implements the Validator interface, allowing it to be used as a form validation component in JSF.|ccc9ea23a6554650a6b7b193efa7df0f|
loginvalidator|facesvalidator|is an annotation used to register the LoginValidator class as a validator with JSF.|ccc9ea23a6554650a6b7b193efa7df0f|
com.ibm.websphere.samples.daytrader.web.jsf|package|specifies the package in which the LoginValidator class is located, providing context for its usage.|ccc9ea23a6554650a6b7b193efa7df0f|
facescontext|facesmessage|are classes used by the LoginValidator to interact with JSF and provide form validation functionality.|ccc9ea23a6554650a6b7b193efa7df0f|UIComponent
import|javax.faces.*|are import statements used to access the necessary classes for implementing the LoginValidator.|ccc9ea23a6554650a6b7b193efa7df0f|com.ibm.websphere.samples.daytrader.util.*
facesmessage|matcher|are used in regular expressions to validate user input and generate error messages, if necessary.|ccc9ea23a6554650a6b7b193efa7df0f|pattern
loginregex|uid|The regular expression 'loginRegex' contains the pattern 'uid:' to extract usernames starting with 'uid:'. The username should also contain at least one number, as specified in the Java documentation for Pattern.compile().|db19bb7c3bef4a36bfbe11fe43f1412d|
loginvalidator|loginregex|The 'loginRegex' variable is used by the 'LoginValidator' class to validate usernames according to a specific format.|db19bb7c3bef4a36bfbe11fe43f1412d|
loginregex|\d+|Within the 'loginRegex' regular expression, '\d+' represents one or more digits. This is used to ensure that usernames contain at least one number.|db19bb7c3bef4a36bfbe11fe43f1412d|
pattern|loginregex|The 'loginRegex' string is compiled into a pattern object using the Pattern.compile() method, which is stored in the 'pattern' variable for later use by the 'LoginValidator' class.|db19bb7c3bef4a36bfbe11fe43f1412d|
matcher|loginregex|The 'loginRegex' pattern is matched against submitted login names using a Matcher object, which is stored in the 'matcher' variable for later use by the 'LoginValidator' class.|db19bb7c3bef4a36bfbe11fe43f1412d|
marketsummaryjsf|com.ibm.websphere.samples.daytrader.web.jsf.marketsummaryjsf|MarketSummaryJSF is a class within the package com.ibm.websphere.samples.daytrader.web.jsf with the simple name MarketSummaryJSF.|844e985dad254f59a932d9bcd2603c6d|
tradeaction|com.ibm.websphere.samples.daytrader.tradeaction|TradeAction is a class within the package com.ibm.websphere.samples.daytrader with the simple name TradeAction.|844e985dad254f59a932d9bcd2603c6d|
marketsummarydatabean|com.ibm.websphere.samples.daytrader.beans.marketsummarydatabean|MarketSummaryDataBean is a class within the package com.ibm.websphere.samples.daytrader.beans with the simple name MarketSummaryDataBean.|844e985dad254f59a932d9bcd2603c6d|
quotedatabean|com.ibm.websphere.samples.daytrader.entities.quotedatabean|QuoteDataBean is a class within the package com.ibm.websphere.samples.daytrader.entities with the simple name QuoteDataBean.|844e985dad254f59a932d9bcd2603c6d|
financialutils|com.ibm.websphere.samples.daytrader.util.financialutils|FinancialUtils is a class within the package com.ibm.websphere.samples.daytrader.util with the simple name FinancialUtils.|844e985dad254f59a932d9bcd2603c6d|
date|java.util.date|Date is a class within the package java.util with the simple name Date.|844e985dad254f59a932d9bcd2603c6d|
collection|java.util.collection|Collection is an interface within the package java.util with the simple name Collection.|844e985dad254f59a932d9bcd2603c6d|
iterator|java.util.iterator|Iterator is an interface within the package java.util with the simple name Iterator.|844e985dad254f59a932d9bcd2603c6d|
roundingmode|java.math.roundingmode|RoundingMode is a class within the package java.math with the simple name RoundingMode.|844e985dad254f59a932d9bcd2603c6d|
bigdecimal|java.math.bigdecimal|BigDecimal is a class within the package java.math with the simple name BigDecimal.|844e985dad254f59a932d9bcd2603c6d|
com.ibm.websphere.samples.daytrader|com.ibm.websphere.samples.daytrader|com.ibm.websphere.samples.daytrader is a package within the current context.|844e985dad254f59a932d9bcd2603c6d|
settoplosers|loserjsfs|The method setTopLosers takes an argument loserjsfs, which appears to be a variable storing a list of quotes representing losing stocks.|3003019da631482a9565110f4eba57f7|
settsia|tsia|The method setTSIA is used to set the value of a variable tSIA, which may represent a financial ratio such as trailing twelve months earnings per share (TTM EPS).|3003019da631482a9565110f4eba57f7|
gettsia|tsia|The method getTSIA returns the value of a variable tSIA.|3003019da631482a9565110f4eba57f7|
setopentsia|opentsia|The method setOpenTSIA is used to set the value of a variable openTSIA, which may represent the opening price of tSIA.|3003019da631482a9565110f4eba57f7|
getopentsia|opentsia|The method getOpenTSIA returns the value of a variable openTSIA.|3003019da631482a9565110f4eba57f7|
setvolume|volume|The method setVolume is used to set the value of a variable volume, which may represent the total number of shares traded in the stock market during a particular period.|3003019da631482a9565110f4eba57f7|
getvolume|volume|The method getVolume returns the value of a variable volume.|3003019da631482a9565110f4eba57f7|
settopgainers|topgainers|The method setTopGainers takes an argument topGainers, which appears to be an array storing QuoteData objects representing the top performing stocks.|3003019da631482a9565110f4eba57f7|
gettopgainers|topgainers|The method getTopGainers returns the value of a variable topGainers, which appears to be an array storing QuoteData objects representing the top performing stocks.|3003019da631482a9565110f4eba57f7|
settoplosers|toplosers|The method setTopLosers takes an argument topLosers, which appears to be an array storing QuoteData objects representing the bottom performing stocks.|3003019da631482a9565110f4eba57f7|
gettoplosers|toplosers|The method getTopLosers returns the value of a variable topLosers, which appears to be an array storing QuoteData objects representing the bottom performing stocks.|3003019da631482a9565110f4eba57f7|
setsummarydate|summarydate|The method setSummaryDate is used to set the value of a variable summaryDate, which may represent the date of a financial report or statement.|3003019da631482a9565110f4eba57f7|
getsummarydate|summarydate|The method getSummaryDate returns the value of a variable summaryDate, which may represent the date of a financial report or statement.|3003019da631482a9565110f4eba57f7|
setgainpercent|gainpercent|The method setGainPercent is used to set the value of a variable gainPercent, which may represent the percentage increase in stock price or value over a certain period.|3003019da631482a9565110f4eba57f7|
getgainpercent|gainpercent|The method getGainPercent returns the value of a variable gainPercent, which may represent the percentage increase in stock price or value over a certain period.|3003019da631482a9565110f4eba57f7|
getgainpercenthtml|gainpercent|The method getGainPercentHTML is used to format the value of variable gainPercent in HTML format for display purposes.|3003019da631482a9565110f4eba57f7|
gainpercent|financialutils|The method 'printGainPercentHTML' is called from the class 'OrderData', which contains a member variable 'gainPercent'. This member variable is related to the 'FinancialUtils' class as it uses its 'printGainPercentHTML' method to convert the gainPercent value into HTML format.|75682f17d3674a1090348fbc6351e17d|
orderid|orderdata|The variable 'orderID' is a member variable of the class 'OrderData', which is used to store the unique identifier for an order. This variable is related to the class 'OrderData' itself.|75682f17d3674a1090348fbc6351e17d|
orderstatus|orderdata|The variable 'orderStatus' is a member variable of the class 'OrderData', which is used to store the current status of an order. This variable is related to the class 'OrderData' itself.|75682f17d3674a1090348fbc6351e17d|
opendate|orderdata|The variable 'openDate' is a member variable of the class 'OrderData', which is used to store the date on which an order was opened. This variable is related to the class 'OrderData' itself.|75682f17d3674a1090348fbc6351e17d|
completiondate|orderdata|The variable 'completionDate' is a member variable of the class 'OrderData', which is used to store the date on which an order was completed. This variable is related to the class 'OrderData' itself.|75682f17d3674a1090348fbc6351e17d|
orderfee|orderdata|The variable 'orderFee' is a member variable of the class 'OrderData', which is used to store the fee charged for an order. This variable is related to the class 'OrderData' itself.|75682f17d3674a1090348fbc6351e17d|
ordertype|orderdata|The variable 'orderType' is a member variable of the class 'OrderData', which is used to store the type of order (e.g., buy, sell). This variable is related to the class 'OrderData' itself.|75682f17d3674a1090348fbc6351e17d|
quantity|orderdata|The variable 'quantity' is a member variable of the class 'OrderData', which is used to store the number of shares being ordered. This variable is related to the class 'OrderData' itself.|75682f17d3674a1090348fbc6351e17d|
symbol|orderdata|The variable 'symbol' is a member variable of the class 'OrderData', which is used to store the stock symbol being traded. This variable is related to the class 'OrderData' itself.|75682f17d3674a1090348fbc6351e17d|
total|orderdata|The variable 'total' is a member variable of the class 'OrderData', which is used to store the total value of an order. This variable is calculated by multiplying the 'price' and 'quantity' variables.|75682f17d3674a1090348fbc6351e17d|
price|total|The variable 'price' is a member variable of the class 'OrderData', which is used to store the price per share being paid for an order. This variable is directly related to the 'total' variable, as it is multiplied by the 'quantity' to calculate the total value of the order.|75682f17d3674a1090348fbc6351e17d|
orderdata|orderid|A unique identifier assigned to each order.|6ce7076145a142bd94ce332d8b906199|
orderdata|completiondate|The date when the order was completed.|6ce7076145a142bd94ce332d8b906199|
orderdata|opendate|The date when the order was placed.|6ce7076145a142bd94ce332d8b906199|
orderdata|orderfee|The fee charged for executing the order.|6ce7076145a142bd94ce332d8b906199|
orderdata|ordertype|The type of order, such as market or limit.|6ce7076145a142bd94ce332d8b906199|
orderdata|quantity|The number of shares being bought or sold.|6ce7076145a142bd94ce332d8b906199|
orderdata|symbol|The stock symbol for the security being traded.|6ce7076145a142bd94ce332d8b906199|
bigdecimal|price|The price at which the security is being traded.|6ce7076145a142bd94ce332d8b906199|
bigdecimal|total|The total cost of the order, calculated by multiplying the price and quantity.|6ce7076145a142bd94ce332d8b906199|
getopendate|opendate|is a method that returns the open date of the object|543d3e468fca49e0b9f7f48c643ca4aa|
setopendate|opendate|sets the value of the open date for the object|543d3e468fca49e0b9f7f48c643ca4aa|
getcompletiondate|completiondate|is a method that returns the completion date of the object|543d3e468fca49e0b9f7f48c643ca4aa|
setcompletiondate|completiondate|sets the value of the completion date for the object|543d3e468fca49e0b9f7f48c643ca4aa|
getorderfee|orderfee|is a method that returns the order fee associated with the object|543d3e468fca49e0b9f7f48c643ca4aa|
setorderfee|orderfee|sets the value of the order fee for the object|543d3e468fca49e0b9f7f48c643ca4aa|
getordertype|ordertype|is a method that returns the type of order associated with the object|543d3e468fca49e0b9f7f48c643ca4aa|
setordertype|ordertype|sets the value of the order type for the object|543d3e468fca49e0b9f7f48c643ca4aa|
getquantity|quantity|is a method that returns the quantity associated with the object|543d3e468fca49e0b9f7f48c643ca4aa|
setquantity|quantity|sets the value of the quantity for the object|543d3e468fca49e0b9f7f48c643ca4aa|
getsymbol|symbol|is a method that returns the symbol associated with the object|543d3e468fca49e0b9f7f48c643ca4aa|
setsymbol|symbol|sets the value of the symbol for the object|543d3e468fca49e0b9f7f48c643ca4aa|
gettotal|total|is a method that returns the total associated with the object|543d3e468fca49e0b9f7f48c643ca4aa|
settotal|total|sets the value of the total for the object|543d3e468fca49e0b9f7f48c643ca4aa|
getprice|price|is a method that returns the price associated with the object|543d3e468fca49e0b9f7f48c643ca4aa|
orderdatajsf|orderdata|this class in the context is named OrderDataJSF and it contains a property called orderdata|f4661e197bf44af9974159c1aa8c6027|
orderdatabean|entities.orderdatabean|the class TradeAction has a dependency on the class OrderDataBean, which is accessed through the package 'entities'|f4661e197bf44af9974159c1aa8c6027|
tradeaction|tradeaction|this variable in the context represents an instance of the class TradeAction|f4661e197bf44af9974159c1aa8c6027|
facesexternalcontext|externalcontext|the variable facesExternalContext is used to access the external context in JavaScript Faces (JSF)|f4661e197bf44af9974159c1aa8c6027|
tradeconfig|tradeconfig|this class in the context represents a configuration for trades|f4661e197bf44af9974159c1aa8c6027|
portfolio|balance|The Portfolio contains the Balance of the user's account.|2f47a99c5b7b42328ba9a396f59d6da1|
portfolio|numberholdings|The Portfolio consists of a number of Holdings as specified by NumberHoldings.|2f47a99c5b7b42328ba9a396f59d6da1|
portfolio|holdingdatas|The Portfolio holds the list of HoldingDataBeans obtained from TradeAction using userID.|2f47a99c5b7b42328ba9a396f59d6da1|
portfolio|tradeconfig|TradeConfig is used to access settings required for performing trades, which are part of the Portfolio.|2f47a99c5b7b42328ba9a396f59d6da1|
holdingdatas|holdingdatabeans|Each Holding in the Portfolio is represented by a HoldingDataBean.|2f47a99c5b7b42328ba9a396f59d6da1|
holdingdatas|openbalance|The OpenBalance of a user's account is maintained by the HoldingDatas in the Portfolio.|2f47a99c5b7b42328ba9a396f59d6da1|
holdingdatas|holdingstotal|The total value of all the Holdings in the Portfolio is represented as HoldingsTotal.|2f47a99c5b7b42328ba9a396f59d6da1|
holdingdatas|sumofcashholdings|The sum of the cash holdings in the Portfolio is calculated and stored in SumOfCashHoldings.|2f47a99c5b7b42328ba9a396f59d6da1|
holdingdatas|tradeaction|TradeAction is used to retrieve HoldingDataBeans from the database for a given userID.|2f47a99c5b7b42328ba9a396f59d6da1|
balance|openbalance|The OpenBalance in the account is subtracted from the Balance to calculate the current Balance.|2f47a99c5b7b42328ba9a396f59d6da1|
getholdingstotal|holdingstotal|is a method that returns the total value of all holdings.|c9f13dd814a643baa3db15e12a19ab48|
setsumofcashholdings|sumofcashholdings|sets the sum of cash holdings.|c9f13dd814a643baa3db15e12a19ab48|
getsumofcashholdings|sumofcashholdings|returns the sum of cash holdings.|c9f13dd814a643baa3db15e12a19ab48|
setnumberholdings|numberholdings|sets the number of holdings.|c9f13dd814a643baa3db15e12a19ab48|
getnumberholdings|numberholdings|returns the number of holdings.|c9f13dd814a643baa3db15e12a19ab48|
settotalgain|totalgain|sets the total gain of all holdings.|c9f13dd814a643baa3db15e12a19ab48|
gettotalgain|totalgain|returns the total gain of all holdings.|c9f13dd814a643baa3db15e12a19ab48|
settotalvalue|totalvalue|sets the total value of all holdings.|c9f13dd814a643baa3db15e12a19ab48|
gettotalvalue|totalvalue|returns the total value of all holdings.|c9f13dd814a643baa3db15e12a19ab48|
settotalbasis|totalbasis|sets the total basis of all holdings.|c9f13dd814a643baa3db15e12a19ab48|
gettotalbasis|totalbasis|returns the total basis of all holdings.|c9f13dd814a643baa3db15e12a19ab48|
setholdingdatas|holdingdatas|sets an arraylist containing detailed information about each holding.|c9f13dd814a643baa3db15e12a19ab48|
getholdingdatas|holdingdatas|returns the arraylist containing detailed information about each holding.|c9f13dd814a643baa3db15e12a19ab48|
settotalgainpercent|totalgainpercent|sets the percentage gain of all holdings.|c9f13dd814a643baa3db15e12a19ab48|
gettotalgainpercent|totalgainpercent|returns the percentage gain of all holdings.|c9f13dd814a643baa3db15e12a19ab48|
gettotalgainpercenthtml|totalgainpercent|returns the total gain percent as an html string for formatting purposes.|c9f13dd814a643baa3db15e12a19ab48|
totalgainpercent|gettotalgainpercenthtml|This class has a method named getTotalGainPercentHTML that returns the HTML representation of the totalGainPercent variable. This indicates that there is a relationship between the totalGainPercent and getting its HTML representation.|b95139d95d4d4706bf0795487d81c50c|
price|symbol|In this class, price and symbol are both associated with representing quotes for stocks. Therefore, we can infer that there is a relationship between the price and the stock symbol it represents.|b95139d95d4d4706bf0795487d81c50c|
open|price|Both open and price represent numerical values related to the stock's current or historical trading prices. Thus, we can say that there is a relationship between them.|b95139d95d4d4706bf0795487d81c50c|
companyname|symbol|In this class, both symbol and companyName are associated with representing quotes for stocks. Therefore, there is a relationship between the stock's symbol and its corresponding company name.|b95139d95d4d4706bf0795487d81c50c|
high|price|Both high and price represent numerical values related to the stock's current or historical trading prices. Therefore, we can say that there is a relationship between them.|b95139d95d4d4706bf0795487d81c50c|
low|price|Both low and price represent numerical values related to the stock's current or historical trading prices. Therefore, we can say that there is a relationship between them.|b95139d95d4d4706bf0795487d81c50c|
volume|change|In this class, both volume and change represent numerical values related to the stock's trading activity. As such, there is a relationship between them.|b95139d95d4d4706bf0795487d81c50c|
range|price|Both range and price represent numerical values related to the stock's current or historical trading prices. Therefore, we can say that there is a relationship between them.|b95139d95d4d4706bf0795487d81c50c|
node_1|node_2|edge|chunk_id
getlow|low|is a method that returns the value of the low property|482f15c60e894b92a45601c073c13ac2
low|bigdecimal|is an object of type BigDecimal that holds the value of low|482f15c60e894b92a45601c073c13ac2
setcompanyname|companyname|is a method that sets the value of the companyName property|482f15c60e894b92a45601c073c13ac2
getcompanyname|companyname|is a method that returns the value of the companyName property|482f15c60e894b92a45601c073c13ac2
setvolume|volume|is a method that sets the value of the volume property|482f15c60e894b92a45601c073c13ac2
getvolume|volume|is a method that returns the value of the volume property|482f15c60e894b92a45601c073c13ac2
setchange|change|is a method that sets the value of the change property|482f15c60e894b92a45601c073c13ac2
getchange|change|is a method that returns the value of the change property|482f15c60e894b92a45601c073c13ac2
setrange|range|is a method that sets the value of the range property|482f15c60e894b92a45601c073c13ac2
getrange|range|is a method that returns the value of the range property|482f15c60e894b92a45601c073c13ac2
setgainpercent|gainpercent|is a method that sets the value of the gainPercent property and rounds it to two decimal places using setScale()|482f15c60e894b92a45601c073c13ac2
getgainpercent|gainpercent|is a method that returns the value of the gainPercent property with two decimal places|482f15c60e894b92a45601c073c13ac2
setgain|gain|is a method that sets the value of the gain property|482f15c60e894b92a45601c073c13ac2
getgain|gain|is a method that returns the value of the gain property|482f15c60e894b92a45601c073c13ac2
getchangehtml|change|returns the change value formatted as HTML with an arrow image indicating whether it's positive or negative|482f15c60e894b92a45601c073c13ac2
tradeaction|entities.orderdatabean|is used to perform trades and is related to the OrderDataBean entity that holds details about orders|cb6627d118ff4cab8c913f358c47c34e
entities.quotedatabean|tradeaction|is required by the TradeAction class to retrieve quotes for securities during trades|cb6627d118ff4cab8c913f358c47c34e
htmldatatable|entities.quotedatabean|is used to display a table of quotes for selected securities and is related to the QuoteDataBean entity that holds quote data|cb6627d118ff4cab8c913f358c47c34e
externalcontext|httpsession|is used to access session information and is related to the HttpSession class that stores user sessions|cb6627d118ff4cab8c913f358c47c34e
com.ibm.websphere.samples.daytrader.util.log|excelutil|is used for logging purposes and is related to the ExcelUtil class that provides functionality for exporting data to Microsoft Excel|cb6627d118ff4cab8c913f358c47c34e
tradeaction|userid|In the buy method, tradeAction is used to place an order for a specific userID.|0e86a07e6067434688c5b896bcb7bf9a
quotedata|symbol|The quoteData object contains information about a particular stock's price and other statistics. The symbol attribute represents the unique identifier for that stock.|0e86a07e6067434688c5b896bcb7bf9a
quotedatabean|quotedata|In the while loop, we extract quoteData objects from an instance of QuoteDataBean, which is likely a class used to interact with a data source and retrieve stock quotes.|0e86a07e6067434688c5b896bcb7bf9a
datatable|quotedata|The rowData attribute of the dataTable object holds one of these QuoteData objects, which are displayed to the user for viewing or trading.|0e86a07e6067434688c5b896bcb7bf9a
tradeaction|producetradeaction|method of TradeActionProducer class that produces a new instance of TradeAction|b591ff64f1e146089be0038b69659d84
tradeaction|class com.ibm.websphere.samples.daytrader.tradeaction|belongs to the class com.ibm.websphere.samples.daytrader.TradeAction|b591ff64f1e146089be0038b69659d84
tradeaction|methods: setquotes, getquotes, setsymbols, getsymbols, setdatatable, getdatatable, setquantity, getquantity|contains methods to set and get quotes, symbols, dataTable, and quantity|b591ff64f1e146089be0038b69659d84
setsymbols|method of tradeaction class that sets the value of symbols|belongs to the method setSymbols of TradeAction class|b591ff64f1e146089be0038b69659d84
getsymbols|method of tradeaction class that returns the value of symbols|belongs to the method getSymbols of TradeAction class|b591ff64f1e146089be0038b69659d84
setdatatable|method of tradeaction class that sets the value of datatable|belongs to the method setDataTable of TradeAction class|b591ff64f1e146089be0038b69659d84
getdatatable|method of tradeaction class that returns the value of datatable|belongs to the method getDataTable of TradeAction class|b591ff64f1e146089be0038b69659d84
setquantity|method of tradeaction class that sets the value of quantity|belongs to the method setQuantity of TradeAction class|b591ff64f1e146089be0038b69659d84
getquantity|method of tradeaction class that returns the value of quantity|belongs to the method getQuantity of TradeAction class|b591ff64f1e146089be0038b69659d84
tradeactionproducer|tradeaction|is a producer class for TradeActions, which are used to execute trades.|ef639d662f99403b881701b46f2f7a30
com.ibm.websphere.samples.daytrader.web.jsf|tradeappjsf|is a JSF class for the Daytrader web application, which uses TradeActions to execute trades.|ef639d662f99403b881701b46f2f7a30
javax.inject.named|@named|is an annotation used to name and scope managed beans in Java EE applications, which are used by JSF to manage the application's state.|ef639d662f99403b881701b46f2f7a30
javax.enterprise.context.sessionscoped|@sessionscoped|is an annotation used to specify that a managed bean should be scoped to the user's session, which allows for persistence of state across multiple requests.|ef639d662f99403b881701b46f2f7a30
javax.faces.context.externalcontext|externalcontext|is an interface provided by JSF to access information about the client's environment, such as their session and request data.|ef639d662f99403b881701b46f2f7a30
javax.servlet.http.httpservletrequest|httpservletrequest|is a class in Java Servlet API used to process HTTP requests and responses, which provides access to the client's request data.|ef639d662f99403b881701b46f2f7a30
javax.servlet.http.httpsession|httpsession|is a class in Java Servlet API used to store and access session-specific data, which allows for persistence of state across multiple requests.|ef639d662f99403b881701b46f2f7a30
com.ibm.websphere.samples.daytrader.entities|accountdatabean|is an entity class used to store data related to accounts in the Daytrader application, which allows for persistence of state across multiple requests and sessions.|ef639d662f99403b881701b46f2f7a30
com.ibm.websphere.samples.daytrader.entities|accountprofiledatabean|is an entity class used to store data related to account profiles in the Daytrader application, which allows for persistence of state across multiple requests and sessions.|ef639d662f99403b881701b46f2f7a30
java.math.bigdecimal|bigdecimal|is a class used to represent decimal numbers with arbitrary precision, which is used to store financial data in the Daytrader application.|ef639d662f99403b881701b46f2f7a30
tradeappjsf|sessionscoped|Is a type of scope in CDI (Contexts and Dependency Injection) framework used for dependency injection and context-specific behavior.|47ba67198adb4af39f35ef34cd2349fd
tradeappjsf|named|Is a qualifier annotated on classes, methods, and fields to denote their unique names within the CDI bean archive.|47ba67198adb4af39f35ef34cd2349fd
tradeaction|tradeappjsf|is a reference variable of type TradeAction used for trading operations in DayTrader application.|47ba67198adb4af39f35ef34cd2349fd
facesexternalcontext|tradeappjsf|Is an interface provided by JSF (JavaServer Faces) framework to access session, request, and response scoped objects in CDI applications.|47ba67198adb4af39f35ef34cd2349fd
userid|tradeappjsf|Is a variable used to store user credentials in DayTrader application for login authentication.|47ba67198adb4af39f35ef34cd2349fd
password|tradeappjsf|Is a variable used to store password of the user in DayTrader application for login authentication.|47ba67198adb4af39f35ef34cd2349fd
cpassword|tradeappjsf|Could be an optional variable used to change passwords in DayTrader application during login operation.|47ba67198adb4af39f35ef34cd2349fd
results|tradeappjsf|Is a variable used to store the message for displaying on the UI after successful login authentication in DayTrader application.|47ba67198adb4af39f35ef34cd2349fd
fullname|accountdatabean|Is a variable used to store full name of the user in AccountDataBean for login operation in DayTrader application.|47ba67198adb4af39f35ef34cd2349fd
address|accountprofiledatabean|Is a variable used to store address details of the user in AccountProfileDataBean for login operation in DayTrader application.|47ba67198adb4af39f35ef34cd2349fd
email|accountdatabean|Is a variable used to store email address of the user in AccountDataBean for login operation in DayTrader application.|47ba67198adb4af39f35ef34cd2349fd
ccn|accountdatabean|Is a variable used to store credit card number of the user in AccountDataBean for login operation in DayTrader application.|47ba67198adb4af39f35ef34cd2349fd
money|accountdatabean|Is a variable used to store account balance or money of the user in AccountDataBean for login operation in DayTrader application.|47ba67198adb4af39f35ef34cd2349fd
registration operation failed|passwords did not match|The user attempted to register with different passwords for their account, causing the registration operation to fail.|b604459f281e4787b6c0b9648dba7b08
registration operation failed|exception occurred during registration process|An unexpected error occurred while executing the registration operation, causing it to fail. The specific exception that occurred is logged for further investigation.|b604459f281e4787b6c0b9648dba7b08
update profile error|passwords do not match|The user attempted to update their account profile with different passwords, causing the update operation to fail.|b604459f281e4787b6c0b9648dba7b08
session|authentication cache|When a user logs out, their session is invalidated and they are removed from the authentication cache.|b2d286043835447bad4f5af9235fc0da
httpservletrequest|logout|The logout method of HttpServletRequest is called to actually remove a user from the authentication cache.|b2d286043835447bad4f5af9235fc0da
userid|httpsession|The user's session (stored in HttpSession) can be accessed using their unique identifier (userID).|b2d286043835447bad4f5af9235fc0da
facesexternalcontext|session|In JSF, the external context is used to access session-scoped objects like HttpSession.|b2d286043835447bad4f5af9235fc0da
password|userid|The user's password is associated with their unique identifier (userID).|b2d286043835447bad4f5af9235fc0da
cpassword|password|A confirmation password field (cpassword) is used to ensure the user's password is entered correctly.|b2d286043835447bad4f5af9235fc0da
fullname|user|The user's full name is a component of their identity.|b2d286043835447bad4f5af9235fc0da
address|user|A user's address is associated with their identity.|b2d286043835447bad4f5af9235fc0da
email|user|A user's email address is associated with their identity.|b2d286043835447bad4f5af9235fc0da
ccn|payment information|A user's credit card number (ccn) is a component of their payment information.|b2d286043835447bad4f5af9235fc0da
money|user|The amount of money a user has is associated with their identity.|b2d286043835447bad4f5af9235fc0da
results|user|A user's past results (stored in the 'results' field) are associated with their identity.|b2d286043835447bad4f5af9235fc0da
ccn|getccn|is associated with|3de0aea4dd9d40e7bbf0aab20800fc5f
money|getmoney|is associated with|3de0aea4dd9d40e7bbf0aab20800fc5f
tradeconfigjsf|class name tradeconfigjsf|belongs to|3de0aea4dd9d40e7bbf0aab20800fc5f
/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/jsf/tradeconfigjsf.java|file path of tradeconfigjsf.java|located in|3de0aea4dd9d40e7bbf0aab20800fc5f
com.ibm.websphere.samples.daytrader.web.jsf|package name com.ibm.websphere.samples.daytrader.web.jsf|is part of|3de0aea4dd9d40e7bbf0aab20800fc5f
tradeaction|class name tradeaction|interacts with|3de0aea4dd9d40e7bbf0aab20800fc5f
runstatsdatabean|class name runstatsdatabean|interacts with|3de0aea4dd9d40e7bbf0aab20800fc5f
tradedirect|class name tradedirect|interacts with|3de0aea4dd9d40e7bbf0aab20800fc5f
externalcontext|class name externalcontext|interacts with|3de0aea4dd9d40e7bbf0aab20800fc5f
httpsession|class name httpsession|interacts with|3de0aea4dd9d40e7bbf0aab20800fc5f
log|class name log|interacts with|3de0aea4dd9d40e7bbf0aab20800fc5f
tradeconfig|class name tradeconfig|is extended by|3de0aea4dd9d40e7bbf0aab20800fc5f
tradeconfigjsf|named|In this context, 'TradeConfigJSF' is named as a bean with the name 'tradeconfig' using the annotation '@Named'. This indicates that this class is being injected into other classes or methods by its name rather than by its type.|66ee924d01084a0ea876df91ef758c16
tradeconfigjsf|requestscoped|The 'RequestScoped' annotation is used to define the scope of this bean. It means that this bean will be created for each HTTP request and destroyed after the response is sent back to the client.|66ee924d01084a0ea876df91ef758c16
facesexternalcontext|injected|In this context, 'facesExternalContext' is being injected into the 'TradeConfigJSF' class using the '@Inject' annotation. This allows the 'facesExternalContext' object to be passed into the constructor or setter methods of this class.|66ee924d01084a0ea876df91ef758c16
tradebuilddb|static reference|In this context, 'TradeBuildDB' is referenced as a static class. This indicates that it can be accessed directly without the need for an object to be instantiated.|66ee924d01084a0ea876df91ef758c16
updateconfig|currentconfigstr|performs an update on the configuration and saves it to a string variable named currentConfigStr.|5c82ea4a6fe64f999cb704c535e2f758
tradeconfigjsf.updateconfig(..)|minor exception caught|an error message when a minor exception is caught during configuration update in TradeConfigJSF method.|5c82ea4a6fe64f999cb704c535e2f758
runtimemodelist|runtimemodestr|compares the value of runtimeModeStr with the elements of runtimeModeList to set the RunTimeMode value.|5c82ea4a6fe64f999cb704c535e2f758
tradeconfigjsf.updateconfig(..)|major exception caught|an error message when a major exception is caught during configuration update in TradeConfigJSF method.|5c82ea4a6fe64f999cb704c535e2f758
useremoteejbinterface|tradeconfigjsf.updateconfig(..)|sets the value of useRemoteEJBInterface and adds it to the current configuration string.|5c82ea4a6fe64f999cb704c535e2f758
orderprocessingmodelist|orderprocessingmodestr|compares the value of orderProcessingModeStr with the elements of orderProcessingModeList to set the OrderProcessingMode value.|5c82ea4a6fe64f999cb704c535e2f758
tradeconfig|currentconfigstr|contains information about the current configuration|d4bf20b578da4191a0d06265a50be7d4
tradeconfig.setmax_users|maxusers|sets the maximum number of users for the trading system|d4bf20b578da4191a0d06265a50be7d4
tradeconfig.getmax_users|currentconfigstr|retrieves the current value of MAX_USERS from TradeConfig|d4bf20b578da4191a0d06265a50be7d4
currentconfigstr|tradeconfig.webinterfacenames[tradeconfig.webinterface]|displays the name(s) of the web interface(s) being used|d4bf20b578da4191a0d06265a50be7d4
currentconfigstr|marketsummaryinterval|displays the interval at which market summaries are generated|d4bf20b578da4191a0d06265a50be7d4
tradeconfig.setprimiterations|primiterations|sets the number of primitive iterations to be performed|d4bf20b578da4191a0d06265a50be7d4
currentconfigstr|tradeconfig.getprimiterations|displays the current value of primIterations from TradeConfig|d4bf20b578da4191a0d06265a50be7d4
tradeconfig.setpublishquotepricechange|publishquotepricechange|enables/disables publishing quote price changes to MDB|d4bf20b578da4191a0d06265a50be7d4
currentconfigstr|tradeconfig.getpublishquotepricechange|indicates whether TradeStreamer MDB is enabled or not|d4bf20b578da4191a0d06265a50be7d4
tradeconfig.setpercentsenttowebsocket|percentsenttowebsocket|sets the percentage of trades to be sent to WebSocket|d4bf20b578da4191a0d06265a50be7d4
currentconfigstr|tradeconfig.getpercentsenttowebsocket|displays the current value of percentSentToWebsocket from TradeConfig|d4bf20b578da4191a0d06265a50be7d4
tradeconfig.setlongrun|longrun|enables/disables long-running algorithms|d4bf20b578da4191a0d06265a50be7d4
currentconfigstr|tradeconfig.getlongrun|indicates whether long-running algorithms are enabled or not|d4bf20b578da4191a0d06265a50be7d4
tradeconfig.setdisplayorderalerts|displayorderalerts|enables/disables displaying order alerts|d4bf20b578da4191a0d06265a50be7d4
currentconfigstr|tradeconfig.getdisplayorderalerts|indicates whether order alerts are displayed or not|d4bf20b578da4191a0d06265a50be7d4
log.settrace|trace|enables/disables logging traces|d4bf20b578da4191a0d06265a50be7d4
currentconfigstr|log.gettrace|indicates whether trace logs are being generated or not|d4bf20b578da4191a0d06265a50be7d4
database|db2/|In the given context, if DB2/ is found in the tradeDirect.checkDBProductName() method call, then the database being used is identified as DB2.|0972256fa0ac4ec28d39d0d0cdc6185f
database|db2 udb for as/400|In the given context, if DB2 UDB for AS/400 is found in the tradeDirect.checkDBProductName() method call, then the database being used is identified as DB2 on IBM i.|0972256fa0ac4ec28d39d0d0cdc6185f
database|apache derby|In the given context, if Apache Derby is found in the tradeDirect.checkDBProductName() method call or if the database being used is unsupported/untested, then the database being used is identified as Derby.|0972256fa0ac4ec28d39d0d0cdc6185f
database|oracle|In the given context, if Oracle is found in the tradeDirect.checkDBProductName() method call, then the database being used is identified as Oracle.|0972256fa0ac4ec28d39d0d0cdc6185f
ddlfile|/dbscripts/db2/table.ddl|In the given context, if DB2/ is found in the tradeDirect.checkDBProductName() method call, then the DDL file for the specified database is located at /dbscripts/db2/Table.ddl.|0972256fa0ac4ec28d39d0d0cdc6185f
ddlfile|/dbscripts/db2i/table.ddl|In the given context, if DB2 UDB for AS/400 is found in the tradeDirect.checkDBProductName() method call, then the DDL file for the specified database is located at /dbscripts/db2i/Table.ddl.|0972256fa0ac4ec28d39d0d0cdc6185f
ddlfile|/dbscripts/derby/table.ddl|In the given context, if Apache Derby or an unsupported/untested database is found in the tradeDirect.checkDBProductName() method call, then the DDL file for the specified database is located at /dbscripts/derby/Table.ddl.|0972256fa0ac4ec28d39d0d0cdc6185f
result|tradebuilddb: **** database product detected: |In the given context, if DB2/ or DB2 UDB for AS/400 or Apache Derby or an unsupported/untested database is found in the tradeDirect.checkDBProductName() method call, then a message indicating the detected Database Product is added to the result variable.|0972256fa0ac4ec28d39d0d0cdc6185f
result|**** this database is unsupported/untested use at your own risk ****<br/>|In the given context, if Apache Derby or an unsupported/untested database is found in the tradeDirect.checkDBProductName() method call, then a message indicating that the Database is unsupported/untested and use at your own risk is added to the result variable.|0972256fa0ac4ec28d39d0d0cdc6185f
maxusers|int|The property maxUsers is of data type int.|fa5be747b2d846b8941eafc72fca9458
setmaxusers|maxusers|The method setMaxUsers sets the value of maxUsers.|fa5be747b2d846b8941eafc72fca9458
getmaxusers|maxusers|The method getMaxUsers returns the value of maxUsers.|fa5be747b2d846b8941eafc72fca9458
maxquotes|int|The property maxQuotes is of data type int.|fa5be747b2d846b8941eafc72fca9458
setmaxquotes|maxquotes|The method setmaxQuotes sets the value of maxQuotes.|fa5be747b2d846b8941eafc72fca9458
getmaxquotes|maxquotes|The method getMaxQuotes returns the value of maxQuotes.|fa5be747b2d846b8941eafc72fca9458
marketsummaryinterval|int|The property marketSummaryInterval is of data type int.|fa5be747b2d846b8941eafc72fca9458
setmarketsummaryinterval|marketsummaryinterval|The method setMarketSummaryInterval sets the value of marketSummaryInterval.|fa5be747b2d846b8941eafc72fca9458
getmarketsummaryinterval|marketsummaryinterval|The method getMarketSummaryInterval returns the value of marketSummaryInterval.|fa5be747b2d846b8941eafc72fca9458
primiterations|int|The property primIterations is of data type int.|fa5be747b2d846b8941eafc72fca9458
setprimiterations|primiterations|The method setPrimIterations sets the value of primIterations.|fa5be747b2d846b8941eafc72fca9458
getprimiterations|primiterations|The method getPrimIterations returns the value of primIterations.|fa5be747b2d846b8941eafc72fca9458
publishquotepricechange|boolean|The property publishQuotePriceChange is of data type boolean.|fa5be747b2d846b8941eafc72fca9458
setpublishquotepricechange|publishquotepricechange|The method setPublishQuotePriceChange sets the value of publishQuotePriceChange.|fa5be747b2d846b8941eafc72fca9458
ispublishquotepricechange|publishquotepricechange|The method isPublishQuotePriceChange returns the value of publishQuotePriceChange.|fa5be747b2d846b8941eafc72fca9458
percentsenttowebsocket|int|The property percentSentToWebsocket is of data type int.|fa5be747b2d846b8941eafc72fca9458
setpercentsenttowebsocket|percentsenttowebsocket|The method setPercentSentToWebsocket sets the value of percentSentToWebsocket.|fa5be747b2d846b8941eafc72fca9458
getpercentsenttowebsocket|percentsenttowebsocket|The method getPercentSentToWebsocket returns the value of percentSentToWebsocket.|fa5be747b2d846b8941eafc72fca9458
displayorderalerts|boolean|The property displayOrderAlerts is of data type boolean.|fa5be747b2d846b8941eafc72fca9458
setdisplayorderalerts|displayorderalerts|The method setDisplayOrderAlerts sets the value of displayOrderAlerts.|fa5be747b2d846b8941eafc72fca9458
isdisplayorderalerts|displayorderalerts|The method isDisplayOrderAlerts returns the value of displayOrderAlerts.|fa5be747b2d846b8941eafc72fca9458
useremoteejbinterface|boolean|The property useRemoteEJBInterface is of data type boolean.|fa5be747b2d846b8941eafc72fca9458
setuseremoteejbinterface|useremoteejbinterface|The method setUseRemoteEJBInterface sets the value of useRemoteEJBInterface.|fa5be747b2d846b8941eafc72fca9458
isuseremoteejbinterface|useremoteejbinterface|The method isUseRemoteEJBInterface returns the value of useRemoteEJBInterface.|fa5be747b2d846b8941eafc72fca9458
isuseremoteejbinterface|useremoteejbinterface|represents a boolean flag that specifies whether to use remote EJB interface or not|9be3b4f19f7f47cf8826a7d78ff8da35
longrun|longrun|indicates whether the program should run for a long time or not|9be3b4f19f7f47cf8826a7d78ff8da35
trace|trace|represents a boolean flag that specifies whether to trace the execution or not|9be3b4f19f7f47cf8826a7d78ff8da35
runtimemodelist|getruntimemodelist|getRuntimeModeList() returns an array of runtime modes|9be3b4f19f7f47cf8826a7d78ff8da35
orderprocessingmodelist|getorderprocessingmodelist|getOrderProcessingModeList() returns an array of order processing modes|9be3b4f19f7f47cf8826a7d78ff8da35
cachingtypelist|getcachingtypelist|getCachingTypeList() returns an array of caching types|9be3b4f19f7f47cf8826a7d78ff8da35
webinterface|getwebinterface|getWebInterface() returns the web interface URL|9be3b4f19f7f47cf8826a7d78ff8da35
webinterfacelist|getwebinterfacelist|getWebInterfaceList() returns an array of web interface URLs|9be3b4f19f7f47cf8826a7d78ff8da35
actiontrace|isactiontrace|isActionTrace() returns a boolean value indicating whether to trace the actions or not|9be3b4f19f7f47cf8826a7d78ff8da35
result|getresult|getResult() returns the result of the program execution|9be3b4f19f7f47cf8826a7d78ff8da35
explicitgc|class|ExplicitGC is a class defined in the provided context.|beb6f2747d7e4bbe9166430ad57a48f6
src|folder|The file 'ExplicitGC.java' is located in the folder 'src' as mentioned in the context.|beb6f2747d7e4bbe9166430ad57a48f6
com|package|The package where 'ExplicitGC.java' is located, as mentioned in the context, is 'com'|beb6f2747d7e4bbe9166430ad57a48f6
daytrader7|product|The product that contains this code is 'daytrader7', as specified in the context.|beb6f2747d7e4bbe9166430ad57a48f6
websphere|brand|The brand under which this code is provided is 'WebSphere', as mentioned in the context.|beb6f2747d7e4bbe9166430ad57a48f6
samples|feature|This code is a part of the 'samples' feature provided by IBM.|beb6f2747d7e4bbe9166430ad57a48f6
daytrader|application|The application for which this code is being written is 'DayTrader', as stated in the context.|beb6f2747d7e4bbe9166430ad57a48f6
web|module|This code is a part of the web module of the DayTrader application.|beb6f2747d7e4bbe9166430ad57a48f6
prims|folder|The 'ExplicitGC.java' file belongs to the 'prims' folder within the web module of the DayTrader application.|beb6f2747d7e4bbe9166430ad57a48f6
httpservlet|class|The provided context mentions that 'HttpServlet' is being used as a base class for another class, implying their relatedness.|beb6f2747d7e4bbe9166430ad57a48f6
httpservletrequest|interface|The provided context shows that 'HttpServletRequest' interface is being extended by another interface or class.|beb6f2747d7e4bbe9166430ad57a48f6
httpservletresponse|interface|The provided context suggests that 'HttpServletResponse' interface is being used in the current code snippet.|beb6f2747d7e4bbe9166430ad57a48f6
log|class|As per the given context, 'Log' is another class being utilized along with 'ExplicitGC.java'.|beb6f2747d7e4bbe9166430ad57a48f6
servletconfig|interface|The provided context demonstrates that 'ServletConfig' interface is being implemented by a different interface or class.|beb6f2747d7e4bbe9166430ad57a48f6
servletexception|exception|As per the given context, an instance of 'ServletException' exception is being thrown in this code snippet.|beb6f2747d7e4bbe9166430ad57a48f6
ioexception|exception|The provided context shows that 'IOException' exception is also being handled in the current snippet.|beb6f2747d7e4bbe9166430ad57a48f6
annotation|decorator|As per the given context, 'WebServlet' annotation is being used to decorate another entity with specific attributes.|beb6f2747d7e4bbe9166430ad57a48f6
explicitgc|httpservletservlet|ExplicitGC is a subclass of HttpServletServlet.|c277546f2c314e8796db54b3db9f50b4
httpservletrequest|req|req is a parameter passed to doPost() and doGet() methods that represent an HTTP request.|c277546f2c314e8796db54b3db9f50b4
httpservletresponse|res|res is a parameter passed to doPost() and doGet() methods that represent an HTTP response.|c277546f2c314e8796db54b3db9f50b4
doget()|method being invoked|doGet() is a method being invoked in this context.|c277546f2c314e8796db54b3db9f50b4
dopost()|another method being invoked|doPost() is another method being invoked for handling POST requests.|c277546f2c314e8796db54b3db9f50b4
httpservletrequest|request object|request object represents the client request and can be accessed through req parameter in this context.|c277546f2c314e8796db54b3db9f50b4
httpservletresponse|response object|response object represents the server response and can be accessed through res parameter in this context.|c277546f2c314e8796db54b3db9f50b4
setcontenttype()|method for setting content type|setContentType() method is used to set the content type of the response object in this context.|c277546f2c314e8796db54b3db9f50b4
getoutputstream()|method for getting output stream|getOutputStream() method is used to get the output stream for writing data to the client in this context.|c277546f2c314e8796db54b3db9f50b4
httpservletrequest|req parameter|req parameter represents the HTTP request and is passed as an argument to doPost() and doGet() methods in this context.|c277546f2c314e8796db54b3db9f50b4
httpservletresponse|res parameter|res parameter represents the HTTP response and is passed as an argument to doPost() and doGet() methods in this context.|c277546f2c314e8796db54b3db9f50b4
system.currenttimemillis()|method for getting current time|System.currentTimeMillis() method is used to get the current time in milliseconds in this context.|c277546f2c314e8796db54b3db9f50b4
runtime.getruntime().totalmemory()|method for getting total memory|Runtime.getRuntime().totalMemory() method is used to get the total amount of memory currently configured in this context.|c277546f2c314e8796db54b3db9f50b4
runtime.getruntime().maxmemory()|method for getting maximum memory|Runtime.getRuntime().maxMemory() method is used to get the maximum amount of memory that the Java Virtual Machine (JVM) will allow the application to use in this context.|c277546f2c314e8796db54b3db9f50b4
runtime.getruntime().freememory()|method for getting free memory|Runtime.getRuntime().freeMemory() method is used to get the amount of unused memory that is immediately available in this context.|c277546f2c314e8796db54b3db9f50b4
hitcount|variable for counting hits|hitCount variable is used to count the number of requests being made in this context.|c277546f2c314e8796db54b3db9f50b4
explicitgc|servlet|The class 'ExplicitGC' is a subclass of Servlet.|bfd210f0926e4789960f8bf8c3aa7e00
inittime|java.util.date|The variable 'initTime' is of type java.util.Date.|bfd210f0926e4789960f8bf8c3aa7e00
hitcount|int|The variable 'hitCount' is of type int.|bfd210f0926e4789960f8bf8c3aa7e00
config|servletconfig|The parameter 'config' is of type ServletConfig.|bfd210f0926e4789960f8bf8c3aa7e00
totalmemory|long|The variable 'totalMemory' is of type long.|bfd210f0926e4789960f8bf8c3aa7e00
freememorybeforegc|long|The variable 'freeMemoryBeforeGC' is of type long.|bfd210f0926e4789960f8bf8c3aa7e00
maxmemoryaftergc|long|The variable 'maxMemoryAfterGC' is of type long.|bfd210f0926e4789960f8bf8c3aa7e00
freememoryaftergc|long|The variable 'freeMemoryAfterGC' is of type long.|bfd210f0926e4789960f8bf8c3aa7e00
totalmemory|freememoryaftergc|The variable 'totalMemory' is related to the variable 'freeMemoryAfterGC'.|bfd210f0926e4789960f8bf8c3aa7e00
starttime|long|The variable 'startTime' is of type long.|bfd210f0926e4789960f8bf8c3aa7e00
endtime|long|The variable 'endTime' is of type long.|bfd210f0926e4789960f8bf8c3aa7e00
float|(endtime - starttime) / 1000|The data type of the expression '(endTime - startTime) / 1000' is Float.|bfd210f0926e4789960f8bf8c3aa7e00
pingbean|simple bean to get and set messages |PingBean is a class in the provided context that has the functionality of getting and setting messages.|99ae378e1be84c5085272e5271ff9063
getmsg()|method within pingbean that returns the message contained in the bean|getMsg() is a method within class PingBean that returns the message contained in the bean.|99ae378e1be84c5085272e5271ff9063
pingcdibean|class|PingCDIBean is a Java class.|6b85d8dc314e4f8080df5c699473a581
requestscoped|annotation|RequestScoped is an annotation used to define the scope of this bean.|6b85d8dc314e4f8080df5c699473a581
pinginterceptorbinding|annotation|PingInterceptorBinding is an annotation used for interception.|6b85d8dc314e4f8080df5c699473a581
initialcontext|class|InitialContext is a class used to get references to Java EE components and resources.|6b85d8dc314e4f8080df5c699473a581
beanmanager|interface|BeanManager is an interface provided by CDI that manages the life cycle of CDI beans.|6b85d8dc314e4f8080df5c699473a581
cdi|class|CDI is a class used to provide CDI-specific utilities.|6b85d8dc314e4f8080df5c699473a581
set|interface|Set is an interface used to store unique elements.|6b85d8dc314e4f8080df5c699473a581
hellohitcount|hellohitcount|increased in the method hello()|eed481fc4de54af189858ebcbf192ba9
getbeanmanagerhitcountjndi|getbeanmanagerhitcountjndi|incremented in the method getBeanMangerViaJNDI() when a BeanManager is successfully retrieved from JNDI|eed481fc4de54af189858ebcbf192ba9
getbeanmanagerhitcountspi|getbeanmanagerhitcountspi|incremented in the method getBeanMangerViaCDICurrent() when a BeanManager is successfully retrieved from CDI|eed481fc4de54af189858ebcbf192ba9
hellohitcount|getbeanmanagerhitcountjndi|independent variables|eed481fc4de54af189858ebcbf192ba9
getbeanmanagerhitcountjndi|getbeanmanagerhitcountspi|independent variables|eed481fc4de54af189858ebcbf192ba9
pingcdijsfbean|sessionscoped|PingCDIJSFBean is annotated with SessionScoped, which is a type of context that lasts for the duration of user session.|62b02901eb55463abcf9c6fcaebde09e
pingcdijsfbean|named|PingCDIJSFBean is annotated with Named, which provides a name for the bean that can be used to look it up by name.|62b02901eb55463abcf9c6fcaebde09e
pingcdijsfbean|serializable|PingCDIJSFBean implements Serializable, which allows the bean to be serialized and deserialized across a network.|62b02901eb55463abcf9c6fcaebde09e
hitcount|int|hitCount is a variable of type int, which is used to keep track of the number of times the getHitCount() method has been called.|62b02901eb55463abcf9c6fcaebde09e
getbeanmanagerhitcountspi|int|getBeanManagerHitCountSPI is a method that returns the number of times the bean manager has been hit, as provided by an SPI (Service Provider Interface).|62b02901eb55463abcf9c6fcaebde09e
cdi|contexts and dependency injection (cdi)|CDI is a framework for JavaEE, which provides contexts and dependency injection capabilities.|62b02901eb55463abcf9c6fcaebde09e
jsf|javaserver faces (jsf)|JSF is a technology for building web user interfaces in Java.|62b02901eb55463abcf9c6fcaebde09e
daytrader|daytrader|DayTrader is a sample application provided by IBM, which demonstrates the use of CDI and JSF technologies for building web applications.|62b02901eb55463abcf9c6fcaebde09e
ibm|international business machines (ibm)|IBM is a multinational technology company, which provides hardware, middleware and software solutions to various industries.|62b02901eb55463abcf9c6fcaebde09e
licensed|apache license|The code snippet is licensed under the Apache License version 2.0, which allows users to use it for any purpose as long as they follow certain conditions and restrictions.|62b02901eb55463abcf9c6fcaebde09e
serializable|java interface|Serializable is a Java interface that provides the ability to serialize and deserialize objects across networks or storage devices.|62b02901eb55463abcf9c6fcaebde09e
pingejbiface|interface|PingEJBIFace is a type of interface in Java programming language, which defines a set of methods that can be invoked by other objects.|79bcfd0bc604465780c64588a0268dbc
getmsg|method|getMsg() is a method declared inside the PingEJBIFace interface, which is used to retrieve a string value.|79bcfd0bc604465780c64588a0268dbc
string|data type|String is a built-in data type in Java, which is used to store textual information as a sequence of characters.|79bcfd0bc604465780c64588a0268dbc
java programming language|programming language|The context mentions that the code snippets are written in Java programming language, which is a popular object-oriented programming language used for developing applications.|79bcfd0bc604465780c64588a0268dbc
ibm corporation|organization|The context mentions that the code snippets are related to IBM Corporation, which is a multinational technology company based in the United States.|79bcfd0bc604465780c64588a0268dbc
/home/jerry|location|The context mentions a file path located at /home/jerry on a Linux or Unix-based operating system.|79bcfd0bc604465780c64588a0268dbc
daytrader7|software application|The context mentions the version number of a software application named daytrader7, which is developed for trading activities in stock markets.|79bcfd0bc604465780c64588a0268dbc
node_1|node_2|edge|chunk_id
ejb interface|pingejbiface|is a specific implementation of an Enterprise Java Beans (EJB) interface used for remote method invocation, and provides a way to access business logic across multiple platforms and containers within a distributed system. PingEJBIFace is the interface that needs to be implemented by classes representing stateful session beans.|67be3f983a044c8e83c9906510815f09
pingejblocal|pingejbiface|implements the PingEJBIFace interface, which provides a method to retrieve a message string. This stateful session bean keeps track of its conversational state between client requests.|67be3f983a044c8e83c9906510815f09
stateful|pingejblocal|indicates that this session bean maintains a conversation with the client during the method execution. The conversation is unique to each user session and persists across multiple method invocations from the same client.|67be3f983a044c8e83c9906510815f09
local|pingejblocal|indicates that this bean can be looked up and accessed only within the same Java Virtual Machine (JVM) or within the same application client.|67be3f983a044c8e83c9906510815f09
hitcount|pingejblocal|is a static integer variable used to keep track of the number of times the getMsg() method is invoked. It is incremented inside the method.|67be3f983a044c8e83c9906510815f09
pingejblocal|ejb|relationship between the two concepts, PingEJBLocal and ejb in the given context. For example, 'Decorated' indicates that PingEJBLocal is a decorator of ejb in this specific context.|229789a875884ef5ac433a742a1e4fca
pingejbiface|ejb|is an injection-managed EJB interface used to retrieve messages|fef03da6d3734a03852c0f2aaf2de2c1
getmsg|methodinterceptor|is a method that returns a message string decorated with interceptors, specifically PingInterceptor in this case|fef03da6d3734a03852c0f2aaf2de2c1
class pingejbiface|class com.ibm.websphere.samples.daytrader.web.prims.pingejbiface|is defined in the file: /home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingEJBIFace.java|fef03da6d3734a03852c0f2aaf2de2c1
class pinginterceptor|class com.ibm.websphere.samples.daytrader.web.prims.pinginterceptor|is defined in the file: /home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingInterceptor.java|fef03da6d3734a03852c0f2aaf2de2c1
class invocationcontext|class javax.interceptor.invocationcontext|is used to manage the context of an interception in this case for the methodInterceptor|fef03da6d3734a03852c0f2aaf2de2c1
pinginterceptorbinding|interceptorbinding|is a specific type of annotation, which is used to define interceptor bindings. InterceptorBinding is also an annotation that is used to define interceptors at the class or constructor level.|e1fed19682504a1a94bae46e24482854
elementtype|annotationtarget|is a type of annotation element that specifies where annotations can be applied. In this case, both ElementType and AnnotationTarget are annotation types.|e1fed19682504a1a94bae46e24482854
retentionpolicy|classfileversionattribute.classfileversion|is a Java annotation retention level that specifies when the annotation should be retained during the classloading process. ClassFileVersion is a class file version attribute.|e1fed19682504a1a94bae46e24482854
target|elementtype|is an annotation type that combines multiple ElementType values into a single annotation, allowing for more complex annotations to be defined.|e1fed19682504a1a94bae46e24482854
pingjdbcread|httpservlet|PingJDBCRead is a subclass of HttpServlet.|3d58590fb7524a7e84683adb06763013
servlet/pingjdbcread|urlpatterns|The URL pattern for PingJDBCRead is specified in urlPatterns.|3d58590fb7524a7e84683adb06763013
httpservletrequest|req|HttpServletRequest object is accessed through the req variable.|3d58590fb7524a7e84683adb06763013
httpservletresponse|res|HttpServletResponse object is accessed through the res variable.|3d58590fb7524a7e84683adb06763013
dopost|pingjdbcread|doPost is a method of PingJDBCRead.|3d58590fb7524a7e84683adb06763013
doget|pingjdbcread|doGet is another method of PingJDBCRead, called when the URL pattern matches a request.|3d58590fb7524a7e84683adb06763013
httpservletrequest|req|The same HttpServletRequest object is passed to both doGet and doPost methods of PingJDBCRead for a given request.|3d58590fb7524a7e84683adb06763013
httpservletresponse|res|The same HttpServletResponse object is returned from both doGet and doPost methods of PingJDBCRead for a given request.|3d58590fb7524a7e84683adb06763013
ping jdbc read w/ prep stmt|hitcount|is a property of 'Ping JDBC Read w/ Prep Stmt'|de9e4b94af3b43e4ba689dd4ebf1bd9b
hitcount|hitcount|increments during each request|de9e4b94af3b43e4ba689dd4ebf1bd9b
ping jdbc read w/ prep stmt|inittime|is initialized with 'initTime' at the beginning of each request|de9e4b94af3b43e4ba689dd4ebf1bd9b
tradedirect|symbol|requires 'symbol' as an input parameter to fetch quote data|de9e4b94af3b43e4ba689dd4ebf1bd9b
quotedatabean|tohtml|provides HTML representation of quote data obtained through 'TradeDirect'|de9e4b94af3b43e4ba689dd4ebf1bd9b
tradeconfig|rndsymbol|generates random stock symbol used by 'TradeDirect' to fetch quote data|de9e4b94af3b43e4ba689dd4ebf1bd9b
tradeconfig|getprimiterations|returns the number of iterations required for simulation in the 'for' loop containing 'quoteData' variable|de9e4b94af3b43e4ba689dd4ebf1bd9b
pingjdbcread2jsp|class|PingJDBCRead2JSP is a Java class.|e2eda5366ea84a28baedd01f416f8b36
inittime|string variable|initTime is a string variable used to store the initialization time of the servlet.|e2eda5366ea84a28baedd01f416f8b36
getservletinfo|method|getServletInfo is a method used to return information about the servlet in one or two sentences.|e2eda5366ea84a28baedd01f416f8b36
config|servletconfig parameter|config is a ServletConfig parameter passed to the init() method of the servlet.|e2eda5366ea84a28baedd01f416f8b36
super|parent class reference|super is used to access the parent class' methods and variables in Java.|e2eda5366ea84a28baedd01f416f8b36
hitcount|integer variable|hitCount is an integer variable that keeps track of the number of hits on the servlet.|e2eda5366ea84a28baedd01f416f8b36
pingjdbcread2jsp|httpservletservlet|PingJDBCRead2JSP is a subclass of HttpServletServlet.|40533a9117f14672bebf2624e440dc77
dopost|doget|Both doPost and doGet are methods defined in the HttpServlet class, which PingJDBCRead2JSP overrides to provide customized handling of HTTP POST and GET requests.|40533a9117f14672bebf2624e440dc77
httpservletrequest|req|req is a parameter passed to both doPost and doGet methods, representing the HTTP request being processed by PingJDBCRead2JSP.|40533a9117f14672bebf2624e440dc77
httpservletresponse|res|res is a parameter passed to both doPost and doGet methods, representing the HTTP response being constructed by PingJDBCRead2JSP.|40533a9117f14672bebf2624e440dc77
tradedirect|com.ibm.websphere.samples.daytrader.direct.tradedirect|PingJDBCRead2JSP uses TradeDirect to set the price of a random stock.|40533a9117f14672bebf2624e440dc77
prepared statements|uses prepared statements|PingJDBCRead2JSP uses prepared statements for database read access, as defined in the com.ibm.websphere.samples.daytrader.direct package.|40533a9117f14672bebf2624e440dc77
quotedatabean|com.ibm.websphere.samples.daytrader.entities.quotedatabean|PingJDBCRead2JSP uses QuoteDataBean to set the price of a random stock, as defined in the com.ibm.websphere.samples.daytrader.entities package.|40533a9117f14672bebf2624e440dc77
tradeconfig|com.ibm.websphere.samples.daytrader.util.tradeconfig|PingJDBCRead2JSP uses TradeConfig to generate a random stock, as defined in the com.ibm.websphere.samples.daytrader.util package.|40533a9117f14672bebf2624e440dc77
log|com.ibm.websphere.samples.daytrader.util.log|PingJDBCRead2JSP uses Log to perform logging operations, as defined in the com.ibm.websphere.samples.daytrader.util package.|40533a9117f14672bebf2624e440dc77
tradeconfig|com.ibm.websphere.samples.daytrader.util.tradeconfig|PingJDBCRead2JSP uses TradeConfig to set the price of a random stock through the use of prepared statements.|40533a9117f14672bebf2624e440dc77
servlet|jsp|The servlet forwards the request to a JSP.|f3bf66b96b484f5882338413bbfe99db
httpservletrequest|httpservletresponse|These are the parameters passed in the doGet method.|f3bf66b96b484f5882338413bbfe99db
tradedirect|symbol|The TradeDirect class is used to get the quote and the symbol is specified.|f3bf66b96b484f5882338413bbfe99db
tradeconfig|rndsymbol|The rndSymbol method from the TradeConfig class generates a random symbol.|f3bf66b96b484f5882338413bbfe99db
quotedata|tradejdbcread2jps|The quoteData is obtained using the getQuote method from the TradeJDBC class and passed as an attribute to the JSP.|f3bf66b96b484f5882338413bbfe99db
hitcount|quotedataprimitive.jsp|The hitCount variable is not used in this version of the program.|f3bf66b96b484f5882338413bbfe99db
inittime|quotedataprimitive.jsp|The initTime variable is not used in this version of the program.|f3bf66b96b484f5882338413bbfe99db
pingjdbcwrite|java|The class PingJDBCWrite is defined in the package com.ibm.websphere.samples.daytrader.web.prims and written in the programming language java.|55f270a4d11b4d34bb03bcc10ffafae8
pingjdbcwrite|class|PingJDBCWrite is a class defined in the package com.ibm.websphere.samples.daytrader.web.prims.|55f270a4d11b4d34bb03bcc10ffafae8
tradedirect|pingjdbcwrite|Both TradeDirect and PingJDBCWrite are classes defined in different packages com.ibm.websphere.samples.daytrader.direct and com.ibm.websphere.samples.daytrader.web.prims respectively.|55f270a4d11b4d34bb03bcc10ffafae8
httpservlet|servletconfig|HttpServlet and ServletConfig are both interfaces implemented by web server components such as servlets and filters.|55f270a4d11b4d34bb03bcc10ffafae8
init(servletconfig config)|inittime|The init() method is called when a servlet is initialized, and the variable initTime is used to store the time of initialization.|55f270a4d11b4d34bb03bcc10ffafae8
java.math.bigdecimal|bigdecimal|The class BigDecimal is defined in the package java.math, and its fully qualified name is used to refer to it within Java programs.|55f270a4d11b4d34bb03bcc10ffafae8
tradedirect|tradedirect|The class TradeDirect is referred to using its fully qualified name com.ibm.websphere.samples.daytrader.direct.TradeDirect.|55f270a4d11b4d34bb03bcc10ffafae8
httpservletrequest|httpservletresponse|Both HttpServletRequest and HttpServletResponse are classes used to handle HTTP requests and responses in Java Servlets.|55f270a4d11b4d34bb03bcc10ffafae8
ioexception|servletexception|Both IOException and ServletException are classes used to represent different types of exceptions that can be thrown by Servlets and related components.|55f270a4d11b4d34bb03bcc10ffafae8
servlet|httpservletresponse|PingJDBCWrite is a subclass of HTTPServlet, and in this context, it's being used as an HTTP servlet. The response returned by the servlet is handled by HTTPServletResponse.|ac5c2e448cc041fc8c5e6471c0e56dd8
get requests|servlet|PingJDBCWrite services all get requests made to it, as evidenced by its implementation of doGet() method.|ac5c2e448cc041fc8c5e6471c0e56dd8
webservlet|servlet|The PingJDBCWrite servlet is registered with the web container through the @WebServlet annotation, which is a subclass of Servlet.|ac5c2e448cc041fc8c5e6471c0e56dd8
urlpatterns|webservlet|The URL pattern for PingJDBCWrite is specified in its @WebServlet configuration using the urlPatterns property, which is a subclass of WebServlet.|ac5c2e448cc041fc8c5e6471c0e56dd8
tradedirect|price|PingJDBCWrite uses TradeDirect to set the price of a random stock through prepared statements. This requires accessing and modifying data in the database, which is provided by TradeDirect.|ac5c2e448cc041fc8c5e6471c0e56dd8
prepared statements|tradedirect|The use of prepared statements for updating data in the database through TradeDirect is demonstrated in this context.|ac5c2e448cc041fc8c5e6471c0e56dd8
quotedatabean|price|The price of a stock can be accessed and modified through QuoteDataBean, as shown in PingJDBCWrite's use of TradeDirect.|ac5c2e448cc041fc8c5e6471c0e56dd8
log|servlet|PingJDBCWrite makes use of the logging facilities provided by Log, which is a utility class that's used for logging purposes in this context.|ac5c2e448cc041fc8c5e6471c0e56dd8
tradeconfig|symbol|In order to generate a random stock symbol, PingJDBCWrite makes use of TradeConfig, which provides the necessary functionality for this task.|ac5c2e448cc041fc8c5e6471c0e56dd8
pingjdbcwrite|servlet|is a type of HTTP request handler in Java, used to handle client requests and deliver dynamic content.|2100bd07c7874e83b71977138ca0f02c
getservletinfo|pingjdbcwrite|is a method that returns a string containing information about the servlet, as required by the Servlet API.|2100bd07c7874e83b71977138ca0f02c
catch|try|is used to handle exceptions thrown by a try block.|2100bd07c7874e83b71977138ca0f02c
tradedirect|trade|is an object that represents a trade, and is used to interact with the database.|2100bd07c7874e83b71977138ca0f02c
updatequotepricevolumeint|tradedirect|is a method of the TradeDirect class that updates the price, volume, and number of iterations for a given symbol.|2100bd07c7874e83b71977138ca0f02c
symbol|try|is a string containing the name of the stock being traded.|2100bd07c7874e83b71977138ca0f02c
newprice|try|is a random price change factor generated for updating the quote.|2100bd07c7874e83b71977138ca0f02c
quotedatabean|quotedata|is an object used to store information about a particular stock quote, such as price, volume, and iteration count.|2100bd07c7874e83b71977138ca0f02c
tradeconfig|getprimiterations|is a method of the TradeConfig class that returns the number of iterations for the primary trade.|2100bd07c7874e83b71977138ca0f02c
rndsymbol|tradeconfig|is a method of the TradeConfig class that generates a random symbol for trading.|2100bd07c7874e83b71977138ca0f02c
getrandompricechangefactor|tradeconfig|is a method of the TradeConfig class that generates a random price change factor.|2100bd07c7874e83b71977138ca0f02c
inittime|context chunk|"called when the class is loaded to initialize the servlet
 *
 * @param config
 *            ServletConfig: *"|ef2fc266f75c46c19719d7120e1b5d5e
context chunk|class|"Called when the class is loaded to initialize the servlet
 *
 * @param config
 *            ServletConfig: *"|ef2fc266f75c46c19719d7120e1b5d5e
inittime|date|initTime = new java.util.Date().toString();|ef2fc266f75c46c19719d7120e1b5d5e
hitcount|integer|hitCount = 0;|ef2fc266f75c46c19719d7120e1b5d5e
req|httpservletrequest|doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {|ef2fc266f75c46c19719d7120e1b5d5e
res|httpservletresponse|doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {|ef2fc266f75c46c19719d7120e1b5d5e
context chunk|pingjsonp|/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/|ef2fc266f75c46c19719d7120e1b5d5e
context chunk|package|package com.ibm.websphere.samples.daytrader.web.prims;|ef2fc266f75c46c19719d7120e1b5d5e
context chunk|license|"* (C) Copyright IBM Corporation 2015.
 *"|ef2fc266f75c46c19719d7120e1b5d5e
context chunk|apache license|"* * Licensed under the Apache License, Version 2.0 (the ""License"");
 *"|ef2fc266f75c46c19719d7120e1b5d5e
context chunk|software|"software distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *"|ef2fc266f75c46c19719d7120e1b5d5e
context chunk|licensed|"* Unless required by applicable law or agreed to in writing, software
 *"|ef2fc266f75c46c19719d7120e1b5d5e
context chunk|daytrader7|/home/jerry/projects/sample.daytrader7/|ef2fc266f75c46c19719d7120e1b5d5e
stringreader|inputstreamreader|import java.io.StringReader;|ef2fc266f75c46c19719d7120e1b5d5e
context chunk|stringwriter|import java.io.StringWriter;|ef2fc266f75c46c19719d7120e1b5d5e
context chunk|ioexception|import java.io.IOException;|ef2fc266f75c46c19719d7120e1b5d5e
pingjsonp|httpservlet|both classes inherit from HttpServlet class|8c116b8ccb034e0dbd862c46cbd36185
httpservletrequest|httpservlet|HttpServlet is a superclass of HttpServletRequest|8c116b8ccb034e0dbd862c46cbd36185
httpservletresponse|httpservlet|HttpServlet is a superclass of HttpServletResponse|8c116b8ccb034e0dbd862c46cbd36185
json|javax.json|Json is a package named javax.json|8c116b8ccb034e0dbd862c46cbd36185
jsongenerator|javax.json.stream|JsonGenerator is a class present in javax.json.stream package|8c116b8ccb034e0dbd862c46cbd36185
jsonparser|javax.json.stream|JsonParser is a class present in javax.json.stream package|8c116b8ccb034e0dbd862c46cbd36185
servletconfig|httpservlet|HttpServlet has a method to access ServletConfig object|8c116b8ccb034e0dbd862c46cbd36185
log|com.ibm.websphere.samples.daytrader.util|Log is a class present in com.ibm.websphere.samples.daytrader.util package|8c116b8ccb034e0dbd862c46cbd36185
pingjsonp|web.xml|PingJSONP is registered in web.xml file through @WebServlet annotation|8c116b8ccb034e0dbd862c46cbd36185
urlpatterns|@webservlet|urlPatterns is a property of @WebServlet annotation|8c116b8ccb034e0dbd862c46cbd36185
json|servlet|The given context is a servlet that generates and parses JSON. Therefore, the key concepts mentioned here are JSON and servlet, which have a relationship of generation and parsing.|ae4d2895ce4b4045bae367c50e13376d
json|information|The given context mentions that the generated JSON contains information. Therefore, there is a relation between JSON and information in this context.|ae4d2895ce4b4045bae367c50e13376d
managedexecutorservice|javax.enterprise.concurrent.managedexecutorservice|ManagedExecutorService is a class that provides an implementation of ExecutorService for enterprise environments, annotated with @Resource.|58d8fa8fb38e4d74b8e558d07b13bb27
javax.enterprise.concurrent.managedexecutorservice|java.util.concurrent.executors|java.util.concurrent.Executors is a utility class for constructing Executor instances, and ManagedExecutorService extends this class.|58d8fa8fb38e4d74b8e558d07b13bb27
javax.enterprise.concurrent.managedexecutorservice|javax.servlet.asynccontext|ManagedExecutorService is used to execute asynchronous operations in web applications, and AsyncContext provides a mechanism for asynchronous processing of HTTP requests.|58d8fa8fb38e4d74b8e558d07b13bb27
javax.servlet.httpservlet|httpservletrequest|HttpServlet is the base class for all servlets, and HttpServletRequest is an interface representing an HTTP request.|58d8fa8fb38e4d74b8e558d07b13bb27
javax.annotation.resource|java.lang.annotation.annotation|Resource is an annotation used to declare managed resources for injection, and Annotation is a marker interface for defining annotations.|58d8fa8fb38e4d74b8e558d07b13bb27
javax.servlet.httpservletrequest|java.util.date|HttpServletRequest provides access to the request data in HTTP requests, and Date represents a specific instant in time, with millisecond precision.|58d8fa8fb38e4d74b8e558d07b13bb27
servlet|pingmanagedexecutor|A Servlet named PingManagedExecutor is defined in this class.|0962aadc31024ce8b9e3d5cea0ae7ff2
asyncsupported|pingmanagedexecutor|The @WebServlet annotation is used to register the Servlet with the container. The asyncSupported field is set to true, indicating that asynchronous processing is supported.|0962aadc31024ce8b9e3d5cea0ae7ff2
httpservlet|pingmanagedexecutor|The PingManagedExecutor class extends HttpServlet, which is a base class for Servlets in Java Servlet API.|0962aadc31024ce8b9e3d5cea0ae7ff2
httpservletrequest|dopost|The doPost method is defined to handle POST requests. It forwards these requests to the doGet method.|0962aadc31024ce8b9e3d5cea0ae7ff2
httpservletresponse|dopost|The doPost method also passes the HttpServletRequest and HttpServletResponse objects to the doGet method.|0962aadc31024ce8b9e3d5cea0ae7ff2
asynccontext|req|The startAsync() method of HttpServletRequest is used to start asynchronous processing. It returns an AsyncContext, which is stored in a variable for further use.|0962aadc31024ce8b9e3d5cea0ae7ff2
servletoutputstream|out|The getOutputStream() method of HttpServletResponse is used to obtain the ServletOutputStream object to write output to the client.|0962aadc31024ce8b9e3d5cea0ae7ff2
managedexecutor|hitcount|In this context, the concept 'ManagedExecutor' is related to 'hitCount' through a Runnable task submitted by the method 'submit(new Runnable() { ... })' in the try-catch block of the context. The relation is that the hit count is incremented and printed on the output stream when the Runnable task runs within the ManagedExecutor.|a1b03dac06bc4259a65ba6361f0579e9
inittime|managedexecutor|The concept 'initTime' is related to 'ManagedExecutor' through its initialization in the 'init(ServletConfig config) throws ServletException' method. The relation is that the initiation time of the ManagedExecutor is set when the servlet is initialized.|a1b03dac06bc4259a65ba6361f0579e9
hitcount|managedexecutor|In this context, the concept 'hitCount' is related to 'ManagedExecutor' through its increment and printing within the Runnable task submitted by the method 'submit(new Runnable() { ... })' in the try-catch block of the context. The relation is that the hit count is managed by the ManagedExecutor.|a1b03dac06bc4259a65ba6361f0579e9
res|out|In this context, the concepts 'res' and 'out' are related through their usage in the try-catch block to set the content type of the response and output stream respectively. The relation is that they both serve to send a response to the client.|a1b03dac06bc4259a65ba6361f0579e9
req|asynccontext|In this context, the concepts 'req' and 'asyncContext' are related through their usage in the try-catch block to initiate an asynchronous request and its corresponding AsyncContext. The relation is that they both serve to handle requests concurrently.|a1b03dac06bc4259a65ba6361f0579e9
res|inittime|In this context, the concept 'initTime' is related to 'res' through its usage in setting the content type of the response. The relation is that the initiation time of the resource being served is set before sending a response.|a1b03dac06bc4259a65ba6361f0579e9
web application servlet|asynchronous request handling|A WebServlet annotation is used to indicate that this servlet supports asynchronous requests. This allows the servlet to handle long-running tasks in a background thread and return control to the client immediately. The AsyncContext interface provides methods for asynchronously processing requests in background threads.|7a2d60d92def4d608a3e5d2dee46d64f
web application servlet|httpservlet class|The PingManagedThread class extends HttpServlet, which is a base class for creating HTTP-based Web components within the Servlet API. HttpServlet provides methods for handling HTTP requests and responses, as well as for initializing and destroying the servlet instance.|7a2d60d92def4d608a3e5d2dee46d64f
web application servlet|httpservletrequest interface|The PingManagedThread class uses the HttpServletRequest interface to access information about an HTTP request, such as query parameters, headers, and cookies.|7a2d60d92def4d608a3e5d2dee46d64f
web application servlet|httpservletresponse interface|The PingManagedThread class uses the HttpServletResponse interface to generate an HTTP response, such as by setting the status code, headers, and output stream.|7a2d60d92def4d608a3e5d2dee46d64f
web application servlet|resource annotation|The @Resource annotation is used to inject managed resources into the PingManagedThread class, such as a ManagedThreadFactory for creating background threads.|7a2d60d92def4d608a3e5d2dee46d64f
web application servlet|servletconfig interface|The ServletConfig interface is used to access configuration information for the Web application, such as the initialization parameters for this servlet.|7a2d60d92def4d608a3e5d2dee46d64f
doget|httpservletrequest|method called with HttpServletRequest as argument|f09df2357b9743ea8c6d233fd941603d
doget|httpservletresponse|method called with HttpServletResponse as argument|f09df2357b9743ea8c6d233fd941603d
dopost|doget|same method implementation for both POST and GET requests|f09df2357b9743ea8c6d233fd941603d
req|httpservletrequest|argument passed to doPost and doGet methods is of type HttpServletRequest|f09df2357b9743ea8c6d233fd941603d
res|httpservletresponse|argument passed to doPost and doGet methods is of type HttpServletResponse|f09df2357b9743ea8c6d233fd941603d
inittime|final field initialized at the beginning of the class|static final variable containing initialization time|f09df2357b9743ea8c6d233fd941603d
hitcount|static field used to maintain hit count|incremented in a Runnable executed by managedThreadFactory|f09df2357b9743ea8c6d233fd941603d
asynccontext|method called on httpservletrequest returns asynccontext object|used to start asynchronous processing for the request|f09df2357b9743ea8c6d233fd941603d
out|final variable initialized with servletoutputstream obtained from httpservletresponse|used to write output to the client's browser|f09df2357b9743ea8c6d233fd941603d
"res.setcontenttype(""text/html"")"|method called on httpservletresponse to set content type for the response|used to indicate that HTML data will be sent as response|f09df2357b9743ea8c6d233fd941603d
"thread = managedthreadfactory.newthread(new runnable() {
"|statement in doget method to create a new thread using managedthreadfactory||f09df2357b9743ea8c6d233fd941603d
"(out.println(""<b>hitcount: "" + ++hitcount  +""</b><br/>"");)"|statement inside runnable to print hit count in a new thread||f09df2357b9743ea8c6d233fd941603d
pingmanagedthreadservlet|initialized servlet|The method init(ServletConfig) is called when the class is loaded to initialize the servlet. This edge represents the initialization process of the PingManagedThreadServlet.|09445ba34231470791f5456f7a01211b
pingmanagedthreadservlet|error handling|The catch block in the context handles exceptions and logs an error message. This edge represents the error handling mechanism of PingManagedThreadServlet.|09445ba34231470791f5456f7a01211b
thread|start method|The thread is started using the start() method.|09445ba34231470791f5456f7a01211b
servletconfig|initialization|The init(ServletConfig) method of PingManagedThreadServlet takes a ServletConfig object as an argument for initialization purposes.|09445ba34231470791f5456f7a01211b
daytrader-ee7-web|project location|The project is located at /home/jerry/projects/sample.daytrader7/daytrader-ee7-web.|09445ba34231470791f5456f7a01211b
class|loading|When the class PingManagedThreadServlet is loaded, it undergoes an initialization process.|09445ba34231470791f5456f7a01211b
pingreentryservlet|httpservlet|PingReentryServlet is a subclass of HttpServlet.|0a810e2afb63452e87ec710a853f5608
doget|httpservlet|doGet is a method inherited from HttpServlet.|0a810e2afb63452e87ec710a853f5608
httpservletrequest|httpservlet|HttpServlet receives requests through HttpServletRequest objects.|0a810e2afb63452e87ec710a853f5608
httpservletresponse|httpservlet|HttpServlet sends responses through HttpServletResponse objects.|0a810e2afb63452e87ec710a853f5608
dopost|pingreentryservlet|doPost is a method overridden in PingReentryServlet.|0a810e2afb63452e87ec710a853f5608
serialversionuid|pingreentryservlet|serialVersionUID is a constant defined in PingReentryServlet.|0a810e2afb63452e87ec710a853f5608
numreentriesleft|nextnumreentriesleft|represents the number of remaining retries in a request, and the decremented value of it for the next attempt|0664a220e0c5413dbb2f031e1d552b31
sleeptime|sleeptime|specifies the time duration in milliseconds that the server waits before making another request, and is reused in this case|0664a220e0c5413dbb2f031e1d552b31
req.getcontextpath()|"req.getrequesturi() + ""?numreentries="" + nextnumreentriesleft + ""&sleep="" + sleeptime"|represents the path and query string parameters needed to make a recursive request, which includes the updated value of numReentriesLeft|0664a220e0c5413dbb2f031e1d552b31
out.println(numreentriesleft)|out.println(savenumreentriesleft + response.tostring())|indicates how to print the initial value of numReentriesLeft or the final response after a successful recursion|0664a220e0c5413dbb2f031e1d552b31
pingservlet|httpservlet|PingServlet is a subclass of HttpServlet.|fb78529d07c64405a6b467a779f8f9be
pingservlet|webservlet|PingServlet is annotated with @WebServlet annotation.|fb78529d07c64405a6b467a779f8f9be
servlet|pingservlet|PingServlet is a subclass of javax.servlet.HttpServlet, which is used to create servlets in Java Servlet API. A servlet is a server-side component that handles client requests and generates dynamic responses.|2c83e193df564ac4bab6d0743afc3b48
import|javax.servlet.servletoutputstream|javax.servlet.ServletOutputStream is an interface in Java Servlet API used to write data directly to the HTTP response output stream. It is imported into this servlet class.|2c83e193df564ac4bab6d0743afc3b48
import|javax.servlet.annotation.webservlet|javax.servlet.annotation.WebServlet is a Java annotation used to define the URL mapping for a servlet. It is imported into this servlet class.|2c83e193df564ac4bab6d0743afc3b48
import|javax.servlet.http.httpservlet|javax.servlet.http.HttpServlet is an abstract superclass in Java Servlet API used to define the common behavior for HTTP servlets. It is imported into this servlet class.|2c83e193df564ac4bab6d0743afc3b48
import|javax.servlet.http.httpservletrequest|javax.servlet.http.HttpServletRequest is an interface in Java Servlet API used to represent the HTTP request received by a servlet.|2c83e193df564ac4bab6d0743afc3b48
import|javax.servlet.http.httpservletresponse|javax.servlet.http.HttpServletResponse is an interface in Java Servlet API used to represent the HTTP response generated by a servlet.|2c83e193df564ac4bab6d0743afc3b48
import|com.ibm.websphere.samples.daytrader.util.log|com.ibm.websphere.samples.daytrader.util.Log is a utility class used to provide logging functionality for this servlet.|2c83e193df564ac4bab6d0743afc3b48
pingservletwriter|pingservlet|Difference between PingServlet and PingServletWriter lies in the output stream used. In PingServlet, an ServletOutputStream is used for binary output stream whereas a PrintWriter is used in PingServletWriter for text output.|b3d9216e370d40c482d5bef30c88713e
inittime|pingservlet|Init time of the PingServlet is displayed when the servlet is accessed.|b3d9216e370d40c482d5bef30c88713e
hitcount|pingservlet|Hit count for the PingServlet is displayed when the servlet is accessed.|b3d9216e370d40c482d5bef30c88713e
getservletinfo|pingservlet|Contains information about the servlet.|b3d9216e370d40c482d5bef30c88713e
daytrader application|web application servlet|The class PingServlet2DB is a servlet used in the Daytrader application, which is a web application.|1a74604c120a456f94257dee54318e7c
jdbc connection|database testing|The class TradeDirect is used to make a JDBC connection to a database for testing purposes in the Daytrader application.|1a74604c120a456f94257dee54318e7c
servletconfig|web application configuration|ServletConfig is used to configure the web application, including the servlet PingServlet2DB.|1a74604c120a456f94257dee54318e7c
log class|error logging|The Log class is used for error logging in the Daytrader application.|1a74604c120a456f94257dee54318e7c
node_1|node_2|edge|chunk_id|node_3
ping servlet 2 include|servlet config|The main method of the servlet retrieves the ServletConfig object to get the initial time and hit count.|07703f63645443c8908a56fdcfe97d12|
ping servlet 2 include|init time|The Ping Servlet 2 Include retrieves the initial time using the initTime variable.|07703f63645443c8908a56fdcfe97d12|
ping servlet 2 include|hit count|The Ping Servlet 2 Include increments the hitCount variable to keep track of the number of requests it has handled.|07703f63645443c8908a56fdcfe97d12|
res|set content type|The doGet method of the servlet sets the content type of the response to 'text/html'.|07703f63645443c8908a56fdcfe97d12|
ping servlet 2 include|try...catch block|The doGet method of the servlet is enclosed within a try-catch block for error handling.|07703f63645443c8908a56fdcfe97d12|
apache license|license|The Apache License, Version 2.0 is a type of license used for software distributed under it. This specific text material falls under this license.|2d82f6145f1246639d439aee435293ea|
software|distributed|This text mentions the distribution of software, which implies that there is software being distributed.|2d82f6145f1246639d439aee435293ea|
ibm corporation|copyright|The copyright of this text material belongs to IBM Corporation as mentioned in the text.|2d82f6145f1246639d439aee435293ea|
java|servlet|This specific text mentions 'Java Servlet' implying that there is an association between Java and Servlet as mentioned in this context.|2d82f6145f1246639d439aee435293ea|
pingservlet2includercv|httpservletrequest|in PingServlet2IncludeRcv, HttpServletRequest is used to handle incoming requests from clients.|fec233f9cf414cafbeaea2109413f0bd|
pingservlet2includercv|httpservletresponse|in PingServlet2IncludeRcv, HttpServletResponse is used to send a response back to the client.|fec233f9cf414cafbeaea2109413f0bd|
dopost|pingservlet2includercv|doPost is a method of PingServlet2IncludeRcv that is called when a POST request is received.|fec233f9cf414cafbeaea2109413f0bd|
doget|pingservlet2includercv|doGet is another method of PingServlet2IncludeRcv that is called when a GET request is received.|fec233f9cf414cafbeaea2109413f0bd|
httpservletrequest|pingservlet2includercv|in doPost and doGet methods, HttpServletRequest is used to retrieve information about the incoming request.|fec233f9cf414cafbeaea2109413f0bd|
httpservletresponse|pingservlet2includercv|in doPost and doGet methods, HttpServletResponse is used to send a response back to the client.|fec233f9cf414cafbeaea2109413f0bd|
pingservlet2include|pingservlet2jndi|Both methods are included in the PingServlet class for testing purposes.|67b93a8c761c4a4fbeb91199450c1158|
pingservlet2jndi|httpservlet|PingServlet2JNDI is a subclass of HttpServlet.|7b85d7d6886c49998e5126ddc0a2b1f5|
servlet|httpservletrequest|servlet is accessed through HttpServletRequest in this servlet.|7b85d7d6886c49998e5126ddc0a2b1f5|
servlet|httpservletresponse|servlet sends response through HttpServletResponse in this servlet.|7b85d7d6886c49998e5126ddc0a2b1f5|
pingservlet2jndi|webservlet|PingServlet2JNDI is annotated with WebServlet, which is a subclass of Servlet.|7b85d7d6886c49998e5126ddc0a2b1f5|
servlet|httpservletrequest|servlet receives HttpServletRequest in doPost() and forwards it to doGet(). The former is used for POST requests, while the latter is for GET requests.|7b85d7d6886c49998e5126ddc0a2b1f5|
servlet|httpservletresponse|servlet sends response through HttpServletResponse in both methods.|7b85d7d6886c49998e5126ddc0a2b1f5|
import|javax.servlet.http|import statement brings javax.servlet.http package into scope for use in this servlet.|7b85d7d6886c49998e5126ddc0a2b1f5|
pingservlet2jndi|httpservlet|PingServlet2JNDI inherits from HttpServlet class, which belongs to javax.servlet.http package.|7b85d7d6886c49998e5126ddc0a2b1f5|
pingservlet2jsp|servlet|PingServlet2Jsp is a subclass of HttpServlet, which is a type of servlet.|f748dd79315c45238518d1aef8515977|
httpservletrequest|req|In the doPost and doGet methods, 'req' is an instance of javax.servlet.http.HttpServletRequest.|f748dd79315c45238518d1aef8515977|
httpservletresponse|res|Similarly, 'res' in these methods is a type of HttpServletResponse.|f748dd79315c45238518d1aef8515977|
doget|method|In the given context, 'doGet' is the name of a method that handles GET requests.|f748dd79315c45238518d1aef8515977|
httpservletrequest|req|The doGet method receives an HttpServletRequest object in its parameter list (shown as 'req').|f748dd79315c45238518d1aef8515977|
httpservletresponse|res|It also accepts a HttpServletResponse object, named 'res' here.|f748dd79315c45238518d1aef8515977|
pingbean|ab|Inside the doGet method, we create an instance of PingBean (named 'ab') and set its value.|f748dd79315c45238518d1aef8515977|
hitcount|hitcount|A variable called 'hitCount' is incremented inside the try-catch block in this method.|f748dd79315c45238518d1aef8515977|
pingservlet2jsp|jsp|The servlet PingServlet2Jsp forwards the request to the JSP page called PingServlet2Jsp.jsp|ac71d05c7ac14c17906e507a5dfdceb9|
pingservlet2jsp|servlet|PingServlet2Jsp is a subclass of HttpServlet, making it a type of servlet|ac71d05c7ac14c17906e507a5dfdceb9|
daytrader-ee7-web|src|The file PingServlet2PDF.java is located in the src directory of the project daytrader-ee7-web|ac71d05c7ac14c17906e507a5dfdceb9|
com.ibm.websphere.samples.daytrader.web.prims|pingservlet2pdf|The class PingServlet2PDF is part of the package com.ibm.websphere.samples.daytrader.web.prims|ac71d05c7ac14c17906e507a5dfdceb9|
/home/jerry|projects|The file PingServlet2PDF.java is located in the projects directory of user jerry's home directory|ac71d05c7ac14c17906e507a5dfdceb9|
pingservlet2jsp|forward|The method forward() of class HttpServletRequest is called on the PingServlet2Jsp servlet to forward the request to another resource|ac71d05c7ac14c17906e507a5dfdceb9|
pingservlet2pdf.java|source code file|The file PingServlet2PDF.java contains the source code for class PingServlet2PDF|ac71d05c7ac14c17906e507a5dfdceb9|
daytrader-ee7-web|main|The directory main is located inside the project daytrader-ee7-web|ac71d05c7ac14c17906e507a5dfdceb9|
com.ibm.websphere.samples.daytrader.web.prims|pingservlet2pdf|The fully qualified name of the class PingServlet2PDF is com.ibm.websphere.samples.daytrader.web.prims.PingServlet2PDF|ac71d05c7ac14c17906e507a5dfdceb9|
urlconnection|class|The class URLConnection is used to open a connection to a resource identified by a URL|ac71d05c7ac14c17906e507a5dfdceb9|
bufferedoutputstream|output stream|The BufferedOutputStream is a subclass of OutputStream, which provides buffering for output streams|ac71d05c7ac14c17906e507a5dfdceb9|
url|network resource|A URL represents a network resource that can be accessed over the internet|ac71d05c7ac14c17906e507a5dfdceb9|
bufferedinputstream|input stream|The BufferedInputStream is a subclass of InputStream, which provides buffering for input streams|ac71d05c7ac14c17906e507a5dfdceb9|
ioexception|exception class|IOException is a type of exception that occurs when an I/O operation fails|ac71d05c7ac14c17906e507a5dfdceb9|
pingservlet2pdf|httpservlet|PingServlet2PDF is a subclass of HttpServlet.|26fd8aa98ec54e43a48047ce833796c8|
servlet|javax.servlet|servlet is a package in javax.servlet.|26fd8aa98ec54e43a48047ce833796c8|
httpservletrequest|httpservletrequest|HttpServletRequest is an interface implemented by PingServlet2PDF's doPost method and the request object passed to it.|26fd8aa98ec54e43a48047ce833796c8|
httpservletresponse|httpservletresponse|HttpServletResponse is an interface implemented by the response object passed to PingServlet2PDF's methods.|26fd8aa98ec54e43a48047ce833796c8|
pingbean|ab|PingBean and ab are variables declared in PingServlet2PDF that represent a bean with a message attribute.|26fd8aa98ec54e43a48047ce833796c8|
req|httpservletrequest|req is an instance of HttpServletRequest passed to the doGet and doPost methods of PingServlet2PDF.|26fd8aa98ec54e43a48047ce833796c8|
res|httpservletresponse|res is an instance of HttpServletResponse returned by the ServletContext.getResource method in PingServlet2PDF's initialization method.|26fd8aa98ec54e43a48047ce833796c8|
out|servletoutputstream|out is a variable declared in doGet method of PingServlet2PDF that is used to write the response to the client.|26fd8aa98ec54e43a48047ce833796c8|
hitcount|int|hitCount is a static variable initialized with 0 and incremented in PingServlet2PDF's doGet method.|26fd8aa98ec54e43a48047ce833796c8|
"ab.setmsg(""hit count: "" + hitcount)"|string|This line sets the message attribute of ab to a string containing the current value of hitCount.|26fd8aa98ec54e43a48047ce833796c8|
"req.setattribute(""ab"", ab)"|void|"This line associates the ab object with the key ""ab"" in the request attribute map."|26fd8aa98ec54e43a48047ce833796c8|
bis|bufferedinputstream|bis is a variable declared in doGet method to read input from the PDF document.|26fd8aa98ec54e43a48047ce833796c8|
bos|bufferedoutputstream|bos is a variable declared in doGet method to write output to the client.|26fd8aa98ec54e43a48047ce833796c8|
servletoutputstream|res|res is assigned to a variable named ServletOutputStream (out) in this context.|e6c701991fb840c382484732548bf543|
application/pdf|res.setcontenttype|The MIME type 'application/pdf' is set for the resource represented by res using the method setContentType().|e6c701991fb840c382484732548bf543|
http://localhost:9080/daytrader/was_v7_64-bit_performance.pdf|url url = new url(fileurl);|The given context initializes a URL object named url using the constructor New URL() with the parameter fileURL.|e6c701991fb840c382484732548bf543|
conn.getinputstream()|bis|The InputStream obtained by invoking getInputStream() on the URLConnection object named conn is assigned to a variable named bis.|e6c701991fb840c382484732548bf543|
bufferedinputstream|bis|The given context wraps the InputStream obtained from the URLConnection with BufferedInputStream and assigns it to a variable named bis.|e6c701991fb840c382484732548bf543|
bufferedoutputstream|out|The given context creates a BufferedOutputStream named bos using the OutputStream object (out) passed by the Servlet's doGet() method.|e6c701991fb840c382484732548bf543|
byte[] buff = new byte[buffer_size];|while (-1 != (bytesread = bis.read(buff, 0, buff.length))) |The given context initializes a byte array named buff with the specified size and reads bytes from the InputStream obtained by invoking read() method on bis in a while loop.|e6c701991fb840c382484732548bf543|
res.senderror(500, ...)|if (bis != null) { bis.close(); }|If the InputStream named bis is not null, it is closed before leaving the try-catch block.|e6c701991fb840c382484732548bf543|
res.senderror(500, ...)|if (bos != null) { bos.close(); }|If the BufferedOutputStream named bos is not null, it is closed before leaving the try-catch block.|e6c701991fb840c382484732548bf543|
log.error(...)|finally { if (bis != null) { bis.close(); } if (bos != null) { bos.close(); } }|If either of the InputStream or BufferedOutputStream is not null, it is closed finally within a try-catch block.|e6c701991fb840c382484732548bf543|
com.ibm.websphere.samples.daytrader.web.prims.pingservlet2servlet|javax.servlet.annotation.webservlet|PingServlet2Servlet is annotated with WebServlet, which is a part of javax.servlet.annotation.|345b6ba9b7db4bba938d08343f320f3b|
com.ibm.websphere.samples.daytrader.web.prims.pingservlet2servlet|javax.servlet.http.httpservlet|PingServlet2Servlet extends HttpServlet, which is a part of javax.servlet.http.|345b6ba9b7db4bba938d08343f320f3b|
com.ibm.websphere.samples.daytrader.web.prims.pingservlet2servlet|java.io.ioexception|In PingServlet2Servlet, IOException is thrown.|345b6ba9b7db4bba938d08343f320f3b|
com.ibm.websphere.samples.daytrader.web.prims.pingservlet2servlet|java.servlet.servletexception|In PingServlet2Servlet, ServletException is thrown.|345b6ba9b7db4bba938d08343f320f3b|
com.ibm.websphere.samples.daytrader.util.log|java.lang.object|In Log, Object is inherited.|345b6ba9b7db4bba938d08343f320f3b|
pingservlet2servlet|httpservletrequest|is an argument passed to the doPost and doGet methods in PingServlet2Servlet class|299ca24940a24dcc99ea7f37925c5d13|
pingservlet2servlet|httpservletresponse|is also an argument passed to the doPost and doGet methods in PingServlet2Servlet class|299ca24940a24dcc99ea7f37925c5d13|
doget|pingservlet2servlet|is a method of the PingServlet2Servlet class that is called when HTTP GET requests are made to this servlet|299ca24940a24dcc99ea7f37925c5d13|
httpservletrequest|doget|is an argument passed to the doGet method of the PingServlet2Servlet class|299ca24940a24dcc99ea7f37925c5d13|
httpservletresponse|doget|is also an argument passed to the doGet method of the PingServlet2Servlet class|299ca24940a24dcc99ea7f37925c5d13|
pingservlet2servletrcv|pingservlet2servlet|is forwarded by the PingServlet2Servlet class when a POST request is made to this servlet|299ca24940a24dcc99ea7f37925c5d13|
hitcount|pingservlet2servlet|is an instance variable of the PingServlet2Servlet class that keeps track of the number of times this servlet has been accessed|299ca24940a24dcc99ea7f37925c5d13|
pingbean|hitcount|In the try block, a new instance of PingBean is created and its hitCount member variable is incremented. This indicates that 'PingBean' and 'hitCount' are related as the former contains the latter.|eaa36f49631e44de9686cfcad3462400|
httpservletrequest|httpservletresponse|In this method, the doGet() method of HttpServlet is invoked with request and response objects as arguments. This indicates that 'HttpServletRequest' and 'HttpServletResponse' are related as they both participate in executing HTTP requests.|eaa36f49631e44de9686cfcad3462400|
getservletcontext|servletconfig|In this try block, the getServletContext() method of HttpServletRequest is called to obtain a ServletContext object, which contains information about the web application. This indicates that 'getServletContext' and 'servletConfig' are related as they both participate in obtaining information about the servlet configuration.|eaa36f49631e44de9686cfcad3462400|
forward|req|In this line, the forward() method of RequestDispatcher is invoked to forward the request and response objects to another resource. This indicates that 'forward', 'req' and 'res' are related as they all participate in executing HTTP requests.|eaa36f49631e44de9686cfcad3462400|res
pingservlet2servletrcv|servlet|In the last line, the getRequestDispatcher() method of ServletContext is called to obtain a RequestDispatcher object that forwards requests to another resource. The 'servlet' parameter specifies the name of the servlet being requested. This indicates that 'PingServlet2ServletRcv' and 'servlet' are related as they both participate in forwarding HTTP requests.|eaa36f49631e44de9686cfcad3462400|
java|programming language|Java is a popular programming language used for developing various applications, including web applications. The code snippet provided is written in Java.|4335cc50b5de4f71b0565f5cec424e64|
java|servletconfig|ServletConfig is an interface implemented by the ServletContext class to provide configuration information to a servlet's constructor and initialization methods. The provided code imports this interface.|4335cc50b5de4f71b0565f5cec424e64|
java|http request|The HTTP request for accessing the web application is handled by the ServletConfig interface, as demonstrated in the code.|4335cc50b5de4f71b0565f5cec424e64|
java|printwriter|PrintWriter is a class in Java's IO package used to write characters to a destination. The provided code creates an instance of this class.|4335cc50b5de4f71b0565f5cec424e64|
java|ioexception|IOException is an exception thrown by the classes in Java's IO package to indicate that an I/O operation failed. The provided code handles this exception.|4335cc50b5de4f71b0565f5cec424e64|
java|servletexception|ServletException is a subclass of Exception used to report errors in servlets or filters in Java's Servlet API. The provided code handles this exception.|4335cc50b5de4f71b0565f5cec424e64|
java|httpservletrequest|HttpServletRequest is an interface implemented by the HTTP request object to provide access to the request data and metadata, including the request method, headers, parameters, and path.|4335cc50b5de4f71b0565f5cec424e64|
java|httpservletresponse|HttpServletResponse is an interface implemented by the HTTP response object to provide access to the response data and metadata, including the response status code, headers, and output stream.|4335cc50b5de4f71b0565f5cec424e64|
java|servlet|Servlet is an interface implemented by web components in Java's Servlet API to manage the HTTP requests and responses. The provided code extends this interface.|4335cc50b5de4f71b0565f5cec424e64|
java|httpservlet|HttpServlet is a subclass of Servlet implemented by web components in Java's Servlet API to provide common HTTP-specific functionality, including request and response processing, initialization and destruction, and servlet configuration.|4335cc50b5de4f71b0565f5cec424e64|
java|webservlet|WebServlet is an annotation used to register a servlet with the ServletContext class in Java's Servlet API. The provided code uses this annotation.|4335cc50b5de4f71b0565f5cec424e64|
java|http response|The HTTP response for accessing the web application is handled by the HttpServletResponse class, as demonstrated in the code.|4335cc50b5de4f71b0565f5cec424e64|
web application|java servlet|A Java servlet is a server-side component used to handle HTTP requests and responses in a web application. The provided code defines a simple servlet to handle Ping requests.|4335cc50b5de4f71b0565f5cec424e64|
web application|java servletcontext|The ServletContext class provides configuration information for a web application, including the context path, initialization parameters, and servlets. The provided code imports this class.|4335cc50b5de4f71b0565f5cec424e64|
web application|java io package|The Java IO package provides input/output operations for files, streams, and networks in a Java application. The provided code uses this package to write characters to an output stream.|4335cc50b5de4f71b0565f5cec424e64|
web application|java exception handling|Exception handling is a mechanism used to manage runtime errors and exceptions in a Java application. The provided code handles two types of exceptions, IOException and ServletException.|4335cc50b5de4f71b0565f5cec424e64|
web application|java http request processing|HTTP request processing is the process of handling HTTP requests in a web application. The provided code demonstrates this process using the HttpServletRequest class.|4335cc50b5de4f71b0565f5cec424e64|
web application|java http response processing|HTTP response processing is the process of handling HTTP responses in a web application. The provided code demonstrates this process using the HttpServletResponse class.|4335cc50b5de4f71b0565f5cec424e64|
web application|java servlet configuration|Servlet configuration provides initialization and destruction methods for servlets in a web application. The provided code uses the ServletConfig interface to provide this configuration.|4335cc50b5de4f71b0565f5cec424e64|
pingservlet2servlet|httpservletrequest|In the context provided, PingServlet2Servlet is making use of HttpServletRequest to receive a request.|2319a0cf711c43c2ad3c79188f8231d8|
pingservlet2servlet|httpservletresponse|PingServlet2Servlet also utilizes HttpServletResponse to send a response back to the client.|2319a0cf711c43c2ad3c79188f8231d8|
dopost|doget|The method doPost is forwarding post requests to the doGet method in this context.|2319a0cf711c43c2ad3c79188f8231d8|
pingservlet2servletrcv|httpservletrequest|In the context provided, PingServlet2ServletRcv is receiving a request through HttpServletRequest.|2319a0cf711c43c2ad3c79188f8231d8|
pingservlet2servletrcv|httpservletresponse|PingServlet2ServletRcv is also able to send a response back to the client using HttpServletResponse.|2319a0cf711c43c2ad3c79188f8231d8|
pingservlet2servlet|servlet initialization process|called when the class is loaded to initialize the servlet|4805cf208c614063bfb5cb8d87ba29e3|
inittime|new java.util.date().tostring()|assigned during initialization of the servlet|4805cf208c614063bfb5cb8d87ba29e3|
req|httpservletrequest|used to retrieve request details|4805cf208c614063bfb5cb8d87ba29e3|
res|httpservletresponse|used to send response back to client|4805cf208c614063bfb5cb8d87ba29e3|
pingbean|ab|set as an attribute of the request and retrieved during servlet execution|4805cf208c614063bfb5cb8d87ba29e3|
msg|getmsg() method of pingbean object|used to display message from PingBean class|4805cf208c614063bfb5cb8d87ba29e3|
pingservlet30async|servlet|PingServlet30Async is a subclass of HttpServlet, which is a type of servlet.|91272e042bb24db992efde7689f64064|
httpservletrequest|request|HttpServletRequest is an interface for handling HTTP requests from clients.|91272e042bb24db992efde7689f64064|
httpservletresponse|response|HttpServletResponse is an interface for handling HTTP responses to clients.|91272e042bb24db992efde7689f64064|
asynccontext|asynchronous processing|AsyncContext is a mechanism in Java Servlets that allows asynchronous processing of requests and responses, which enables a single thread to handle multiple simultaneous requests.|91272e042bb24db992efde7689f64064|
servletconfig|configuration|ServletConfig is an interface for passing initialization parameters and context information to servlets.|91272e042bb24db992efde7689f64064|
java|programming language|PingServlet30Async, HttpServletRequest, HttpServletResponse, AsyncContext, ServletConfig, and Java are all implemented in the programming language Java.|91272e042bb24db992efde7689f64064|
html|dynamic html creation|PingServlet30Async is used for dynamic HTML creation through server side servlet processing asynchronously, which allows the creation of dynamic and interactive web pages using HTML.|91272e042bb24db992efde7689f64064|
http|protocol|HttpServletRequest and HttpServletResponse are interfaces for handling HTTP requests and responses, which makes them a part of the HTTP protocol.|91272e042bb24db992efde7689f64064|
apache license, version 2.0|licensing|The code for PingServlet30Async is distributed under the Apache License, Version 2.0, which governs permissions and limitations of using the software.|91272e042bb24db992efde7689f64064|
webservlet|annotation|The class PingServlet30Async is annotated with @WebServlet, which is an annotation in Java for mapping servlets to URLs.|91272e042bb24db992efde7689f64064|
log|daytrader framework utility class|In the code provided, there's a comment that mentions Log, which could potentially be a utility class called Log that is part of the Daytrader Framework. However, it's not explicitly defined in the given context.|91272e042bb24db992efde7689f64064|
pingservlet30async|servlet|PingServlet30Async is a type of servlet, as indicated by its annotation and implementation.|6c1cd5f1cbd54fee832dedc4972700b2|
pingservlet30async|httpservletrequest|The method doPost(HttpServletRequest req, HttpServletResponse res) takes a parameter of type HttpServletRequest (req).|6c1cd5f1cbd54fee832dedc4972700b2|
pingservlet30async|httpservletresponse|The method doPost(HttpServletRequest req, HttpServletResponse res) returns an object of type HttpServletResponse (res).|6c1cd5f1cbd54fee832dedc4972700b2|
inittime|pingservlet30async|The variable initTime is defined within the class PingServlet30Async.|6c1cd5f1cbd54fee832dedc4972700b2|
hitcount|pingservlet30async|The variable hitCount is defined within the class PingServlet30Async and incremented within the method doPost(HttpServletRequest req, HttpServletResponse res).|6c1cd5f1cbd54fee832dedc4972700b2|
asyncsupported|@webservlet|The annotation @WebServlet is used to define a servlet mapping and has a field named 'asyncSupported' that can be set to true for asynchronous processing.|6c1cd5f1cbd54fee832dedc4972700b2|
startasync|httpservletrequest|The method startAsync() is called on an HttpServletRequest object (req) to begin an asynchronous request processing.|6c1cd5f1cbd54fee832dedc4972700b2|
asynccontext|httpservletrequest|The variable AsyncContext (ac) is assigned a value through the method startAsync() called on an HttpServletRequest object (req).|6c1cd5f1cbd54fee832dedc4972700b2|
complete|asynccontext|The method complete() is called on the AsyncContext object (ac) to indicate that the asynchronous request processing has completed.|6c1cd5f1cbd54fee832dedc4972700b2|
readlistenerimpl|servletinputstream|is an argument passed to the constructor of ReadListenerImpl.|66d0208d0faf4048a672a9696f9661d9|
readlistenerimpl|httpservletresponse|is assigned a value in the onAllDataRead() method.|66d0208d0faf4048a672a9696f9661d9|
readlistenerimpl|asynccontext|is assigned a value in the constructor of ReadListenerImpl.|66d0208d0faf4048a672a9696f9661d9|
writelistenerimpl|servletoutputstream|is assigned a value in the WriteListenerImpl constructor.|66d0208d0faf4048a672a9696f9661d9|
writelistenerimpl|queue<string>|is passed as an argument to the WriteListenerImpl constructor.|66d0208d0faf4048a672a9696f9661d9|
writelistenerimpl|asynccontext|is assigned a value in the WriteListenerImpl constructor.|66d0208d0faf4048a672a9696f9661d9|
output|servletoutputstream|is assigned a value to output in the WriteListenerImpl constructor.|66d0208d0faf4048a672a9696f9661d9|
queue|writelistenerimpl|is accessed in the onDataAvailable() method of ReadListenerImpl.|66d0208d0faf4048a672a9696f9661d9|
ac|readlistenerimpl|is assigned a value in both constructors of ReadListenerImpl and WriteListenerImpl respectively.|66d0208d0faf4048a672a9696f9661d9|WriteListenerImpl
pingservlet31async|servlet|PingServlet31Async is a subclass of HttpServlet, which is a type of servlet.|dc1bd52abc134803a5e70f9e1615bbb1|
httpservletrequest|request|HttpServletRequest is an interface implemented by the request object that represents the client's input data and metadata for a single request. 'request' refers to a specific instance of the HttpServletRequest interface.|dc1bd52abc134803a5e70f9e1615bbb1|
httpservletresponse|response|HttpServletResponse is an interface implemented by the response object that represents the server's response data and metadata for a single response. 'response' refers to a specific instance of the HttpServletResponse interface.|dc1bd52abc134803a5e70f9e1615bbb1|
asynccontext|async|AsyncContext is an interface provided by Servlet 3.1 for asynchronous processing, which allows a servlet to initiate a request-response communication with the client and then return control to the container before the response has been fully constructed.|dc1bd52abc134803a5e70f9e1615bbb1|
readlistener|readlistener|ReadListener is an interface in Servlet 3.1 that provides a callback mechanism for asynchronously reading input data from the client through a byte stream.|dc1bd52abc134803a5e70f9e1615bbb1|
servletconfig|servletconfig|ServletConfig is an interface implemented by a servlet configuration object, which provides the configuration information for a specific instance of a servlet. 'servletconfig' refers to a specific instance of the ServletConfig interface.|dc1bd52abc134803a5e70f9e1615bbb1|
servletinputstream|inputstream|ServletInputStream is an interface provided by Servlet 3.1 for asynchronous input/output operations that allow a servlet to read input data from the client through a byte stream.|dc1bd52abc134803a5e70f9e1615bbb1|
servletoutputstream|outputstream|ServletOutputStream is an interface provided by Servlet 3.1 for asynchronous input/output operations that allow a servlet to write response data to the client through a byte stream.|dc1bd52abc134803a5e70f9e1615bbb1|
webservlet|servletannotation|WebServlet is an annotation provided by Servlet 3.1 for declaring servlets, which simplifies the configuration process and allows for more flexible deployment options.|dc1bd52abc134803a5e70f9e1615bbb1|
httpservlet|httpservlethandler|HttpServlet is a class implemented by many web application frameworks such as Spring MVC, Struts, and JSF to provide common functionality for HTTP-based requests and responses. 'HttpServlet' refers to the base class from which these frameworks extend.|dc1bd52abc134803a5e70f9e1615bbb1|
log|log|Log is a utility class provided by WebSphere Application Server for logging messages related to server operations. 'log' refers to the specific implementation of the Log interface used in this context.|dc1bd52abc134803a5e70f9e1615bbb1|
com.ibm.websphere.samples.daytrader|daytradersamples|com.ibm.websphere.samples.daytrader is a package containing web application samples for WebSphere Application Server. 'daytradersamples' refers to the specific implementation of this package used in this context.|dc1bd52abc134803a5e70f9e1615bbb1|
asynccontext|httpservletrequest|The method startAsync() of the AsyncContext is called with the HttpServletRequest as an argument.|363fa8e044d645a6a178c24dcc6919ab|
asynccontext|httpservletresponse|Both AsyncContext and HttpServletResponse are set in the doPost() method of PingServlet31AsyncRead.|363fa8e044d645a6a178c24dcc6919ab|
httpservletrequest|asynccontext|The startAsync() method of HttpServletRequest returns an AsyncContext object.|363fa8e044d645a6a178c24dcc6919ab|
inputstream|readlistener|The setReadListener() method of ServletInputStream is called with a ReadListener object as an argument, which in this case is an instance of ReadListenerImpl.|363fa8e044d645a6a178c24dcc6919ab|
httpservletresponse|asynccontext|The AsyncContext object is set in the doPost() method and then passed as an argument to the startAsync() method of HttpServletRequest.|363fa8e044d645a6a178c24dcc6919ab|
context|sample.daytrader7|is a directory containing the DayTrader web application.|06c933fc7eca44e798c5214744bff76c|
sample.daytrader7|daytrader-ee7-web|is a subdirectory of sample.daytrader7, which contains the DayTrader EE7 web application.|06c933fc7eca44e798c5214744bff76c|
daytrader-ee7-web|src|is a subdirectory of daytrader-ee7-web, which contains the source code for the DayTrader EE7 web application.|06c933fc7eca44e798c5214744bff76c|
pingservletcdi.java|com|is a package containing the PingServletCDI class in the DayTrader EE7 web application.|06c933fc7eca44e798c5214744bff76c|
com|ibm|is the IBM corporation, which is the copyright owner of this source code.|06c933fc7eca44e798c5214744bff76c|
pingcdibean|cdibean|is a variable name used to inject the CDI bean into the PingServletCDI class in the DayTrader EE7 web application.|06c933fc7eca44e798c5214744bff76c|
pingejbiface|ejb|is a variable name used to inject the EJB interface into the PingServletCDI class in the DayTrader EE7 web application.|06c933fc7eca44e798c5214744bff76c|
httpservlet|pingservletcdi|is a type of Java servlet, which is implemented by the PingServletCDI class in the DayTrader EE7 web application.|06c933fc7eca44e798c5214744bff76c|
webservlet|@webservlet|is an annotation used to configure a Java servlet, which is applied to the PingServletCDI class in the DayTrader EE7 web application.|06c933fc7eca44e798c5214744bff76c|
inittime|private static final string inittime|is a variable name used to store an initialization time value in the PingServletCDI class in the DayTrader EE7 web application.|06c933fc7eca44e798c5214744bff76c|
httpservletconfig|servletconfig|is a type of Java servlet configuration interface, which is implemented by the ServletConfig class in the DayTrader EE7 web application.|06c933fc7eca44e798c5214744bff76c|
httpservletrequest|httpservlet|is a type of Java HTTP request object, which is used to process requests for resources within the DayTrader EE7 web application.|06c933fc7eca44e798c5214744bff76c|
httpservletresponse|httpservlet|is a type of Java HTTP response object, which is used to generate responses to requests for resources within the DayTrader EE7 web application.|06c933fc7eca44e798c5214744bff76c|
servletexception|exception|is a type of checked exception thrown by Java servlets to indicate errors during request processing, which is extended from the Exception class in the DayTrader EE7 web application.|06c933fc7eca44e798c5214744bff76c|
ioexception|exception|is a type of checked exception thrown by Java classes to indicate that an I/O operation has failed, which is extended from the Exception class in the DayTrader EE7 web application.|06c933fc7eca44e798c5214744bff76c|
context|license|is a legal agreement governing permissions and limitations for using software contained within the context directory of the DayTrader EE7 web application.|06c933fc7eca44e798c5214744bff76c|
ping servlet cdi|init time : |The 'Init time : ' is related to the 'Ping Servlet CDI' in this context.|f8a18abc3ce04030810b02f9453a8dd7|
cdibean|hitcount|In this context, 'cdiBean' and 'hitCount' are related through the method 'hello()' called on 'cdiBean'.|f8a18abc3ce04030810b02f9453a8dd7|
ejb|getmsg()|In this context, 'ejb' and 'getMsg()' are related through the method 'getMsg()' called on 'ejb'.|f8a18abc3ce04030810b02f9453a8dd7|
cdibean|hitcount|In this context, 'cdiBean' and 'hitCount' are related through the call made to 'cdiBean.hello()'.|f8a18abc3ce04030810b02f9453a8dd7|
ejb|getmsg()|In this context, 'ejb' and 'getMsg()' are related through the call made to 'ejb.getMsg()'.|f8a18abc3ce04030810b02f9453a8dd7|
hitcount|cdibean.hello()|In this context, 'hitCount' and 'cdiBean.hello()' are related through the value returned by 'cdiBean.hello()'.|f8a18abc3ce04030810b02f9453a8dd7|
hitcount|ejb.getmsg()|In this context, 'hitCount' and 'ejb.getMsg()' are related through the comparison of their values.|f8a18abc3ce04030810b02f9453a8dd7|
servlet|http request resource|A servlet is a dynamic component of a web application that processes HTTP requests and generates responses. The web server forwards the requests to the appropriate servlet based on the URL requested by the client.|b52df60510e749e5b1cde9842d654b29|
servlet|pingservletcdibeanmanagerviacdicurrent|PingServletCDIBeanManagerViaCDICurrent is a specific implementation of Servlet, used for testing the CDI context and bean manager injection via CDI current context.|b52df60510e749e5b1cde9842d654b29|
import|java.io.printwriter|The PrintWriter class is a subclass of Writer that sends characters to a byte output stream, which can then be written to a device such as a file or network socket.|b52df60510e749e5b1cde9842d654b29|
import|javax.servlet.servletexception|The ServletException class is used to signal that an error has occurred in a servlet, during both initialization and service methods.|b52df60510e749e5b1cde9842d654b29|
import|javax.servlet.annotation.webservlet|The WebServlet annotation is used to map the servlet's URL pattern to the servlet class.|b52df60510e749e5b1cde9842d654b29|
import|javax.servlet.http.httpservlet|HttpServlet is a subclass of GenericServlet that provides a common base class for servlets that handle HTTP requests.|b52df60510e749e5b1cde9842d654b29|
import|javax.servlet.http.httpservletrequest|The HttpServletRequest interface represents an HTTP request, as received by a web component such as a servlet.|b52df60510e749e5b1cde9842d654b29|
import|javax.servlet.http.httpservletresponse|The HttpServletResponse interface is used to generate the HTTP response that will be sent back to the client.|b52df60510e749e5b1cde9842d654b29|
import|com.ibm.websphere.samples.daytrader.web.prims.pingcdibean|The PingCDIBean class is used to test the CDI context and bean manager injection via CDI current context.|b52df60510e749e5b1cde9842d654b29|
class|pingservletcdibeanmanagerviacdicurrent|PingServletCDIBeanManagerViaCDICurrent is a subclass of HttpServlet, used for testing the CDI context and bean manager injection via CDI current context.|b52df60510e749e5b1cde9842d654b29|
interface|servletconfig|The ServletConfig interface is used to provide configuration information for a servlet.|b52df60510e749e5b1cde9842d654b29|
node_1|node_2|edge|chunk_id
pingservletcdibeanmanagerviajndi|httpservlet|PingServletCDIBeanManagerViaJNDI extends HttpServlet, which is a type of HttpServlet.|2c2dbe066d9047dd906bf4569e5c5989
httpservlet|httpservletrequest|HttpServlet is used with HttpServletRequest in handling client requests and responses.|2c2dbe066d9047dd906bf4569e5c5989
httpservlet|httpservletresponse|HttpServlet is used with HttpServletResponse in sending response back to the client.|2c2dbe066d9047dd906bf4569e5c5989
pingcdibean|inject|The @Inject annotation is used to inject a dependency into this class.|2c2dbe066d9047dd906bf4569e5c5989
servletconfig|inittime|This field 'initTime' is initialized in the init() method of ServletConfig.|2c2dbe066d9047dd906bf4569e5c5989
pingservletlargecontentlength|httpservlet|extends javax.servlet.http.HttpServlet|a0254685802a469087042badbb703585
pingservletlargecontentlength|httpservletservlet|implements Servlet|a0254685802a469087042badbb703585
pingservletlargecontentlength|java.lang.object|is a subclass of java.lang.Object|a0254685802a469087042badbb703585
httpservletconfig|servletconfig|extends ServletConfig|a0254685802a469087042badbb703585
httpservletconfig|object|is a subclass of java.lang.Object|a0254685802a469087042badbb703585
/servlet/pingservletlargecontentlength|urlpatterns|is associated with name urlPatterns in class annotations|a0254685802a469087042badbb703585
httpservletconfig|javax.servlet.annotation.webinitparam|contains WebInitParam objects specified using web.xml file or annotations|a0254685802a469087042badbb703585
httpservletrequest|httpservlet|extends javax.servlet.http.HttpServlet|a0254685802a469087042badbb703585
httpservletresponse|httpservlet|extends javax.servlet.http.HttpServlet|a0254685802a469087042badbb703585
javax.servlet.annotation.webservlet|class annotations|contains class level annotations like @WebServlet|a0254685802a469087042badbb703585
servlet|http request|A servlet is a part of a web application that handles HTTP requests and generates a dynamic response.|b2207b21a40941688a3770c61d5c50f1
httpservletrequest|http request|An instance of the HttpServletRequest class represents an HTTP request from a client to a server. It provides access to various parts of the request, such as the request URI, headers, and parameters.|b2207b21a40941688a3770c61d5c50f1
httpservletresponse|http response|An instance of the HttpServletResponse class represents an HTTP response from a server to a client. It provides methods for setting various aspects of the response, such as its status code and headers.|b2207b21a40941688a3770c61d5c50f1
getcontentlengthlong|httpservletrequest|The getContentLengthLong() method of the HttpServletRequest class returns the length, in bytes, of the content of an HTTP request body. This information can be used to allocate sufficient memory for processing the request.|b2207b21a40941688a3770c61d5c50f1
doget|httpservlet|The doGet() method of a servlet is called when it receives an HTTP GET request. It should process the request and return a response to the client.|b2207b21a40941688a3770c61d5c50f1
dopost|httpservlet|The doPost() method of a servlet is called when it receives an HTTP POST request. It should process the request and return a response to the client.|b2207b21a40941688a3770c61d5c50f1
contentlength|httpservletrequest|The contentLength attribute of an HttpServletRequest object represents the length, in bytes, of the data sent by the client as part of an HTTP request. It can be set using the setContentLength() method.|b2207b21a40941688a3770c61d5c50f1
getservletinfo|httpservlet|The getServletInfo() method of a servlet returns a string containing information about the servlet, such as its name and version.|b2207b21a40941688a3770c61d5c50f1
daytrader|web|The class Daytrader7 is located in the package com.ibm.websphere.samples.daytrader.web.prims, indicating that it is a part of the web application for daytrader. This suggests that daytrader is a trading application provided by IBM WebSphere and can be accessed through a web interface.|008d67eeb62246c18ab7a586e1efc5e2
daytrader7|class|The class Daytrader7 is defined in the given context. This indicates that daytrader7 is a specific implementation of the daytrader application for WebSphere.|008d67eeb62246c18ab7a586e1efc5e2
websphere|platform|IBM WebSphere is a Java-based middleware and application server used for deploying, managing, and integrating web applications. This indicates that daytrader7 can be run on the WebSphere platform.|008d67eeb62246c18ab7a586e1efc5e2
pingservletsetcontentlength|method|The method PingServletSetContentLength is defined in the class Daytrader7. This indicates that daytrader7 provides a servlet called PingServlet that can be invoked by setting its content length.|008d67eeb62246c18ab7a586e1efc5e2
httpservlet|interface|The class Daytrader7 implements the HttpServlet interface. This suggests that daytrader7 provides HTTP-based web services.|008d67eeb62246c18ab7a586e1efc5e2
httpservletrequest|argument|The method PingServletSetContentLength in the class Daytrader7 accepts a HttpServletRequest argument. This indicates that daytrader7 can receive HTTP requests and process them appropriately.|008d67eeb62246c18ab7a586e1efc5e2
httpservletresponse|argument|The method PingServletSetContentLength in the class Daytrader7 accepts a HttpServletResponse argument. This indicates that daytrader7 can respond to HTTP requests by sending appropriate responses back.|008d67eeb62246c18ab7a586e1efc5e2
log|class|The given context uses the Log class for logging purposes. This suggests that daytrader7 provides logging functionality for debugging and error handling purposes.|008d67eeb62246c18ab7a586e1efc5e2
java|programminglanguage|As Java is used in defining the Daytrader7 class, it can be inferred that daytrader7 is a Java-based trading application provided by IBM WebSphere.|008d67eeb62246c18ab7a586e1efc5e2
getservletinfo|servlet|A method called to retrieve information about this servlet.|b9cb5ebc0eb642b9b3ada0569475fb43
doget|http method|The HTTP method used to access this servlet in this particular context.|b9cb5ebc0eb642b9b3ada0569475fb43
res|httpservletresponse|An object that manages the HTTP response.|b9cb5ebc0eb642b9b3ada0569475fb43
lengthparam|parameter|A parameter passed to this servlet.|b9cb5ebc0eb642b9b3ada0569475fb43
integer.parseint|method|A method called to convert a string representation of a number into an integer.|b9cb5ebc0eb642b9b3ada0569475fb43
out|servletoutputstream|An output stream for sending bytes to the client.|b9cb5ebc0eb642b9b3ada0569475fb43
daytrader web application|sample day trading application|The class PingServletWriter is located in the package com.ibm.websphere.samples.daytrader.web.prims, which is a part of the DayTrader web application that demonstrates how to develop a WebSphere Application Server (WAS) J2EE web application using the Java Servlet and JavaServer Pages technologies. The sample day trading application serves as a simple price-and-quote server for a hypothetical stock exchange.|de89e18c83c84e678e34a45ad740d43a
servlets|java servlets|A servlet is a Java programming language class that processes requests and generates responses. Servlets are used in server-side web application development to extend the functionality of servers such as web servers.|de89e18c83c84e678e34a45ad740d43a
javaserver pages (jsp)|web pages|A JSP is a type of Java class that generates dynamic content for web applications. It consists of text, HTML tags, and scripting code that is embedded inside HTML tags. The server-side code in the JSP is executed when the page is requested, and the output is sent to the client.|de89e18c83c84e678e34a45ad740d43a
websphere application server (was)|ibm websphere application server|An application server that provides a runtime environment for Java applications. It enables the deployment, management, and execution of enterprise-level web applications written in Java.|de89e18c83c84e678e34a45ad740d43a
java servlet api|servlet api|A specification that defines the interfaces for implementing servlets. It includes a set of classes and methods that are used to build web applications using servlets.|de89e18c83c84e678e34a45ad740d43a
javaserver pages standard template library (jstl)|jsp standard template library|A collection of reusable tags and functions that can be used in JSP pages to simplify coding tasks. It provides a set of common functionalities such as conditional statements, loops, XML parsing, and internationalization.|de89e18c83c84e678e34a45ad740d43a
javaserver pages expression language (el)|expression language|A feature in JSPs that allows the dynamic generation of content based on variables and expressions. It enables the separation of presentation logic from application logic, which improves maintainability and readability.|de89e18c83c84e678e34a45ad740d43a
java virtual machine (jvm)|java runtime environment|A virtual machine that provides the necessary infrastructure for running Java applications. It manages memory allocation, thread management, and class loading, among other tasks.|de89e18c83c84e678e34a45ad740d43a
servlet configurations|web application configuration files|Configurations that specify various parameters and settings for web applications such as server addresses, database connections, and session timeouts. They are used to configure the behavior of servlets at runtime.|de89e18c83c84e678e34a45ad740d43a
html|hypertext markup language|A markup language used for creating web pages that can be displayed in a web browser. It consists of a set of tags and elements that define the structure, presentation, and behavior of the content.|de89e18c83c84e678e34a45ad740d43a
http|hypertext transfer protocol|A protocol used for transmitting data between web servers and web browsers. It enables client-server communication using a request-response model, where clients send requests to servers, and servers respond with the appropriate content.|de89e18c83c84e678e34a45ad740d43a
tcp/ip|transmission control protocol/internet protocol|A protocol suite used for transmitting data over a network. It provides reliable, connection-oriented communication between devices using the TCP protocol and provides the addressing mechanism using the IP protocol.|de89e18c83c84e678e34a45ad740d43a
network protocols|communication protocols|A set of rules governing the transmission of data over a network. They define how devices communicate with each other, including data formatting, addressing, and error handling.|de89e18c83c84e678e34a45ad740d43a
web servers|http servers|Computer programs that run on web servers to serve HTTP requests. They provide the necessary infrastructure for hosting web applications and delivering web content over the internet.|de89e18c83c84e678e34a45ad740d43a
web clients|http clients|Computer programs that run on web clients to send HTTP requests to web servers. They provide the necessary infrastructure for accessing web content using a web browser or a web application.|de89e18c83c84e678e34a45ad740d43a
java servlet container|web container|A runtime environment that manages the execution of servlets and web applications. It provides a set of services such as request-response handling, session management, security, and resource allocation.|de89e18c83c84e678e34a45ad740d43a
javaserver pages container|jsp container|A runtime environment that manages the execution of JSP pages. It provides a set of services such as EL evaluation, tag library resolution, and page translation.|de89e18c83c84e678e34a45ad740d43a
websphere application server web profile|was web profile|A configuration option for WebSphere Application Server that provides a lightweight runtime environment for developing and deploying web applications using Java Servlets, JavaScript Pages (JSPs), and Servlet Filters.|de89e18c83c84e678e34a45ad740d43a
java virtual machine (jvm)|oracle hotspot jvm|A runtime environment for executing Java applications. It provides a set of services such as memory allocation, class loading, and thread management.|de89e18c83c84e678e34a45ad740d43a
java servlet api 3.0|servlet api v3.0|A specification for building web applications using servlets in Java. It provides a set of classes and interfaces that enable the development of dynamic content, error handling, session management, and security.|de89e18c83c84e678e34a45ad740d43a
javaserver pages standard template library (jstl)|jsp sttl 1.2|A feature in JSP pages that allows the dynamic generation of content using a set of reusable tags and functions. It provides a set of functionalities such as conditional statements, loops, XML parsing, and internationalization.|de89e18c83c84e678e34a45ad740d43a
javaserver pages expression language (el)|el 2.2|A feature in JSP pages that allows the dynamic generation of content using expressions based on variables and properties. It provides a set of operators for arithmetic, comparison, and string manipulation.|de89e18c83c84e678e34a45ad740d43a
http servlet api 4.0|servlet 4.0|A specification for building web applications using servlets in Java. It provides a set of classes and interfaces that enable the development of dynamic content, error handling, session management, and security.|de89e18c83c84e678e34a45ad740d43a
javaserver pages standard template library (jstl)|jsp sttl 2.0|A feature in JSP pages that allows the dynamic generation of content using a set of reusable tags and functions. It provides a set of functionalities such as conditional statements, loops, XML parsing, and internationalization.|de89e18c83c84e678e34a45ad740d43a
javaserver pages expression language (el)|el 3.0|A feature in JSP pages that allows the dynamic generation of content using expressions based on variables and properties. It provides a set of operators for arithmetic, comparison, and string manipulation.|de89e18c83c84e678e34a45ad740d43a
java servlet container 4.0|web profile|A runtime environment that manages the execution of servlets and web applications. It provides a set of services such as request-response handling, session management, security, and resource allocation.|de89e18c83c84e678e34a45ad740d43a
javaserver pages container 4.0|jsp container|A runtime environment that manages the execution of JSP pages. It provides a set of services such as EL evaluation, tag library resolution, and page translation.|de89e18c83c84e678e34a45ad740d43a
java|servletconfig|ServletConfig is a class provided by Java Servlet API to initialize and configure servlets. It is used in the web application context to provide configuration data to servlets, filters, listeners, and other components.|e6cccd60730f400fab7db145295dc942
java|httpservlet|HttpServlet is a class provided by Java Servlet API to create Web components that can respond to HTTP requests. It extends the HttpServletBase class and provides methods to handle GET, POST, PUT, DELETE requests.|e6cccd60730f400fab7db145295dc942
java|httpsession|HttpSession is an interface provided by Java Servlet API to maintain a conversation between the client and server across multiple HTTP requests. It provides a map-like collection of objects associated with the session.|e6cccd60730f400fab7db145295dc942
java|log|Log is a class provided by IBM WebSphere Application Server to enable logging functionality in Java applications. It can be used to log messages, errors, and exceptions for debugging, monitoring, and audit purposes.|e6cccd60730f400fab7db145295dc942
java|apache license|The Apache License is an open-source license that allows users to use and modify software under certain conditions. It promotes the development of open-source projects while protecting the intellectual property rights of the original authors.|e6cccd60730f400fab7db145295dc942
java|httpservletrequest|HttpServletRequest is an interface provided by Java Servlet API to provide information about the client request. It provides methods to retrieve headers, parameters, and other request data.|e6cccd60730f400fab7db145295dc942
java|httpservletresponse|HttpServletResponse is an interface provided by Java Servlet API to send responses back to the client. It provides methods to set status codes, headers, and output streams for sending data.|e6cccd60730f400fab7db145295dc942
java|printwriter|PrintWriter is a class provided by Java IO API to write characters or bytes to an output stream. It can be used in conjunction with HttpServletResponse to send data back to the client.|e6cccd60730f400fab7db145295dc942
java|ioexception|IOException is a class provided by Java IO API to represent an error that occurs while reading or writing data. It can be thrown by methods in classes such as PrintWriter, InputStream, and FileInputStream.|e6cccd60730f400fab7db145295dc942
java|servletexception|ServletException is a class provided by Java Servlet API to represent an error that occurs while processing HTTP requests or responses. It can be thrown by methods in classes such as HttpServlet, FilterChain, and ServletConfig.|e6cccd60730f400fab7db145295dc942
java|filterchain|FilterChain is an interface provided by Java Servlet API to chain multiple filters together. It provides methods to invoke the next filter in the chain or stop processing additional filters.|e6cccd60730f400fab7db145295dc942
java|filter|Filter is an interface provided by Java Servlet API to provide generic functionality to HTTP requests and responses. It can be used to implement cross-cutting concerns such as authentication, authorization, logging, and compression.|e6cccd60730f400fab7db145295dc942
java|listener|Listener is an interface provided by Java Servlet API to provide event notifications to objects. It can be used to implement functionality such as context initialization, session creation, and server shutdown.|e6cccd60730f400fab7db145295dc942
java|context|Context is an interface provided by Java Servlet API to provide a shared environment for servlets, filters, listeners, and other components. It provides methods to access resources such as databases, message queues, and JNDI objects.|e6cccd60730f400fab7db145295dc942
java|webapplicationcontext|WebApplicationContext is a subclass of Context provided by Spring Framework to provide configuration and management of web applications. It can be used to simplify the configuration and deployment of web applications by providing features such as autowiring, aspect-oriented programming, and dependency injection.|e6cccd60730f400fab7db145295dc942
pinghttpsession1|servlet|The class PingHTTPSession1 is a type of servlet.|70022e64d035422abc863abb367b0d3b
httpservletresponse|res|The variable res in the method doPost and doGet of the class PingHTTPSession1 is used to send HTTP responses to the client.|70022e64d035422abc863abb367b0d3b
httpservletrequest|req|The variable req in the methods doPost and doGet of the class PingHTTPSession1 represents an HTTP request sent by a client.|70022e64d035422abc863abb367b0d3b
sessionid|count|In the class PingHTTPSession1, the session ID is generated dynamically for each new session created by incrementing the count variable.|70022e64d035422abc863abb367b0d3b
inittime|hitcount|Both initTime and hitCount variables in the class PingHTTPSession1 are used to keep track of session-specific information during user requests.|70022e64d035422abc863abb367b0d3b
servlet|httpservletrequest|In this method, the first argument 'request' is of type HttpServletRequest. HttpServletRequest is a subclass of ServletRequest that provides access to request data and headers for HTTP requests.|b25eb5ef9d1a496cbb18f03594f723e3
httpservletresponse|response|The second argument 'response' is of type HttpServletResponse. HttpServletResponse is a subclass of ServletResponse that provides access to response data and headers for HTTP responses.|b25eb5ef9d1a496cbb18f03594f723e3
httpsession|session|A session object, identified by a unique ID, is associated with the client during the course of the conversation between the server and the client. In this method, the 'session' variable is used to store and retrieve data related to the user.|b25eb5ef9d1a496cbb18f03594f723e3
exception|e|Inside try-catch blocks, 'e' represents an exception that can be thrown by the code inside try block. This method uses catch block to handle such exceptions.|b25eb5ef9d1a496cbb18f03594f723e3
web|servlet|In this context, 'web' and 'servlet' are related as the web is a platform for serving content through servlets.|6665840d33754fd6ae7d738d0fb4b5fa
com.ibm.websphere.samples.daytrader.web|prims|Both 'com.ibm.websphere.samples.daytrader.web' and 'prims' are part of the package name, indicating a hierarchy within the application.|6665840d33754fd6ae7d738d0fb4b5fa
sample.daytrader7|/home/jerry|The context contains both the path to the project directory and the project name, implying that they are related in some way.|6665840d33754fd6ae7d738d0fb4b5fa
httpsession|httpservletrequest|Both 'HttpSession' and 'HttpServletRequest' are used for session management in web applications.|6665840d33754fd6ae7d738d0fb4b5fa
printwriter|httpservletresponse|In this context, 'PrintWriter' and 'HttpServletResponse' appear together as both are involved in writing the output to the response stream.|6665840d33754fd6ae7d738d0fb4b5fa
java.io|javax.servlet.annotation|Both 'java.io' and 'javax.servlet.annotation' are used for annotations in Java servlets.|6665840d33754fd6ae7d738d0fb4b5fa
import|java|Both 'import' and 'Java' appear together as they are both part of the Java programming language.|6665840d33754fd6ae7d738d0fb4b5fa
javax.servlet|httpservlet|In this context, 'javax.servlet' and 'HttpServlet' are related as both are part of the Java Servlet API.|6665840d33754fd6ae7d738d0fb4b5fa
httpsession|httpservletrequest|Both 'HttpSession' and 'HttpServletRequest' are used for session management in web applications.|6665840d33754fd6ae7d738d0fb4b5fa
log|com.ibm.websphere.samples.daytrader.util|In this context, 'Log' and 'com.ibm.websphere.samples.daytrader.util' appear together as they are both part of the package name for a logging utility.|6665840d33754fd6ae7d738d0fb4b5fa
pingsession2|httpservletrequest|PingSession2 is a subclass of HttpServlet, which handles POST requests and forwards them to the doGet method. HttpServletRequest is an interface implemented by PingSession2 to receive data from clients in HTTP requests.|f3ae88e57a844b5282d30c73e4bc1413
pingsession2|httpservletresponse|PingSession2 interacts with HttpServletResponse, which is an interface implemented by the server to send HTTP responses to clients. PingSession2 sends data to the client through this response.|f3ae88e57a844b5282d30c73e4bc1413
pingsession2|httpservlet|PingSession2 is a subclass of HttpServlet, which handles GET and POST requests. HttpServlet provides common methods for handling HTTP requests and responses.|f3ae88e57a844b5282d30c73e4bc1413
pingsession2|doget|PingSession2 implements the doGet method to handle GET requests. This method is called by HttpServlet, which handles HTTP requests.|f3ae88e57a844b5282d30c73e4bc1413
pingsession2|inittime|PingSession2 initializes a variable initTime in its constructor or the init method. This variable is used to store the time of initialization.|f3ae88e57a844b5282d30c73e4bc1413
pingsession2|hitcount|PingSession2 initializes a static variable hitCount in its constructor or the init method. This variable is used to keep track of the number of times PingSession2 has been accessed.|f3ae88e57a844b5282d30c73e4bc1413
sessiontest|counter|In this context, the term 'sessiontest' and 'counter' are related as 'sessiontest' contains the 'counter' attribute which is accessed and incremented in the given code snippet.|0c1039cca4804c7bb541bfdba97b0840
integer|ival|Both 'Integer' and 'ival' are variables used to store and manipulate integer values in Java. They are related as 'ival' is assigned a value of type 'Integer'.|0c1039cca4804c7bb541bfdba97b0840
httpservletrequest|request|In this context, 'HttpServletRequest' and 'request' represent the same object. They are related as they both refer to the HTTP request being processed by the servlet.|0c1039cca4804c7bb541bfdba97b0840
httpservletresponse|response|Similar to 'request', 'HttpServletResponse' and 'response' represent the same object in this context. They are related as they both refer to the HTTP response being sent back to the client.|0c1039cca4804c7bb541bfdba97b0840
session|session|Both 'Session' and 'session' represent objects of type 'Session'. They are related as 'session' is created from an incoming request using the 'getSession(true)' method.|0c1039cca4804c7bb541bfdba97b0840
log|log|In this context, 'Log' and 'log' both represent a logging framework. They are related as they are both used for logging errors and debug messages in the given code snippet.|0c1039cca4804c7bb541bfdba97b0840
web application|daytrader web application|The DayTrader web application is a specific implementation of a web application.|9e9d080a8e044214afc40d33f0a4af90
java class|pingsession3.java|PingSession3.java is a Java class that is part of the DayTrader web application.|9e9d080a8e044214afc40d33f0a4af90
source code directory|/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims|The source code directory for the PingSession3.java class is located in this directory.|9e9d080a8e044214afc40d33f0a4af90
java package|com.ibm.websphere.samples.daytrader.web.prims|The PingSession3.java class is located in this Java package, which is part of the DayTrader web application.|9e9d080a8e044214afc40d33f0a4af90
java import statement|import java.io.printwriter;|This import statement for the PrintWriter class is used in the PingSession3.java class, which is part of the DayTrader web application.|9e9d080a8e044214afc40d33f0a4af90
java servlet|httpservlet|The PingSession3.java class extends this Java Servlet class, which is part of the Java Servlet API.|9e9d080a8e044214afc40d33f0a4af90
java servlet annotation|@webservlet|This annotation is used to define a mapping between a web resource and a Java Servlet class, as implemented in the PingSession3.java class.|9e9d080a8e044214afc40d33f0a4af90
java servlet exception|servletexception|This type of Java Servlet exception is thrown by the PingSession3.java class, as part of the Java Servlet API.|9e9d080a8e044214afc40d33f0a4af90
java servlet request object|httpservletrequest|This type of Java Servlet request object is used by the PingSession3.java class, as part of the Java Servlet API.|9e9d080a8e044214afc40d33f0a4af90
java servlet response object|httpservletresponse|This type of Java Servlet response object is used by the PingSession3.java class, as part of the Java Servlet API.|9e9d080a8e044214afc40d33f0a4af90
java servlet session object|httpsession|This type of Java Servlet session object is used by the PingSession3.java class, as part of the Java Servlet API.|9e9d080a8e044214afc40d33f0a4af90
java servlet config object|servletconfig|This type of Java Servlet configuration object is used by the PingSession3.java class, as part of the Java Servlet API.|9e9d080a8e044214afc40d33f0a4af90
java import statement|import javax.servlet.annotation.webservlet;|This import statement for the WebServlet annotation is used in the PingSession3.java class, which is part of the Java Servlet API.|9e9d080a8e044214afc40d33f0a4af90
java import statement|import javax.servlet.http.httpservlet;|This import statement for the HttpServlet abstract superclass is used in the PingSession3.java class, which is part of the Java Servlet API.|9e9d080a8e044214afc40d33f0a4af90
java import statement|import javax.servlet.http.httpservletrequest;|This import statement for the HttpServletRequest interface is used in the PingSession3.java class, which is part of the Java Servlet API.|9e9d080a8e044214afc40d33f0a4af90
java import statement|import javax.servlet.http.httpservletresponse;|This import statement for the HttpServletResponse interface is used in the PingSession3.java class, which is part of the Java Servlet API.|9e9d080a8e044214afc40d33f0a4af90
java import statement|import javax.servlet.http.httpsession;|This import statement for the HttpSession interface is used in the PingSession3.java class, which is part of the Java Servlet API.|9e9d080a8e044214afc40d33f0a4af90
java import statement|import javax.servlet.http.servletconfig;|This import statement for the ServletConfig interface is used in the PingSession3.java class, which is part of the Java Servlet API.|9e9d080a8e044214afc40d33f0a4af90
java import statement|import javax.servlet.annotation.webservlet;|This import statement for the WebServlet annotation is used in the PingSession3.java class, which is part of the Java Servlet API.|9e9d080a8e044214afc40d33f0a4af90
pingsession3|httpservletresponse|The servlet PingSession3 passes the HttpServletResponse object to the doPost and doGet methods.|7ae09220637b4b61876d1793e3a07b8d
httpservletrequest|doget|The doGet method of the servlet is called with a HttpServletRequest object as an argument.|7ae09220637b4b61876d1793e3a07b8d
httpservletresponse|dopost|The doPost method of the servlet is called with a HttpServletResponse object as an argument.|7ae09220637b4b61876d1793e3a07b8d
httpservletrequest|request|The servlet receives an instance of HttpServletRequest through the request parameter.|7ae09220637b4b61876d1793e3a07b8d
httpservletresponse|response|The servlet passes an instance of HttpServletResponse through the response parameter.|7ae09220637b4b61876d1793e3a07b8d
string|inittime|The variable initTime is declared as a String in the servlet class.|7ae09220637b4b61876d1793e3a07b8d
int|num_objects|The variable NUM_OBJECTS is declared as an int in the servlet class.|7ae09220637b4b61876d1793e3a07b8d
int|hitcount|The variable hitCount is declared as an int in the servlet class.|7ae09220637b4b61876d1793e3a07b8d
pingsession3|servlet|PingSession3 is a type of servlet called PingSession3Object.|fed83c3e29ad4282b5a032376b30b399
doget|method|doGet is a method inside the PingSession3 class.|fed83c3e29ad4282b5a032376b30b399
response|class|Response is a class in HTTP servlet programming used to return results from a servlet to an HTTP request.|fed83c3e29ad4282b5a032376b30b399
getwriter|method|getWriter is a method inside the Response class used to get the PrintWriter object associated with the response.|fed83c3e29ad4282b5a032376b30b399
session|class|Session is a HTTP session that enables communication between the web server and client during the course of a session.|fed83c3e29ad4282b5a032376b30b399
getsession|method|getSession is a method inside the HttpServletRequest class used to retrieve the current HTTP session associated with the request.|fed83c3e29ad4282b5a032376b30b399
num_objects|variable|NUM_OBJECTS is a variable in the PingSession3 class that sets the size of the PingSession3Object array in KBytes.|fed83c3e29ad4282b5a032376b30b399
num_objects|request parameter|num_objects is a request parameter used to change the value of NUM_OBJECTS and invalidate existing sessions.|fed83c3e29ad4282b5a032376b30b399
session object size|num_objects|set to a specific value in the beginning of the context|f2e161fd1db04cb1925e47446a86cf15
session|sessiondata|getAttribute method is used to retrieve the sessionData associated with 'sessiontest.sessionData' key from the session object|f2e161fd1db04cb1925e47446a86cf15
sessiondata|num_objects|initialization process for 'sessionData'|f2e161fd1db04cb1925e47446a86cf15
sessiondata|pingsession3object|each element of the sessionData array is a PingSession3Object|f2e161fd1db04cb1925e47446a86cf15
num_objects|sessiondata|number of elements in the 'sessionData' array, initialized to a specific value at the beginning|f2e161fd1db04cb1925e47446a86cf15
pingsession3object|int|each PingSession3Object takes up approximately 1024 bits of memory|f2e161fd1db04cb1925e47446a86cf15
num_objects|int num_bytes|calculation to determine the total number of bytes taken up by 'sessionData'|f2e161fd1db04cb1925e47446a86cf15
response|setheader method used to set http header value for a specific key||f2e161fd1db04cb1925e47446a86cf15
primitive type size|blob size|The total blob size is calculated by adding the sizes of all primitive types (excluding overhead).|01ef1c2597d34e7c8a55c406640cdfce
string type|blob size|The size of a String object is calculated based on its length and character encoding. In this case, both Strings have the same length (12 characters) and are encoded using UTF-16. Therefore, their total size is 384 bytes.|01ef1c2597d34e7c8a55c406640cdfce
byte array|byteval variable|The byteVal variable is a byte array used to store binary data. Its size is determined by the length of the array, which is 16 bytes in this case.|01ef1c2597d34e7c8a55c406640cdfce
char array|charval variable|The charVal variable is a character array used to store Unicode characters. Its size is determined by the length of the array (8 characters in this case) multiplied by the number of bytes required to store each character (2 bytes for UTF-16 encoding).|01ef1c2597d34e7c8a55c406640cdfce
int|a variable|The size of an int variable is 32 bits (4 bytes).|01ef1c2597d34e7c8a55c406640cdfce
float|e, f, g, h variables|The size of a float variable is also 32 bits (4 bytes).|01ef1c2597d34e7c8a55c406640cdfce
double|i, j variables|The size of a double variable is 64 bits (8 bytes).|01ef1c2597d34e7c8a55c406640cdfce
pingsession3object|daytrader-ee7-web|The class PingSession3Object is used in the project daytrader-ee7-web for testing purposes.|12222010177f4fed9c6d7ca5638b4e12
fileoutputstream|ostream|In the commented main method, an instance of FileOutputStream named ostream is created to write the object data to a file called datablob.xxx in the directory C:\temp.|12222010177f4fed9c6d7ca5638b4e12
objectoutputstream|p|An ObjectOutputStream object p is created and used to write the object data to the ostream stream.|12222010177f4fed9c6d7ca5638b4e12
pingsession3object|data|The PingSession3Object class is instantiated in the commented main method and assigned to the variable 'data'.|12222010177f4fed9c6d7ca5638b4e12
try|exception|In the commented main method, a try-catch block is used to handle any exceptions that may occur while writing the object data to the file.|12222010177f4fed9c6d7ca5638b4e12
string[]|args|The main method is defined with an argument array 'args' of type String[].|12222010177f4fed9c6d7ca5638b4e12
httpservlet|pingupgradeservlet|The PingUpgradeServlet class, which extends HttpServlet, is mentioned in the package statement.|12222010177f4fed9c6d7ca5638b4e12
import|javax.servlet.readlistener|In the PingUpgradeServlet class, the ReadListener interface from the javax.servlet package is imported.|12222010177f4fed9c6d7ca5638b4e12
import|javax.servlet.servletexception|The ServletException class from the javax.servlet package is imported.|12222010177f4fed9c6d7ca5638b4e12
import|javax.servlet.servletinputstream|The ServletInputStream class from the javax.servlet package is imported.|12222010177f4fed9c6d7ca5638b4e12
import|javax.servlet.servletoutputstream|The ServletOutputStream class from the javax.servlet package is imported.|12222010177f4fed9c6d7ca5638b4e12
(c)|copyright ibm corporation 2015.|A copyright notice for the source code is included in a comment at the beginning of the file.|12222010177f4fed9c6d7ca5638b4e12
licensed|under the apache license, version 2.0|The code is licensed under the Apache License, Version 2.0.|12222010177f4fed9c6d7ca5638b4e12
see|http://www.apache.org/licenses/license-2.0|A URL to view the full text of the license is provided in a comment.|12222010177f4fed9c6d7ca5638b4e12
pingupgradeservlet|httpservlet|PingUpgradeServlet is a subclass of HttpServlet.|861ffcff163a4079ae9b62e9a47d1f7a
doget|dopost|Both methods are used to handle HTTP requests, but doGet is called for GET requests and doPost is called for POST requests.|861ffcff163a4079ae9b62e9a47d1f7a
httpservletrequest|httpservletresponse|HttpServletRequest and HttpServletResponse are used to exchange information between the client and server during an HTTP request and response cycle.|861ffcff163a4079ae9b62e9a47d1f7a
req|httpservletrequest|The variable 'req' is assigned a new instance of HttpServletRequest when the servlet is called.|861ffcff163a4079ae9b62e9a47d1f7a
res|httpservletresponse|The variable 'res' is assigned a new instance of HttpServletResponse when the servlet is called.|861ffcff163a4079ae9b62e9a47d1f7a
handler.class|req.upgrade()|When the header 'Upgrade' in the request is found to be 'echo', this method is used to perform a HTTP upgrade, which converts an HTTP connection into another protocol such as WebSocket.|861ffcff163a4079ae9b62e9a47d1f7a
log.dotrace()|log.trace()|The class Log provides methods for logging messages at different levels of severity, including trace().|861ffcff163a4079ae9b62e9a47d1f7a
res.setstatus(101)|"res.getwriter().println(""no upgrade: "" + req.getheader(""upgrade""))"|When the header 'Upgrade' in the request is not found to be 'echo', these methods are used to set the status code and write a message to the output stream.|861ffcff163a4079ae9b62e9a47d1f7a
handler|init|initializes the Handler class in the context provided|29cb511d3003431c8c2e4b015591497c
webconnection|handler|is passed as an argument to the init method of Handler class|29cb511d3003431c8c2e4b015591497c
listener|handler|is created within the init method of Handler class|29cb511d3003431c8c2e4b015591497c
listener|webconnection|is initialized with the WebConnection object passed to the Handler's init method|29cb511d3003431c8c2e4b015591497c
servletinputstream|listener|is set as the read listener of the WebConnection object inside the Listener constructor|29cb511d3003431c8c2e4b015591497c
servletoutputstream|handler|is accessed directly in the init method of Handler class without passing it as an argument to any other method|29cb511d3003431c8c2e4b015591497c
ondataavailable|listener|is a method implemented by Listener interface that is called when data is available on the input stream of WebConnection object|29cb511d3003431c8c2e4b015591497c
websocket|pingwebsocketbinary|WebSocket is a protocol for bi-directional, event-driven communications over a single transport. PingWebSocketBinary is an implementation of this protocol for sending and receiving binary data.|0b53a6d04eee4465b6e04f8d7a083e24
value|/pingbinary|This is the endpoint URL for connecting to the WebSocket server. It is used to specify a custom path for handling WebSocket requests.|0b53a6d04eee4465b6e04f8d7a083e24
session|currentsession, session|A session represents a client's connection to the server. The currentSession variable is initialized in the onOpen method and used throughout the class for sending and receiving data.|0b53a6d04eee4465b6e04f8d7a083e24
bytebuffer|data|The ByteBuffer class is used to represent sequences of bytes. In this class, it is used to encapsulate binary data sent from the client and sent back by the server.|0b53a6d04eee4465b6e04f8d7a083e24
closereason|reason|The CloseReason interface represents the reason why a WebSocket session has been closed. It is used in the onClose method to handle the closure of the session.|0b53a6d04eee4465b6e04f8d7a083e24
endpointconfig|ec|The EndpointConfig interface is used to pass configuration information from a container to an endpoint. In this class, it is passed as a parameter in the onOpen method.|0b53a6d04eee4465b6e04f8d7a083e24
serverendpoint|@serverendpoint|The @ServerEndpoint annotation is used to register a WebSocket endpoint. It specifies the URL pattern for handling requests and the implementation class for the endpoint.|0b53a6d04eee4465b6e04f8d7a083e24
pingwebsocketjson|serverendpoint|PingWebSocketJson is a class that extends ServerEndpoint.|44f60bbfb59b48d3aed0072f55ae2070
value|/pingwebsocketjson|The value attribute of the @ServerEndpoint annotation specifies the endpoint URI for this web socket.|44f60bbfb59b48d3aed0072f55ae2070
encoders|jsonencoder.class|The encoders attribute is an array that contains the classes of message encoders to use when encoding outgoing messages for this web socket.|44f60bbfb59b48d3aed0072f55ae2070
decoders|jsondecoder.class|The decoders attribute is an array that contains the classes of message decoders to use when decoding incoming messages for this web socket.|44f60bbfb59b48d3aed0072f55ae2070
onopen|onopen(session session, endpointconfig ec)|The onOpen() method is called when a client connects to the web socket.|44f60bbfb59b48d3aed0072f55ae2070
currentsession|session|The currentSession variable stores the session object for the currently connected client.|44f60bbfb59b48d3aed0072f55ae2070
senthitcount|integer|The sentHitCount variable keeps track of the number of times the web socket sends a message to the client.|44f60bbfb59b48d3aed0072f55ae2070
receivedhitcount|integer|The receivedHitCount variable keeps track of the number of times the client receives a message from the web socket.|44f60bbfb59b48d3aed0072f55ae2070
initialcontext|initialcontext|The InitialContext class is used to access resources in JNDI.|44f60bbfb59b48d3aed0072f55ae2070
mtf|managedthreadfactory|The mtf variable stores a thread factory that can be used to create managed threads for background tasks.|44f60bbfb59b48d3aed0072f55ae2070
thread|thread|The Thread class is used to execute code in a new thread.|44f60bbfb59b48d3aed0072f55ae2070
node_1|node_2|edge|chunk_id
thread.sleep|interruptedexception|Thrown when a thread is interrupted during its execution, typically to signal that the user has requested the termination of the thread.|8707d6ad9a92445589caffd4be7c5b37
thread|start|Method used to start a new thread executing the specified runnable object.|8707d6ad9a92445589caffd4be7c5b37
jsonmessage|receivedhitcount|Variable used to store the number of received hits in the WebSocket.|8707d6ad9a92445589caffd4be7c5b37
jsonmessage|setkey|Method used to set a key for this message.|8707d6ad9a92445589caffd4be7c5b37
jsonmessage|setvalue|Method used to set the value of this message.|8707d6ad9a92445589caffd4be7c5b37
currentsession|getasyncremote|Method used to get the asynchronous remote object for sending messages to clients.|8707d6ad9a92445589caffd4be7c5b37
onmessage|ping|Method called when a message is received from a client.|8707d6ad9a92445589caffd4be7c5b37
session|getclosereason|Method used to get the reason for closing this session.|8707d6ad9a92445589caffd4be7c5b37
closereason|reasonpurpose|Gets the reason string as specified in the close signal sent by the remote endpoint or the server.|8707d6ad9a92445589caffd4be7c5b37
closereason|getclosecode|Gets the close code corresponding to this CloseReason object.|8707d6ad9a92445589caffd4be7c5b37
closereason|getclosecodeasstring|Returns the string representation of the CloseStatus enum associated with this CloseReason object.|8707d6ad9a92445589caffd4be7c5b37
pingwebsockettextasync|serverendpoint|The class 'PingWebSocketTextAsync' is annotated with the annotation type 'ServerEndpoint', which is a subclass of 'Annotations' and provides support for server-side WebSocket endpoints.|1b024f16e008431d803b0a1aab2a2ee8
ping|onmessage|The method 'ping' is annotated with the annotation type 'OnMessage', which is a subclass of 'EndpointConfig.Configurator' and is called when a client sends a message to this WebSocket endpoint.|1b024f16e008431d803b0a1aab2a2ee8
currentsession|session|The variable 'currentSession' and the parameter 'session' both represent a session between the server and a client in this WebSocket endpoint.|1b024f16e008431d803b0a1aab2a2ee8
hitcount|integer|The variable 'hitCount' is an instance of the Java primitive type 'int', which is used to keep track of how many times this WebSocket endpoint has been pinged.|1b024f16e008431d803b0a1aab2a2ee8
session|currentsession|The class 'Session' provides an abstraction for bidirectional communication channels between a client and the server, and 'currentSession' is a specific instance of this class.|1b024f16e008431d803b0a1aab2a2ee8
onopen|@onopen|'onOpen' is annotated with '@OnOpen', which indicates that it should be called when the WebSocket connection is opened.|1b024f16e008431d803b0a1aab2a2ee8
endpointconfig|ec| 'ec' is a parameter passed to the 'onOpen' method, and it represents the configuration object for this WebSocket endpoint.|1b024f16e008431d803b0a1aab2a2ee8
serverendpoint|value|The attribute 'value' of the '@ServerEndpoint' annotation specifies the URL path to which this WebSocket endpoint is mapped.|1b024f16e008431d803b0a1aab2a2ee8
onclose|@onclose|'onClose' is annotated with '@OnClose', which indicates that it should be called when the WebSocket connection is closed.|1b024f16e008431d803b0a1aab2a2ee8
session|session|'session' is a parameter passed to both 'onOpen' and 'onClose' methods, and it represents the specific session that is being opened/closed.|1b024f16e008431d803b0a1aab2a2ee8
closereason|reason|'reason' is a parameter passed to the 'onClose' method, and it provides information about why the WebSocket connection was closed.|1b024f16e008431d803b0a1aab2a2ee8
websocket|pingwebsockettextsync|PingWebSocketTextSync is a class that implements a simple WebSocket for sending the number of times it has been pinged. It is annotated with @ServerEndpoint and its endpoint URI is /pingTextSync.|292def0eaf494d65b820b27db1ce5bbe
java|pingwebsockettextsync|PingWebSocketTextSync is a Java class that implements a WebSocket for sending the number of times it has been pinged. It uses annotations provided by the JSR-356 API to define its endpoint and handler methods.|292def0eaf494d65b820b27db1ce5bbe
@serverendpoint|pingwebsockettextsync|The @ServerEndpoint annotation is used to define the endpoint URI and configuration for the WebSocket. It is a part of JSR-356 API.|292def0eaf494d65b820b27db1ce5bbe
value|/pingtextsync|The 'value' attribute of @ServerEndpoint is used to specify the endpoint URI for the WebSocket.|292def0eaf494d65b820b27db1ce5bbe
session|onopen, onclose, onerror, and onmessage methods|Session is a class that represents a bidirectional communication channel between a client and a server in WebSocket. The 'onOpen', 'onClose', 'onError', and 'OnMessage' annotations are used to define the event handlers for the WebSocket.|292def0eaf494d65b820b27db1ce5bbe
@onopen|pingwebsockettextsync|The '@OnOpen' annotation is used to define the event handler for the 'open' event. It is called when a client connects to the WebSocket.|292def0eaf494d65b820b27db1ce5bbe
@onclose|pingwebsockettextsync|The '@OnClose' annotation is used to define the event handler for the 'close' event. It is called when a client disconnects from the WebSocket.|292def0eaf494d65b820b27db1ce5bbe
@onerror|pingwebsockettextsync|The '@OnError' annotation is used to define the error handler for the WebSocket. It is called when an error occurs during the WebSocket session.|292def0eaf494d65b820b27db1ce5bbe
@endpointconfig|pingwebsockettextsync|The '@EndpointConfig' annotation is used to pass configuration data to the WebSocket implementation. It is optional and used for configuring application-level context.|292def0eaf494d65b820b27db1ce5bbe
closereason|onclose|The 'CloseReason' class represents the reason for closing a WebSocket session. It is passed as an argument to the 'onClose' event handler.|292def0eaf494d65b820b27db1ce5bbe
pingwebsockettextsync|simple websocket|This class a simple websocket that sends the number of times it has been pinged.|286036b8b0df4afd95015447bf7cbf78
ping|hitcount|hitCount increases by 1 every time the 'ping' method is called.|286036b8b0df4afd95015447bf7cbf78
session|currentsession|The current session is stored in a variable named 'currentSession'.|286036b8b0df4afd95015447bf7cbf78
pingservlet2entity.java|sample.daytrader7|Both files are part of the 'daytrader-ee7-web' project located in the directory 'sample.daytrader7'.|286036b8b0df4afd95015447bf7cbf78
licensed under the apache license, version 2.0|license|This file is distributed under the terms of the Apache License, Version 2.0, which is also referred to as 'the License'.|286036b8b0df4afd95015447bf7cbf78
pingservlet2entity|httpservlet|PingServlet2Entity is a subclass of HttpServlet.|f0b4ef815def4cf4a3dbb4f7df2b2fd7
pingservlet2entity|httpservletrequest|HttpServletRequest is passed as an argument to the doGet() and doPost() methods of PingServlet2Entity.|f0b4ef815def4cf4a3dbb4f7df2b2fd7
pingservlet2entity|httpservletresponse|HttpServletResponse is returned from the doGet() and doPost() methods of PingServlet2Entity.|f0b4ef815def4cf4a3dbb4f7df2b2fd7
daytrader|persistencecontext|The @PersistenceContext annotation is used to inject an EntityManager into the PingServlet2Entity class, which is used to interact with the database.|f0b4ef815def4cf4a3dbb4f7df2b2fd7
quotedatabean|entitymanager|The QuoteDataBean entity is accessed and manipulated using the EntityManager obtained through the @PersistenceContext annotation.|f0b4ef815def4cf4a3dbb4f7df2b2fd7
daytrader|tradeconfig|The TradeConfig class is used to store configuration parameters, which can be accessed by the PingServlet2Entity class for dynamic stock symbol generation and entity injection.|f0b4ef815def4cf4a3dbb4f7df2b2fd7
inittime|hitcount|These variables are static members initialized within the PingServlet2Entity class, used for logging and debugging purposes.|f0b4ef815def4cf4a3dbb4f7df2b2fd7
servlet2entity|pingservlet2entity|Servlet2Entity is a specific implementation of the PingServlet2Entity class, which can be accessed through an HTTP request using the GET method.|407b409e628c4e9eb7a155c2ffd2e420
httpservletresponse|res|res is an instance of HttpServletResponse, which is used to send a response back to the client.|407b409e628c4e9eb7a155c2ffd2e420
string|"""text/html"""|"The content type for this HTTP request is set to ""text/html"""|407b409e628c4e9eb7a155c2ffd2e420
printwriter|out|An output stream for writing HTML and text to the client is created using the getWriter() method of HttpServletResponse.|407b409e628c4e9eb7a155c2ffd2e420
quotedatabean|quote|quote is an instance of QuoteDataBean, which represents a specific stock quote.|407b409e628c4e9eb7a155c2ffd2e420
string|"""quoteservlet2entity"""|"This string contains the text ""QuoteServlet2Entity"", which is used to display the name of the class on the web page."|407b409e628c4e9eb7a155c2ffd2e420
font|"+2"""|The font size for this HTML element is set to +2 inches.|407b409e628c4e9eb7a155c2ffd2e420
font|"-1"""|The font size for this HTML element is set to -1 inches.|407b409e628c4e9eb7a155c2ffd2e420
entitymanager|em|An instance of EntityManager is accessed and used to perform database operations.|407b409e628c4e9eb7a155c2ffd2e420
persistencecontext||The @PersistenceContext annotation is used to access a PersistenceContext, which is a specific entity manager instance bound to the current thread.|407b409e628c4e9eb7a155c2ffd2e420
string|"""symbol"""|"This string contains the text ""Symbol"", which represents the stock symbol that will be looked up in the database."|407b409e628c4e9eb7a155c2ffd2e420
tradeconfig|getprimiterations()|The getPrimIterations() method of TradeConfig is called to generate a random number of iterations for generating a random symbol.|407b409e628c4e9eb7a155c2ffd2e420
random|tradeconfig.rndsymbol()|The rndSymbol() method of TradeConfig is used to generate a random stock symbol using the Random class.|407b409e628c4e9eb7a155c2ffd2e420
int|hitcount++|A hit counter variable is incremented each time the web page is accessed.|407b409e628c4e9eb7a155c2ffd2e420
log|error|The Log class is used to log error messages to a file or console output stream.|407b409e628c4e9eb7a155c2ffd2e420
pingservlet2mdbqueue|servlet|PingServlet2MDBQueue is a type of Servlet|1f4d2a59ce6b4c3eb7f5ba98ddb88ac0
daytrader-ee7-web|project|daytrader-ee7-web is a project containing web resources|1f4d2a59ce6b4c3eb7f5ba98ddb88ac0
sample.daytrader7|file name|PingServlet2MDBQueue is located in the file named sample.daytrader7|1f4d2a59ce6b4c3eb7f5ba98ddb88ac0
getservletinfo|method|The PingServlet2MDBQueue Servlet has a method called getServletInfo|1f4d2a59ce6b4c3eb7f5ba98ddb88ac0
config|object|PingServlet2MDBQueue receives configuration information from an object named config|1f4d2a59ce6b4c3eb7f5ba98ddb88ac0
initconfig|method|PingServlet2MDBQueue has a method called initConfig|1f4d2a59ce6b4c3eb7f5ba98ddb88ac0
hitcount|variable|PingServlet2MDBQueue contains a variable named hitCount|1f4d2a59ce6b4c3eb7f5ba98ddb88ac0
inittime|variable|PingServlet2MDBQueue contains a variable named initTime|1f4d2a59ce6b4c3eb7f5ba98ddb88ac0
javaserver pages (jsp) technology|web technology|JavaServer Pages (JSP) technology is used in the web resources contained within daytrader-ee7-web|1f4d2a59ce6b4c3eb7f5ba98ddb88ac0
servletcontext|class|PingServlet2MDBQueue uses the ServletContext class to provide context information for the web resources contained within daytrader-ee7-web|1f4d2a59ce6b4c3eb7f5ba98ddb88ac0
connectionfactory|class|PingServlet2MDBQueue uses the ConnectionFactory class to create a Connection object for accessing resources in a JMS destination|1f4d2a59ce6b4c3eb7f5ba98ddb88ac0
jmscontext|interface|PingServlet2MDBQueue uses the JMSContext interface to interact with a JMS destination using a Connection object created from a ConnectionFactory object|1f4d2a59ce6b4c3eb7f5ba98ddb88ac0
connection|object|PingServlet2MDBQueue uses a Connection object to access resources in a JMS destination using a ConnectionFactory object|1f4d2a59ce6b4c3eb7f5ba98ddb88ac0
queue|interface|PingServlet2MDBQueue sends messages to a Queue interface for asynchronous processing|1f4d2a59ce6b4c3eb7f5ba98ddb88ac0
textmessage|class|PingServlet2MDBQueue sends text messages using the TextMessage class|1f4d2a59ce6b4c3eb7f5ba98ddb88ac0
pingservlet2mdbqueue|ejb3.dtbroker3mdb|The TradeBrokerMDB receives a message from the PingServlet2MDBQueue through an MDB Queue.|4dfe35afbee54c2b9f79b3ae3077a420
pingservlet2mdbqueue|http request|The PingServlet2MDBQueue is accessed through an HTTP request.|4dfe35afbee54c2b9f79b3ae3077a420
ejb3.dtbroker3mdb|jms queue|The ejb3.DTBroker3MDB listens to the JMS Queue for messages.|4dfe35afbee54c2b9f79b3ae3077a420
ejb3.dtbroker3mdb|jndi resources|The ejb3.DTBroker3MDB accesses the JMS Queue and Connection Factory through JNDI resources.|4dfe35afbee54c2b9f79b3ae3077a420
http request|web application|The HTTP request is processed by the Web application.|4dfe35afbee54c2b9f79b3ae3077a420
tradeapplication|tradeconfig|The TradeApplication uses the TradeConfig class to set configuration parameters.|4dfe35afbee54c2b9f79b3ae3077a420
log|system logs|The Log class is used to log messages to the system logs.|4dfe35afbee54c2b9f79b3ae3077a420
pingservlet2mdbqueue|jmscontext|The servlet 'PingServlet2MDBQueue' creates an instance of 'JMSContext' to interact with the JMS Queue.|3c2de27638324d5fbd9db7d31c0b6a1b
queueconnectionfactory|connnection|The factory 'queueConnectionFactory' is used to create a 'Connection' object for connecting to the JMS Queue.|3c2de27638324d5fbd9db7d31c0b6a1b
session|messageproducer|A 'Session' object is created from the 'Connection' and then a 'MessageProducer' object is obtained through it.|3c2de27638324d5fbd9db7d31c0b6a1b
tradebrokerqueue|tradebrokerqueuequeue|The constant 'TradeBrokerQueue' is used to refer to the JMS Queue called 'tradeBrokerQueueQueue'.|3c2de27638324d5fbd9db7d31c0b6a1b
textmessage|message|A 'TextMessage' object is created and assigned to the variable 'message' for sending messages to the queue.|3c2de27638324d5fbd9db7d31c0b6a1b
pingservlet2mdbqueue|web primitive|PingServlet2MDBQueue is a web primitive.|e14fb89ceb4d4971b62d9b1523b45edd
trade runtime configs|configurations used in trade platform|The trade runtime configs are configurations used in the trade platform.|e14fb89ceb4d4971b62d9b1523b45edd
pingservlet2mdbqueue|trade runtime configs|The PingServlet2MDBQueue is configured with trade runtime configs.|e14fb89ceb4d4971b62d9b1523b45edd
tradebrokerqueue|destination to send messages|The TradeBrokerQueue is a destination to send messages.|e14fb89ceb4d4971b62d9b1523b45edd
message|textmessage object created using jmscontext|The message in the given context is a TextMessage object created using JMSContext.|e14fb89ceb4d4971b62d9b1523b45edd
pingservlet2mdbqueue|message|The PingServlet2MDBQueue sends a message.|e14fb89ceb4d4971b62d9b1523b45edd
tradebrokerqueue|tradebrokerqueue|The tradeBrokerQueue is used to send messages.|e14fb89ceb4d4971b62d9b1523b45edd
inittime|initialization time of the message producer or consumer|In the given context, initTime refers to the initialization time of the message producer or consumer.|e14fb89ceb4d4971b62d9b1523b45edd
hitcount|number of hits on a resource|The hitCount in the given context represents the number of hits on a resource.|e14fb89ceb4d4971b62d9b1523b45edd
message.gettext()|content of the message|In the given context, message.getText() refers to the content of the message.|e14fb89ceb4d4971b62d9b1523b45edd
pingservlet2mdbqueue|message text|The PingServlet2MDBQueue displays the message text.|e14fb89ceb4d4971b62d9b1523b45edd
servlet|servlet to session ejb path|configured with trade runtime configs|c1eb4541f0f14d31a7454d249d7c60c1
web primitive|servlet||c1eb4541f0f14d31a7454d249d7c60c1
ejb|session ejb|path|c1eb4541f0f14d31a7454d249d7c60c1
trade runtime configs|servlet to session ejb path||c1eb4541f0f14d31a7454d249d7c60c1
java class|pingservlet2mdbtopic||c1eb4541f0f14d31a7454d249d7c60c1
web application|daytrader-ee7-web||c1eb4541f0f14d31a7454d249d7c60c1
java package|com.ibm.websphere.samples.daytrader.web.prims.ejb3||c1eb4541f0f14d31a7454d249d7c60c1
pingservlet2mdbtopic|httpservlet|PingServlet2MDBTopic is a subclass of HttpServlet.|72137819204d4257a6acd88f4d059abf
tradestreamermdb|dtstreamer3mdb|Both TradeStreamerMDB and DTStreamer3MDB are examples of EJBs (Enterprise JavaBeans) used in the Daytrader application.|72137819204d4257a6acd88f4d059abf
topicconnectionfactory|jms/topicconnectionfactory|TopicConnectionFactory is a named resource that provides a ConnectionFactory for creating connections to Topics.|72137819204d4257a6acd88f4d059abf
streamertopic|jms/streamertopic|StreamerTopic is a named resource used as a topic for publishing messages in the Daytrader application.|72137819204d4257a6acd88f4d059abf
servlet|httpservletrequest|The Servlet receives a request from an HttpServletRequest.|c53cf0946e5b4ae9a21b62d9a7b57476
servlet|httpservletresponse|The Servlet sends a response to the client through an HttpServletResponse.|c53cf0946e5b4ae9a21b62d9a7b57476
httpservletrequest|httpservletresponse|The HttpServletRequest and HttpServletResponse are used together in a Servlet to handle client requests and responses.|c53cf0946e5b4ae9a21b62d9a7b57476
httpservletresponse|contenttype|The HttpServletResponse sets the ContentType header to specify the content type of the response.|c53cf0946e5b4ae9a21b62d9a7b57476
httpservletrequest|doget|When a GET request is received by an HttpServletRequest, it calls the doGet method in the Servlet.|c53cf0946e5b4ae9a21b62d9a7b57476
httpservletrequest|dopost|When a POST request is received by an HttpServletRequest, it calls the doPost method in the Servlet.|c53cf0946e5b4ae9a21b62d9a7b57476
stringbuffer|html|A StringBuffer is used to build HTML content that is sent as a response through an HttpServletResponse.|c53cf0946e5b4ae9a21b62d9a7b57476
javax.jms.connectionfactory|topicconnectionfactory|topicConnectionFactory is an instance of ConnectionFactory that provides connections to a topic in a JMS environment.|c53cf0946e5b4ae9a21b62d9a7b57476
connectionfactory|javax.jms.topicsession|The ConnectionFactory can be used to create Session objects for interacting with topics in a JMS environment.|c53cf0946e5b4ae9a21b62d9a7b57476
topicsession|javax.jms.messageproducer|A Session object is used to create MessageProducer objects for sending messages to a topic in a JMS environment.|c53cf0946e5b4ae9a21b62d9a7b57476
session|javax.jms.textmessage|A Session object can be used to create TextMessage objects for sending text-based messages to a topic in a JMS environment.|c53cf0946e5b4ae9a21b62d9a7b57476
topicsession|tradestreamertopic|A TopicSession is used to interact with specific topics, such as tradeStreamerTopic in this case.|c53cf0946e5b4ae9a21b62d9a7b57476
ping|command|The string command in the context is assigned the value 'ping'.|3608104bd6ee41a1b0a1d9e4dac2048c
publishtime|message|The property publishTime is set for the message in the context.|3608104bd6ee41a1b0a1d9e4dac2048c
system.currenttimemillis()|publishtime|The value of System.currentTimeMillis() is assigned to the publishTime property.|3608104bd6ee41a1b0a1d9e4dac2048c
tradestreamertopic|message|The message in the context is sent to the TradeStreamerTopic.|3608104bd6ee41a1b0a1d9e4dac2048c
java:comp/env/jms|tradestreamertopic|The TradeStreamerTopic is accessed through the Java Naming and Directory Interface (JNDI) context java:comp/env/jms.|3608104bd6ee41a1b0a1d9e4dac2048c
ping|message|The string 'ping' is assigned to a variable called command within the message.|3608104bd6ee41a1b0a1d9e4dac2048c
command|ping|The string 'ping' is assigned to a property named command.|3608104bd6ee41a1b0a1d9e4dac2048c
system.currenttimemillis()|publishtime|The current time in milliseconds is assigned to the publishTime property.|3608104bd6ee41a1b0a1d9e4dac2048c
java:comp/env/jms|tradestreamertopic|The TradeStreamerTopic is accessed through the JNDI context java:comp/env/jms.|3608104bd6ee41a1b0a1d9e4dac2048c
ping|message|The string 'ping' is assigned to a variable called command within the message.|3608104bd6ee41a1b0a1d9e4dac2048c
command|ping|The string 'ping' is assigned to a property named command.|3608104bd6ee41a1b0a1d9e4dac2048c
pingservlet2mdbtopic|tradestreamertopic|Exception handling in PingServlet2MDBTopic leads to an error while posting a message to TradeStreamerTopic through the topic.|d2e7ca538aad446fb1749c078b2a3e8b
pingservlet2mdbtopic|traderuntimeconfigs|PingServlet2MDBTopic is configured using trade runtime configs.|d2e7ca538aad446fb1749c078b2a3e8b
pingservlet2mdbtopic|web primitive|PingServlet2MDBTopic is a web primitive.|d2e7ca538aad446fb1749c078b2a3e8b
sample.daytrader7|daytraderee7web|The sample.daytrader7 project contains the daytrader-ee7-web module.|d2e7ca538aad446fb1749c078b2a3e8b
com|ibm|IBM Corporation owns the com domain.|d2e7ca538aad446fb1749c078b2a3e8b
java.util.date|java.lang.string|The initTime variable in PingServlet2MDBTopic is initialized with a String representation of a Date object.|d2e7ca538aad446fb1749c078b2a3e8b
servlets|webservlet|A Servlet is annotated with the @WebServlet annotation, which is a class in the javax.servlet.annotation package that provides server-side component configuration information. The WebServlet annotation can be used to define servlets and map them to URL patterns.|e5b94ae4304d4b2aaadca7da10465207
ejb|tradeslsbbean|TradeSLSBBean is a specific implementation of the Enterprise JavaBeans (EJB) component, which provides server-side business logic and data access. It's annotated with the @EJB annotation to indicate that it should be injected by the container.|e5b94ae4304d4b2aaadca7da10465207
entity container managed relationshiop|one to one|The Entity Container Managed Relationship (ECMR) is a way of managing relationships between entities using the Java Persistence API. In this case, we're dealing with a one-to-one relationship between entities.|e5b94ae4304d4b2aaadca7da10465207
session|tradeslsblocal|The Session bean is a stateless or stateful object that performs the business logic for an application. In this case, we're injecting the TradeSLSBLocal session bean into the Servlet.|e5b94ae4304d4b2aaadca7da10465207
entity ejb|trade.account|The Entity EJB is a Java class that represents a persistent entity. In this case, we're accessing the trade.Account entity through the Session bean.|e5b94ae4304d4b2aaadca7da10465207
cmr|one to one|The Composition or Containment Model Relationship (CMR) is a way of managing relationships between entities within an Entity Container. In this case, we're dealing with a one-to-one relationship between entities.|e5b94ae4304d4b2aaadca7da10465207
tradeslsbbean|com.ibm.websphere.samples.daytrader.ejb3.tradeslsblocal|is used in the context to retrieve orders for a user using an EJB 3.0 Entity CMR one to many relationship.|b61e862334644812820b9f19af08d3c2
ejb/tradeslsbbean!com.ibm.websphere.samples.daytrader.ejb3.tradeslsblocal|tradeconfig|is referenced to obtain the Trade SLSB bean and its local interface.|b61e862334644812820b9f19af08d3c2
collection<?> orderdatabeans|tradeslsblocal.getorders(userid)|represents the orders for a user returned by invoking the getOrders method of the Trade SLSB bean.|b61e862334644812820b9f19af08d3c2
userid|tradeconfig.rnduserid()|is generated randomly using the rndUserID method provided by the Trade Config class.|b61e862334644812820b9f19af08d3c2
iter|tradeconfig.getprimiterations()|represents the number of iterations specified in the getPrimIterations method of the Trade Config class.|b61e862334644812820b9f19af08d3c2
pingservlet2session2cmrone2one|web primitive|The class PingServlet2Session2CMROne2One is a web primitive that tests Servlet to Entity EJB path, as mentioned in the comments.|8998ce943c414cfeb1e902855b471010
tradeslsbbean|ejb|The class TradeSLSBBean is an EJB mentioned in the import statement for entity beans.|8998ce943c414cfeb1e902855b471010
httpservlet|servlet|The class HttpServlet is a Servlet as mentioned in the imports section.|8998ce943c414cfeb1e902855b471010
httpservletrequest|httpservlet|HttpServletRequest is an interface for accessing request-specific information, as seen in the method signature of init(ServletConfig config) in the HttpServlet class.|8998ce943c414cfeb1e902855b471010
httpservletresponse|httpservlet|HttpServletResponse is an interface for constructing HTTP responses, as seen in the method signature of init(ServletConfig config) in the HttpServlet class.|8998ce943c414cfeb1e902855b471010
pingservlet2session2entity|httpservlet|implements the HttpServlet interface, which is a core part of Java Servlets.|60587972769947aa83f741647d6d9fae
pingservlet2session2entity|webservlet|is an annotation used to register this servlet with the web container.|60587972769947aa83f741647d6d9fae
pingservlet2session2entity|httpservletresponse|is a class provided by Servlets to send HTTP responses back to clients.|60587972769947aa83f741647d6d9fae
pingservlet2session2entity|tradeslsbbean|is an EJB3 (Enterprise JavaBeans) stateless session bean, which encapsulates business logic.|60587972769947aa83f741647d6d9fae
pingservlet2session2entity|tradeconfig|is a utility class used to generate a random stock symbol.|60587972769947aa83f741647d6d9fae
quotedatabean|entity ejb representing data in a database.|This servlet looks up the stocks price using this Entity EJB.|60587972769947aa83f741647d6d9fae
pingservlet2session2entity|common path|tests the common path of a Servlet calling a Session EJB which in turn calls an Entity EJB.|7f607128fed84dc79e8efb592a7ca7bf
tradeconfig|getprimiterations|is called to get the number of iterations for generating random symbols.|7f607128fed84dc79e8efb592a7ca7bf
tradeconfig|rndsymbol|is called to generate a random symbol.|7f607128fed84dc79e8efb592a7ca7bf
tradeslsblocal|getquote|is called with the generated symbol to instantiate the Quote Entity Bean and return a QuoteObject.|7f607128fed84dc79e8efb592a7ca7bf
symbol|quotedata|is passed as an argument to getQuote to retrieve quote information for the given symbol.|7f607128fed84dc79e8efb592a7ca7bf
tradeslsbbean|com.ibm.websphere.samples.daytrader.ejb3.tradeslsblocal|is an implementation of the Trade SL Session Bean (SLSB) interface, which is used to perform trade operations. It is specified using the TradeSLSBBean interface and implemented as a session bean in WebSphere Application Server's EJB container.|5bf33e92bfb24e35af008e7df3217456
ejb|tradeslsbbean!com.ibm.websphere.samples.daytrader.ejb3.tradeslsblocal|specifies the JNDI name for accessing the TradeSLSBBean object, where '!' separates the interface name from the implementation class name.|5bf33e92bfb24e35af008e7df3217456
dopost|httpservletrequest|is a method in the HttpServlet interface that is invoked when an HTTP POST request is received by this servlet. It forwards the request to the doGet() method.|5bf33e92bfb24e35af008e7df3217456
doget|httpservletrequest|is a method in the HttpServlet interface that is invoked when an HTTP GET or HEAD request is received by this servlet.|5bf33e92bfb24e35af008e7df3217456
req|httpservletrequest|refers to the current HTTP request being processed by a servlet. It allows accessing various details of the request, such as query string parameters, headers, and cookies.|5bf33e92bfb24e35af008e7df3217456
res|httpservletresponse|refers to the HTTP response that is sent back to the client after processing the request. It allows configuring various details of the response, such as status codes, headers, and output streams.|5bf33e92bfb24e35af008e7df3217456
symbol|string|is a variable that holds the stock symbol being traded. It is initialized with a randomly generated value using the TradeConfig.rndSymbol() method.|5bf33e92bfb24e35af008e7df3217456
quotedata|quotedatabean|is an object of the QuoteDataBean class, which represents the trade data for a given stock symbol. It is obtained using the tradeSLSBLocal.getQuote() method.|5bf33e92bfb24e35af008e7df3217456
quotedata|httpservletrequest|is set as an attribute of the HTTP request using the req.setAttribute() method, which allows passing data between servlets and JSP pages.|5bf33e92bfb24e35af008e7df3217456
findquote|quoteentitybean|is a method in the QuoteEntityBean class that is used to retrieve the trade data from the database. It instantiates the Quote Entity Bean (EJB) object and returns a QuoteObject containing the required information.|5bf33e92bfb24e35af008e7df3217456
getservletconfig|httpservlet|is a method in the HttpServlet interface that is invoked to obtain a reference to the ServletConfig object, which provides access to initialization parameters and context attributes of this servlet.|5bf33e92bfb24e35af008e7df3217456
getservletcontext|servletconfig|is a method in the ServletConfig interface that is invoked to obtain a reference to the ServletContext object, which provides access to the application's shared resources and configuration details.|5bf33e92bfb24e35af008e7df3217456
inittime|long|is set as an attribute of the HTTP request using the req.setAttribute() method, which allows passing data between servlets and JSP pages. It is used to measure the initialization time of the application.|5bf33e92bfb24e35af008e7df3217456
hitcount|int|is incremented in a loop that executes TradeConfig.getPrimIterations() times, where 'i' is the iteration number. It is used to simulate multiple hits to the application.|5bf33e92bfb24e35af008e7df3217456
ctx|servletcontext|is set as an attribute of the HTTP request using the req.setAttribute() method, which allows passing data between servlets and JSP pages. It is used to access the ServletContext object from within a JSP page.|5bf33e92bfb24e35af008e7df3217456
quotedataprimitive.jsp|string|is a resource name that specifies the location of a JSP (JavaServer Pages) file, which is used to display the trade data in a user-friendly format.|5bf33e92bfb24e35af008e7df3217456
web primitive|servlet|web primitive refers to Servlet, which is a web component that handles HTTP requests.|d20ca879b7f246c8a1de681811ac4568
web primitive|session|web primitive can be associated with Session, as sessions provide client-specific data storage between server requests. Web primitives like Servlets and JSPs are often used to manage sessions.|d20ca879b7f246c8a1de681811ac4568
web primitive|entity ejb|web primitive can be related to Entity EJB, as web primitives like Servlets and JSPs are often used to interact with entity beans.|d20ca879b7f246c8a1de681811ac4568
web primitive|jsp path|web primitive is associated with JSP paths, as web components like Servlets and JSPs reside in specific paths within the web application.|d20ca879b7f246c8a1de681811ac4568
pingservlet2session2entitycollection|java|is a programming language used to write the Java code in this file.|24883702a44646fb8a7f7506163da998
pingservlet2session2entitycollection|com.ibm.websphere.samples.daytrader.web.prims.ejb3|is a package containing this Java class.|24883702a44646fb8a7f7506163da998
pingservlet2session2entitycollection|javax.servlet|implements the Servlet interface used by this Java class.|24883702a44646fb8a7f7506163da998
pingservlet2session2entitycollection|annotation.webservlet|is used to register this Java class as a servlet in web.xml file.|24883702a44646fb8a7f7506163da998
tradeslsblocal|tradeslsbbean|is the local interface for accessing tradeSLSBBean EJB object.|24883702a44646fb8a7f7506163da998
log|java.util|is a utility class used to log errors and messages in this Java code.|24883702a44646fb8a7f7506163da998
initialcontext|javax.naming|is used to lookup the tradeSLSBLocal object from JNDI.|24883702a44646fb8a7f7506163da998
ejb|java:comp/env|is a naming context for accessing environment properties and EJB objects in this Java code.|24883702a44646fb8a7f7506163da998
pingservlet2session2entitycollection|servlet|PingServlet2Session2EntityCollection is a subclass of HttpServlet, which makes it a type of servlet in Java Servlets.|d958e1276b984364ad346865bf5350f7
servlet|servlet component|A servlet is a component that processes requests from clients and generates responses to those requests.|d958e1276b984364ad346865bf5350f7
tradeslsbbean|ejb|TradeSLSBBean is an EJB (Enterprise JavaBeans) component that can be invoked remotely by clients and servers.|d958e1276b984364ad346865bf5350f7
ejb/tradeslsbbean!com.ibm.websphere.samples.daytrader.ejb3.tradeslsblocal|ejb lookup string|This is a JNDI (Java Naming and Directory Interface) lookup string for accessing the TradeSLSBBean component.|d958e1276b984364ad346865bf5350f7
daytrader.ee7|application context root|This is the application context root for accessing resources within the daytrader EAR (Enterprise ARchive) file.|d958e1276b984364ad346865bf5350f7
daytrader|ear filename|This is the name of the EAR (Enterprise ARchive) file containing the DayTrader sample application.|d958e1276b984364ad346865bf5350f7
pingservlet2session2entitycollection|servlet calling a session ejb|PingServlet2Session2EntityCollection tests the common path of a Servlet calling a Session EJB|f575764c3c2848bfbdad42f4989b3d35
pingservlet2session2entitycollection|session ejb|which in turn calls a Session EJB|f575764c3c2848bfbdad42f4989b3d35
tradeconfig.getprimiterations()|int iter = tradeconfig.getprimiterations();||f575764c3c2848bfbdad42f4989b3d35
userid|userid = tradeconfig.rnduserid();||f575764c3c2848bfbdad42f4989b3d35
tradeslsblocal|tradeslsbbean!com.ibm.websphere.samples.daytrader.ejb3.tradeslsblocal||f575764c3c2848bfbdad42f4989b3d35
holdingdatabeans|collection<?> holdingdatabeans = null;||f575764c3c2848bfbdad42f4989b3d35
quoteobject|holdingdata holdingquotes = new holdingdata(userid, quoteobject);||f575764c3c2848bfbdad42f4989b3d35
quoteentitybean|tradeslsblocal.create(quote);||f575764c3c2848bfbdad42f4989b3d35
quoteobject|holdingdata holdingquotes = new holdingdata(userid, quoteobject);||f575764c3c2848bfbdad42f4989b3d35
tradeconfig|static class tradeconfig||f575764c3c2848bfbdad42f4989b3d35
rnduserid()|userid = tradeconfig.rnduserid();||f575764c3c2848bfbdad42f4989b3d35
getholdings()|holdingdatabeans = tradeslsblocal.getholdings(userid);||f575764c3c2848bfbdad42f4989b3d35
inittime|output|The variable 'output' is being assigned the value of 'initTime'.|1ab73946b62041ef8dd6bf0cfe5546dd
hitcount|output|The variable 'output' is being concatenated with the value of 'hitCount' using '<BR>' as a separator.|1ab73946b62041ef8dd6bf0cfe5546dd
userid|output|The variable 'output' is being concatenated with the value of 'userID' using '<HR>User: ' as a prefix and ' is currently holding ' as a suffix.|1ab73946b62041ef8dd6bf0cfe5546dd
holdingdatabeans|output|Each element in the 'holdingDataBeans' collection is being concatenated with '<BR>' and appended to the 'output' variable.|1ab73946b62041ef8dd6bf0cfe5546dd
holdingdatabean|holdingdatabeans|The 'holdingDataBeans' collection contains elements of type 'HoldingDataBean'.|1ab73946b62041ef8dd6bf0cfe5546dd
out.println(output.tostring())|try block|The variable 'output' is being printed to the output stream 'out' using 'println()'.|1ab73946b62041ef8dd6bf0cfe5546dd
node_1|node_2|edge|chunk_id
pingservlet2sessionlocal|httpservlet|is a subclass of|b38f15778ed34a08b769544d08209195
daytrader.ejb3.tradeslsblocal|trade.tradeslsbbean|aliased as in Java Naming and Directory Interface (JNDI)|b38f15778ed34a08b769544d08209195
daytrader.ejb3.tradeslsblocal|com.ibm.websphere.samples.daytrader.ejb3.tradeslsblocal|is the same class as|b38f15778ed34a08b769544d08209195
daytrader.ejb3.tradeslsblocal|com.ibm.websphere.samples.daytrader.ejb3.tradeslsblocalbean|is the same class as (bean-managed persistence)|b38f15778ed34a08b769544d08209195
daytrader.util.log|com.ibm.websphere.samples.daytrader.ejb3.tradeslsblocal|is used by|b38f15778ed34a08b769544d08209195
daytrader.util.tradeconfig|pingservlet2sessionlocal|is accessed by|b38f15778ed34a08b769544d08209195
javax.servlet.http.httpservletrequest|doget(httpservletrequest, httpservletresponse)|is the argument for|b38f15778ed34a08b769544d08209195
javax.servlet.http.httpservletrequest|dopost(httpservletrequest, httpservletresponse)|is the argument for|b38f15778ed34a08b769544d08209195
com.ibm.websphere.samples.daytrader.ejb3.tradeslsblocal|calculateinvestmentreturn|is invoked by|b38f15778ed34a08b769544d08209195
com.ibm.websphere.samples.daytrader.ee7.pingservlet2sessionlocal|javax.naming.initialcontext|obtains a reference to|b38f15778ed34a08b769544d08209195
servlet|http request handler|A Servlet is a Java component that processes HTTP requests and generates HTTP responses. It is used to extend the functionality of a web server by running Java code.|94de848d2e624162aa8b500ceaf327c0
webservlet annotation|java annotation for registering servlets|The @WebServlet annotation in Java Servlet API is used to register a servlet with the web application.|94de848d2e624162aa8b500ceaf327c0
servlet mapping|url path for servlet handling|Each Servlet has a specific URL path or mapping that identifies which requests should be handled by that Servlet.|94de848d2e624162aa8b500ceaf327c0
ejb3|enterprise javabeans|EJB3 is the latest version of Enterprise JavaBeans (EJB), which is a component-based architecture for enterprise applications.|94de848d2e624162aa8b500ceaf327c0
remote interface|client-side interface to ejb methods|In EJB3, remote interfaces define the client-side view of a session bean or entity bean. They allow clients to access session beans and entity beans remotely over a network.|94de848d2e624162aa8b500ceaf327c0
tradeslsbremote|remote interface for tradeslsbbean|TradeSLSBRemote is the remote interface for the TradeSessionBean (TradeSLSBBean) in our context.|94de848d2e624162aa8b500ceaf327c0
stateless session ejb|ejb component with stateful interactions|A Stateless Session Bean is a server-side component that manages conversations between clients and other components in an application.|94de848d2e624162aa8b500ceaf327c0
calculateinvestmentreturn method|method for calculating investment return|The calculateInvestmentReturn() method is defined in the TradeSessionBean (TradeSLSBBean) and is used to calculate the investment return based on three random numbers.|94de848d2e624162aa8b500ceaf327c0
tradeconfig class|class for configuring trade application|The TradeConfig class in our context is used to set configuration parameters for the TradeApplication.|94de848d2e624162aa8b500ceaf327c0
log class|utility class for logging messages|The Log class is a utility class that provides logging functionality in our context.|94de848d2e624162aa8b500ceaf327c0
httpservletrequest|httpservletresponse|The function doPost receives an HttpServletRequest object and returns the response in an HttpServletResponse object.|2e4d5f50e7de41398eab2577a8b24405
doget|dopost|Both functions are overridden methods in this Servlet class.|2e4d5f50e7de41398eab2577a8b24405
httpservletrequest|"res.setcontenttype(""text/html"")"|The request object is used to set the content type for the response.|2e4d5f50e7de41398eab2577a8b24405
java.io.printwriter|res.getwriter()|The response writer is obtained from the response object.|2e4d5f50e7de41398eab2577a8b24405
stringbuffer|output = new stringbuffer(100)|A string buffer is used to concatenate the HTML output instead of using concatenation of Strings.|2e4d5f50e7de41398eab2577a8b24405
math.random() * 1000000|double rnd1 = math.random() * 1000000|Two random numbers are generated to simulate investment and initial value.|2e4d5f50e7de41398eab2577a8b24405
math.random() * 1000000|double rnd2 = math.random() * 1000000|Two random numbers are generated to simulate investment and initial value.|2e4d5f50e7de41398eab2577a8b24405
tradeconfig.getprimiterations()|int iter = tradeconfig.getprimiterations()|The number of iterations for the simulation is obtained from a configuration class.|2e4d5f50e7de41398eab2577a8b24405
tradeslsbremote|double increase = tradeslsbremote.investmentreturn(rnd1, rnd2)|A remote session bean named tradeSLSB is invoked to perform the investment calculation.|2e4d5f50e7de41398eab2577a8b24405
exception calling trade.investmentreturn |tradeslsbremote|In the method init, an exception is thrown while trying to access tradeSLSBRemote when it has not been injected through dependency injection. This exception is caused by a call to trade.investmentReturn within the context of this method.|99a00bdf049f4c20855f85faaa32c11b
pingservlet2session|tradeslsbremote|The method init is called on an instance of PingServlet2Session, and within this method, tradeSLSBRemote is accessed through dependency injection. This indicates a potential relationship between these two concepts.|99a00bdf049f4c20855f85faaa32c11b
inittime|hitcount|Both initTime and hitCount are initialized within the method init of PingServlet2Session, suggesting a possible connection between them in this context.|99a00bdf049f4c20855f85faaa32c11b
tradeslsbremote|log|The variable 'tradeSLSBRemote' is assigned a value when it is null, and the error message 'PingServlet2Session:init - Injection of tradeSLSBRemote failed - performing JNDI lookup!' is logged using the Log class.|0c46efaccbbd456781de092e01ebae89
try|exception|The keyword 'try' introduces a block of code to handle exceptions, and the exception variable 'ex' is declared inside this block.|0c46efaccbbd456781de092e01ebae89
context|initialcontext|The object 'context' is instantiated as an InitialContext, and this operation may throw an Exception.|0c46efaccbbd456781de092e01ebae89
tradeslsbremote|context|The variable 'tradeSLSBRemote' is assigned a value by performing a JNDI lookup using the 'context' object, and this operation may throw an Exception.|0c46efaccbbd456781de092e01ebae89
log|exception|The error message 'Lookup of tradeSLSBRemote failed!!!' is logged using the Log class, and it may be followed by a stack trace printed to the console.|0c46efaccbbd456781de092e01ebae89
httpservletconfig|httpservlet|The ServletConfig object 'config' is assigned to the field 'config' of the HttpServlet instance, and this operation may throw a ServletException.|0c46efaccbbd456781de092e01ebae89
package|import|The package 'com.ibm.websphere.samples.daytrader.web.prims.ejb3' is imported into the current class, and other classes or interfaces may also be imported using the 'import' statement.|0c46efaccbbd456781de092e01ebae89
ejb|servletconfig|The field 'servletConfig' of type ServletConfig is annotated with the @WebServlet annotation, and a value for the EJB variable 'tradeSLSBRemote' is retrieved using this configuration object.|0c46efaccbbd456781de092e01ebae89
httpservletrequest|httpservlet|The method 'getServletConfig()' of type ServletConfig is invoked on the HttpServletRequest object, and it may return a null value if the request does not have a configured servlet.|0c46efaccbbd456781de092e01ebae89
httpservletrequest|ioexception|The method 'setContentLength(int)' of type HttpServletRequest is invoked to set the length of the content in bytes, and it may throw an IOException if the request does not have a content body.|0c46efaccbbd456781de092e01ebae89
httpservletrequest|httpservlet|The method 'setCharacterEncoding(String)' of type HttpServletRequest is invoked to set the character encoding for the request, and it may throw an UnsupportedEncodingException if the specified encoding is not supported by the servlet container.|0c46efaccbbd456781de092e01ebae89
httpservlet|httpservletrequest|The HttpServlet instance 'this' is initialized with the ServletConfig object and the HttpServletRequest object, and it may throw a ServletException if any of these arguments are null.|0c46efaccbbd456781de092e01ebae89
httpservlet|servletexception|The constructor for the HttpServlet class is invoked to initialize an instance of the Servlet class, and it may throw a ServletException if any initialization errors occur.|0c46efaccbbd456781de092e01ebae89
two phase ping|servlet calling a session ejb|tests the path of a Servlet calling a Session EJB|21075fc4a5294d98b3c3028dda40bd0d
two phase ping|session ejb|which in turn calls an Entity EJB to read a DB row (quote)|21075fc4a5294d98b3c3028dda40bd0d
quoteobject|quote entity bean|instantiated by findQuote|21075fc4a5294d98b3c3028dda40bd0d
pingservlet2twophase|tradeconfig|getPrimIterations(); and tradeSLSBLocal.pingTwoPhase(symbol)|21075fc4a5294d98b3c3028dda40bd0d
pingservlet2twophase|log|"catch (Exception ne) { Log.error(ne, ""PingServlet2TwoPhase.goGet(...): exception getting QuoteData through Trade""); throw ne; }"|21075fc4a5294d98b3c3028dda40bd0d
quoteobject|quotedata|returned by getQuote|21075fc4a5294d98b3c3028dda40bd0d
jms queue|tradebrokerqueue|sent a message to TradeBrokerQueue JMS queue|21075fc4a5294d98b3c3028dda40bd0d
exception|general exception caught|caught in the doGet method of PingServlet2TwoPhase class. General Exception caught string is being passed to sendError method for HTTP status code 500.|de86bd91f8d045d580a9ee5a5b56004b
actiondecoder|com.ibm.websphere.samples.daytrader.web.websocket|is a class in the com.ibm.websphere.samples.daytrader.web.websocket package.|de86bd91f8d045d580a9ee5a5b56004b
actiondecoder|text type decoder|ActionDecoder is coded to be a Text type decoder expecting JSON format.|cc6af2b9a8594c748c1e220facd5f219
json format|incoming messages|ActionDecoder expecting JSON format for incoming messages.|cc6af2b9a8594c748c1e220facd5f219
actionmessage|object of type string|ActionMessage is decoded into object of type String in the decode method.|cc6af2b9a8594c748c1e220facd5f219
endpointconfig|init method|EndpointConfig init method is called during initialization.|cc6af2b9a8594c748c1e220facd5f219
java|programming language|Java is a popular programming language used for developing various applications including web applications. In this context, Java is being used to implement a specific feature in the Daytrader application.|6d90a101db584f87800bb91ad8d82c67
json|data interchange format|JSON (JavaScript Object Notation) is a widely-used data interchange format that allows for the easy exchange of data between various systems. In this context, JSON is being used to parse and manipulate data.|6d90a101db584f87800bb91ad8d82c67
websocket|communication protocol|WebSocket is a communication protocol that allows for bidirectional, real-time communication between a client and a server over a single TCP connection. In this context, WebSocket is being used as part of the Daytrader application's web interface.|6d90a101db584f87800bb91ad8d82c67
daytrader|stock trading simulation application|Daytrader is a stock trading simulation application designed to provide users with a realistic and educational trading experience. In this context, the Daytrader application is being implemented in WebSphere.|6d90a101db584f87800bb91ad8d82c67
websphere|application server|WebSphere is an IBM-provided application server used for deploying and managing Java-based web applications. In this context, WebSphere is being used to host the Daytrader application.|6d90a101db584f87800bb91ad8d82c67
apache license|open source software licensing framework|The Apache License is an open source software licensing framework that provides users with a wide range of freedoms and permissions when it comes to using and distributing software.|6d90a101db584f87800bb91ad8d82c67
licensed under the apache license|software distribution term|In this context, the Daytrader application is being distributed under the terms of the Apache License, providing users with a wide range of freedoms and permissions when it comes to using and distributing the software.|6d90a101db584f87800bb91ad8d82c67
log|logger utility class|In this context, Log is being used as part of an error handling mechanism for the Daytrader application. Log provides a simple and efficient way to manage logging functionality.|6d90a101db584f87800bb91ad8d82c67
actionmessage|dodecoding|Method 'doDecoding' of class 'ActionMessage'|a4c44cb00d114fd58711039c9b409b06
string|jsontext|Parameter 'jsonText' of method 'doDecoding' of class 'ActionMessage'|a4c44cb00d114fd58711039c9b409b06
jsonparser|parser|Variable 'parser' used in try-catch block inside method 'doDecoding' of class 'ActionMessage'|a4c44cb00d114fd58711039c9b409b06
stringreader|new stringreader(jsontext)|Parameter 'jsonText' passed to constructor 'StringReader' used in try-catch block inside method 'doDecoding' of class 'ActionMessage'|a4c44cb00d114fd58711039c9b409b06
log|log.error()|Method 'error' of class 'Log'|a4c44cb00d114fd58711039c9b409b06
exception|e|Variable 'e' used in try-catch block inside method 'doDecoding' of class 'ActionMessage'|a4c44cb00d114fd58711039c9b409b06
log|log.trace()|Method 'trace' of class 'Log'|a4c44cb00d114fd58711039c9b409b06
string|decodedaction|Field 'decodedAction' of class 'ActionMessage'|a4c44cb00d114fd58711039c9b409b06
jsondecoder|jsonmessage|Class JsonDecoder is used to decode JSON messages, and the decoded message object is stored in class JsonMessage.|731e6e4b879449a28e177e04587562ee
jsonobject|jsonmessage|The decoded JSON message is extracted from a JSONObject using the Json.createReader() method.|731e6e4b879449a28e177e04587562ee
jsonencoder|jsonmessage|JsonEncoder is a class that implements Encoder.Text interface for encoding JsonMessage objects in text format and sending them over WebSocket connections.|76635865179c472b9feddd7f00a13487
jsonobject|jsonmessage|JsonMessage object contains a key-value pair extracted from a JSON message using the Json.createReader() method in Java's JSON (JavaScript Object Notation) processing library.|76635865179c472b9feddd7f00a13487
com.ibm.websphere.samples.daytrader.web|jsonencoder|JsonEncoder class is located in the com.ibm.websphere.samples.daytrader.web package within the daytrader-ee7-web project.|76635865179c472b9feddd7f00a13487
com.ibm.websphere.samples.daytrader|jsonencoder|JsonEncoder class is a part of the com.ibm.websphere.samples.daytrader project, which provides sample applications for IBM WebSphere Application Server (WAS) Liberty profiles.|76635865179c472b9feddd7f00a13487
java's json processing library|jsonobject|The Json.createReader() method used to extract key-value pairs from a JSON message is a part of Java's built-in JSON (JavaScript Object Notation) processing library.|76635865179c472b9feddd7f00a13487
websocket connections|jsonencoder|JsonEncoder class is used to encode and send JsonMessage objects over WebSocket connections, which are bidirectional, full-duplex channels of communication between clients and servers over the Internet.|76635865179c472b9feddd7f00a13487
jsonmessage|com.ibm.websphere.samples.daytrader.web.websocket.jsonmessage|is a type of|49e1b4025c6649b2865bc5d90ad19de9
key|jsonmessage|has a field named|49e1b4025c6649b2865bc5d90ad19de9
value|jsonmessage|has a field named|49e1b4025c6649b2865bc5d90ad19de9
encodeexception|com.ibm.websphere.samples.daytrader.web.websocket.jsonmessage|can throw an exception of type|49e1b4025c6649b2865bc5d90ad19de9
endpointconfig|endpointconfig|is a parameter of method init in class com.ibm.websphere.samples.daytrader.web.websocket.JsonWebSocketImpl|49e1b4025c6649b2865bc5d90ad19de9
com.ibm.websphere.samples.daytrader.web.websocket|com.ibm.websphere.samples.daytrader.web.websocket.jsonwebsocketimpl|is a package containing class com.ibm.websphere.samples.daytrader.web.websocket.JsonWebSocketImpl|49e1b4025c6649b2865bc5d90ad19de9
com.ibm.websphere.samples.daytrader|com.ibm.websphere.samples.daytrader.web.websocket|is a package containing package com.ibm.websphere.samples.daytrader.web.websocket|49e1b4025c6649b2865bc5d90ad19de9
com.ibm.websphere.samples.daytrader|com.ibm.websphere.samples.daytrader.web|is a package containing package com.ibm.websphere.samples.daytrader.web.websocket|49e1b4025c6649b2865bc5d90ad19de9
com.ibm.websphere.samples.daytrader|com.ibm.websphere.samples.daytrader|is a package containing package com.ibm.websphere.samples.daytrader.web|49e1b4025c6649b2865bc5d90ad19de9
com.ibm.websphere.samples.daytrader|com.ibm.websphere.samples.daytrader.ee7|is a package containing package com.ibm.websphere.samples.daytrader.web|49e1b4025c6649b2865bc5d90ad19de9
com.ibm.websphere.samples.daytrader|com.ibm.websphere.samples.daytrader|is a package containing package com.ibm.websphere.samples.daytrader.ee7|49e1b4025c6649b2865bc5d90ad19de9
com.ibm.websphere.samples.daytrader|com.ibm.websphere.samples|is a package containing package com.ibm.websphere.samples.daytrader|49e1b4025c6649b2865bc5d90ad19de9
com.ibm.websphere.samples|com.ibm.websphere.samples|is a package containing package com.ibm.websphere.samples.daytrader|49e1b4025c6649b2865bc5d90ad19de9
com.ibm.websphere|com.ibm.websphere.samples|is a package containing package com.ibm.websphere.samples|49e1b4025c6649b2865bc5d90ad19de9
com.ibm|com.ibm.websphere|is a package containing package com.ibm.websphere|49e1b4025c6649b2865bc5d90ad19de9
marketsummarywebsocket|class|MarketSummaryWebSocket is a class in the provided context.|66778c97a26e49d48d2fd7861d5401c0
getvalue|method|getValue is a method of the MarketSummaryWebSocket class as per the given context.|66778c97a26e49d48d2fd7861d5401c0
setvalue|method|setValue is a method of the MarketSummaryWebSocket class as per the given context.|66778c97a26e49d48d2fd7861d5401c0
value|field|value is a field of the MarketSummaryWebSocket class in the provided context.|66778c97a26e49d48d2fd7861d5401c0
countdownlatch|class|CountDownLatch is a class used in the given context as seen from Line 38.|66778c97a26e49d48d2fd7861d5401c0
closereason|interface|CloseReason is an interface used in the provided context as observed from Line 56.|66778c97a26e49d48d2fd7861d5401c0
endpointconfig|interface|EndpointConfig is an interface used in the given context as seen from Line 73.|66778c97a26e49d48d2fd7861d5401c0
jsonobjectbuilder|class|JsonObjectBuilder is a class utilized in the provided context as observed from Line 94.|66778c97a26e49d48d2fd7861d5401c0
session|interface|Session is an interface used in the given context as seen from Line 115.|66778c97a26e49d48d2fd7861d5401c0
message|interface|Message is an interface utilized in the provided context as observed from Line 137.|66778c97a26e49d48d2fd7861d5401c0
jsonvalue|interface|JsonValue is an interface used in the given context as seen from Line 154.|66778c97a26e49d48d2fd7861d5401c0
iterable|interface|Iterable is an interface utilized in the provided context as observed from Line 173.|66778c97a26e49d48d2fd7861d5401c0
set|class|Set is a class used in the given context as seen from Line 194.|66778c97a26e49d48d2fd7861d5401c0
jsonobject|class|JsonObject is a class utilized in the provided context as observed from Line 213.|66778c97a26e49d48d2fd7861d5401c0
collections|class|Collections is a class used in the given context as seen from Line 234.|66778c97a26e49d48d2fd7861d5401c0
websocketendpoint|session|The WebSocketEndPoint class creates a Session object to communicate with the client.|c6d140bf119d49fc8943b30f7d78a797
websocketendpoint|endpointconfig|The WebSocketEndPoint annotation specifies the configuration object used by the server container.|c6d140bf119d49fc8943b30f7d78a797
marketsummarywebsocket|websocketendpoint|The MarketSummaryWebSocket class is a subclass of WebSocketEndPoint.|c6d140bf119d49fc8943b30f7d78a797
actiondecoder.class|serverendpoint|The ServerEndpoint annotation specifies the endpoint URI and optional configuration properties for the WebSocket Endpoint.|c6d140bf119d49fc8943b30f7d78a797
session|set<session>|The Set of active Sessions is synchronized by the sessions variable, which is a HashSet to minimize resource usage.|c6d140bf119d49fc8943b30f7d78a797
marketsummarywebsocket|sessions|The MarketSummaryWebSocket class stores the Set of active Sessions in the sessions variable, which is accessible from the onOpen() and sendMarketSummary() methods.|c6d140bf119d49fc8943b30f7d78a797
countdownlatch|latch|The CountDownLatch is used to synchronize the initialization of the WebSocketEndPoint class.|c6d140bf119d49fc8943b30f7d78a797
marketsummarywebsocket|latch|The MarketSummaryWebSocket class initializes a CountDownLatch object called latch, which is used to ensure that the onOpen() method is executed only once.|c6d140bf119d49fc8943b30f7d78a797
actionmessage|message|The ActionMessage class is used to encapsulate WebSocket messages and their associated content.|c6d140bf119d49fc8943b30f7d78a797
string|action|The String variable 'action' stores the decoded action value received from the client in the sendMarketSummary() method.|c6d140bf119d49fc8943b30f7d78a797
tradeaction|taction|The TradeAction class is used to represent a trade action, such as buy or sell, and contains relevant data.|c6d140bf119d49fc8943b30f7d78a797
tradeaction|taction|TradeAction is a variable of type TradeAction named tAction.|dd77d48ff6834995b0122d12a5464f48
action|null|The value of action is null.|dd77d48ff6834995b0122d12a5464f48
action|update|The value of action is update.|dd77d48ff6834995b0122d12a5464f48
tradeaction|maksummary|TradeAction has a method named getMarketSummary, which returns a JSON object called mkSummary.|dd77d48ff6834995b0122d12a5464f48
mksummary|null|No relationship found between mkSummary and null.|dd77d48ff6834995b0122d12a5464f48
currentsession|getasyncremote|The method getAsyncRemote is called on currentSession.|dd77d48ff6834995b0122d12a5464f48
recentstockchangelist|isempty|The boolean value of RecentStockChangeList being empty is checked.|dd77d48ff6834995b0122d12a5464f48
mksummary|currentsession.getasyncremote().sendtext(mksummary.tostring());|The JSON object mkSummary is sent as a text message to the current session.|dd77d48ff6834995b0122d12a5464f48
recentstockchangelist|stockchangesinjson|A JSON object containing recent stock changes is obtained from RecentStockChangeList using the method stockChangesInJSON.|dd77d48ff6834995b0122d12a5464f48
currentsession|.getasyncremote().sendtext(mergejsonobjects(mksummary,recentchangelist).tostring());|The merged JSON object is sent as a text message to the current session.|dd77d48ff6834995b0122d12a5464f48
log|dotrace|The boolean value of Log.doTrace() is checked.|dd77d48ff6834995b0122d12a5464f48
log|trace|The method trace() is called on Log with the message 'MarketSummaryWebSocket:sendMarketSummary -- sending -->' and the JSON object mkSummary as arguments.|dd77d48ff6834995b0122d12a5464f48
log|trace|The method trace() is called on Log with the message 'MarketSummaryWebSocket:onError -- session -->' and the session object currentSession as arguments.|dd77d48ff6834995b0122d12a5464f48
log|trace|The method trace() is called on Log with the message 'MarketSummaryWebSocket:onClose -- session -->' and the session object session as arguments.|dd77d48ff6834995b0122d12a5464f48
recentstockchangelist|addstockchange|A stock change is added to RecentStockChangeList using the method addStockChange.|dd77d48ff6834995b0122d12a5464f48
message|jmsmessage|The method onJMSMessage(@Observes @WebSocketJMSMessage Message message) is called with a JMS message as an argument named message.|dd77d48ff6834995b0122d12a5464f48
recentstockchangelist|stockchangesinjson|A JSON object containing recent stock changes is obtained from RecentStockChangeList using the method stockChangesInJSON.|dd77d48ff6834995b0122d12a5464f48
sessions|.remove(session);|The session named session is removed from a synchronized list of sessions called sessions.|dd77d48ff6834995b0122d12a5464f48
synchronized|(sessions)|A synchronized block is executed with the list of sessions called sessions as an argument.|dd77d48ff6834995b0122d12a5464f48
session|isopen|The boolean value of a session being open is checked.|dd77d48ff6834995b0122d12a5464f48
sessions|.getasyncremote().sendtext(stockchangejson.tostring());|The JSON object stockChangeJson is sent as a text message to all the sessions in the synchronized list of sessions called sessions.|dd77d48ff6834995b0122d12a5464f48
log|dotrace|The boolean value of Log.doTrace() is checked.|dd77d48ff6834995b0122d12a5464f48
synchronized|sessions|in this context, synchronized and sessions are related as they both appear inside a code block and synchronized is used to synchronize access to sessions|5c234770b3bd44a58f92ffb91624e0c1
session|isopen|session isOpen is a method or property that can be called on a Session object to check whether it is currently open or not|5c234770b3bd44a58f92ffb91624e0c1
session|getasyncremote|getAsyncRemote is a method of the Session class which returns an AsyncRemote instance that can be used to send messages asynchronously|5c234770b3bd44a58f92ffb91624e0c1
jsonobjectbuilder|jobjectbuilder|JsonObjectBuilder is a builder class for creating JSON objects, and jObjectBuilder is an object of this class used to merge two JSON objects in the context|5c234770b3bd44a58f92ffb91624e0c1
json|createobjectbuilder|Json.createObjectBuilder() method is used to create a JsonObjectBuilder instance, which is then used to build JSON objects|5c234770b3bd44a58f92ffb91624e0c1
mergejsonobjects|mergejsonobjects|mergeJsonObjects() is a method in the given context that takes two JSON objects and merges them using a JsonObjectBuilder instance|5c234770b3bd44a58f92ffb91624e0c1
recentstockchangelist|class|is a type of class that holds the last 5 stock changes, used by the MarketSummary WebSocket|0d56cd17aa4f407db531908855f91ee2
stockchanges|list|is an instance variable of type List, which is synchronized for thread safety in this class|0d56cd17aa4f407db531908855f91ee2
linkedlist|list implementation|is the specific type of List used to implement stockChanges, which allows efficient append and remove operations|0d56cd17aa4f407db531908855f91ee2
message|jms message object|is the type of object stored in stockChanges, representing a single stock change event|0d56cd17aa4f407db531908855f91ee2
collections|java utility class|is the source of the Collections.synchronizedList() method used to create and wrap the synchronized List for stockChanges, providing thread safety|0d56cd17aa4f407db531908855f91ee2
roundingmode|java enum type|is a constant value in the JsonObjectBuilder.add() method used to format BigDecimal values to two decimal places when converting JSON objects to String|0d56cd17aa4f407db531908855f91ee2
bigdecimal|java mathematical class|is the type of object passed as a parameter to the JsonObjectBuilder.add() method, representing financial data with decimal precision|0d56cd17aa4f407db531908855f91ee2
json|java library for json parsing and generation|is the source of the JsonObjectBuilder and JsonObject classes used to build and format JSON objects from Java data types in this class|0d56cd17aa4f407db531908855f91ee2
jsonobjectbuilder|java class for building json objects|is instantiated and used to convert a set of Java data types into a single JSON object, which can be further modified before being serialized as a String|0d56cd17aa4f407db531908855f91ee2
jsonobject|java class for representing json objects|is the resulting JSON object generated by calling JsonObjectBuilder.build() at the end of this class's constructor method|0d56cd17aa4f407db531908855f91ee2
iterator|java interface for traversing through a collection|is used to iterate through the Messages stored in stockChanges and convert them into JSON objects, which are added to the final JSON object|0d56cd17aa4f407db531908855f91ee2
string|java primitive data type for storing text strings|is used as a key to store and retrieve stock change events from within the JSON objects, identified by their corresponding message keys|0d56cd17aa4f407db531908855f91ee2
websocket|java api for bidirectional communication between clients and servers over http|is the context in which this class is being used, specifically within a WebSocket implementation to provide real-time market summary data|0d56cd17aa4f407db531908855f91ee2
com.ibm.websphere.samples.daytrader.web.websocket|java package containing the websocket implementation for daytrader samples|is the source of this class, which provides a list of recent stock changes used to update clients in real-time|0d56cd17aa4f407db531908855f91ee2
daytrader-ee7-web|java project containing websocket implementation for daytrader samples|is the source of the RecentStockChangeList class, which is part of a larger WebSocket implementation|0d56cd17aa4f407db531908855f91ee2
sample.daytrader7|java project containing websocket implementation for daytrader samples|is the source of the com.ibm.websphere.samples.daytrader.web.websocket package, which contains this RecentStockChangeList class|0d56cd17aa4f407db531908855f91ee2
/home/jerry|home directory for user jerry|is the location where the daytrader-ee7-web project is located, containing this RecentStockChangeList class|0d56cd17aa4f407db531908855f91ee2
com.ibm.websphere.samples.daytrader.web|java package for websocket implementation in daytrader samples|is the parent package of com.ibm.websphere.samples.daytrader.web.websocket, which contains this RecentStockChangeList class|0d56cd17aa4f407db531908855f91ee2
com.ibm.websphere.samples|java package for samples related to websphere application server|is the parent package of com.ibm.websphere.samples.daytrader.web, which contains both the daytrader-ee7-web and sample projects|0d56cd17aa4f407db531908855f91ee2
com.ibm|java package for ibm corporation|is the parent package of com.ibm.websphere.samples, which contains both daytrader-ee7-web and sample projects|0d56cd17aa4f407db531908855f91ee2
java|java programming language|is the source code used to implement this RecentStockChangeList class, as part of a larger WebSocket implementation|0d56cd17aa4f407db531908855f91ee2
change1_stock|symbol|In the RecentStockChangeList class, the stock for change number 1 is accessed using the 'getSymbol()' method which returns its string representation and is stored in a variable named 'symbol'. This variable is used as a key to access the corresponding price and change values.|f5d0c96ed50c452fa4978db34daf0673
change1_price|price|In the RecentStockChangeList class, the price for change number 1 is accessed using the 'getPrice()' method which returns its string representation and is stored in a variable named 'price'. This variable is used to calculate the change value.|f5d0c96ed50c452fa4978db34daf0673
change1_change|change1_price, change1_stock|In the RecentStockChangeList class, the change for change number 1 is calculated by subtracting the old price from the new price for the corresponding stock. The result is stored in a variable named 'change' and its string representation is returned as part of the JSON object.|f5d0c96ed50c452fa4978db34daf0673
change2_stock|symbol|In the RecentStockChangeList class, the stock for change number 2 is accessed using the 'getSymbol()' method which returns its string representation and is stored in a variable named 'symbol'. This variable is used as a key to access the corresponding price and change values.|f5d0c96ed50c452fa4978db34daf0673
change2_price|price|In the RecentStockChangeList class, the price for change number 2 is accessed using the 'getPrice()' method which returns its string representation and is stored in a variable named 'price'. This variable is used to calculate the change value.|f5d0c96ed50c452fa4978db34daf0673
change2_change|change2_price, change2_stock|In the RecentStockChangeList class, the change for change number 2 is calculated by subtracting the old price from the new price for the corresponding stock. The result is stored in a variable named 'change' and its string representation is returned as part of the JSON object.|f5d0c96ed50c452fa4978db34daf0673
change3_stock|symbol|In the RecentStockChangeList class, the stock for change number 3 is accessed using the 'getSymbol()' method which returns its string representation and is stored in a variable named 'symbol'. This variable is used as a key to access the corresponding price and change values.|f5d0c96ed50c452fa4978db34daf0673
change3_price|price|In the RecentStockChangeList class, the price for change number 3 is accessed using the 'getPrice()' method which returns its string representation and is stored in a variable named 'price'. This variable is used to calculate the change value.|f5d0c96ed50c452fa4978db34daf0673
change3_change|change3_price, change3_stock|In the RecentStockChangeList class, the change for change number 3 is calculated by subtracting the old price from the new price for the corresponding stock. The result is stored in a variable named 'change' and its string representation is returned as part of the JSON object.|f5d0c96ed50c452fa4978db34daf0673
change4_stock|symbol|In the RecentStockChangeList class, the stock for change number 4 is accessed using the 'getSymbol()' method which returns its string representation and is stored in a variable named 'symbol'. This variable is used as a key to access the corresponding price and change values.|f5d0c96ed50c452fa4978db34daf0673
change4_price|price|In the RecentStockChangeList class, the price for change number 4 is accessed using the 'getPrice()' method which returns its string representation and is stored in a variable named 'price'. This variable is used to calculate the change value.|f5d0c96ed50c452fa4978db34daf0673
change4_change|change4_price, change4_stock|In the RecentStockChangeList class, the change for change number 4 is calculated by subtracting the old price from the new price for the corresponding stock. The result is stored in a variable named 'change' and its string representation is returned as part of the JSON object.|f5d0c96ed50c452fa4978db34daf0673
change5_stock|symbol|In the RecentStockChangeList class, the stock for change number 5 is accessed using the 'getSymbol()' method which returns its string representation and is stored in a variable named 'symbol'. This variable is used as a key to access the corresponding price and change values.|f5d0c96ed50c452fa4978db34daf0673
change5_price|price|In the RecentStockChangeList class, the price for change number 5 is accessed using the 'getPrice()' method which returns its string representation and is stored in a variable named 'price'. This variable is used to calculate the change value.|f5d0c96ed50c452fa4978db34daf0673
change5_change|change5_price, change5_stock|In the RecentStockChangeList class, the change for change number 5 is calculated by subtracting the old price from the new price for the corresponding stock. The result is stored in a variable named 'change' and its string representation is returned as part of the JSON object.|f5d0c96ed50c452fa4978db34daf0673
