text|source|chunk_id
['/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/OrdersAlertFilter.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/TestServlet.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/TradeAppServlet.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/TradeBuildDB.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/TradeConfigServlet.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/TradeScenarioServlet.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/TradeServletAction.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/TradeWebContextListener.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/jsf/AccountDataJSF.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/jsf/ExternalContextProducer.java', '/home/jerry/projects/sample.daytrader7/daytrader-|data_input/daytrader/daytrader.txt|f21d7428c4664ade8324aee92bb59f29
ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/jsf/HoldingData.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/jsf/JSFLoginFilter.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/jsf/LoginValidator.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/jsf/MarketSummaryJSF.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/jsf/OrderData.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/jsf/OrderDataJSF.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/jsf/PortfolioJSF.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/jsf/QuoteData.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/jsf/QuoteJSF.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/jsf/TradeActionProducer.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/jsf/TradeAppJSF.java', '/home/jerry/projects/sample.daytrader7/daytrader-|data_input/daytrader/daytrader.txt|1bf14da7123a4002bd93831e3197c10b
ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/jsf/TradeConfigJSF.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/ExplicitGC.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingBean.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingCDIBean.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingCDIJSFBean.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingEJBIFace.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingEJBLocal.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingEJBLocalDecorator.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingInterceptor.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingInterceptorBinding.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingJDBCRead.java',|data_input/daytrader/daytrader.txt|ffccc1c075394fdf8b9b1f2be7e135a7
'/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingJDBCRead2JSP.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingJDBCWrite.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingJSONP.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingManagedExecutor.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingManagedThread.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingReentryServlet.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingServlet.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingServlet2DB.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingServlet2Include.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingServlet2IncludeRcv.java', '/home/jerry/projects/sample.daytrader7/daytrader-|data_input/daytrader/daytrader.txt|5ed8fb95e61d4b028224e317823ea54e
ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingServlet2JNDI.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingServlet2Jsp.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingServlet2PDF.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingServlet2Servlet.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingServlet2ServletRcv.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingServlet30Async.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingServlet31Async.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingServlet31AsyncRead.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingServletCDI.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingServletCDIBeanManagerViaCDICurrent.java', '/home/jerry/projects/sample.daytrader7/daytrader-|data_input/daytrader/daytrader.txt|4474977af7974b63aaf6c2b01529b3d0
ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingServletCDIBeanManagerViaJNDI.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingServletLargeContentLength.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingServletSetContentLength.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingServletWriter.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingSession1.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingSession2.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingSession3.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingSession3Object.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingUpgradeServlet.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingWebSocketBinary.java', '/home/jerry/projects/sample.daytrader7/daytrader-|data_input/daytrader/daytrader.txt|e5e59d5956a04b85985248aac54ffc16
ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingWebSocketJson.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingWebSocketTextAsync.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingWebSocketTextSync.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/ejb3/PingServlet2Entity.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/ejb3/PingServlet2MDBQueue.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/ejb3/PingServlet2MDBTopic.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/ejb3/PingServlet2Session2CMROne2Many.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/ejb3/PingServlet2Session2CMROne2One.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/ejb3/PingServlet2Session2Entity.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/ejb3/PingServlet2Session2Entity2JSP.java',|data_input/daytrader/daytrader.txt|ae8149e1905244eb903a98aa0676f3b5
'/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/ejb3/PingServlet2Session2EntityCollection.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/ejb3/PingServlet2SessionLocal.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/ejb3/PingServlet2SessionRemote.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/ejb3/PingServlet2TwoPhase.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/websocket/ActionDecoder.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/websocket/ActionMessage.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/websocket/JsonDecoder.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/websocket/JsonEncoder.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/websocket/JsonMessage.java', '/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/websocket/MarketSummaryWebSocket.java',|data_input/daytrader/daytrader.txt|1fe1d074b0ec4be28f2d1bde6f4cd07c
"'/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/websocket/RecentStockChangeList.java'] Found 83 source code files: /home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/OrdersAlertFilter.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web;

import java.io.IOException;

import java.util.Collection;

import javax.servlet.Filter;

import javax.servlet.FilterChain;

import javax.servlet.FilterConfig;

import javax.servlet.ServletException;

import javax.servlet.ServletRequest;

import javax.servlet.ServletResponse;

import javax.servlet.annotation.WebFilter;

import javax.servlet.http.HttpServletRequest;

import com.ibm.websphere.samples.daytrader.TradeAction;

import com.ibm.websphere.samples.daytrader.TradeServices;

import com.ibm.websphere.samples.daytrader.util.Log;"|data_input/daytrader/daytrader.txt|815cc6d5673a43a294126ec254331274
"import com.ibm.websphere.samples.daytrader.TradeServices;

import com.ibm.websphere.samples.daytrader.util.Log;

import com.ibm.websphere.samples.daytrader.util.TradeConfig;

@WebFilter(filterName = ""OrdersAlertFilter"", urlPatterns = ""/app"") public class OrdersAlertFilter implements Filter {

/*

Constructor for CompletedOrdersAlertFilter

/

public OrdersAlertFilter() {

super();

}

/** * @see Filter#init(FilterConfig) */ private FilterConfig filterConfig = null;

@Override public void init(FilterConfig filterConfig) throws ServletException { this.filterConfig = filterConfig; }

/** * @see Filter#doFilter(ServletRequest, ServletResponse, FilterChain) */ @Override public void doFilter(ServletRequest req, ServletResponse resp, FilterChain chain) throws IOException, ServletException { if (filterConfig == null) { return; }

if (TradeConfig.getDisplayOrderAlerts() == true) {

try { String action = req.getParameter(""action""); if (action != null) { action = action.trim(); if ((action.length() > 0) && (!action.equals(""logout""))) { String userID; if (action.equals(""login"")) { userID = req.getParameter(""uid""); } else { userID = (String) ((HttpServletRequest) req).getSession().getAttribute(""uidBean""); }"|data_input/daytrader/daytrader.txt|1148bd3e382647e4973086f11b2db576
"if ((userID != null) && (userID.trim().length() > 0)) { TradeServices tAction = null; tAction = new TradeAction(); Collection<?> closedOrders = tAction.getClosedOrders(userID); if ((closedOrders != null) && (closedOrders.size() > 0)) { req.setAttribute(""closedOrders"", closedOrders); } if (Log.doTrace()) { Log.printCollection(""OrderAlertFilter: userID="" + userID + "" closedOrders="", closedOrders); } } } } } catch (Exception e) { Log.error(e, ""OrdersAlertFilter - Error checking for closedOrders""); } }

chain.doFilter(req, resp/

wrapper

/);

}

/*

@see Filter#destroy()

/

@Override

public void destroy() {

this.filterConfig = null;

}

}

/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/TestServlet.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web;

import java.io.IOException;

import java.math.BigDecimal;"|data_input/daytrader/daytrader.txt|424bf5706d4d4504bbb4b88d202e1eb4
"import java.io.IOException;

import java.math.BigDecimal;

import javax.servlet.ServletConfig;

import javax.servlet.ServletException;

import javax.servlet.annotation.WebServlet;

import javax.servlet.http.HttpServlet;

import javax.servlet.http.HttpServletRequest;

import javax.servlet.http.HttpServletResponse;

import com.ibm.websphere.samples.daytrader.TradeAction;

import com.ibm.websphere.samples.daytrader.util.Log;

import com.ibm.websphere.samples.daytrader.util.TradeConfig;

@WebServlet(name = ""TestServlet"", urlPatterns = { ""/TestServlet"" }) public class TestServlet extends HttpServlet {

private static final long serialVersionUID = -2927579146688173127L;

@Override public void init(ServletConfig config) throws ServletException { super.init(config); }

/** * Process incoming HTTP GET requests * * @param request *            Object that encapsulates the request to the servlet * @param response *            Object that encapsulates the response from the servlet */ @Override public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { performTask(request, response); }"|data_input/daytrader/daytrader.txt|330a4a4f034747e49250553dcfd9baf9
"/** * Process incoming HTTP POST requests * * @param request *            Object that encapsulates the request to the servlet * @param response *            Object that encapsulates the response from the servlet */ @Override public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { performTask(request, response); }

/** * Main service method for TradeAppServlet * * @param request *            Object that encapsulates the request to the servlet * @param response *            Object that encapsulates the response from the servlet */ public void performTask(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { try { Log.debug(""Enter TestServlet doGet""); TradeConfig.runTimeMode = TradeConfig.DIRECT; for (int i = 0; i < 10; i++) { new TradeAction().createQuote(""s:"" + i, ""Company "" + i, new BigDecimal(i * 1.1)); } /* * * AccountDataBean accountData = new TradeAction().register(""user1"", * ""password"", ""fullname"", ""address"", ""email"", ""creditCard"", new * BigDecimal(123.45), false); * * OrderDataBean orderData = new TradeAction().buy(""user1"", ""s:1"", * 100.0); orderData ="|data_input/daytrader/daytrader.txt|3087f8d3b8a74fd0915fb1b8788b163d
"new TradeAction().buy(""user1"", ""s:2"", 200.0); * Thread.sleep(5000); accountData = new * TradeAction().getAccountData(""user1""); Collection * holdingDataBeans = new TradeAction().getHoldings(""user1""); * PrintWriter out = resp.getWriter(); * resp.setContentType(""text/html""); * out.write(""<HEAD></HEAD><BODY><BR><BR>""); * out.write(accountData.toString()); * Log.printCollection(""user1 Holdings"", holdingDataBeans); * ServletContext sc = getServletContext(); * req.setAttribute(""results"", ""Success""); * req.setAttribute(""accountData"", accountData); * req.setAttribute(""holdingDataBeans"", holdingDataBeans); * getServletContext * ().getRequestDispatcher(""/tradehome.jsp"").include(req, resp); * out.write(""<BR><BR>done.</BODY>""); */ } catch (Exception e) { Log.error(""TestServletException"", e); } } }"|data_input/daytrader/daytrader.txt|ef79325cb6c845e69664bb454acf8940
"/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/TradeAppServlet.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web;

import java.io.IOException;

import javax.servlet.ServletConfig;

import javax.servlet.ServletContext;

import javax.servlet.ServletException;

import javax.servlet.annotation.WebServlet;

import javax.servlet.http.HttpServlet;

import javax.servlet.http.HttpServletRequest;

import javax.servlet.http.HttpServletResponse;

import javax.servlet.http.HttpSession;

import com.ibm.websphere.samples.daytrader.util.Log;

import com.ibm.websphere.samples.daytrader.util.TradeConfig;"|data_input/daytrader/daytrader.txt|21512a4af2a3475d8069778c10816996
"import com.ibm.websphere.samples.daytrader.util.Log;

import com.ibm.websphere.samples.daytrader.util.TradeConfig;

/** * * TradeAppServlet provides the standard web interface to Trade and can be * accessed with the Go Trade! link. Driving benchmark load using this interface * requires a sophisticated web load generator that is capable of filling HTML * forms and posting dynamic data. */

@WebServlet(name = ""TradeAppServlet"", urlPatterns = { ""/app"" }) public class TradeAppServlet extends HttpServlet {

private static final long serialVersionUID = 481530522846648373L;

/** * Servlet initialization method. */ @Override public void init(ServletConfig config) throws ServletException { super.init(config); java.util.Enumeration<String> en = config.getInitParameterNames(); while (en.hasMoreElements()) { String parm = en.nextElement(); String value = config.getInitParameter(parm); TradeConfig.setConfigParam(parm, value); } try { // TODO: Uncomment this once split-tier issue is resolved // TradeDirect.init(); } catch (Exception e) { Log.error(e, ""TradeAppServlet:init -- Error initializing TradeDirect""); } }

/** * Returns a string that contains information about TradeScenarioServlet * * @return The servlet information */ @Override public java.lang.String getServletInfo() { return ""TradeAppServlet provides the standard web interface to Trade""; }"|data_input/daytrader/daytrader.txt|1d354d393c06468282b0442d327bb123
"/** * Process incoming HTTP GET requests * * @param request *            Object that encapsulates the request to the servlet * @param response *            Object that encapsulates the response from the servlet */ @Override public void doGet(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws ServletException, IOException { performTask(request, response); }

/** * Process incoming HTTP POST requests * * @param request *            Object that encapsulates the request to the servlet * @param response *            Object that encapsulates the response from the servlet */ @Override public void doPost(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws ServletException, IOException { performTask(request, response); }

/** * Main service method for TradeAppServlet * * @param request *            Object that encapsulates the request to the servlet * @param response *            Object that encapsulates the response from the servlet */ public void performTask(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {

String action = null; String userID = null; // String to create full dispatch path to TradeAppServlet w/ request // Parameters

resp.setContentType(""text/html""); TradeServletAction tsAction = new TradeServletAction();

// Dyna

need status string

prepended to output

action = req.getParameter(""action"");"|data_input/daytrader/daytrader.txt|ea22295736484bd0b6f446c01705e647
"// Dyna

need status string

prepended to output

action = req.getParameter(""action"");

ServletContext ctx = getServletConfig().getServletContext();

if (action == null) { tsAction.doWelcome(ctx, req, resp, """"); return; } else if (action.equals(""login"")) { userID = req.getParameter(""uid""); String passwd = req.getParameter(""passwd""); tsAction.doLogin(ctx, req, resp, userID, passwd); return; } else if (action.equals(""register"")) { userID = req.getParameter(""user id""); String passwd = req.getParameter(""passwd""); String cpasswd = req.getParameter(""confirm passwd""); String fullname = req.getParameter(""Full Name""); String ccn = req.getParameter(""Credit Card Number""); String money = req.getParameter(""money""); String email = req.getParameter(""email""); String smail = req.getParameter(""snail mail""); tsAction.doRegister(ctx, req, resp, userID, passwd, cpasswd, fullname, ccn, money, email, smail); return; }

// The rest of the operations require the user to be logged in - // Get the Session and validate the user. HttpSession session = req.getSession(); userID = (String) session.getAttribute(""uidBean"");"|data_input/daytrader/daytrader.txt|dd9beb0c69c148d5b9080a1b766840b6
"if (userID == null) { System.out.println(""TradeAppServlet service error: User Not Logged in""); tsAction.doWelcome(ctx, req, resp, ""User Not Logged in""); return; } if (action.equals(""quotes"")) { String symbols = req.getParameter(""symbols""); tsAction.doQuotes(ctx, req, resp, userID, symbols); } else if (action.equals(""buy"")) { String symbol = req.getParameter(""symbol""); String quantity = req.getParameter(""quantity""); tsAction.doBuy(ctx, req, resp, userID, symbol, quantity); } else if (action.equals(""sell"")) { int holdingID = Integer.parseInt(req.getParameter(""holdingID"")); tsAction.doSell(ctx, req, resp, userID, new Integer(holdingID)); } else if (action.equals(""portfolio"") || action.equals(""portfolioNoEdge"")) { tsAction.doPortfolio(ctx, req, resp, userID, ""Portfolio as of "" + new java.util.Date()); } else if (action.equals(""logout"")) { tsAction.doLogout(ctx, req, resp, userID); } else if (action.equals(""home"")) { tsAction.doHome(ctx, req, resp, userID, ""Ready to Trade""); } else if (action.equals(""account"")) { tsAction.doAccount(ctx, req, resp, userID, """"); } else if (action.equals(""update_profile"")) { String password = req.getParameter(""password""); String cpassword = req.getParameter(""cpassword""); String fullName = req.getParameter(""fullname""); String address = req.getParameter(""address""); String creditcard = req.getParameter(""creditcard""); String email = req.getParameter(""email""); tsAction.doAccountUpdate(ctx, req, resp, userID, password == null ? """""|data_input/daytrader/daytrader.txt|53580e66e44e42f7885ae8b179822d17
": password.trim(), cpassword == null ? """" : cpassword.trim(), fullName == null ? """" : fullName.trim(), address == null ? """" : address.trim(), creditcard == null ? """" : creditcard.trim(), email == null ? """" : email.trim()); } else if (action.equals(""mksummary"")) { tsAction.doMarketSummary(ctx, req, resp, userID); } else { System.out.println(""TradeAppServlet: Invalid Action="" + action); tsAction.doWelcome(ctx, req, resp, ""TradeAppServlet: Invalid Action"" + action); } }

} /home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/TradeBuildDB.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web;

import java.io.BufferedReader;

import java.io.IOException;

import java.io.InputStream;

import java.io.InputStreamReader;

import java.math.BigDecimal;

import java.util.ArrayList;

import com.ibm.websphere.samples.daytrader.direct.TradeDirect;"|data_input/daytrader/daytrader.txt|65b614e9d40d496e849e6c0f7f796b86
"import java.math.BigDecimal;

import java.util.ArrayList;

import com.ibm.websphere.samples.daytrader.direct.TradeDirect;

import com.ibm.websphere.samples.daytrader.entities.AccountDataBean;

import com.ibm.websphere.samples.daytrader.util.Log;

import com.ibm.websphere.samples.daytrader.util.TradeConfig;

/** * TradeBuildDB uses operations provided by the TradeApplication to (a) create the Database tables * (b)populate a DayTrader database without creating the tables. Specifically, a * new DayTrader User population is created using UserIDs of the form ""uid:xxx"" * where xxx is a sequential number (e.g. uid:0, uid:1, etc.). New stocks are also created of the * form ""s:xxx"", again where xxx represents sequential numbers (e.g. s:1, s:2, etc.) */ public class TradeBuildDB {

/** * Populate a Trade DB using standard out as a log */ public TradeBuildDB() throws Exception { this(new java.io.PrintWriter(System.out), null); }

/** * Re-create the DayTrader db tables and populate them OR just populate a DayTrader DB, logging to the provided output stream */ public TradeBuildDB(java.io.PrintWriter out, InputStream ddlFile) throws Exception { String symbol, companyName; int errorCount = 0; // Give up gracefully after 10 errors

// Build db in direct mode because it is faster TradeDirect tradeDirect = new TradeDirect();"|data_input/daytrader/daytrader.txt|d4067b42d4224641b95ba396f3136d61
"// Build db in direct mode because it is faster TradeDirect tradeDirect = new TradeDirect();

//  TradeStatistics.statisticsEnabled=false;  // disable statistics out.println(""<HEAD><BR><EM> TradeBuildDB: Building DayTrader Database...</EM><BR> This operation will take several minutes. Please wait...</HEAD>""); out.println(""<BODY>"");

if (ddlFile != null) { //out.println(""<BR>TradeBuildDB: **** warPath= ""+warPath+"" ****</BR></BODY>"");

boolean success = false;

Object[] sqlBuffer = null;

//parse the DDL file and fill the SQL commands into a buffer try { sqlBuffer = parseDDLToBuffer(ddlFile); } catch (Exception e) { Log.error(e, ""TradeBuildDB: Unable to parse DDL file""); out.println(""<BR>TradeBuildDB: **** Unable to parse DDL file for the specified database ****</BR></BODY>""); return; } if ((sqlBuffer == null) || (sqlBuffer.length == 0)) { out.println(""<BR>TradeBuildDB: **** Parsing DDL file returned empty buffer, please check that a valid DB specific DDL file is available and retry ****</BR></BODY>""); return; }"|data_input/daytrader/daytrader.txt|7896cd9d4c824d6dba77b3b73e5a36d8
"// send the sql commands buffer to drop and recreate the Daytrader tables out.println(""<BR>TradeBuildDB: **** Dropping and Recreating the DayTrader tables... ****</BR>""); try { success = tradeDirect.recreateDBTables(sqlBuffer, out); } catch (Exception e) { Log.error(e, ""TradeBuildDB: Unable to drop and recreate DayTrader Db Tables, please check for database consistency before continuing""); out.println(""TradeBuildDB: Unable to drop and recreate DayTrader Db Tables, please check for database consistency before continuing""); return; } if (!success) { out.println(""<BR>TradeBuildDB: **** Unable to drop and recreate DayTrader Db Tables, please check for database consistency before continuing ****</BR></BODY>""); return; } out.println(""<BR>TradeBuildDB: **** DayTrader tables successfully created! ****</BR><BR><b> Please Stop and Re-start your Daytrader application (or your application server) and then use the \""Repopulate Daytrader Database\"" link to populate your database.</b></BR><BR><BR></BODY>""); return; } // end of createDBTables"|data_input/daytrader/daytrader.txt|3521f0a1d0464257be430a3d1c2b1851
"out.println(""<BR>TradeBuildDB: **** Creating "" + TradeConfig.getMAX_QUOTES() + "" Quotes ****</BR>""); //Attempt to delete all of the Trade users and Trade Quotes first try { tradeDirect.resetTrade(true); } catch (Exception e) { Log.error(e, ""TradeBuildDB: Unable to delete Trade users (uid:0, uid:1, ...) and Trade Quotes (s:0, s:1, ...)""); } for (int i = 0; i < TradeConfig.getMAX_QUOTES(); i++) { symbol = ""s:"" + i; companyName = ""S"" + i + "" Incorporated""; try { tradeDirect.createQuote(symbol, companyName, new java.math.BigDecimal(TradeConfig.rndPrice())); if (i % 10 == 0) { out.print(""....."" + symbol); if (i % 100 == 0) { out.println("" -<BR>""); out.flush(); } } } catch (Exception e) { if (errorCount++ >= 10) { String error = ""Populate Trade DB aborting after 10 create quote errors. Check the EJB datasource configuration. Check the log for details <BR><BR> Exception is: <BR> "" + e.toString(); Log.error(e, error); throw e; } } } out.println(""<BR>""); out.println(""<BR>**** Registering "" + TradeConfig.getMAX_USERS() + "" Users **** ""); errorCount = 0; //reset for user registrations"|data_input/daytrader/daytrader.txt|67c7356fdedf4c95bf9594141a1fef0e
"// Registration is a formal operation in Trade 2. for (int i = 0; i < TradeConfig.getMAX_USERS(); i++) { String userID = ""uid:"" + i; String fullname = TradeConfig.rndFullName(); String email = TradeConfig.rndEmail(userID); String address = TradeConfig.rndAddress(); String creditcard = TradeConfig.rndCreditCard(); double initialBalance = (double) (TradeConfig.rndInt(100000)) + 200000; if (i == 0) { initialBalance = 1000000; // uid:0 starts with a cool million. } try { AccountDataBean accountData = tradeDirect.register(userID, ""xxx"", fullname, address, email, creditcard, new BigDecimal(initialBalance));

if (accountData != null) { if (i % 50 == 0) { out.print(""<BR>Account# "" + accountData.getAccountID() + "" userID="" + userID); } // end-if

int holdings = TradeConfig.rndInt(TradeConfig.getMAX_HOLDINGS() + 1); // 0-MAX_HOLDING (inclusive), avg holdings per user = (MAX-0)/2 double quantity = 0;

for (int j = 0; j < holdings; j++) { symbol = TradeConfig.rndSymbol(); quantity = TradeConfig.rndQuantity(); tradeDirect.buy(userID, symbol, quantity, TradeConfig.orderProcessingMode); } // end-for if (i % 50 == 0) { out.println("" has "" + holdings + "" holdings. ""); out.flush(); } // end-if } else { out.println(""<BR>UID "" + userID + "" already registered.</BR>""); out.flush(); } // end-if"|data_input/daytrader/daytrader.txt|0e3ed81a1d2744928f5cce398a629301
"} catch (Exception e) { if (errorCount++ >= 10) { String error = ""Populate Trade DB aborting after 10 user registration errors. Check the log for details. <BR><BR> Exception is: <BR>"" + e.toString(); Log.error(e, error); throw e; } } } // end-for out.println(""</BODY>""); }

public Object[] parseDDLToBuffer(InputStream ddlFile) throws Exception { BufferedReader br = null; ArrayList<String> sqlBuffer = new ArrayList<String>(30); //initial capacity 30 assuming we have 30 ddl-sql statements to read

try {

if (Log.doTrace())

Log.traceEnter(""TradeBuildDB:parseDDLToBuffer

"" + ddlFile);

br = new BufferedReader(new InputStreamReader(ddlFile)); String s; String sql = new String(); while ((s = br.readLine()) != null) { s = s.trim(); if ((s.length() != 0) && (s.charAt(0) != '#')) // Empty lines or lines starting with ""#"" are ignored { sql = sql + "" "" + s; if (s.endsWith("";"")) { // reached end of sql statement sql = sql.replace(';', ' '); //remove the semicolon sqlBuffer.add(sql); sql = """"; } } } } catch (IOException ex) { Log.error(""TradeBuildDB:parseDDLToBuffer Exeception during open/read of File: "" + ddlFile, ex); throw ex; } finally { if (br != null) { try { br.close(); } catch (IOException ex) { Log.error(""TradeBuildDB:parseDDLToBuffer Failed to close BufferedReader"", ex); } } } return sqlBuffer.toArray(); }

public static void main(String[] args) throws Exception { new TradeBuildDB();

}

}"|data_input/daytrader/daytrader.txt|cc50b7b10949485e898dcb6c97a2455c
"public static void main(String[] args) throws Exception { new TradeBuildDB();

}

}

/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/TradeConfigServlet.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web;

import java.io.IOException;

import javax.servlet.ServletConfig;

import javax.servlet.ServletException;

import javax.servlet.annotation.WebServlet;

import javax.servlet.http.HttpServlet;

import javax.servlet.http.HttpServletRequest;

import javax.servlet.http.HttpServletResponse;

import com.ibm.websphere.samples.daytrader.TradeAction;

import com.ibm.websphere.samples.daytrader.beans.RunStatsDataBean;

import com.ibm.websphere.samples.daytrader.direct.TradeDirect;

import com.ibm.websphere.samples.daytrader.util.Log;

import com.ibm.websphere.samples.daytrader.util.TradeConfig;"|data_input/daytrader/daytrader.txt|a949ff4bd3bf4d99b6b91dbcaf9354b5
"import com.ibm.websphere.samples.daytrader.util.Log;

import com.ibm.websphere.samples.daytrader.util.TradeConfig;

/** * TradeConfigServlet provides a servlet interface to adjust DayTrader runtime parameters. * TradeConfigServlet updates values in the {@link com.ibm.websphere.samples.daytrader.web.TradeConfig} JavaBean holding * all configuration and runtime parameters for the Trade application * */ @WebServlet(name = ""TradeConfigServlet"", urlPatterns = { ""/config"" }) public class TradeConfigServlet extends HttpServlet {

private static final long serialVersionUID = -1910381529792500095L;

/** * Servlet initialization method. */ @Override public void init(ServletConfig config) throws ServletException { super.init(config); }

/** * Create the TradeConfig bean and pass it the config.jsp page * to display the current Trade runtime configuration * Creation date: (2/8/2000 3:43:59 PM) */ void doConfigDisplay(HttpServletRequest req, HttpServletResponse resp, String results) throws Exception {

TradeConfig currentConfig = new TradeConfig();

req.setAttribute(""tradeConfig"", currentConfig);

req.setAttribute(""status"", results);

getServletConfig().getServletContext().getRequestDispatcher(TradeConfig.getPage(TradeConfig.CONFIG_PAGE)).include(req, resp);

}"|data_input/daytrader/daytrader.txt|45c1dfa6a16b48deba629720a3baff0c
"getServletConfig().getServletContext().getRequestDispatcher(TradeConfig.getPage(TradeConfig.CONFIG_PAGE)).include(req, resp);

}

void doResetTrade(HttpServletRequest req, HttpServletResponse resp, String results) throws Exception { RunStatsDataBean runStatsData = new RunStatsDataBean(); TradeConfig currentConfig = new TradeConfig(); try { runStatsData = new TradeAction().resetTrade(false);

req.setAttribute(""runStatsData"", runStatsData); req.setAttribute(""tradeConfig"", currentConfig); results += ""Trade Reset completed successfully""; req.setAttribute(""status"", results);

} catch (Exception e) { results += ""Trade Reset Error  - see log for details""; Log.error(e, results); throw e; } getServletConfig().getServletContext().getRequestDispatcher(TradeConfig.getPage(TradeConfig.STATS_PAGE)).include(req, resp);

}

/** * Update Trade runtime configuration paramaters * Creation date: (2/8/2000 3:44:24 PM) */ void doConfigUpdate(HttpServletRequest req, HttpServletResponse resp) throws Exception { String currentConfigStr = ""\n\n########## Trade configuration update. Current config:\n\n"";"|data_input/daytrader/daytrader.txt|43c99ad647b84ec6ba4be00eb15564b2
"String runTimeModeStr = req.getParameter(""RunTimeMode""); if (runTimeModeStr != null) { try { int i = Integer.parseInt(runTimeModeStr); if ((i >= 0) && (i < TradeConfig.runTimeModeNames.length)) //Input validation TradeConfig.setRunTimeMode(i); } catch (Exception e) { //>>rjm Log.error(e, ""TradeConfigServlet.doConfigUpdate(..): minor exception caught"", ""trying to set runtimemode to "" + runTimeModeStr, ""reverting to current value"");

} // If the value is bad, simply revert to current } currentConfigStr += ""\t\tRunTimeMode:\t\t\t"" + TradeConfig.runTimeModeNames[TradeConfig.runTimeMode] + ""\n"";

String useRemoteEJBInterface = req.getParameter(""UseRemoteEJBInterface"");

if (useRemoteEJBInterface != null) TradeConfig.setUseRemoteEJBInterface(true); else TradeConfig.setDisplayOrderAlerts(false); currentConfigStr += ""\t\tUse Remote EJB Interface:\t"" + TradeConfig.useRemoteEJBInterface() + ""\n"";

String orderProcessingModeStr = req.getParameter(""OrderProcessingMode""); if (orderProcessingModeStr != null) { try { int i = Integer.parseInt(orderProcessingModeStr); if ((i >= 0) && (i < TradeConfig.orderProcessingModeNames.length)) //Input validation TradeConfig.setOrderProcessingMode(i); } catch (Exception e) { //>>rjm Log.error(e, ""TradeConfigServlet.doConfigUpdate(..): minor exception caught"", ""trying to set orderProcessing to "" + orderProcessingModeStr, ""reverting to current value"");"|data_input/daytrader/daytrader.txt|71e19d1b636c4224a8f89474dc45a891
"} // If the value is bad, simply revert to current } currentConfigStr += ""\t\tOrderProcessingMode:\t\t"" + TradeConfig.orderProcessingModeNames[TradeConfig.orderProcessingMode] + ""\n"";

String webInterfaceStr = req.getParameter(""WebInterface""); if (webInterfaceStr != null) { try { int i = Integer.parseInt(webInterfaceStr); if ((i >= 0) && (i < TradeConfig.webInterfaceNames.length)) //Input validation TradeConfig.setWebInterface(i); } catch (Exception e) { Log.error(e, ""TradeConfigServlet.doConfigUpdate(..): minor exception caught"", ""trying to set WebInterface to "" + webInterfaceStr, ""reverting to current value"");

} // If the value is bad, simply revert to current } currentConfigStr += ""\t\tWeb Interface:\t\t\t"" + TradeConfig.webInterfaceNames[TradeConfig.webInterface] + ""\n"";

/* String cachingTypeStr = req.getParameter(""CachingType""); if (cachingTypeStr != null) { try { int i = Integer.parseInt(cachingTypeStr); if ((i >= 0) && (i < TradeConfig.cachingTypeNames.length)) //Input validation TradeConfig.setCachingType(i); } catch (Exception e) { Log.error(e, ""TradeConfigServlet.doConfigUpdate(..): minor exception caught"", ""trying to set CachingType to "" + cachingTypeStr, ""reverting to current value""); } // If the value is bad, simply revert to current } currentConfigStr += ""\t\tCachingType:\t\t\t"" + TradeConfig.cachingTypeNames[TradeConfig.cachingType] + ""\n"";"|data_input/daytrader/daytrader.txt|b21312cbc414466dba61704f79e5f27a
"String distMapCacheSize = req.getParameter(""DistMapCacheSize""); if ((distMapCacheSize != null) && (distMapCacheSize.length() > 0)) { try { TradeConfig.setDistributedMapCacheSize(Integer.parseInt(distMapCacheSize)); } catch (Exception e) { Log.error(e, ""TradeConfigServlet: minor exception caught"", ""trying to set DistributedMapCacheSize, error on parsing int "" + distMapCacheSize, ""reverting to current value "" + TradeConfig.getPrimIterations());

} } currentConfigStr += ""\t\tDMap Cache Size:\t\t"" + TradeConfig.getDistributedMapCacheSize() + ""\n""; */ String parm = req.getParameter(""MaxUsers""); if ((parm != null) && (parm.length() > 0)) { try { TradeConfig.setMAX_USERS(Integer.parseInt(parm)); } catch (Exception e) { Log.error(e, ""TradeConfigServlet.doConfigUpdate(..): minor exception caught"", ""Setting maxusers, probably error parsing string to int:"" + parm, ""revertying to current value: "" + TradeConfig.getMAX_USERS());

} //On error, revert to saved } parm = req.getParameter(""MaxQuotes""); if ((parm != null) && (parm.length() > 0)) { try { TradeConfig.setMAX_QUOTES(Integer.parseInt(parm)); } catch (Exception e) { //>>rjm Log.error(e, ""TradeConfigServlet: minor exception caught"", ""trying to set max_quotes, error on parsing int "" + parm, ""reverting to current value "" + TradeConfig.getMAX_QUOTES()); //<<rjm"|data_input/daytrader/daytrader.txt|5415e3263678443cac58fd4877fc023f
text|source|chunk_id
"} //On error, revert to saved } currentConfigStr += ""\t\tTrade Users:\t\t\t"" + TradeConfig.getMAX_USERS() + ""\n""; currentConfigStr += ""\t\tTrade Quotes:\t\t\t"" + TradeConfig.getMAX_QUOTES() + ""\n"";

parm = req.getParameter(""marketSummaryInterval""); if ((parm != null) && (parm.length() > 0)) { try { TradeConfig.setMarketSummaryInterval(Integer.parseInt(parm)); } catch (Exception e) { Log.error(e, ""TradeConfigServlet: minor exception caught"", ""trying to set marketSummaryInterval, error on parsing int "" + parm, ""reverting to current value "" + TradeConfig.getMarketSummaryInterval());

} } currentConfigStr += ""\t\tMarket Summary Interval:\t"" + TradeConfig.getMarketSummaryInterval() + ""\n"";

parm = req.getParameter(""primIterations""); if ((parm != null) && (parm.length() > 0)) { try { TradeConfig.setPrimIterations(Integer.parseInt(parm)); } catch (Exception e) { Log.error(e, ""TradeConfigServlet: minor exception caught"", ""trying to set primIterations, error on parsing int "" + parm, ""reverting to current value "" + TradeConfig.getPrimIterations());

} } currentConfigStr += ""\t\tPrimitive Iterations:\t\t"" + TradeConfig.getPrimIterations() + ""\n"";

String enablePublishQuotePriceChange = req.getParameter(""EnablePublishQuotePriceChange"");

if (enablePublishQuotePriceChange != null) TradeConfig.setPublishQuotePriceChange(true); else TradeConfig.setPublishQuotePriceChange(false); currentConfigStr += ""\t\tTradeStreamer MDB Enabled:\t"" + TradeConfig.getPublishQuotePriceChange() + ""\n"";"|data_input/daytrader/daytrader.txt|ce30fbab2b0140afb09988462f2bd026
"parm = req.getParameter(""percentSentToWebsocket""); if ((parm != null) && (parm.length() > 0)) { try { TradeConfig.setPercentSentToWebsocket(Integer.parseInt(parm)); } catch (Exception e) { Log.error(e, ""TradeConfigServlet: minor exception caught"", ""trying to set percentSentToWebSocket, error on parsing int "" + parm, ""reverting to current value "" + TradeConfig.getPercentSentToWebsocket());

} } currentConfigStr += ""\t\t% of trades on Websocket:\t"" + TradeConfig.getPercentSentToWebsocket() + ""\n"";

String enableLongRun = req.getParameter(""EnableLongRun"");

if (enableLongRun != null) TradeConfig.setLongRun(true); else TradeConfig.setLongRun(false); currentConfigStr += ""\t\tLong Run Enabled:\t\t"" + TradeConfig.getLongRun() + ""\n"";

String displayOrderAlerts = req.getParameter(""DisplayOrderAlerts"");

if (displayOrderAlerts != null) TradeConfig.setDisplayOrderAlerts(true); else TradeConfig.setDisplayOrderAlerts(false); currentConfigStr += ""\t\tDisplay Order Alerts:\t\t"" + TradeConfig.getDisplayOrderAlerts() + ""\n"";

String enableTrace = req.getParameter(""EnableTrace""); if (enableTrace != null) Log.setTrace(true); else Log.setTrace(false); currentConfigStr += ""\t\tTrace Enabled:\t\t\t"" + TradeConfig.getTrace() + ""\n"";

String enableActionTrace = req.getParameter(""EnableActionTrace""); if (enableActionTrace != null) Log.setActionTrace(true); else Log.setActionTrace(false); currentConfigStr += ""\t\tAction Trace Enabled:\t\t"" + TradeConfig.getActionTrace() + ""\n"";"|data_input/daytrader/daytrader.txt|bd72635237cd49e7ade911c52b043b82
"System.out.println(currentConfigStr);

}

@Override public void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {

String action = null;

String result = """";

resp.setContentType(""text/html""); try { action = req.getParameter(""action""); if (action == null) { doConfigDisplay(req, resp, result + ""<b><br>Current DayTrader Configuration:</br></b>""); return; } else if (action.equals(""updateConfig"")) { doConfigUpdate(req, resp); result = ""<B><BR>DayTrader Configuration Updated</BR></B>""; } else if (action.equals(""resetTrade"")) { doResetTrade(req, resp, """"); return; } else if (action.equals(""buildDB"")) { resp.setContentType(""text/html""); new TradeBuildDB(resp.getWriter(), null); result = ""DayTrader Database Built - "" + TradeConfig.getMAX_USERS() + ""users created""; } else if (action.equals(""buildDBTables"")) {

resp.setContentType(""text/html"");

//Find out the Database being used TradeDirect tradeDirect = new TradeDirect();

String dbProductName = null; try { dbProductName = tradeDirect.checkDBProductName(); } catch (Exception e) { Log.error(e, ""TradeBuildDB: Unable to check DB Product name""); } if (dbProductName == null) { resp.getWriter().println( ""<BR>TradeBuildDB: **** Unable to check DB Product name, please check Database/AppServer configuration and retry ****</BR></BODY>""); return; }"|data_input/daytrader/daytrader.txt|555ceb5c735e45dfa0a8a0e04b09070a
"String ddlFile = null; //Locate DDL file for the specified database try { resp.getWriter().println(""<BR>TradeBuildDB: **** Database Product detected: "" + dbProductName + "" ****</BR>""); if (dbProductName.startsWith(""DB2/"")) {// if db is DB2 ddlFile = ""/dbscripts/db2/Table.ddl""; } else if (dbProductName.startsWith(""DB2 UDB for AS/400"")) { //if db is DB2 on IBM i ddlFile = ""/dbscripts/db2i/Table.ddl""; }  else if (dbProductName.startsWith(""Apache Derby"")) { //if db is Derby ddlFile = ""/dbscripts/derby/Table.ddl""; } else if (dbProductName.startsWith(""Oracle"")) { // if the Db is Oracle ddlFile = ""/dbscripts/oracle/Table.ddl""; } else {// Unsupported ""Other"" Database, try derby ddl ddlFile = ""/dbscripts/derby/Table.ddl""; resp.getWriter().println(""<BR>TradeBuildDB: **** This Database is unsupported/untested use at your own risk ****</BR>""); }

resp.getWriter().println(""<BR>TradeBuildDB: **** The DDL file at path <I>"" + ddlFile + ""</I> will be used ****</BR>""); resp.getWriter().flush(); } catch (Exception e) { Log.error(e, ""TradeBuildDB: Unable to locate DDL file for the specified database""); resp.getWriter().println(""<BR>TradeBuildDB: **** Unable to locate DDL file for the specified database ****</BR></BODY>""); return; } new TradeBuildDB(resp.getWriter(), getServletContext().getResourceAsStream(ddlFile));"|data_input/daytrader/daytrader.txt|64b36ac835584097a1c6574b037559b2
"} doConfigDisplay(req, resp, result + ""Current DayTrader Configuration:""); } catch (Exception e) { Log.error(e, ""TradeConfigServlet.service(...)"", ""Exception trying to perform action="" + action);

resp.sendError(500, ""TradeConfigServlet.service(...)"" + ""Exception trying to perform action="" + action + ""\nException details: "" + e.toString());

}

}

}

/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/TradeScenarioServlet.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web;

import java.io.IOException;

import java.io.PrintWriter;

import java.util.Collection;

import java.util.Iterator;

import javax.servlet.ServletConfig;

import javax.servlet.ServletContext;

import javax.servlet.ServletException;

import javax.servlet.annotation.WebServlet;

import javax.servlet.http.HttpServlet;

import javax.servlet.http.HttpServletRequest;"|data_input/daytrader/daytrader.txt|e3a72c409e3b4e649a9424ebc235837f
"import javax.servlet.annotation.WebServlet;

import javax.servlet.http.HttpServlet;

import javax.servlet.http.HttpServletRequest;

import javax.servlet.http.HttpServletResponse;

import javax.servlet.http.HttpSession;

import com.ibm.websphere.samples.daytrader.entities.HoldingDataBean;

import com.ibm.websphere.samples.daytrader.util.Log;

import com.ibm.websphere.samples.daytrader.util.TradeConfig;

/** * TradeScenarioServlet emulates a population of web users by generating a * specific Trade operation for a randomly chosen user on each access to the * URL. Test this servlet by clicking Trade Scenario and hit ""Reload"" on your * browser to step through a Trade Scenario. To benchmark using this URL aim * your favorite web load generator (such as AKStress) at the Trade Scenario URL * and fire away. */ @WebServlet(name = ""TradeScenarioServlet"", urlPatterns = { ""/scenario"" }) public class TradeScenarioServlet extends HttpServlet {

private static final long serialVersionUID = 1410005249314201829L;

/** * Servlet initialization method. */ @Override public void init(ServletConfig config) throws ServletException { super.init(config); java.util.Enumeration<String> en = config.getInitParameterNames(); while (en.hasMoreElements()) { String parm = en.nextElement(); String value = config.getInitParameter(parm); TradeConfig.setConfigParam(parm, value); } }"|data_input/daytrader/daytrader.txt|d58f77919b3b4174aabb7d33f8eb096b
"/** * Returns a string that contains information about TradeScenarioServlet * * @return The servlet information */ @Override public java.lang.String getServletInfo() { return ""TradeScenarioServlet emulates a population of web users""; }

/** * Process incoming HTTP GET requests * * @param request *            Object that encapsulates the request to the servlet * @param response *            Object that encapsulates the response from the servlet */ @Override public void doGet(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws ServletException, IOException { performTask(request, response); }

/** * Process incoming HTTP POST requests * * @param request *            Object that encapsulates the request to the servlet * @param response *            Object that encapsulates the response from the servlet */ @Override public void doPost(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws ServletException, IOException { performTask(request, response); }

/** * Main service method for TradeScenarioServlet * * @param request *            Object that encapsulates the request to the servlet * @param response *            Object that encapsulates the response from the servlet */ public void performTask(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {

// Scenario generator for Trade2 char action = ' '; String userID = null;"|data_input/daytrader/daytrader.txt|a8b15cdc28de4f50b22e0e5ad9270991
"// Scenario generator for Trade2 char action = ' '; String userID = null;

// String to create full dispatch path to TradeAppServlet w/ request // Parameters String dispPath = null; // Dispatch Path to TradeAppServlet

resp.setContentType(""text/html"");

String scenarioAction = req.getParameter(""action""); if ((scenarioAction != null) && (scenarioAction.length() >= 1)) { action = scenarioAction.charAt(0); if (action == 'n') { // null; try { // resp.setContentType(""text/html""); PrintWriter out = new PrintWriter(resp.getOutputStream()); out.println(""<HTML><HEAD>TradeScenarioServlet</HEAD><BODY>Hello</BODY></HTML>""); out.close(); return;

} catch (Exception e) { Log.error(""trade_client.TradeScenarioServlet.service(...)"" + ""error creating printwriter from responce.getOutputStream"", e);

resp.sendError(500, ""trade_client.TradeScenarioServlet.service(...): erorr creating and writing to PrintStream created from response.getOutputStream()""); } // end of catch

} // end of action=='n' }"|data_input/daytrader/daytrader.txt|8109e068615e460ab9d47a669c3fa261
"} // end of action=='n' }

ServletContext ctx = null; HttpSession session = null; try { ctx = getServletConfig().getServletContext(); // These operations require the user to be logged in. Verify the // user and if not logged in // change the operation to a login session = req.getSession(true); userID = (String) session.getAttribute(""uidBean""); } catch (Exception e) { Log.error(""trade_client.TradeScenarioServlet.service(...): performing "" + scenarioAction + ""error getting ServletContext,HttpSession, or UserID from session"" + ""will make scenarioAction a login and try to recover from there"", e); userID = null; action = 'l'; }

if (userID == null) { action = 'l'; // change to login TradeConfig.incrementScenarioCount(); } else if (action == ' ') { // action is not specified perform a random operation according to // current mix // Tell getScenarioAction if we are an original user or a registered // user // -- sellDeficits should only be compensated for with original // users. action = TradeConfig.getScenarioAction(userID.startsWith(TradeConfig.newUserPrefix)); } switch (action) {

case 'q': // quote dispPath = tasPathPrefix + ""quotes&symbols="" + TradeConfig.rndSymbols(); ctx.getRequestDispatcher(dispPath).include(req, resp); break; case 'a': // account dispPath = tasPathPrefix + ""account""; ctx.getRequestDispatcher(dispPath).include(req, resp); break; case 'u': // update account profile dispPath = tasPathPrefix + ""account""; ctx.getRequestDispatcher(dispPath).include(req, resp);"|data_input/daytrader/daytrader.txt|1c913f34ce46470494dbb94033ed8473
"String fullName = ""rnd"" + System.currentTimeMillis(); String address = ""rndAddress""; String password = ""xxx""; String email = ""rndEmail""; String creditcard = ""rndCC""; dispPath = tasPathPrefix + ""update_profile&fullname="" + fullName + ""&password="" + password + ""&cpassword="" + password + ""&address="" + address + ""&email="" + email + ""&creditcard="" + creditcard; ctx.getRequestDispatcher(dispPath).include(req, resp); break; case 'h': // home dispPath = tasPathPrefix + ""home""; ctx.getRequestDispatcher(dispPath).include(req, resp); break; case 'l': // login userID = TradeConfig.getUserID(); String password2 = ""xxx""; dispPath = tasPathPrefix + ""login&inScenario=true&uid="" + userID + ""&passwd="" + password2; ctx.getRequestDispatcher(dispPath).include(req, resp);

// login is successful if the userID is written to the HTTP session if (session.getAttribute(""uidBean"") == null) { System.out.println(""TradeScenario login failed. Reset DB between runs""); } break; case 'o': // logout dispPath = tasPathPrefix + ""logout""; ctx.getRequestDispatcher(dispPath).include(req, resp); break; case 'p': // portfolio dispPath = tasPathPrefix + ""portfolio""; ctx.getRequestDispatcher(dispPath).include(req, resp); break; case 'r': // register // Logout the current user to become a new user // see note in TradeServletAction req.setAttribute(""TSS-RecreateSessionInLogout"", Boolean.TRUE); dispPath = tasPathPrefix + ""logout""; ctx.getRequestDispatcher(dispPath).include(req, resp);"|data_input/daytrader/daytrader.txt|c13523c07a0e43f98d99f3afd45849ec
"userID = TradeConfig.rndNewUserID(); String passwd = ""yyy""; fullName = TradeConfig.rndFullName(); creditcard = TradeConfig.rndCreditCard(); String money = TradeConfig.rndBalance(); email = TradeConfig.rndEmail(userID); String smail = TradeConfig.rndAddress(); dispPath = tasPathPrefix + ""register&Full Name="" + fullName + ""&snail mail="" + smail + ""&email="" + email + ""&user id="" + userID + ""&passwd="" + passwd + ""&confirm passwd="" + passwd + ""&money="" + money + ""&Credit Card Number="" + creditcard; ctx.getRequestDispatcher(dispPath).include(req, resp); break; case 's': // sell dispPath = tasPathPrefix + ""portfolioNoEdge""; ctx.getRequestDispatcher(dispPath).include(req, resp);

Collection<?> holdings = (Collection<?>) req.getAttribute(""holdingDataBeans""); int numHoldings = holdings.size(); if (numHoldings > 0) { // sell first available security out of holding

Iterator<?> it = holdings.iterator(); boolean foundHoldingToSell = false; while (it.hasNext()) { HoldingDataBean holdingData = (HoldingDataBean) it.next(); if (! (holdingData.getPurchaseDate().equals(new java.util.Date(0)))) { Integer holdingID = holdingData.getHoldingID();

dispPath = tasPathPrefix + ""sell&holdingID="" + holdingID; ctx.getRequestDispatcher(dispPath).include(req, resp); foundHoldingToSell = true; break; } } if (foundHoldingToSell) { break; } if (Log.doTrace()) { Log.trace(""TradeScenario: No holding to sell -switch to buy -- userID = "" + userID + ""  Collection count = "" + numHoldings); }"|data_input/daytrader/daytrader.txt|ba67a11c7277484595f2eaff9371f46b
"} // At this point: A TradeScenario Sell was requested with No Stocks // in Portfolio // This can happen when a new registered user happens to request a // sell before a buy // In this case, fall through and perform a buy instead

/* * Trade 2.037: Added sell_deficit counter to maintain correct * buy/sell mix. When a users portfolio is reduced to 0 holdings, a * buy is requested instead of a sell. This throws off the buy/sell * mix by 1. This results in unwanted holding table growth To fix * this we increment a sell deficit counter to maintain the correct * ratio in getScenarioAction The 'z' action from getScenario * denotes that this is a sell action that was switched from a buy * to reduce a sellDeficit */ if (userID.startsWith(TradeConfig.newUserPrefix) == false) { TradeConfig.incrementSellDeficit(); } case 'b': // buy String symbol = TradeConfig.rndSymbol(); String amount = TradeConfig.rndQuantity() + """";

dispPath = tasPathPrefix + ""quotes&symbols="" + symbol; ctx.getRequestDispatcher(dispPath).include(req, resp);

dispPath = tasPathPrefix + ""buy&quantity="" + amount + ""&symbol="" + symbol; ctx.getRequestDispatcher(dispPath).include(req, resp); break; } // end of switch statement }

// URL Path Prefix for dispatching to TradeAppServlet private static final String tasPathPrefix = ""/app?action="";

}"|data_input/daytrader/daytrader.txt|7c805efb0bbd4e86930e10391ccfa310
"// URL Path Prefix for dispatching to TradeAppServlet private static final String tasPathPrefix = ""/app?action="";

}

/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/TradeServletAction.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web;

import java.io.IOException;

import java.math.BigDecimal;

import java.util.ArrayList;

import java.util.Collection;

import java.util.Iterator;

import javax.servlet.ServletContext;

import javax.servlet.ServletException;

import javax.servlet.http.HttpServletRequest;

import javax.servlet.http.HttpServletResponse;

import javax.servlet.http.HttpSession;

import com.ibm.websphere.samples.daytrader.TradeAction;

import com.ibm.websphere.samples.daytrader.TradeServices;

import com.ibm.websphere.samples.daytrader.entities.AccountDataBean;"|data_input/daytrader/daytrader.txt|cad459f2fa084145b427969192a0f2a9
"import com.ibm.websphere.samples.daytrader.TradeServices;

import com.ibm.websphere.samples.daytrader.entities.AccountDataBean;

import com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean;

import com.ibm.websphere.samples.daytrader.entities.HoldingDataBean;

import com.ibm.websphere.samples.daytrader.entities.OrderDataBean;

import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;

import com.ibm.websphere.samples.daytrader.util.Log;

import com.ibm.websphere.samples.daytrader.util.TradeConfig;

/** * TradeServletAction provides servlet specific client side access to each of * the Trade brokerage user operations. These include login, logout, buy, sell, * getQuote, etc. TradeServletAction manages a web interface to Trade handling * HttpRequests/HttpResponse objects and forwarding results to the appropriate * JSP page for the web interface. TradeServletAction invokes * {@link TradeAction} methods to actually perform each trading operation. * */ public class TradeServletAction {

private TradeServices tAction = null;

TradeServletAction() {

tAction = new TradeAction();

}"|data_input/daytrader/daytrader.txt|dbc8d05a077c4cd683a695c5a7b18f1d
"private TradeServices tAction = null;

TradeServletAction() {

tAction = new TradeAction();

}

/** * Display User Profile information such as address, email, etc. for the * given Trader Dispatch to the Trade Account JSP for display * * @param userID *            The User to display profile info * @param ctx *            the servlet context * @param req *            the HttpRequest object * @param resp *            the HttpResponse object * @param results *            A short description of the results/success of this web request *            provided on the web page * @exception javax.servlet.ServletException *                If a servlet specific exception is encountered * @exception javax.io.IOException *                If an exception occurs while writing results back to the *                user * */ void doAccount(ServletContext ctx, HttpServletRequest req, HttpServletResponse resp, String userID, String results) throws javax.servlet.ServletException, java.io.IOException { try {

AccountDataBean accountData = tAction.getAccountData(userID); AccountProfileDataBean accountProfileData = tAction.getAccountProfileData(userID); Collection<?> orderDataBeans = (TradeConfig.getLongRun() ? new ArrayList<Object>() : (Collection<?>) tAction.getOrders(userID));"|data_input/daytrader/daytrader.txt|d978806bfe4a4336a226c8e1922b131a
"req.setAttribute(""accountData"", accountData); req.setAttribute(""accountProfileData"", accountProfileData); req.setAttribute(""orderDataBeans"", orderDataBeans); req.setAttribute(""results"", results); requestDispatch(ctx, req, resp, userID, TradeConfig.getPage(TradeConfig.ACCOUNT_PAGE)); } catch (java.lang.IllegalArgumentException e) { // this is a user // error so I will // forward them to another page rather than throw a 500 req.setAttribute(""results"", results + ""could not find account for userID = "" + userID); requestDispatch(ctx, req, resp, userID, TradeConfig.getPage(TradeConfig.HOME_PAGE)); // log the exception with an error level of 3 which means, handled // exception but would invalidate a automation run Log.error(""TradeServletAction.doAccount(...)"", ""illegal argument, information should be in exception string"", e); } catch (Exception e) { // log the exception with error page throw new ServletException(""TradeServletAction.doAccount(...)"" + "" exception user ="" + userID, e); }

}"|data_input/daytrader/daytrader.txt|4eb33ba29f0343878e8673a3af120ff1
"}

/** * Update User Profile information such as address, email, etc. for the * given Trader Dispatch to the Trade Account JSP for display If any in put * is incorrect revert back to the account page w/ an appropriate message * * @param userID *            The User to upddate profile info * @param password *            The new User password * @param cpassword *            Confirm password * @param fullname *            The new User fullname info * @param address *            The new User address info * @param cc *            The new User credit card info * @param email *            The new User email info * @param ctx *            the servlet context * @param req *            the HttpRequest object * @param resp *            the HttpResponse object * @exception javax.servlet.ServletException *                If a servlet specific exception is encountered * @exception javax.io.IOException *                If an exception occurs while writing results back to the *                user * */ void doAccountUpdate(ServletContext ctx, HttpServletRequest req, HttpServletResponse resp, String userID, String password, String cpassword, String fullName, String address, String creditcard, String email) throws javax.servlet.ServletException, java.io.IOException { String results = """";"|data_input/daytrader/daytrader.txt|f66afa2d13624091947bf30e45277f13
"// First verify input data boolean doUpdate = true; if (password.equals(cpassword) == false) { results = ""Update profile error: passwords do not match""; doUpdate = false; } else if (password.length() <= 0 || fullName.length() <= 0 || address.length() <= 0 || creditcard.length() <= 0 || email.length() <= 0) { results = ""Update profile error: please fill in all profile information fields""; doUpdate = false; } AccountProfileDataBean accountProfileData = new AccountProfileDataBean(userID, password, fullName, address, email, creditcard); try { if (doUpdate) { accountProfileData = tAction.updateAccountProfile(accountProfileData); results = ""Account profile update successful""; }

} catch (java.lang.IllegalArgumentException e) { // this is a user // error so I will // forward them to another page rather than throw a 500 req.setAttribute(""results"", results + ""invalid argument, check userID is correct, and the database is populated"" + userID); Log.error(e, ""TradeServletAction.doAccount(...)"", ""illegal argument, information should be in exception string"", ""treating this as a user error and forwarding on to a new page""); } catch (Exception e) { // log the exception with error page throw new ServletException(""TradeServletAction.doAccountUpdate(...)"" + "" exception user ="" + userID, e); } doAccount(ctx, req, resp, userID, results); }"|data_input/daytrader/daytrader.txt|3643d10119ca412ab503d330f06258fc
"/** * Buy a new holding of shares for the given trader Dispatch to the Trade * Portfolio JSP for display * * @param userID *            The User buying shares * @param symbol *            The stock to purchase * @param amount *            The quantity of shares to purchase * @param ctx *            the servlet context * @param req *            the HttpRequest object * @param resp *            the HttpResponse object * @exception javax.servlet.ServletException *                If a servlet specific exception is encountered * @exception javax.io.IOException *                If an exception occurs while writing results back to the *                user * */ void doBuy(ServletContext ctx, HttpServletRequest req, HttpServletResponse resp, String userID, String symbol, String quantity) throws ServletException, IOException {

String results = """";

try { OrderDataBean orderData = tAction.buy(userID, symbol, new Double(quantity).doubleValue(), TradeConfig.orderProcessingMode);"|data_input/daytrader/daytrader.txt|586ac326b6cf418b923aa2db2408032d
"try { OrderDataBean orderData = tAction.buy(userID, symbol, new Double(quantity).doubleValue(), TradeConfig.orderProcessingMode);

req.setAttribute(""orderData"", orderData); req.setAttribute(""results"", results); } catch (java.lang.IllegalArgumentException e) { // this is a user // error so I will // forward them to another page rather than throw a 500 req.setAttribute(""results"", results + ""illegal argument:""); requestDispatch(ctx, req, resp, userID, TradeConfig.getPage(TradeConfig.HOME_PAGE)); // log the exception with an error level of 3 which means, handled // exception but would invalidate a automation run Log.error(e, ""TradeServletAction.doBuy(...)"", ""illegal argument. userID = "" + userID, ""symbol = "" + symbol); } catch (Exception e) { // log the exception with error page throw new ServletException(""TradeServletAction.buy(...)"" + "" exception buying stock "" + symbol + "" for user "" + userID, e); } requestDispatch(ctx, req, resp, userID, TradeConfig.getPage(TradeConfig.ORDER_PAGE)); }"|data_input/daytrader/daytrader.txt|cc59963630bf49e48177519db71db621
"/** * Create the Trade Home page with personalized information such as the * traders account balance Dispatch to the Trade Home JSP for display * * @param ctx *            the servlet context * @param req *            the HttpRequest object * @param resp *            the HttpResponse object * @param results *            A short description of the results/success of this web request *            provided on the web page * @exception javax.servlet.ServletException *                If a servlet specific exception is encountered * @exception javax.io.IOException *                If an exception occurs while writing results back to the *                user * */ void doHome(ServletContext ctx, HttpServletRequest req, HttpServletResponse resp, String userID, String results) throws javax.servlet.ServletException, java.io.IOException {

try {

AccountDataBean accountData = tAction.getAccountData(userID);

Collection<?> holdingDataBeans = tAction.getHoldings(userID);

// Edge Caching: // Getting the MarketSummary has been moved to the JSP // MarketSummary.jsp. This makes the MarketSummary a // standalone ""fragment"", and thus is a candidate for // Edge caching. // marketSummaryData = tAction.getMarketSummary();"|data_input/daytrader/daytrader.txt|f21258729f414f5d893a2a84bd52f998
"req.setAttribute(""accountData"", accountData); req.setAttribute(""holdingDataBeans"", holdingDataBeans); // See Edge Caching above // req.setAttribute(""marketSummaryData"", marketSummaryData); req.setAttribute(""results"", results); } catch (java.lang.IllegalArgumentException e) { // this is a user // error so I will // forward them to another page rather than throw a 500 req.setAttribute(""results"", results + ""check userID = "" + userID + "" and that the database is populated""); requestDispatch(ctx, req, resp, userID, TradeConfig.getPage(TradeConfig.HOME_PAGE)); // log the exception with an error level of 3 which means, handled // exception but would invalidate a automation run Log.error(""TradeServletAction.doHome(...)"" + ""illegal argument, information should be in exception string"" + ""treating"|data_input/daytrader/daytrader.txt|e3708864eac34885bc05f0bfcb8ab87a
"this as a user error and forwarding on to a new page"", e); } catch (javax.ejb.FinderException e) { // this is a user error so I will // forward them to another page rather than throw a 500 req.setAttribute(""results"", results + ""\nCould not find account for + "" + userID); // requestDispatch(ctx, req, resp, // TradeConfig.getPage(TradeConfig.HOME_PAGE)); // log the exception with an error level of 3 which means, handled // exception but would invalidate a automation run Log.error(""TradeServletAction.doHome(...)"" + ""Error finding account for user "" + userID + ""treating this as a user error and forwarding on to a new page"", e); } catch (Exception e) { // log the exception with error page throw new ServletException(""TradeServletAction.doHome(...)"" + "" exception user ="" + userID, e); }

requestDispatch(ctx, req, resp, userID, TradeConfig.getPage(TradeConfig.HOME_PAGE)); }"|data_input/daytrader/daytrader.txt|ba4442b8daa94a05af5e2de5970155f5
"requestDispatch(ctx, req, resp, userID, TradeConfig.getPage(TradeConfig.HOME_PAGE)); }

/** * Login a Trade User. Dispatch to the Trade Home JSP for display * * @param userID *            The User to login * @param passwd *            The password supplied by the trader used to authenticate * @param ctx *            the servlet context * @param req *            the HttpRequest object * @param resp *            the HttpResponse object * @param results *            A short description of the results/success of this web request *            provided on the web page * @exception javax.servlet.ServletException *                If a servlet specific exception is encountered * @exception javax.io.IOException *                If an exception occurs while writing results back to the *                user * */ void doLogin(ServletContext ctx, HttpServletRequest req, HttpServletResponse resp, String userID, String passwd) throws javax.servlet.ServletException, java.io.IOException {

String results = """"; try { // Got a valid userID and passwd, attempt login

AccountDataBean accountData = tAction.login(userID, passwd);

if (accountData != null) { HttpSession session = req.getSession(true); session.setAttribute(""uidBean"", userID); session.setAttribute(""sessionCreationDate"", new java.util.Date());"|data_input/daytrader/daytrader.txt|c3141b93c1d245079fd401c36f789a0a
"results = ""Ready to Trade""; doHome(ctx, req, resp, userID, results); return; } else { req.setAttribute(""results"", results + ""\nCould not find account for + "" + userID); // log the exception with an error level of 3 which means, // handled exception but would invalidate a automation run Log.log(""TradeServletAction.doLogin(...)"", ""Error finding account for user "" + userID + """", ""user entered a bad username or the database is not populated""); } } catch (java.lang.IllegalArgumentException e) { // this is a user // error so I will // forward them to another page rather than throw a 500 req.setAttribute(""results"", results + ""illegal argument:"" + e.getMessage()); // log the exception with an error level of 3 which means, handled // exception but would invalidate a automation run Log.error(e, ""TradeServletAction.doLogin(...)"", ""illegal argument, information should be in exception string"", ""treating this as a user error and forwarding on to a new page"");

} catch (Exception e) { // log the exception with error page throw new ServletException(""TradeServletAction.doLogin(...)"" + ""Exception logging in user "" + userID + ""with password"" + passwd, e); }

requestDispatch(ctx, req, resp, userID, TradeConfig.getPage(TradeConfig.WELCOME_PAGE));

}"|data_input/daytrader/daytrader.txt|78dcd0327c664c7e8a68a9c89a43acbf
"requestDispatch(ctx, req, resp, userID, TradeConfig.getPage(TradeConfig.WELCOME_PAGE));

}

/** * Logout a Trade User Dispatch to the Trade Welcome JSP for display * * @param userID *            The User to logout * @param ctx *            the servlet context * @param req *            the HttpRequest object * @param resp *            the HttpResponse object * @param results *            A short description of the results/success of this web request *            provided on the web page * @exception javax.servlet.ServletException *                If a servlet specific exception is encountered * @exception javax.io.IOException *                If an exception occurs while writing results back to the *                user * */ void doLogout(ServletContext ctx, HttpServletRequest req, HttpServletResponse resp, String userID) throws ServletException, IOException { String results = """";

try {

tAction.logout(userID);

} catch (java.lang.IllegalArgumentException e) { // this is a user // error so I will // forward them to another page, at the end of the page. req.setAttribute(""results"", results + ""illegal argument:"" + e.getMessage());"|data_input/daytrader/daytrader.txt|956088cb1a954b1581ff18f61157b647
"// log the exception with an error level of 3 which means, handled // exception but would invalidate a automation run Log.error(e, ""TradeServletAction.doLogout(...)"", ""illegal argument, information should be in exception string"", ""treating this as a user error and forwarding on to a new page""); } catch (Exception e) { // log the exception and foward to a error page Log.error(e, ""TradeServletAction.doLogout(...):"", ""Error logging out"" + userID, ""fowarding to an error page""); // set the status_code to 500 throw new ServletException(""TradeServletAction.doLogout(...)"" + ""exception logging out user "" + userID, e); } HttpSession session = req.getSession(); if (session != null) { session.invalidate(); }

// Added to actually remove a user from the authentication cache req.logout();

Object o = req.getAttribute(""TSS-RecreateSessionInLogout""); if (o != null && ((Boolean) o).equals(Boolean.TRUE)) { // Recreate Session object before writing output to the response // Once the response headers are written back to the client the // opportunity // to create a new session in this request may be lost // This is to handle only the TradeScenarioServlet case session = req.getSession(true); } requestDispatch(ctx, req, resp, userID, TradeConfig.getPage(TradeConfig.WELCOME_PAGE)); }"|data_input/daytrader/daytrader.txt|e85ca34f360e452285777a270078cad2
"/** * Retrieve the current portfolio of stock holdings for the given trader * Dispatch to the Trade Portfolio JSP for display * * @param userID *            The User requesting to view their portfolio * @param ctx *            the servlet context * @param req *            the HttpRequest object * @param resp *            the HttpResponse object * @param results *            A short description of the results/success of this web request *            provided on the web page * @exception javax.servlet.ServletException *                If a servlet specific exception is encountered * @exception javax.io.IOException *                If an exception occurs while writing results back to the *                user * */ void doPortfolio(ServletContext ctx, HttpServletRequest req, HttpServletResponse resp, String userID, String results) throws ServletException, IOException {

try { // Get the holdiings for this user

Collection<QuoteDataBean> quoteDataBeans = new ArrayList<QuoteDataBean>(); Collection<?> holdingDataBeans = tAction.getHoldings(userID);

// Walk through the collection of user // holdings and creating a list of quotes if (holdingDataBeans.size() > 0) {"|data_input/daytrader/daytrader.txt|a29096556a514dada5f1edf21a39e58b
"// Walk through the collection of user // holdings and creating a list of quotes if (holdingDataBeans.size() > 0) {

Iterator<?> it = holdingDataBeans.iterator(); while (it.hasNext()) { HoldingDataBean holdingData = (HoldingDataBean) it.next(); QuoteDataBean quoteData = tAction.getQuote(holdingData.getQuoteID()); quoteDataBeans.add(quoteData); } } else { results = results + "". Your portfolio is empty. ""; } req.setAttribute(""results"", results); req.setAttribute(""holdingDataBeans"", holdingDataBeans); req.setAttribute(""quoteDataBeans"", quoteDataBeans); requestDispatch(ctx, req, resp, userID, TradeConfig.getPage(TradeConfig.PORTFOLIO_PAGE)); } catch (java.lang.IllegalArgumentException e) { // this is a user // error so I will // forward them to another page rather than throw a 500 req.setAttribute(""results"", results + ""illegal argument:"" + e.getMessage()); requestDispatch(ctx, req, resp, userID, TradeConfig.getPage(TradeConfig.PORTFOLIO_PAGE)); // log the exception with an error level of 3 which means, handled // exception but would invalidate a automation run Log.error(e, ""TradeServletAction.doPortfolio(...)"", ""illegal argument, information should be in exception string"", ""user error""); } catch (Exception e) { // log the exception with error page throw new ServletException(""TradeServletAction.doPortfolio(...)"" + "" exception user ="" + userID, e); } }"|data_input/daytrader/daytrader.txt|78845ecd346c40f2987ea45d2388a060
"/** * Retrieve the current Quote for the given stock symbol Dispatch to the * Trade Quote JSP for display * * @param userID *            The stock symbol used to get the current quote * @param ctx *            the servlet context * @param req *            the HttpRequest object * @param resp *            the HttpResponse object * @exception javax.servlet.ServletException *                If a servlet specific exception is encountered * @exception javax.io.IOException *                If an exception occurs while writing results back to the *                user * */ void doQuotes(ServletContext ctx, HttpServletRequest req, HttpServletResponse resp, String userID, String symbols) throws ServletException, IOException {

// Edge Caching: // Getting Quotes has been moved to the JSP // Quote.jsp. This makes each Quote a // standalone ""fragment"", and thus is a candidate for // Edge caching. //

requestDispatch(ctx, req, resp, userID, TradeConfig.getPage(TradeConfig.QUOTE_PAGE)); }"|data_input/daytrader/daytrader.txt|b6e60739045a4a34b58cda25d18ef348
"requestDispatch(ctx, req, resp, userID, TradeConfig.getPage(TradeConfig.QUOTE_PAGE)); }

/** * Register a new trader given the provided user Profile information such as * address, email, etc. Dispatch to the Trade Home JSP for display * * @param userID *            The User to create * @param passwd *            The User password * @param fullname *            The new User fullname info * @param ccn *            The new User credit card info * @param money *            The new User opening account balance * @param address *            The new User address info * @param email *            The new User email info * @return The userID of the new trader * @param ctx *            the servlet context * @param req *            the HttpRequest object * @param resp *            the HttpResponse object * @exception javax.servlet.ServletException *                If a servlet specific exception is encountered * @exception javax.io.IOException *                If an exception occurs while writing results back to the *                user * */ void doRegister(ServletContext ctx, HttpServletRequest req, HttpServletResponse resp, String userID, String passwd, String cpasswd, String fullname, String ccn, String openBalanceString, String email, String address) throws ServletException, IOException { String results = """";

try { // Validate user passwords match and are atleast 1 char in length if ((passwd.equals(cpasswd)) && (passwd.length() >= 1)) {"|data_input/daytrader/daytrader.txt|963ada451a09450fb9be9235a1aa0007
"try { // Validate user passwords match and are atleast 1 char in length if ((passwd.equals(cpasswd)) && (passwd.length() >= 1)) {

AccountDataBean accountData = tAction.register(userID, passwd, fullname, address, email, ccn, new BigDecimal(openBalanceString)); if (accountData == null) { results = ""Registration operation failed;""; System.out.println(results); req.setAttribute(""results"", results); requestDispatch(ctx, req, resp, userID, TradeConfig.getPage(TradeConfig.REGISTER_PAGE)); } else { doLogin(ctx, req, resp, userID, passwd); results = ""Registration operation succeeded;  Account "" + accountData.getAccountID() + "" has been created. ""; req.setAttribute(""results"", results);

} } else { // Password validation failed results = ""Registration operation failed, your passwords did not match""; System.out.println(results); req.setAttribute(""results"", results); requestDispatch(ctx, req, resp, userID, TradeConfig.getPage(TradeConfig.REGISTER_PAGE)); }

} catch (Exception e) { // log the exception with error page throw new ServletException(""TradeServletAction.doRegister(...)"" + "" exception user ="" + userID, e); } }"|data_input/daytrader/daytrader.txt|39c7ee543993420ca52351450ff25deb
text|source|chunk_id
"/** * Sell a current holding of stock shares for the given trader. Dispatch to * the Trade Portfolio JSP for display * * @param userID *            The User buying shares * @param symbol *            The stock to sell * @param indx *            The unique index identifying the users holding to sell * @param ctx *            the servlet context * @param req *            the HttpRequest object * @param resp *            the HttpResponse object * @exception javax.servlet.ServletException *                If a servlet specific exception is encountered * @exception javax.io.IOException *                If an exception occurs while writing results back to the *                user * */ void doSell(ServletContext ctx, HttpServletRequest req, HttpServletResponse resp, String userID, Integer holdingID) throws ServletException, IOException { String results = """"; try { OrderDataBean orderData = tAction.sell(userID, holdingID, TradeConfig.orderProcessingMode);"|data_input/daytrader/daytrader.txt|282496a5621c4b069b6f4e55833a99dc
"req.setAttribute(""orderData"", orderData); req.setAttribute(""results"", results); } catch (java.lang.IllegalArgumentException e) { // this is a user // error so I will // just log the exception and then later on I will redisplay the // portfolio page // because this is just a user exception Log.error(e, ""TradeServletAction.doSell(...)"", ""illegal argument, information should be in exception string"", ""user error""); } catch (Exception e) { // log the exception with error page throw new ServletException(""TradeServletAction.doSell(...)"" + "" exception selling holding "" + holdingID + "" for user ="" + userID, e); } requestDispatch(ctx, req, resp, userID, TradeConfig.getPage(TradeConfig.ORDER_PAGE)); }

void doWelcome(ServletContext ctx, HttpServletRequest req, HttpServletResponse resp, String status) throws ServletException, IOException {

req.setAttribute(""results"", status); requestDispatch(ctx, req, resp, null, TradeConfig.getPage(TradeConfig.WELCOME_PAGE)); }

private void requestDispatch(ServletContext ctx, HttpServletRequest req, HttpServletResponse resp, String userID, String page) throws ServletException, IOException {

ctx.getRequestDispatcher(page).include(req, resp);

}

void doMarketSummary(ServletContext ctx, HttpServletRequest req, HttpServletResponse resp, String userID) throws ServletException, IOException { req.setAttribute(""results"", ""test""); requestDispatch(ctx, req, resp, userID, TradeConfig.getPage(TradeConfig.MARKET_SUMMARY_PAGE));"|data_input/daytrader/daytrader.txt|fcb26928352042cdb3e8d38a71d480e3
"} } /home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/TradeWebContextListener.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web;

import java.io.InputStream;

import java.util.Properties;

import javax.servlet.ServletContextEvent;

import javax.servlet.ServletContextListener;

import javax.servlet.annotation.WebListener;

import com.ibm.websphere.samples.daytrader.direct.TradeDirect;

import com.ibm.websphere.samples.daytrader.util.Log;

import com.ibm.websphere.samples.daytrader.util.TradeConfig;

@WebListener() public class TradeWebContextListener implements ServletContextListener {

// receieve trade web app startup/shutown events to start(initialized)/stop // TradeDirect @Override public void contextInitialized(ServletContextEvent event) { Log.trace(""TradeWebContextListener contextInitialized -- initializing TradeDirect"");"|data_input/daytrader/daytrader.txt|338c33f8e6d44d5da3508f80130eb269
"// Load settings from properties file (if it exists) Properties prop = new Properties(); InputStream stream =  event.getServletContext().getResourceAsStream(""/properties/daytrader.properties"");

try { prop.load(stream); System.out.println(""Settings from daytrader.properties: "" + prop); TradeConfig.setRunTimeMode(Integer.parseInt(prop.getProperty(""runtimeMode""))); TradeConfig.setUseRemoteEJBInterface(Boolean.parseBoolean(prop.getProperty(""useRemoteEJBInterface""))); TradeConfig.setOrderProcessingMode(Integer.parseInt(prop.getProperty(""orderProcessingMode""))); TradeConfig.setWebInterface(Integer.parseInt(prop.getProperty(""webInterface""))); //TradeConfig.setCachingType(Integer.parseInt(prop.getProperty(""cachingType""))); //TradeConfig.setDistributedMapCacheSize(Integer.parseInt(prop.getProperty(""cacheSize""))); TradeConfig.setMAX_USERS(Integer.parseInt(prop.getProperty(""maxUsers""))); TradeConfig.setMAX_QUOTES(Integer.parseInt(prop.getProperty(""maxQuotes"")));"|data_input/daytrader/daytrader.txt|1c2b023f492c460eab9b41cf38955097
"TradeConfig.setMarketSummaryInterval(Integer.parseInt(prop.getProperty(""marketSummaryInterval""))); TradeConfig.setPrimIterations(Integer.parseInt(prop.getProperty(""primIterations""))); TradeConfig.setPublishQuotePriceChange(Boolean.parseBoolean(prop.getProperty(""publishQuotePriceChange""))); TradeConfig.setPercentSentToWebsocket(Integer.parseInt(prop.getProperty(""percentSentToWebsocket""))); TradeConfig.setDisplayOrderAlerts(Boolean.parseBoolean(prop.getProperty(""displayOrderAlerts""))); TradeConfig.setLongRun(Boolean.parseBoolean(prop.getProperty(""longRun""))); TradeConfig.setTrace(Boolean.parseBoolean(prop.getProperty(""trace""))); TradeConfig.setActionTrace(Boolean.parseBoolean(prop.getProperty(""actionTrace""))); } catch (Exception e) { System.out.println(""daytrader.properties not found""); }

TradeDirect.init();

}

@Override public void contextDestroyed(ServletContextEvent event) { Log.trace(""TradeWebContextListener  contextDestroy calling TradeDirect:destroy()""); // TradeDirect.destroy(); }

}"|data_input/daytrader/daytrader.txt|20e0215dbadc452dbf1b19180adbd4ff
"}

/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/jsf/AccountDataJSF.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.jsf;

import java.math.BigDecimal;

import java.util.ArrayList;

import java.util.Collection;

import java.util.Date;

import java.util.Iterator;

import javax.annotation.PostConstruct;

import javax.enterprise.context.RequestScoped;

import javax.faces.context.ExternalContext;

import javax.inject.Inject;

import javax.inject.Named;

import javax.servlet.http.HttpSession;

import com.ibm.websphere.samples.daytrader.TradeAction;

import com.ibm.websphere.samples.daytrader.entities.AccountDataBean;

import com.ibm.websphere.samples.daytrader.entities.OrderDataBean;

import com.ibm.websphere.samples.daytrader.util.FinancialUtils;

import com.ibm.websphere.samples.daytrader.util.TradeConfig;

@Named(""accountdata"")"|data_input/daytrader/daytrader.txt|876ba33686c04b17ae71d01cc25d75ba
"import com.ibm.websphere.samples.daytrader.util.FinancialUtils;

import com.ibm.websphere.samples.daytrader.util.TradeConfig;

@Named(""accountdata"")

@RequestScoped

public class AccountDataJSF {

@Inject

private ExternalContext facesExternalContext;

@Inject

private TradeAction tradeAction;

private Date sessionCreationDate;

private Date currentTime;

private String profileID;

private Integer accountID;

private Date creationDate;

private int loginCount;

private Date lastLogin;

private int logoutCount;

private BigDecimal balance;

private BigDecimal openBalance;

private Integer numberHoldings;

private BigDecimal holdingsTotal;

private BigDecimal sumOfCashHoldings;

private BigDecimal gain;

private BigDecimal gainPercent;

private OrderData[] closedOrders;

private OrderData[] allOrders;

private Integer numberOfOrders = 0; private Integer numberOfOrderRows = 5;

public void toggleShowAllRows() {

setNumberOfOrderRows(0);

}

@PostConstruct

public void home() {

try { HttpSession session = (HttpSession) facesExternalContext.getSession(true);

// Get the data and then parse String userID = (String) session.getAttribute(""uidBean""); AccountDataBean accountData = tradeAction.getAccountData(userID); Collection<?> holdingDataBeans = tradeAction.getHoldings(userID);

if (TradeConfig.getDisplayOrderAlerts()) {

Collection<?> closedOrders = tradeAction.getClosedOrders(userID);"|data_input/daytrader/daytrader.txt|54715e79203c45df8fa8d47489002888
"if (TradeConfig.getDisplayOrderAlerts()) {

Collection<?> closedOrders = tradeAction.getClosedOrders(userID);

if (closedOrders != null && closedOrders.size() > 0) { session.setAttribute(""closedOrders"", closedOrders); OrderData[] orderjsfs = new OrderData[closedOrders.size()]; Iterator<?> it = closedOrders.iterator(); int i = 0;

while (it.hasNext()) { OrderDataBean order = (OrderDataBean) it.next(); OrderData r = new OrderData(order.getOrderID(), order.getOrderStatus(), order.getOpenDate(), order.getCompletionDate(), order.getOrderFee(), order.getOrderType(), order.getQuantity(), order.getSymbol()); orderjsfs[i] = r; i++; }

setClosedOrders(orderjsfs);

}

}

Collection<?> orderDataBeans = (TradeConfig.getLongRun() ? new ArrayList<Object>() : (Collection<?>) tradeAction.getOrders(userID));

if (orderDataBeans != null && orderDataBeans.size() > 0) { session.setAttribute(""orderDataBeans"", orderDataBeans); OrderData[] orderjsfs = new OrderData[orderDataBeans.size()]; Iterator<?> it = orderDataBeans.iterator(); int i = 0;

while (it.hasNext()) { OrderDataBean order = (OrderDataBean) it.next(); OrderData r = new OrderData(order.getOrderID(), order.getOrderStatus(), order.getOpenDate(), order.getCompletionDate(), order.getOrderFee(), order.getOrderType(), order.getQuantity(), order.getSymbol(),order.getPrice()); orderjsfs[i] = r; i++; } setNumberOfOrders(orderDataBeans.size()); setAllOrders(orderjsfs); }"|data_input/daytrader/daytrader.txt|4d8918ee010148828fb04ed6dede1cef
"setSessionCreationDate((Date) session.getAttribute(""sessionCreationDate"")); setCurrentTime(new java.util.Date()); doAccountData(accountData, holdingDataBeans); } catch (Exception e) { e.printStackTrace(); } }

private void doAccountData(AccountDataBean accountData, Collection<?> holdingDataBeans) { setProfileID(accountData.getProfileID()); setAccountID(accountData.getAccountID()); setCreationDate(accountData.getCreationDate()); setLoginCount(accountData.getLoginCount()); setLogoutCount(accountData.getLogoutCount()); setLastLogin(accountData.getLastLogin()); setOpenBalance(accountData.getOpenBalance()); setBalance(accountData.getBalance()); setNumberHoldings(holdingDataBeans.size()); setHoldingsTotal(FinancialUtils.computeHoldingsTotal(holdingDataBeans)); setSumOfCashHoldings(balance.add(holdingsTotal)); setGain(FinancialUtils.computeGain(sumOfCashHoldings, openBalance)); setGainPercent(FinancialUtils.computeGainPercent(sumOfCashHoldings, openBalance)); }

public Date getSessionCreationDate() {

return sessionCreationDate;

}

public void setSessionCreationDate(Date sessionCreationDate) { this.sessionCreationDate = sessionCreationDate; }

public Date getCurrentTime() {

return currentTime;

}

public void setCurrentTime(Date currentTime) { this.currentTime = currentTime; }

public String getProfileID() {

return profileID;

}

public void setProfileID(String profileID) { this.profileID = profileID; }"|data_input/daytrader/daytrader.txt|acd2902883f5412aa41daaaa9ea754bd
"public String getProfileID() {

return profileID;

}

public void setProfileID(String profileID) { this.profileID = profileID; }

public void setAccountID(Integer accountID) { this.accountID = accountID; }

public Integer getAccountID() {

return accountID;

}

public void setCreationDate(Date creationDate) { this.creationDate = creationDate; }

public Date getCreationDate() {

return creationDate;

}

public void setLoginCount(int loginCount) { this.loginCount = loginCount; }

public int getLoginCount() {

return loginCount;

}

public void setBalance(BigDecimal balance) { this.balance = balance; }

public BigDecimal getBalance() {

return balance;

}

public void setOpenBalance(BigDecimal openBalance) { this.openBalance = openBalance; }

public BigDecimal getOpenBalance() {

return openBalance;

}

public void setHoldingsTotal(BigDecimal holdingsTotal) { this.holdingsTotal = holdingsTotal; }

public BigDecimal getHoldingsTotal() {

return holdingsTotal;

}

public void setSumOfCashHoldings(BigDecimal sumOfCashHoldings) { this.sumOfCashHoldings = sumOfCashHoldings; }

public BigDecimal getSumOfCashHoldings() {

return sumOfCashHoldings;

}

public void setGain(BigDecimal gain) { this.gain = gain; }

public BigDecimal getGain() {

return gain;

}

public void setGainPercent(BigDecimal gainPercent) { this.gainPercent = gainPercent.setScale(2); }

public BigDecimal getGainPercent() {

return gainPercent;

}"|data_input/daytrader/daytrader.txt|98f6cc12ceb24380aa360a6cfffeaa3c
"public BigDecimal getGainPercent() {

return gainPercent;

}

public void setNumberHoldings(Integer numberHoldings) { this.numberHoldings = numberHoldings; }

public Integer getNumberHoldings() {

return numberHoldings;

}

public OrderData[] getClosedOrders() {

return closedOrders;

}

public void setClosedOrders(OrderData[] closedOrders) { this.closedOrders = closedOrders; }

public void setLastLogin(Date lastLogin) { this.lastLogin = lastLogin; }

public Date getLastLogin() {

return lastLogin;

}

public void setLogoutCount(int logoutCount) { this.logoutCount = logoutCount; }

public int getLogoutCount() {

return logoutCount;

}

public void setAllOrders(OrderData[] allOrders) { this.allOrders = allOrders; }

public OrderData[] getAllOrders() {

return allOrders;

}

public String getGainHTML() {

return FinancialUtils.printGainHTML(gain);

}

public String getGainPercentHTML() {

return FinancialUtils.printGainPercentHTML(gainPercent);

}

public Integer getNumberOfOrderRows() {

return numberOfOrderRows;

}

public void setNumberOfOrderRows(Integer numberOfOrderRows) { this.numberOfOrderRows = numberOfOrderRows; }

public Integer getNumberOfOrders() {

return numberOfOrders;

}

public void setNumberOfOrders(Integer numberOfOrders) { this.numberOfOrders = numberOfOrders; } }"|data_input/daytrader/daytrader.txt|2b903cf856e54529ac56e13acf9ffdd3
"return numberOfOrders;

}

public void setNumberOfOrders(Integer numberOfOrders) { this.numberOfOrders = numberOfOrders; } }

/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/jsf/ExternalContextProducer.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.jsf;

import javax.enterprise.context.RequestScoped;

import javax.enterprise.inject.Produces;

import javax.faces.context.ExternalContext;

import javax.faces.context.FacesContext;

public class ExternalContextProducer {

@Produces

@RequestScoped

public ExternalContext produceFacesExternalContext() {

return FacesContext.getCurrentInstance().getExternalContext();

}

}"|data_input/daytrader/daytrader.txt|1ea883f833bf4d7a8437c4c96bd013cc
"@RequestScoped

public ExternalContext produceFacesExternalContext() {

return FacesContext.getCurrentInstance().getExternalContext();

}

}

/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/jsf/HoldingData.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.jsf;

import java.io.Serializable;

import java.math.BigDecimal;

import java.util.Date;

import javax.enterprise.context.SessionScoped;

import javax.inject.Named;

import com.ibm.websphere.samples.daytrader.util.FinancialUtils;

@Named @SessionScoped public class HoldingData implements Serializable {

private static final long serialVersionUID = -4760036695773749721L;

private Integer holdingID;

private double quantity;

private BigDecimal purchasePrice;

private Date purchaseDate;

private String quoteID;

private BigDecimal price;

private BigDecimal basis;"|data_input/daytrader/daytrader.txt|61e1bf177f9d449c936c04d7da86fffd
"private BigDecimal purchasePrice;

private Date purchaseDate;

private String quoteID;

private BigDecimal price;

private BigDecimal basis;

private BigDecimal marketValue;

private BigDecimal gain;

public void setHoldingID(Integer holdingID) { this.holdingID = holdingID; }

public Integer getHoldingID() {

return holdingID;

}

public void setQuantity(double quantity) { this.quantity = quantity; }

public double getQuantity() {

return quantity;

}

public void setPurchasePrice(BigDecimal purchasePrice) { this.purchasePrice = purchasePrice; }

public BigDecimal getPurchasePrice() {

return purchasePrice;

}

public void setPurchaseDate(Date purchaseDate) { this.purchaseDate = purchaseDate; }

public Date getPurchaseDate() {

return purchaseDate;

}

public void setQuoteID(String quoteID) { this.quoteID = quoteID; }

public String getQuoteID() {

return quoteID;

}

public void setPrice(BigDecimal price) { this.price = price; }

public BigDecimal getPrice() {

return price;

}

public void setBasis(BigDecimal basis) { this.basis = basis; }

public BigDecimal getBasis() {

return basis;

}

public void setMarketValue(BigDecimal marketValue) { this.marketValue = marketValue; }

public BigDecimal getMarketValue() {

return marketValue;

}

public void setGain(BigDecimal gain) { this.gain = gain; }

public BigDecimal getGain() {

return gain;

}

public String getGainHTML() {

return FinancialUtils.printGainHTML(gain);

}

}"|data_input/daytrader/daytrader.txt|0c2ef20e277b488eac416dce1aeca07a
"public BigDecimal getGain() {

return gain;

}

public String getGainHTML() {

return FinancialUtils.printGainHTML(gain);

}

}

/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/jsf/JSFLoginFilter.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.jsf;

import java.io.IOException;

import javax.servlet.Filter;

import javax.servlet.FilterChain;

import javax.servlet.FilterConfig;

import javax.servlet.ServletException;

import javax.servlet.ServletRequest;

import javax.servlet.ServletResponse;

//import javax.servlet.annotation.WebFilter;

import javax.servlet.annotation.WebFilter;

import javax.servlet.http.HttpServletRequest;

import javax.servlet.http.HttpServletResponse;

import javax.servlet.http.HttpSession;

@WebFilter(filterName = ""JSFLoginFilter"", urlPatterns = ""*.faces"") public class JSFLoginFilter implements Filter {"|data_input/daytrader/daytrader.txt|816dc46befa944a1a767f4868754a9c9
"@WebFilter(filterName = ""JSFLoginFilter"", urlPatterns = ""*.faces"") public class JSFLoginFilter implements Filter {

public JSFLoginFilter() {

super();

}

/** * @see Filter#init(FilterConfig) */ private FilterConfig filterConfig = null;

@Override public void init(FilterConfig filterConfig) throws ServletException { this.filterConfig = filterConfig; }

/** * @see Filter#doFilter(ServletRequest, ServletResponse, FilterChain) */ @Override public void doFilter(ServletRequest req, ServletResponse resp, FilterChain chain) throws IOException, ServletException { if (filterConfig == null) { return; }

HttpServletRequest request = (HttpServletRequest) req; HttpServletResponse response = (HttpServletResponse) resp;

HttpSession session = request.getSession(); String userID = (String) session.getAttribute(""uidBean"");

// If user has not logged in and is trying access account information, // redirect to login page. if (userID == null) { String url = request.getServletPath();

if (url.contains(""home"") || url.contains(""account"") || url.contains(""portfolio"") || url.contains(""quote"") || url.contains(""order"") || url.contains(""marketSummary"")) { System.out.println(""JSF service error: User Not Logged in""); response.sendRedirect(""welcome.faces""); return; } }

chain.doFilter(req, resp/

wrapper

/);

}

/*

@see Filter#destroy()

/

@Override

public void destroy() {

this.filterConfig = null;

}

}"|data_input/daytrader/daytrader.txt|c6b537ac001f4d318cd90650fd7f5c9b
"chain.doFilter(req, resp/

wrapper

/);

}

/*

@see Filter#destroy()

/

@Override

public void destroy() {

this.filterConfig = null;

}

}

/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/jsf/LoginValidator.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.jsf;

import java.util.regex.Matcher;

import java.util.regex.Pattern;

import javax.faces.application.FacesMessage;

import javax.faces.component.UIComponent;

import javax.faces.context.FacesContext;

import javax.faces.validator.FacesValidator;

import javax.faces.validator.Validator;

import javax.faces.validator.ValidatorException;

import com.ibm.websphere.samples.daytrader.util.Log;

@FacesValidator(""loginValidator"") public class LoginValidator implements Validator{"|data_input/daytrader/daytrader.txt|ccc9ea23a6554650a6b7b193efa7df0f
"import com.ibm.websphere.samples.daytrader.util.Log;

@FacesValidator(""loginValidator"") public class LoginValidator implements Validator{

static String loginRegex = ""uid:\\d+""; static Pattern pattern = Pattern.compile(loginRegex); static Matcher matcher;

// Simple JSF validator to make sure username starts with uid: and at least 1 number. public LoginValidator() { }

@Override public void validate(FacesContext context, UIComponent component, Object value) throws ValidatorException { if (Log.doTrace()) { Log.trace(""LoginValidator.validate"",""Validating submitted login name -- "" + value.toString()); } matcher = pattern.matcher(value.toString());

if (!matcher.matches()) { FacesMessage msg = new FacesMessage(""Username validation failed. Please provide username in this format: uid:#""); msg.setSeverity(FacesMessage.SEVERITY_ERROR);"|data_input/daytrader/daytrader.txt|db19bb7c3bef4a36bfbe11fe43f1412d
"throw new ValidatorException(msg); } } } /home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/jsf/MarketSummaryJSF.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.jsf;

import java.math.BigDecimal;

import java.math.RoundingMode;

import java.util.Collection;

import java.util.Date;

import java.util.Iterator;

import javax.annotation.PostConstruct;

import javax.enterprise.context.RequestScoped;

import javax.inject.Inject;

import javax.inject.Named;

import com.ibm.websphere.samples.daytrader.TradeAction;

import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;

import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;

import com.ibm.websphere.samples.daytrader.util.FinancialUtils;

@Named(""marketdata"")

@RequestScoped

public class MarketSummaryJSF {

@Inject

private TradeAction tradeAction;"|data_input/daytrader/daytrader.txt|844e985dad254f59a932d9bcd2603c6d
"@Named(""marketdata"")

@RequestScoped

public class MarketSummaryJSF {

@Inject

private TradeAction tradeAction;

private BigDecimal TSIA;

private BigDecimal openTSIA;

private double volume;

private QuoteData[] topGainers;

private QuoteData[] topLosers;

private Date summaryDate;

// cache the gainPercent once computed for this bean private BigDecimal gainPercent = null;

@PostConstruct

public void getMarketSummary() {

try {

MarketSummaryDataBean marketSummaryData = tradeAction.getMarketSummary();

setSummaryDate(marketSummaryData.getSummaryDate());

setTSIA(marketSummaryData.getTSIA());

setVolume(marketSummaryData.getVolume());

setGainPercent(marketSummaryData.getGainPercent());

Collection<?> topGainers = marketSummaryData.getTopGainers();

Iterator<?> gainers = topGainers.iterator(); int count = 0; QuoteData[] gainerjsfs = new QuoteData[5];

while (gainers.hasNext() && (count < 5)) { QuoteDataBean quote = (QuoteDataBean) gainers.next(); QuoteData r = new QuoteData(quote.getPrice(), quote.getOpen(), quote.getSymbol()); gainerjsfs[count] = r; count++; }

setTopGainers(gainerjsfs);

Collection<?> topLosers = marketSummaryData.getTopLosers();

QuoteData[] loserjsfs = new QuoteData[5]; count = 0; Iterator<?> losers = topLosers.iterator();

while (losers.hasNext() && (count < 5)) { QuoteDataBean quote = (QuoteDataBean) losers.next(); QuoteData r = new QuoteData(quote.getPrice(), quote.getOpen(), quote.getSymbol()); loserjsfs[count] = r; count++; }"|data_input/daytrader/daytrader.txt|82373136b42747259989416e9bf67095
"setTopLosers(loserjsfs);

} catch (Exception e) { e.printStackTrace(); } }

public void setTSIA(BigDecimal tSIA) { TSIA = tSIA; }

public BigDecimal getTSIA() {

return TSIA;

}

public void setOpenTSIA(BigDecimal openTSIA) { this.openTSIA = openTSIA; }

public BigDecimal getOpenTSIA() {

return openTSIA;

}

public void setVolume(double volume) { this.volume = volume; }

public double getVolume() {

return volume;

}

public void setTopGainers(QuoteData[] topGainers) { this.topGainers = topGainers; }

public QuoteData[] getTopGainers() {

return topGainers;

}

public void setTopLosers(QuoteData[] topLosers) { this.topLosers = topLosers; }

public QuoteData[] getTopLosers() {

return topLosers;

}

public void setSummaryDate(Date summaryDate) { this.summaryDate = summaryDate; }

public Date getSummaryDate() {

return summaryDate;

}

public void setGainPercent(BigDecimal gainPercent) { this.gainPercent = gainPercent.setScale(2,RoundingMode.HALF_UP); }

public BigDecimal getGainPercent() {

return gainPercent;

}

public String getGainPercentHTML() {

return FinancialUtils.printGainPercentHTML(gainPercent);

}

}"|data_input/daytrader/daytrader.txt|3003019da631482a9565110f4eba57f7
"return gainPercent;

}

public String getGainPercentHTML() {

return FinancialUtils.printGainPercentHTML(gainPercent);

}

}

/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/jsf/OrderData.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.jsf;

import java.math.BigDecimal;

import java.util.Date;

public class OrderData {

private Integer orderID;

private String orderStatus;

private Date openDate;

private Date completionDate;

private BigDecimal orderFee;

private String orderType;

private double quantity;

private String symbol;

private BigDecimal total;

private BigDecimal price;"|data_input/daytrader/daytrader.txt|75682f17d3674a1090348fbc6351e17d
"private String orderType;

private double quantity;

private String symbol;

private BigDecimal total;

private BigDecimal price;

public OrderData(Integer orderID, String orderStatus, Date openDate, Date completeDate, BigDecimal orderFee, String orderType, double quantity, String symbol) { this.orderID = orderID; this.completionDate = completeDate; this.openDate = openDate; this.orderFee = orderFee; this.orderType = orderType; this.orderStatus = orderStatus; this.quantity = quantity; this.symbol = symbol; }

public OrderData(Integer orderID, String orderStatus, Date openDate, Date completeDate, BigDecimal orderFee, String orderType, double quantity, String symbol, BigDecimal price) { this.orderID = orderID; this.completionDate = completeDate; this.openDate = openDate; this.orderFee = orderFee; this.orderType = orderType; this.orderStatus = orderStatus; this.quantity = quantity; this.symbol = symbol; this.price = price; this.total = price.multiply(new BigDecimal(quantity));

}

public void setOrderID(Integer orderID) { this.orderID = orderID; }

public Integer getOrderID() {

return orderID;

}

public void setOrderStatus(String orderStatus) { this.orderStatus = orderStatus; }

public String getOrderStatus() {

return orderStatus;

}

public void setOpenDate(Date openDate) { this.openDate = openDate; }

public Date getOpenDate() {

return openDate;

}

public void setCompletionDate(Date completionDate) { this.completionDate = completionDate; }"|data_input/daytrader/daytrader.txt|6ce7076145a142bd94ce332d8b906199
"public Date getOpenDate() {

return openDate;

}

public void setCompletionDate(Date completionDate) { this.completionDate = completionDate; }

public Date getCompletionDate() {

return completionDate;

}

public void setOrderFee(BigDecimal orderFee) { this.orderFee = orderFee; }

public BigDecimal getOrderFee() {

return orderFee;

}

public void setOrderType(String orderType) { this.orderType = orderType; }

public String getOrderType() {

return orderType;

}

public void setQuantity(double quantity) { this.quantity = quantity; }

public double getQuantity() {

return quantity;

}

public void setSymbol(String symbol) { this.symbol = symbol; }

public String getSymbol() {

return symbol;

}

public void setTotal(BigDecimal total) { this.total = total; }

public BigDecimal getTotal() {

return total;

}

public void setPrice(BigDecimal price) { this.price = price; }

public BigDecimal getPrice() {

return price;

}

}"|data_input/daytrader/daytrader.txt|543d3e468fca49e0b9f7f48c643ca4aa
"return total;

}

public void setPrice(BigDecimal price) { this.price = price; }

public BigDecimal getPrice() {

return price;

}

}

/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/jsf/OrderDataJSF.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.jsf;

import java.math.BigDecimal;

import java.util.ArrayList;

import javax.annotation.PostConstruct;

import javax.faces.context.ExternalContext;

import javax.inject.Inject;

import javax.inject.Named;

import javax.servlet.http.HttpSession;

import com.ibm.websphere.samples.daytrader.TradeAction;

import com.ibm.websphere.samples.daytrader.entities.OrderDataBean;

import com.ibm.websphere.samples.daytrader.util.TradeConfig;

@Named(""orderdata"")

public class OrderDataJSF {

@Inject

private ExternalContext facesExternalContext;

@Inject

private TradeAction tradeAction;"|data_input/daytrader/daytrader.txt|f4661e197bf44af9974159c1aa8c6027
"@Named(""orderdata"")

public class OrderDataJSF {

@Inject

private ExternalContext facesExternalContext;

@Inject

private TradeAction tradeAction;

private OrderData[] allOrders;

private OrderData orderData;

public OrderDataJSF() {

}

public void getAllOrder() { try { HttpSession session = (HttpSession) facesExternalContext.getSession(true); String userID = (String) session.getAttribute(""uidBean"");

ArrayList<?> orderDataBeans = (TradeConfig.getLongRun() ? new ArrayList<Object>() : (ArrayList<?>) tradeAction.getOrders(userID)); OrderData[] orders = new OrderData[orderDataBeans.size()];

int count = 0;

for (Object order : orderDataBeans) { OrderData r = new OrderData(((OrderDataBean) order).getOrderID(), ((OrderDataBean) order).getOrderStatus(), ((OrderDataBean) order).getOpenDate(), ((OrderDataBean) order).getCompletionDate(), ((OrderDataBean) order).getOrderFee(), ((OrderDataBean) order).getOrderType(), ((OrderDataBean) order).getQuantity(), ((OrderDataBean) order).getSymbol()); r.setPrice(((OrderDataBean) order).getPrice()); r.setTotal(r.getPrice().multiply(new BigDecimal(r.getQuantity()))); orders[count] = r; count++; }

setAllOrders(orders); } catch (Exception e) { e.printStackTrace(); }

}

@PostConstruct public void getOrder() { HttpSession session = (HttpSession) facesExternalContext.getSession(true); OrderData order = (OrderData) session.getAttribute(""orderData"");

if (order != null) { setOrderData(order); } }"|data_input/daytrader/daytrader.txt|6194cdf95ec247908fe4ee98ad6f473b
"if (order != null) { setOrderData(order); } }

public void setAllOrders(OrderData[] allOrders) { this.allOrders = allOrders; }

public OrderData[] getAllOrders() {

return allOrders;

}

public void setOrderData(OrderData orderData) { this.orderData = orderData; }

public OrderData getOrderData() {

return orderData;

}

}

/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/jsf/PortfolioJSF.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.jsf;

import java.math.BigDecimal;

import java.util.ArrayList;

import java.util.Collection;

import java.util.Iterator;

import javax.annotation.PostConstruct;

import javax.enterprise.context.RequestScoped;

import javax.faces.component.html.HtmlDataTable;

import javax.faces.context.ExternalContext;

import javax.inject.Inject;

import javax.inject.Named;

import javax.servlet.http.HttpSession;"|data_input/daytrader/daytrader.txt|b82d02fa2246437188e0f6cb50a6a542
"import javax.faces.context.ExternalContext;

import javax.inject.Inject;

import javax.inject.Named;

import javax.servlet.http.HttpSession;

import com.ibm.websphere.samples.daytrader.TradeAction;

import com.ibm.websphere.samples.daytrader.entities.HoldingDataBean;

import com.ibm.websphere.samples.daytrader.entities.OrderDataBean;

import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;

import com.ibm.websphere.samples.daytrader.util.FinancialUtils;

import com.ibm.websphere.samples.daytrader.util.TradeConfig;

@Named(""portfolio"")

@RequestScoped

public class PortfolioJSF {

@Inject

private ExternalContext facesExternalContext;

@Inject

private TradeAction tradeAction;

private BigDecimal balance; private BigDecimal openBalance; private Integer numberHoldings; private BigDecimal holdingsTotal; private BigDecimal sumOfCashHoldings; private BigDecimal totalGain = new BigDecimal(0.0); private BigDecimal totalValue = new BigDecimal(0.0); private BigDecimal totalBasis = new BigDecimal(0.0); private BigDecimal totalGainPercent = new BigDecimal(0.0); private ArrayList<HoldingData> holdingDatas; private HtmlDataTable dataTable;

@PostConstruct

public void getPortfolio() {

try {

HttpSession session = (HttpSession) facesExternalContext.getSession(true); String userID = (String) session.getAttribute(""uidBean""); Collection<?> holdingDataBeans = tradeAction.getHoldings(userID);

numberHoldings = holdingDataBeans.size();"|data_input/daytrader/daytrader.txt|2f47a99c5b7b42328ba9a396f59d6da1
"numberHoldings = holdingDataBeans.size();

// Walk through the collection of user holdings and creating a list // of quotes if (holdingDataBeans.size() > 0) { Iterator<?> it = holdingDataBeans.iterator(); holdingDatas = new ArrayList<HoldingData>(holdingDataBeans.size());

while (it.hasNext()) { HoldingDataBean holdingData = (HoldingDataBean) it.next(); QuoteDataBean quoteData = tradeAction.getQuote(holdingData.getQuoteID());

BigDecimal basis = holdingData.getPurchasePrice().multiply(new BigDecimal(holdingData.getQuantity())); BigDecimal marketValue = quoteData.getPrice().multiply(new BigDecimal(holdingData.getQuantity())); totalBasis = totalBasis.add(basis); totalValue = totalValue.add(marketValue); BigDecimal gain = marketValue.subtract(basis); totalGain = totalGain.add(gain);

HoldingData h = new HoldingData(); h.setHoldingID(holdingData.getHoldingID()); h.setPurchaseDate(holdingData.getPurchaseDate()); h.setQuoteID(holdingData.getQuoteID()); h.setQuantity(holdingData.getQuantity()); h.setPurchasePrice(holdingData.getPurchasePrice()); h.setBasis(basis); h.setGain(gain); h.setMarketValue(marketValue); h.setPrice(quoteData.getPrice()); holdingDatas.add(h);

}

// dataTable

setTotalGainPercent(FinancialUtils.computeGainPercent(totalValue, totalBasis));

} } catch (Exception e) { e.printStackTrace(); } }

public String sell() {"|data_input/daytrader/daytrader.txt|4ca8d6d1d2f140fb9505fe972812c02c
"} } catch (Exception e) { e.printStackTrace(); } }

public String sell() {

HttpSession session = (HttpSession) facesExternalContext.getSession(true); String userID = (String) session.getAttribute(""uidBean""); TradeAction tAction = new TradeAction(); OrderDataBean orderDataBean = null; HoldingData holdingData = (HoldingData) dataTable.getRowData();

try { orderDataBean = tAction.sell(userID, holdingData.getHoldingID(), TradeConfig.orderProcessingMode); holdingDatas.remove(holdingData); } catch (Exception e) { e.printStackTrace(); }

OrderData orderData = new OrderData(orderDataBean.getOrderID(), orderDataBean.getOrderStatus(), orderDataBean.getOpenDate(), orderDataBean.getCompletionDate(), orderDataBean.getOrderFee(), orderDataBean.getOrderType(), orderDataBean.getQuantity(), orderDataBean.getSymbol()); session.setAttribute(""orderData"", orderData); return ""sell""; }

public void setDataTable(HtmlDataTable dataTable) { this.dataTable = dataTable; }

public HtmlDataTable getDataTable() {

return dataTable;

}

public void setBalance(BigDecimal balance) { this.balance = balance; }

public BigDecimal getBalance() {

return balance;

}

public void setOpenBalance(BigDecimal openBalance) { this.openBalance = openBalance; }

public BigDecimal getOpenBalance() {

return openBalance;

}

public void setHoldingsTotal(BigDecimal holdingsTotal) { this.holdingsTotal = holdingsTotal; }

public BigDecimal getHoldingsTotal() {

return holdingsTotal;

}"|data_input/daytrader/daytrader.txt|f13fbe12fdbb4ae5a1bb34d2f8905108
"public BigDecimal getHoldingsTotal() {

return holdingsTotal;

}

public void setSumOfCashHoldings(BigDecimal sumOfCashHoldings) { this.sumOfCashHoldings = sumOfCashHoldings; }

public BigDecimal getSumOfCashHoldings() {

return sumOfCashHoldings;

}

public void setNumberHoldings(Integer numberHoldings) { this.numberHoldings = numberHoldings; }

public Integer getNumberHoldings() {

return numberHoldings;

}

public void setTotalGain(BigDecimal totalGain) { this.totalGain = totalGain; }

public BigDecimal getTotalGain() {

return totalGain;

}

public void setTotalValue(BigDecimal totalValue) { this.totalValue = totalValue; }

public BigDecimal getTotalValue() {

return totalValue;

}

public void setTotalBasis(BigDecimal totalBasis) { this.totalBasis = totalBasis; }

public BigDecimal getTotalBasis() {

return totalBasis;

}

public void setHoldingDatas(ArrayList<HoldingData> holdingDatas) { this.holdingDatas = holdingDatas; }

public ArrayList<HoldingData> getHoldingDatas() {

return holdingDatas;

}

public void setTotalGainPercent(BigDecimal totalGainPercent) { this.totalGainPercent = totalGainPercent; }

public BigDecimal getTotalGainPercent() {

return totalGainPercent;

}

public String getTotalGainPercentHTML() {

return FinancialUtils.printGainPercentHTML(totalGainPercent);

}

}"|data_input/daytrader/daytrader.txt|c9f13dd814a643baa3db15e12a19ab48
"return totalGainPercent;

}

public String getTotalGainPercentHTML() {

return FinancialUtils.printGainPercentHTML(totalGainPercent);

}

}

/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/jsf/QuoteData.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.jsf;

import java.math.BigDecimal;

import java.text.DecimalFormat;

import com.ibm.websphere.samples.daytrader.util.FinancialUtils;

public class QuoteData {

private BigDecimal price;

private BigDecimal open;

private String symbol;

private BigDecimal high;

private BigDecimal low;

private String companyName;

private double volume;

private double change;

private String range;

private BigDecimal gainPercent;

private BigDecimal gain;"|data_input/daytrader/daytrader.txt|b95139d95d4d4706bf0795487d81c50c
text|source|chunk_id
"private double volume;

private double change;

private String range;

private BigDecimal gainPercent;

private BigDecimal gain;

public QuoteData(BigDecimal price, BigDecimal open, String symbol) { this.open = open; this.price = price; this.symbol = symbol; this.change = price.subtract(open).setScale(2).doubleValue(); }

public QuoteData(BigDecimal open, BigDecimal price, String symbol, BigDecimal high, BigDecimal low, String companyName, Double volume, Double change) { this.open = open; this.price = price; this.symbol = symbol; this.high = high; this.low = low; this.companyName = companyName; this.volume = volume; this.change = change; this.range = high.toString() + ""-"" + low.toString(); this.gainPercent = FinancialUtils.computeGainPercent(price, open).setScale(2); this.gain = FinancialUtils.computeGain(price, open).setScale(2); }

public void setSymbol(String symbol) { this.symbol = symbol; }

public String getSymbol() {

return symbol;

}

public void setPrice(BigDecimal price) { this.price = price; }

public BigDecimal getPrice() {

return price;

}

public void setOpen(BigDecimal open) { this.open = open; }

public BigDecimal getOpen() {

return open;

}

public void setHigh(BigDecimal high) { this.high = high; }

public BigDecimal getHigh() {

return high;

}

public void setLow(BigDecimal low) { this.low = low; }

public BigDecimal getLow() {

return low;

}

public void setCompanyName(String companyName) { this.companyName = companyName; }"|data_input/daytrader/daytrader.txt|2866618c517c46d8a3f766ad892e7846
"public BigDecimal getLow() {

return low;

}

public void setCompanyName(String companyName) { this.companyName = companyName; }

public String getCompanyName() {

return companyName;

}

public void setVolume(double volume) { this.volume = volume; }

public double getVolume() {

return volume;

}

public void setChange(double change) { this.change = change; }

public double getChange() {

return change;

}

public void setRange(String range) { this.range = range; }

public String getRange() {

return range;

}

public void setGainPercent(BigDecimal gainPercent) { this.gainPercent = gainPercent.setScale(2); }

public BigDecimal getGainPercent() {

return gainPercent;

}

public void setGain(BigDecimal gain) { this.gain = gain; }

public BigDecimal getGain() {

return gain;

}

public String getGainPercentHTML() {

return FinancialUtils.printGainPercentHTML(gainPercent);

}

public String getGainHTML() {

return FinancialUtils.printGainHTML(gain);

}

public String getChangeHTML() { String htmlString, arrow; if (change < 0.0) { htmlString = ""<FONT color=\""#cc0000\"">""; arrow = ""arrowdown.gif""; } else { htmlString = ""<FONT color=\""#009900\"">""; arrow = ""arrowup.gif""; } DecimalFormat df = new DecimalFormat(""####0.00"");

htmlString += df.format(change) + ""</FONT><IMG src=\""images/"" + arrow + ""\"" width=\""10\"" height=\""10\"" border=\""0\""></IMG>""; return htmlString; } }"|data_input/daytrader/daytrader.txt|482f15c60e894b92a45601c073c13ac2
"htmlString += df.format(change) + ""</FONT><IMG src=\""images/"" + arrow + ""\"" width=\""10\"" height=\""10\"" border=\""0\""></IMG>""; return htmlString; } }

/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/jsf/QuoteJSF.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.jsf;

import javax.annotation.PostConstruct;

import javax.enterprise.context.RequestScoped;

import javax.faces.component.html.HtmlDataTable;

import javax.faces.context.ExternalContext;

import javax.inject.Inject;

import javax.inject.Named;

import javax.servlet.http.HttpSession;

import com.ibm.websphere.samples.daytrader.TradeAction;

import com.ibm.websphere.samples.daytrader.entities.OrderDataBean;

import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;

import com.ibm.websphere.samples.daytrader.util.Log;"|data_input/daytrader/daytrader.txt|cb6627d118ff4cab8c913f358c47c34e
"import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;

import com.ibm.websphere.samples.daytrader.util.Log;

import com.ibm.websphere.samples.daytrader.util.TradeConfig;

@Named(""quotedata"")

@RequestScoped

public class QuoteJSF {

@Inject

private ExternalContext facesExternalContext;

@Inject

private TradeAction tradeAction;

private QuoteData[] quotes; private String symbols = null; private HtmlDataTable dataTable; private Integer quantity = 100;

@PostConstruct

public void getAllQuotes() {

getQuotesBySymbols();

}

public String getQuotesBySymbols() { HttpSession session = (HttpSession) facesExternalContext.getSession(true);

if (symbols == null && (session.getAttribute(""symbols"") == null)) { setSymbols(""s:0,s:1,s:2,s:3,s:4""); session.setAttribute(""symbols"", getSymbols()); } else if (symbols == null && session.getAttribute(""symbols"") != null) { setSymbols((String) session.getAttribute(""symbols"")); }

else {

session.setAttribute(""symbols"", getSymbols());

}

java.util.StringTokenizer st = new java.util.StringTokenizer(symbols, "" ,""); QuoteData[] quoteDatas = new QuoteData[st.countTokens()]; int count = 0;

while (st.hasMoreElements()) {

String symbol = st.nextToken();"|data_input/daytrader/daytrader.txt|5de3d565664d49b2914aad121bffb32b
"while (st.hasMoreElements()) {

String symbol = st.nextToken();

try { QuoteDataBean quoteData = tradeAction.getQuote(symbol); quoteDatas[count] = new QuoteData(quoteData.getOpen(), quoteData.getPrice(), quoteData.getSymbol(), quoteData.getHigh(), quoteData.getLow(), quoteData.getCompanyName(), quoteData.getVolume(), quoteData.getChange()); count++; } catch (Exception e) { Log.error(e.toString()); } } setQuotes(quoteDatas); return ""quotes""; }

public String buy() { HttpSession session = (HttpSession) facesExternalContext.getSession(true); String userID = (String) session.getAttribute(""uidBean""); QuoteData quoteData = (QuoteData) dataTable.getRowData(); OrderDataBean orderDataBean;

try { orderDataBean = tradeAction.buy(userID, quoteData.getSymbol(), new Double(this.quantity).doubleValue(), TradeConfig.orderProcessingMode); OrderData orderData = new OrderData(orderDataBean.getOrderID(), orderDataBean.getOrderStatus(), orderDataBean.getOpenDate(), orderDataBean.getCompletionDate(), orderDataBean.getOrderFee(), orderDataBean.getOrderType(), orderDataBean.getQuantity(), orderDataBean.getSymbol()); session.setAttribute(""orderData"", orderData); } catch (Exception e) { Log.error(e.toString()); e.printStackTrace(); } return ""buy""; }

public void setQuotes(QuoteData[] quotes) { this.quotes = quotes; }

public QuoteData[] getQuotes() {

return quotes;

}

public void setSymbols(String symbols) { this.symbols = symbols; }

public String getSymbols() {

return symbols;

}"|data_input/daytrader/daytrader.txt|0e86a07e6067434688c5b896bcb7bf9a
"return quotes;

}

public void setSymbols(String symbols) { this.symbols = symbols; }

public String getSymbols() {

return symbols;

}

public void setDataTable(HtmlDataTable dataTable) { this.dataTable = dataTable; }

public HtmlDataTable getDataTable() {

return dataTable;

}

public void setQuantity(Integer quantity) { this.quantity = quantity; }

public Integer getQuantity() {

return quantity;

}

}

/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/jsf/TradeActionProducer.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.jsf;

import javax.enterprise.context.RequestScoped;

import javax.enterprise.inject.Produces;

import com.ibm.websphere.samples.daytrader.TradeAction;

public class TradeActionProducer {

@Produces

@RequestScoped

public TradeAction produceTradeAction() {

return new TradeAction();

}

}"|data_input/daytrader/daytrader.txt|b591ff64f1e146089be0038b69659d84
"public class TradeActionProducer {

@Produces

@RequestScoped

public TradeAction produceTradeAction() {

return new TradeAction();

}

}

/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/jsf/TradeAppJSF.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.jsf;

import java.io.Serializable;

import java.math.BigDecimal;

import javax.enterprise.context.SessionScoped;

import javax.faces.context.ExternalContext;

import javax.inject.Inject;

import javax.inject.Named;

import javax.servlet.ServletException;

import javax.servlet.http.HttpServletRequest;

import javax.servlet.http.HttpSession;

import com.ibm.websphere.samples.daytrader.TradeAction;

import com.ibm.websphere.samples.daytrader.entities.AccountDataBean;

import com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean;"|data_input/daytrader/daytrader.txt|ef639d662f99403b881701b46f2f7a30
"import com.ibm.websphere.samples.daytrader.entities.AccountDataBean;

import com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean;

import com.ibm.websphere.samples.daytrader.util.Log;

@Named(""tradeapp"") @SessionScoped public class TradeAppJSF implements Serializable {

@Inject

private ExternalContext facesExternalContext;

@Inject

private TradeAction tradeAction;

private static final long serialVersionUID = 2L; private String userID = ""uid:0""; private String password = ""xxx""; private String cpassword; private String results; private String fullname; private String address; private String email; private String ccn; private String money;

public String login() { try { AccountDataBean accountData = tradeAction.login(userID, password);

AccountProfileDataBean accountProfileData = tradeAction.getAccountProfileData(userID); if (accountData != null) { HttpSession session = (HttpSession) facesExternalContext.getSession(true);

session.setAttribute(""uidBean"", userID);

session.setAttribute(""sessionCreationDate"", new java.util.Date());

setResults(""Ready to Trade"");"|data_input/daytrader/daytrader.txt|47ba67198adb4af39f35ef34cd2349fd
"session.setAttribute(""uidBean"", userID);

session.setAttribute(""sessionCreationDate"", new java.util.Date());

setResults(""Ready to Trade"");

// Get account profile information setAddress(accountProfileData.getAddress()); setCcn(accountProfileData.getCreditCard()); setEmail(accountProfileData.getEmail()); setFullname(accountProfileData.getFullName()); setCpassword(accountProfileData.getPassword()); return ""Ready to Trade""; } else { Log.log(""TradeServletAction.doLogin(...)"", ""Error finding account for user "" + userID + """", ""user entered a bad username or the database is not populated""); throw new NullPointerException(""User does not exist or password is incorrect! ""); } }

catch (Exception se) { // Go to welcome page setResults(""Could not find account""); return ""welcome""; } }

public String register() { TradeAction tAction = new TradeAction(); // Validate user passwords match and are atleast 1 char in length try { if ((password.equals(cpassword)) && (password.length() >= 1)) { AccountDataBean accountData = tAction.register(userID, password, fullname, address, email, ccn, new BigDecimal(money));

if (accountData == null) { setResults(""Registration operation failed;""); // Go to register page return ""Registration operation failed"";

} else { login(); setResults(""Registration operation succeeded;  Account "" + accountData.getAccountID() + "" has been created. ""); return ""Registration operation succeeded""; } }"|data_input/daytrader/daytrader.txt|69a952a0fe684ac79ad9d7b1c24d49b0
"else { // Password validation failed setResults(""Registration operation failed, your passwords did not match""); // Go to register page return ""Registration operation failed""; } }

catch (Exception e) { // log the exception with error page Log.log(""TradeServletAction.doRegister(...)"" + "" exception user ="" + userID); try { throw new Exception(""TradeServletAction.doRegister(...)"" + "" exception user ="" + userID, e); } catch (Exception e1) { e1.printStackTrace(); }

}

return ""Registration operation succeeded"";

}

public String updateProfile() { TradeAction tAction = new TradeAction(); // First verify input data boolean doUpdate = true;

if (password.equals(cpassword) == false) { results = ""Update profile error: passwords do not match""; doUpdate = false; }

AccountProfileDataBean accountProfileData = new AccountProfileDataBean(userID, password, fullname, address, email, ccn);

try { if (doUpdate) { accountProfileData = tAction.updateAccountProfile(accountProfileData); results = ""Account profile update successful""; }"|data_input/daytrader/daytrader.txt|b604459f281e4787b6c0b9648dba7b08
"try { if (doUpdate) { accountProfileData = tAction.updateAccountProfile(accountProfileData); results = ""Account profile update successful""; }

} catch (java.lang.IllegalArgumentException e) { // this is a user error so I will // forward them to another page rather than throw a 500 setResults(""invalid argument, check userID is correct, and the database is populated"" + userID); Log.error(e, ""TradeServletAction.doAccount(...)"", ""illegal argument, information should be in exception string"", ""treating this as a user error and forwarding on to a new page""); } catch (Exception e) { // log the exception with error page e.printStackTrace(); } // Go to account.xhtml return ""Go to account""; }

public String logout() { TradeAction tAction = new TradeAction(); try { setResults(""""); tAction.logout(userID); } catch (java.lang.IllegalArgumentException e) { // this is a user error so I will // forward them to another page, at the end of the page. setResults(""illegal argument:"" + e.getMessage());

// log the exception with an error level of 3 which means, handled // exception but would invalidate a automation run Log.error(e, ""TradeServletAction.doLogout(...)"", ""illegal argument, information should be in exception string"", ""treating this as a user error and forwarding on to a new page""); } catch (Exception e) { // log the exception and foward to a error page Log.error(e, ""TradeAppJSF.logout():"", ""Error logging out"" + userID, ""fowarding to an error page""); }"|data_input/daytrader/daytrader.txt|4521910162f742d69cee9717787922d4
"HttpSession session = (HttpSession) facesExternalContext.getSession(false);

if (session != null) { session.invalidate(); }

// Added to actually remove a user from the authentication cache try { ((HttpServletRequest) facesExternalContext.getRequest()).logout(); } catch (ServletException e) { Log.error(e, ""TradeAppJSF.logout():"", ""Error logging out request"" + userID, ""fowarding to an error page""); }

// Go to welcome page return ""welcome""; }

public String getUserID() {

return userID;

}

public void setUserID(String userID) { this.userID = userID; }

public String getPassword() {

return password;

}

public void setPassword(String password) { this.password = password; }

public String getCpassword() {

return cpassword;

}

public void setCpassword(String cpassword) { this.cpassword = cpassword; }

public String getFullname() {

return fullname;

}

public void setFullname(String fullname) { this.fullname = fullname; }

public String getResults() {

String tempResults=results;

results="""";

return tempResults;

}

public void setResults(String results) { this.results = results; }

public String getAddress() {

return address;

}

public void setAddress(String address) { this.address = address; }

public String getEmail() {

return email;

}

public void setEmail(String email) { this.email = email; }

public String getCcn() {

return ccn;

}

public void setCcn(String ccn) { this.ccn = ccn; }

public String getMoney() {

return money;

}"|data_input/daytrader/daytrader.txt|b2d286043835447bad4f5af9235fc0da
"public String getCcn() {

return ccn;

}

public void setCcn(String ccn) { this.ccn = ccn; }

public String getMoney() {

return money;

}

public void setMoney(String money) { this.money = money; } };

/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/jsf/TradeConfigJSF.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.jsf;

import javax.enterprise.context.RequestScoped;

import javax.faces.context.ExternalContext;

import javax.inject.Inject;

import javax.inject.Named;

import javax.servlet.http.HttpSession;

import com.ibm.websphere.samples.daytrader.TradeAction;

import com.ibm.websphere.samples.daytrader.beans.RunStatsDataBean;

import com.ibm.websphere.samples.daytrader.direct.TradeDirect;

import com.ibm.websphere.samples.daytrader.util.Log;

import com.ibm.websphere.samples.daytrader.util.TradeConfig;"|data_input/daytrader/daytrader.txt|3de0aea4dd9d40e7bbf0aab20800fc5f
"import com.ibm.websphere.samples.daytrader.util.Log;

import com.ibm.websphere.samples.daytrader.util.TradeConfig;

import com.ibm.websphere.samples.daytrader.web.TradeBuildDB;

@Named(""tradeconfig"")

@RequestScoped

public class TradeConfigJSF {

@Inject

private ExternalContext facesExternalContext;"|data_input/daytrader/daytrader.txt|66ee924d01084a0ea876df91ef758c16
"private String runtimeMode = TradeConfig.runTimeModeNames[TradeConfig.getRunTimeMode()]; private String orderProcessingMode = TradeConfig.orderProcessingModeNames[TradeConfig.getOrderProcessingMode()]; //private String cachingType = TradeConfig.cachingTypeNames[TradeConfig.getCachingType()]; //private int distributedMapCacheSize = TradeConfig.getDistributedMapCacheSize(); private int maxUsers = TradeConfig.getMAX_USERS(); private int maxQuotes = TradeConfig.getMAX_QUOTES(); private int marketSummaryInterval = TradeConfig.getMarketSummaryInterval(); private String webInterface = TradeConfig.webInterfaceNames[TradeConfig.getWebInterface()]; private int primIterations = TradeConfig.getPrimIterations(); private int percentSentToWebsocket = TradeConfig.getPercentSentToWebsocket(); private boolean publishQuotePriceChange = TradeConfig.getPublishQuotePriceChange(); private boolean longRun = TradeConfig.getLongRun(); private boolean displayOrderAlerts = TradeConfig.getDisplayOrderAlerts(); private boolean useRemoteEJBInterface = TradeConfig.useRemoteEJBInterface(); private boolean actionTrace = TradeConfig.getActionTrace(); private boolean trace = TradeConfig.getTrace(); private String[] runtimeModeList = TradeConfig.runTimeModeNames; private String[] orderProcessingModeList = TradeConfig.orderProcessingModeNames; //private String[] cachingTypeList = TradeConfig.cachingTypeNames; private String[] webInterfaceList = TradeConfig.webInterfaceNames; private String result = """";"|data_input/daytrader/daytrader.txt|75ae5b0da2bd47ae8b56e573751bff01
"public void updateConfig() { String currentConfigStr = ""\n\n########## Trade configuration update. Current config:\n\n""; String runTimeModeStr = this.runtimeMode; if (runTimeModeStr != null) { try { for (int i = 0; i < runtimeModeList.length; i++) { if (runTimeModeStr.equals(runtimeModeList[i])) { TradeConfig.setRunTimeMode(i); } } } catch (Exception e) {

Log.error(e, ""TradeConfigJSF.updateConfig(..): minor exception caught"", ""trying to set runtimemode to "" + runTimeModeStr, ""reverting to current value"");

} // If the value is bad, simply revert to current } currentConfigStr += ""\t\tRunTimeMode:\t\t\t"" + TradeConfig.runTimeModeNames[TradeConfig.getRunTimeMode()] + ""\n"";

TradeConfig.setUseRemoteEJBInterface(useRemoteEJBInterface); currentConfigStr += ""\t\tUse Remote EJB Interface:\t"" + TradeConfig.useRemoteEJBInterface() + ""\n"";

String orderProcessingModeStr = this.orderProcessingMode; if (orderProcessingModeStr != null) { try { for (int i = 0; i < orderProcessingModeList.length; i++) { if (orderProcessingModeStr.equals(orderProcessingModeList[i])) { TradeConfig.orderProcessingMode = i; } } } catch (Exception e) { Log.error(e, ""TradeConfigJSF.updateConfig(..): minor exception caught"", ""trying to set orderProcessing to "" + orderProcessingModeStr, ""reverting to current value"");

} // If the value is bad, simply revert to current } currentConfigStr += ""\t\tOrderProcessingMode:\t\t"" + TradeConfig.orderProcessingModeNames[TradeConfig.orderProcessingMode] + ""\n"";"|data_input/daytrader/daytrader.txt|5c82ea4a6fe64f999cb704c535e2f758
"/* String cachingTypeStr = this.cachingType; if (cachingTypeStr != null) { try { for (int i = 0; i < cachingTypeList.length; i++) { if (cachingTypeStr.equals(cachingTypeList[i])) { TradeConfig.cachingType = i; } } } catch (Exception e) { Log.error(e, ""TradeConfigJSF.updateConfig(..): minor exception caught"", ""trying to set cachingType to "" + cachingTypeStr, ""reverting to current value"");

} // If the value is bad, simply revert to current } currentConfigStr += ""\t\tCachingType:\t\t\t"" + TradeConfig.cachingTypeNames[TradeConfig.cachingType] + ""\n"";

int distMapCacheSize = this.distributedMapCacheSize;

try { TradeConfig.setDistributedMapCacheSize(distMapCacheSize); } catch (Exception e) { Log.error(e, ""TradeConfigJSF.updateConfig(..): minor exception caught"", ""trying to set distributedMapCacheSize"", ""reverting to current value"");

} // If the value is bad, simply revert to current

currentConfigStr += ""\t\tDMapCacheSize:\t\t\t"" + TradeConfig.getDistributedMapCacheSize() + ""\n""; */

String webInterfaceStr = webInterface; if (webInterfaceStr != null) { try { for (int i = 0; i < webInterfaceList.length; i++) { if (webInterfaceStr.equals(webInterfaceList[i])) { TradeConfig.webInterface = i; } } } catch (Exception e) { Log.error(e, ""TradeConfigJSF.updateConfig(..): minor exception caught"", ""trying to set WebInterface to "" + webInterfaceStr, ""reverting to current value"");"|data_input/daytrader/daytrader.txt|4e38a928c4cb4b16a0d3d0bc9bb25b52
"} // If the value is bad, simply revert to current } currentConfigStr += ""\t\tWeb Interface:\t\t\t"" + TradeConfig.webInterfaceNames[TradeConfig.webInterface] + ""\n"";

TradeConfig.setMAX_USERS(maxUsers);

TradeConfig.setMAX_QUOTES(maxQuotes);

currentConfigStr += ""\t\tTrade  Users:\t\t\t"" + TradeConfig.getMAX_USERS() + ""\n""; currentConfigStr += ""\t\tTrade Quotes:\t\t\t"" + TradeConfig.getMAX_QUOTES() + ""\n"";

TradeConfig.setMarketSummaryInterval(marketSummaryInterval);

currentConfigStr += ""\t\tMarket Summary Interval:\t"" + TradeConfig.getMarketSummaryInterval() + ""\n"";

TradeConfig.setPrimIterations(primIterations);

currentConfigStr += ""\t\tPrimitive Iterations:\t\t"" + TradeConfig.getPrimIterations() + ""\n"";

TradeConfig.setPublishQuotePriceChange(publishQuotePriceChange); currentConfigStr += ""\t\tTradeStreamer MDB Enabled:\t"" + TradeConfig.getPublishQuotePriceChange() + ""\n"";

TradeConfig.setPercentSentToWebsocket(percentSentToWebsocket); currentConfigStr += ""\t\t% of trades on Websocket:\t"" + TradeConfig.getPercentSentToWebsocket() + ""\n"";

TradeConfig.setLongRun(longRun); currentConfigStr += ""\t\tLong Run Enabled:\t\t"" + TradeConfig.getLongRun() + ""\n"";

TradeConfig.setDisplayOrderAlerts(displayOrderAlerts); currentConfigStr += ""\t\tDisplay Order Alerts:\t\t"" + TradeConfig.getDisplayOrderAlerts() + ""\n"";

Log.setTrace(trace); currentConfigStr += ""\t\tTrace Enabled:\t\t\t"" + TradeConfig.getTrace() + ""\n"";"|data_input/daytrader/daytrader.txt|d4bf20b578da4191a0d06265a50be7d4
"Log.setTrace(trace); currentConfigStr += ""\t\tTrace Enabled:\t\t\t"" + TradeConfig.getTrace() + ""\n"";

Log.setActionTrace(actionTrace); currentConfigStr += ""\t\tAction Trace Enabled:\t\t"" + TradeConfig.getActionTrace() + ""\n"";

System.out.println(currentConfigStr);

setResult(""DayTrader Configuration Updated"");

}

public String resetTrade() { RunStatsDataBean runStatsData = new RunStatsDataBean(); TradeConfig currentConfig = new TradeConfig(); HttpSession session = (HttpSession) facesExternalContext.getSession(true); try { // Do not inject TradeAction on this class because we dont want the // config to initialiaze at startup. TradeAction tradeAction = new TradeAction(); runStatsData = tradeAction.resetTrade(false); session.setAttribute(""runStatsData"", runStatsData); session.setAttribute(""tradeConfig"", currentConfig); result += ""Trade Reset completed successfully"";

} catch (Exception e) { result += ""Trade Reset Error  - see log for details""; session.setAttribute(""result"", result); Log.error(e, result); }

return ""stats"";

}

public String populateDatabase() {

try { new TradeBuildDB(new java.io.PrintWriter(System.out), null); } catch (Exception e) { e.printStackTrace(); }

result = ""TradeBuildDB: **** DayTrader Database Built - "" + TradeConfig.getMAX_USERS() + "" users created, "" + TradeConfig.getMAX_QUOTES() + "" quotes created. ****<br/>""; result += ""TradeBuildDB: **** Check System.Out for any errors. ****<br/>"";

return ""database"";

}

public String buildDatabaseTables() {"|data_input/daytrader/daytrader.txt|9479af1164174e0895cda6d6b89a1159
"return ""database"";

}

public String buildDatabaseTables() {

try {

//Find out the Database being used TradeDirect tradeDirect = new TradeDirect();

String dbProductName = null; try { dbProductName = tradeDirect.checkDBProductName(); } catch (Exception e) { Log.error(e, ""TradeBuildDB: Unable to check DB Product name""); } if (dbProductName == null) { result += ""TradeBuildDB: **** Unable to check DB Product name, please check Database/AppServer configuration and retry ****<br/>""; return ""database""; }

String ddlFile = null; //Locate DDL file for the specified database try { result = result + ""TradeBuildDB: **** Database Product detected: "" + dbProductName + "" ****<br/>""; if (dbProductName.startsWith(""DB2/"")) { // if db is DB2 ddlFile = ""/dbscripts/db2/Table.ddl""; } else if (dbProductName.startsWith(""DB2 UDB for AS/400"")) { //if db is DB2 on IBM i ddlFile = ""/dbscripts/db2i/Table.ddl""; } else if (dbProductName.startsWith(""Apache Derby"")) { //if db is Derby ddlFile = ""/dbscripts/derby/Table.ddl""; } else if (dbProductName.startsWith(""Oracle"")) { // if the Db is Oracle ddlFile = ""/dbscripts/oracle/Table.ddl""; } else { // Unsupported ""Other"" Database ddlFile = ""/dbscripts/derby/Table.ddl""; result = result + ""TradeBuildDB: **** This Database is unsupported/untested use at your own risk ****<br/>""; }"|data_input/daytrader/daytrader.txt|0972256fa0ac4ec28d39d0d0cdc6185f
"result = result + ""TradeBuildDB: **** The DDL file at path"" + ddlFile + "" will be used ****<br/>""; } catch (Exception e) { Log.error(e, ""TradeBuildDB: Unable to locate DDL file for the specified database""); result = result + ""TradeBuildDB: **** Unable to locate DDL file for the specified database ****<br/>""; return ""database""; }

new TradeBuildDB(new java.io.PrintWriter(System.out), facesExternalContext.getResourceAsStream(ddlFile));

result = result + ""TradeBuildDB: **** DayTrader Database Created, Check System.Out for any errors. ****<br/>"";

} catch (Exception e) { e.printStackTrace(); }

// Go to configure.xhtml

return ""database"";

}

public void setRuntimeMode(String runtimeMode) { this.runtimeMode = runtimeMode; }

public String getRuntimeMode() {

return runtimeMode;

}

public void setOrderProcessingMode(String orderProcessingMode) { this.orderProcessingMode = orderProcessingMode; }

public String getOrderProcessingMode() { return orderProcessingMode; } /* public void setCachingType(String cachingType) { this.cachingType = cachingType; }

public String getCachingType() {

return cachingType;

}

public void setDistributedMapCacheSize(int distributedMapCacheSize) { this.distributedMapCacheSize = distributedMapCacheSize; }

public int getDistributedMapCacheSize() {

return distributedMapCacheSize;

}

/

public void setMaxUsers(int maxUsers) { this.maxUsers = maxUsers; }

public int getMaxUsers() {

return maxUsers;

}"|data_input/daytrader/daytrader.txt|c503df74f4a841da8f4922a6541f07d3
"}

/

public void setMaxUsers(int maxUsers) { this.maxUsers = maxUsers; }

public int getMaxUsers() {

return maxUsers;

}

public void setmaxQuotes(int maxQuotes) { this.maxQuotes = maxQuotes; }

public int getMaxQuotes() {

return maxQuotes;

}

public void setMarketSummaryInterval(int marketSummaryInterval) { this.marketSummaryInterval = marketSummaryInterval; }

public int getMarketSummaryInterval() {

return marketSummaryInterval;

}

public void setPrimIterations(int primIterations) { this.primIterations = primIterations; }

public int getPrimIterations() {

return primIterations;

}

public void setPublishQuotePriceChange(boolean publishQuotePriceChange) { this.publishQuotePriceChange = publishQuotePriceChange; }

public boolean isPublishQuotePriceChange() {

return publishQuotePriceChange;

}

public void setPercentSentToWebsocket(int percentSentToWebsocket) { this. percentSentToWebsocket =  percentSentToWebsocket; }

public int getPercentSentToWebsocket() {

return  percentSentToWebsocket;

}

public void setDisplayOrderAlerts(boolean displayOrderAlerts) { this.displayOrderAlerts = displayOrderAlerts; }

public boolean isDisplayOrderAlerts() {

return displayOrderAlerts;

}

public void setUseRemoteEJBInterface(boolean useRemoteEJBInterface) { this.useRemoteEJBInterface = useRemoteEJBInterface; }

public boolean isUseRemoteEJBInterface() {

return useRemoteEJBInterface;

}

public void setLongRun(boolean longRun) { this.longRun = longRun; }"|data_input/daytrader/daytrader.txt|fa5be747b2d846b8941eafc72fca9458
"public boolean isUseRemoteEJBInterface() {

return useRemoteEJBInterface;

}

public void setLongRun(boolean longRun) { this.longRun = longRun; }

public boolean isLongRun() {

return longRun;

}

public void setTrace(boolean trace) { this.trace = trace; }

public boolean isTrace() {

return trace;

}

public void setRuntimeModeList(String[] runtimeModeList) { this.runtimeModeList = runtimeModeList; }

public String[] getRuntimeModeList() {

return runtimeModeList;

}

public void setOrderProcessingModeList(String[] orderProcessingModeList) { this.orderProcessingModeList = orderProcessingModeList; }

public String[] getOrderProcessingModeList() {

return orderProcessingModeList;

}

/*public void setCachingTypeList(String[] cachingTypeList) { this.cachingTypeList = cachingTypeList; }

public String[] getCachingTypeList() {

return cachingTypeList;

}

/

public void setWebInterface(String webInterface) { this.webInterface = webInterface; }

public String getWebInterface() {

return webInterface;

}

public void setWebInterfaceList(String[] webInterfaceList) { this.webInterfaceList = webInterfaceList; }

public String[] getWebInterfaceList() {

return webInterfaceList;

}

public void setActionTrace(boolean actionTrace) { this.actionTrace = actionTrace; }

public boolean isActionTrace() {

return actionTrace;

}

public void setResult(String result) { this.result = result; }

public String getResult() {

return result;

}

}"|data_input/daytrader/daytrader.txt|9be3b4f19f7f47cf8826a7d78ff8da35
"return actionTrace;

}

public void setResult(String result) { this.result = result; }

public String getResult() {

return result;

}

}

/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/ExplicitGC.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;

import javax.servlet.ServletConfig;

import javax.servlet.ServletException;

import javax.servlet.ServletOutputStream;

import javax.servlet.annotation.WebServlet;

import javax.servlet.http.HttpServlet;

import javax.servlet.http.HttpServletRequest;

import javax.servlet.http.HttpServletResponse;

import com.ibm.websphere.samples.daytrader.util.Log;"|data_input/daytrader/daytrader.txt|beb6f2747d7e4bbe9166430ad57a48f6
"import javax.servlet.http.HttpServletRequest;

import javax.servlet.http.HttpServletResponse;

import com.ibm.websphere.samples.daytrader.util.Log;

/** * * ExplicitGC invokes System.gc(). This allows one to gather min / max heap * statistics. * */ @WebServlet(name = ""ExplicitGC"", urlPatterns = { ""/servlet/ExplicitGC"" }) public class ExplicitGC extends HttpServlet {

private static final long serialVersionUID = -3758934393801102408L; private static String initTime; private static int hitCount;

/** * forwards post requests to the doGet method Creation date: (01/29/2006 * 20:10:00 PM) * * @param res *            javax.servlet.http.HttpServletRequest * @param res2 *            javax.servlet.http.HttpServletResponse */ @Override public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException { doGet(req, res); }

/** * this is the main method of the servlet that will service all get * requests. * * @param request *            HttpServletRequest * @param responce *            HttpServletResponce **/ @Override public void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException { try { res.setContentType(""text/html"");

ServletOutputStream out = res.getOutputStream();

hitCount++;

long totalMemory = Runtime.getRuntime().totalMemory();

long maxMemoryBeforeGC = Runtime.getRuntime().maxMemory();

long freeMemoryBeforeGC = Runtime.getRuntime().freeMemory();

long startTime = System.currentTimeMillis();"|data_input/daytrader/daytrader.txt|c277546f2c314e8796db54b3db9f50b4
"long freeMemoryBeforeGC = Runtime.getRuntime().freeMemory();

long startTime = System.currentTimeMillis();

System.gc(); // Invoke the GC.

long endTime = System.currentTimeMillis();

long maxMemoryAfterGC = Runtime.getRuntime().maxMemory();

long freeMemoryAfterGC = Runtime.getRuntime().freeMemory();

out.println(""<html><head><title>ExplicitGC</title></head>"" + ""<body><HR><BR><FONT size=\""+2\"" color=\""#000066\"">Explicit Garbage Collection<BR></FONT><FONT size=\""+1\"" color=\""#000066\"">Init time : "" + initTime + ""<BR><BR></FONT>  <B>Hit Count: "" + hitCount + ""<br>"" + ""<table border=\""0\""><tr>"" + ""<td align=\""right\"">Total Memory</td><td align=\""right\"">"" + totalMemory + ""</td>"" + ""</tr></table>"" + ""<table width=\""350\""><tr><td colspan=\""2\"" align=\""left\"">"" + ""Statistics before GC</td></tr>"" + ""<tr><td align=\""right\"">"" + ""Max Memory</td><td align=\""right\"">"" + maxMemoryBeforeGC + ""</td></tr>"" + ""<tr><td align=\""right\"">"" + ""Free Memory</td><td align=\""right\"">"" + freeMemoryBeforeGC + ""</td></tr>"" + ""<tr><td align=\""right\"">"" + ""Used Memory</td><td"|data_input/daytrader/daytrader.txt|94dc030f565944199a90e431fd2dfa2d
"align=\""right\"">"" + (totalMemory - freeMemoryBeforeGC) + ""</td></tr>"" + ""<tr><td colspan=\""2\"" align=\""left\"">Statistics after GC</td></tr>"" + ""<tr><td align=\""right\"">"" + ""Max Memory</td><td align=\""right\"">"" + maxMemoryAfterGC + ""</td></tr>"" + ""<tr><td align=\""right\"">"" + ""Free Memory</td><td align=\""right\"">"" + freeMemoryAfterGC + ""</td></tr>"" + ""<tr><td align=\""right\"">"" + ""Used Memory</td><td align=\""right\"">"" + (totalMemory - freeMemoryAfterGC) + ""</td></tr>"" + ""<tr><td align=\""right\"">"" + ""Total Time in GC</td><td align=\""right\"">"" + Float.toString((endTime - startTime) / 1000) + ""s</td></tr>"" + ""</table>"" + ""</body></html>""); } catch (Exception e) { Log.error(e, ""ExplicitGC.doGet(...): general exception caught""); res.sendError(500, e.toString());

}

}

/** * returns a string of information about the servlet * * @return info String: contains info about the servlet **/ @Override public String getServletInfo() { return ""Generate Explicit GC to VM""; }

/** * called when the class is loaded to initialize the servlet * * @param config *            ServletConfig: **/ @Override public void init(ServletConfig config) throws ServletException { super.init(config); initTime = new java.util.Date().toString(); hitCount = 0;

}

}"|data_input/daytrader/daytrader.txt|bfd210f0926e4789960f8bf8c3aa7e00
"}

}

/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingBean.java /** * (C) Copyright IBM Corporation 2016. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.prims;

/** * Simple bean to get and set messages */

public class PingBean {

private String msg;

/** * returns the message contained in the bean * * @return message String **/ public String getMsg() { return msg; }"|data_input/daytrader/daytrader.txt|99ae378e1be84c5085272e5271ff9063
"private String msg;

/** * returns the message contained in the bean * * @return message String **/ public String getMsg() { return msg; }

/** * sets the message contained in the bean param message String **/ public void setMsg(String s) { msg = s; } } /home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingCDIBean.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.prims;

import java.util.Set;

import javax.enterprise.context.RequestScoped;

import javax.enterprise.inject.spi.Bean;

import javax.enterprise.inject.spi.BeanManager;

import javax.enterprise.inject.spi.CDI;

import javax.naming.InitialContext;

@RequestScoped

@PingInterceptorBinding

public class PingCDIBean {

private static int helloHitCount = 0; private static int getBeanManagerHitCountJNDI = 0; private static int getBeanManagerHitCountSPI = 0;"|data_input/daytrader/daytrader.txt|6b85d8dc314e4f8080df5c699473a581
"private static int helloHitCount = 0; private static int getBeanManagerHitCountJNDI = 0; private static int getBeanManagerHitCountSPI = 0;

public int hello() {

return ++helloHitCount;

}

public int getBeanMangerViaJNDI() throws Exception { BeanManager beanManager = (BeanManager) new InitialContext().lookup(""java:comp/BeanManager""); Set<Bean<?>> beans = beanManager.getBeans(Object.class); if (beans.size() > 0) { return ++getBeanManagerHitCountJNDI; } return 0;

}

public int getBeanMangerViaCDICurrent() throws Exception { BeanManager beanManager = CDI.current().getBeanManager(); Set<Bean<?>> beans = beanManager.getBeans(Object.class);

if (beans.size() > 0) { return ++getBeanManagerHitCountSPI; } return 0;

}

}"|data_input/daytrader/daytrader.txt|eed481fc4de54af189858ebcbf192ba9
"if (beans.size() > 0) { return ++getBeanManagerHitCountSPI; } return 0;

}

}

/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingCDIJSFBean.java /** * (C) Copyright IBM Corporation 2016. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.Serializable;

import javax.enterprise.context.SessionScoped;

import javax.inject.Named;

@Named @SessionScoped public class PingCDIJSFBean implements Serializable {

private static final long serialVersionUID = -7475815494313679416L; private int hitCount = 0;

public int getHitCount() {

return ++hitCount;

}

}"|data_input/daytrader/daytrader.txt|62b02901eb55463abcf9c6fcaebde09e
"private static final long serialVersionUID = -7475815494313679416L; private int hitCount = 0;

public int getHitCount() {

return ++hitCount;

}

}

/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingEJBIFace.java /** * (C) Copyright IBM Corporation 2016. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.prims;

/*

EJB interface

/

public interface PingEJBIFace {

public String getMsg();

}"|data_input/daytrader/daytrader.txt|79bcfd0bc604465780c64588a0268dbc
text|source|chunk_id
"/*

EJB interface

/

public interface PingEJBIFace {

public String getMsg();

}

/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingEJBLocal.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.prims;

import javax.ejb.Local;

import javax.ejb.Stateful;

/** * */ @Stateful @Local public class PingEJBLocal implements PingEJBIFace {

private static int hitCount;

/

(non

Javadoc)

@see com.ibm.websphere.samples.daytrader.web.prims.EJBIFace#getMsg()

/

@Override

public String getMsg() {

return ""PingEJBLocal: "" + hitCount++; }

}"|data_input/daytrader/daytrader.txt|67be3f983a044c8e83c9906510815f09
"/

@Override

public String getMsg() {

return ""PingEJBLocal: "" + hitCount++; }

}

/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingEJBLocalDecorator.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.prims;

import javax.annotation.Priority;

import javax.decorator.Decorator;

import javax.decorator.Delegate;

import javax.inject.Inject;

import javax.interceptor.Interceptor;

@Decorator @Priority(Interceptor.Priority.APPLICATION) public class PingEJBLocalDecorator implements PingEJBIFace {

/

(non

Javadoc)

@see com.ibm.websphere.samples.daytrader.web.prims.EJBIFace#getMsg()

/

@Delegate

@Inject

PingEJBIFace ejb;

@Override

public String getMsg() {

return ""Decorated "" + ejb.getMsg(); }

}"|data_input/daytrader/daytrader.txt|229789a875884ef5ac433a742a1e4fca
"/

@Delegate

@Inject

PingEJBIFace ejb;

@Override

public String getMsg() {

return ""Decorated "" + ejb.getMsg(); }

}

/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingInterceptor.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.Serializable;

import javax.annotation.Priority;

import javax.interceptor.AroundInvoke;

import javax.interceptor.Interceptor;

import javax.interceptor.InvocationContext;

/** * */ @PingInterceptorBinding @Interceptor @Priority(Interceptor.Priority.APPLICATION) public class PingInterceptor implements Serializable {

/**  */ private static final long serialVersionUID = 1L;

@AroundInvoke public Object methodInterceptor(InvocationContext ctx) throws Exception {

//noop

return ctx.proceed();

}

}"|data_input/daytrader/daytrader.txt|fef03da6d3734a03852c0f2aaf2de2c1
"@AroundInvoke public Object methodInterceptor(InvocationContext ctx) throws Exception {

//noop

return ctx.proceed();

}

}

/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingInterceptorBinding.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.prims;

import java.lang.annotation.ElementType;

import java.lang.annotation.Retention;

import java.lang.annotation.RetentionPolicy;

import java.lang.annotation.Target;

import javax.interceptor.InterceptorBinding;

/*

/

@InterceptorBinding

@Target({ ElementType.TYPE, ElementType.CONSTRUCTOR })

@Retention(RetentionPolicy.RUNTIME)

public @interface PingInterceptorBinding {

}"|data_input/daytrader/daytrader.txt|e1fed19682504a1a94bae46e24482854
"@Target({ ElementType.TYPE, ElementType.CONSTRUCTOR })

@Retention(RetentionPolicy.RUNTIME)

public @interface PingInterceptorBinding {

}

/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingJDBCRead.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;

import javax.servlet.ServletConfig;

import javax.servlet.ServletException;

import javax.servlet.annotation.WebServlet;

import javax.servlet.http.HttpServlet;

import javax.servlet.http.HttpServletRequest;

import javax.servlet.http.HttpServletResponse;

import com.ibm.websphere.samples.daytrader.direct.TradeDirect;

import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;

import com.ibm.websphere.samples.daytrader.util.Log;

import com.ibm.websphere.samples.daytrader.util.TradeConfig;"|data_input/daytrader/daytrader.txt|2f8cd45cd327417580d9c780ebdf2fc3
"import com.ibm.websphere.samples.daytrader.util.Log;

import com.ibm.websphere.samples.daytrader.util.TradeConfig;

/** * * PingJDBCReadPrepStmt uses a prepared statement for database read access. This * primative uses * {@link com.ibm.websphere.samples.daytrader.direct.TradeDirect} to set the * price of a random stock (generated by * {@link com.ibm.websphere.samples.daytrader.util.TradeConfig}) through the use * of prepared statements. * */

@WebServlet(name = ""PingJDBCRead"", urlPatterns = { ""/servlet/PingJDBCRead"" }) public class PingJDBCRead extends HttpServlet {

private static final long serialVersionUID = -8810390150632488526L; private static String initTime; private static int hitCount;

/** * forwards post requests to the doGet method Creation date: (11/6/2000 * 10:52:39 AM) * * @param res *            javax.servlet.http.HttpServletRequest * @param res2 *            javax.servlet.http.HttpServletResponse */ @Override public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException { doGet(req, res); }"|data_input/daytrader/daytrader.txt|3d58590fb7524a7e84683adb06763013
"/** * this is the main method of the servlet that will service all get * requests. * * @param request *            HttpServletRequest * @param responce *            HttpServletResponce **/ @Override public void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException { res.setContentType(""text/html""); java.io.PrintWriter out = res.getWriter(); String symbol = null; StringBuffer output = new StringBuffer(100);

try { // TradeJDBC uses prepared statements so I am going to make use of // it's code. TradeDirect trade = new TradeDirect(); symbol = TradeConfig.rndSymbol();

QuoteDataBean quoteData = null; int iter = TradeConfig.getPrimIterations(); for (int ii = 0; ii < iter; ii++) { quoteData = trade.getQuote(symbol); }

output.append(""<html><head><title>Ping JDBC Read w/ Prepared Stmt.</title></head>"" + ""<body><HR><FONT size=\""+2\"" color=\""#000066\"">Ping JDBC Read w/ Prep Stmt:</FONT><HR><FONT size=\""-1\"" color=\""#000066\"">Init time : "" + initTime); hitCount++; output.append(""<BR>Hit Count: "" + hitCount); output.append(""<HR>Quote Information <BR><BR>: "" + quoteData.toHTML()); output.append(""<HR></body></html>""); out.println(output.toString()); } catch (Exception e) { Log.error(e, ""PingJDBCRead w/ Prep Stmt -- error getting quote for symbol"", symbol); res.sendError(500, ""PingJDBCRead Exception caught: "" + e.toString()); }

}"|data_input/daytrader/daytrader.txt|de9e4b94af3b43e4ba689dd4ebf1bd9b
"}

/** * returns a string of information about the servlet * * @return info String: contains info about the servlet **/ @Override public String getServletInfo() { return ""Basic JDBC Read using a prepared statment, makes use of TradeJDBC class""; }

/** * called when the class is loaded to initialize the servlet * * @param config *            ServletConfig: **/ @Override public void init(ServletConfig config) throws ServletException { super.init(config); hitCount = 0; initTime = new java.util.Date().toString(); } } /home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingJDBCRead2JSP.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;

import javax.servlet.ServletConfig;

import javax.servlet.ServletContext;

import javax.servlet.ServletException;

import javax.servlet.annotation.WebServlet;"|data_input/daytrader/daytrader.txt|e2eda5366ea84a28baedd01f416f8b36
"import javax.servlet.ServletContext;

import javax.servlet.ServletException;

import javax.servlet.annotation.WebServlet;

import javax.servlet.http.HttpServlet;

import javax.servlet.http.HttpServletRequest;

import javax.servlet.http.HttpServletResponse;

import com.ibm.websphere.samples.daytrader.direct.TradeDirect;

import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;

import com.ibm.websphere.samples.daytrader.util.Log;

import com.ibm.websphere.samples.daytrader.util.TradeConfig;

/** * * PingJDBCReadPrepStmt uses a prepared statement for database read access. This * primative uses * {@link com.ibm.websphere.samples.daytrader.direct.TradeDirect} to set the * price of a random stock (generated by * {@link com.ibm.websphere.samples.daytrader.util.TradeConfig}) through the use * of prepared statements. * */

@WebServlet(name = ""PingJDBCRead2JSP"", urlPatterns = { ""/servlet/PingJDBCRead2JSP"" }) public class PingJDBCRead2JSP extends HttpServlet {

private static final long serialVersionUID = 1118803761565654806L;

/** * forwards post requests to the doGet method Creation date: (11/6/2000 * 10:52:39 AM) * * @param res *            javax.servlet.http.HttpServletRequest * @param res2 *            javax.servlet.http.HttpServletResponse */ @Override public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException { doGet(req, res); }"|data_input/daytrader/daytrader.txt|40533a9117f14672bebf2624e440dc77
"/** * this is the main method of the servlet that will service all get * requests. * * @param request *            HttpServletRequest * @param responce *            HttpServletResponce **/ @Override public void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException { String symbol = null; QuoteDataBean quoteData = null; ServletContext ctx = getServletConfig().getServletContext();

try { // TradeJDBC uses prepared statements so I am going to make use of // it's code. TradeDirect trade = new TradeDirect(); symbol = TradeConfig.rndSymbol();

int iter = TradeConfig.getPrimIterations(); for (int ii = 0; ii < iter; ii++) { quoteData = trade.getQuote(symbol); }

req.setAttribute(""quoteData"", quoteData);

// req.setAttribute(""hitCount"", hitCount);

// req.setAttribute(""initTime"", initTime);

ctx.getRequestDispatcher(""/quoteDataPrimitive.jsp"").include(req, res); } catch (Exception e) { Log.error(e, ""PingJDBCRead2JPS -- error getting quote for symbol"", symbol); res.sendError(500, ""PingJDBCRead2JSP Exception caught: "" + e.toString()); }

}

/** * returns a string of information about the servlet * * @return info String: contains info about the servlet **/ @Override public String getServletInfo() { return ""Basic JDBC Read using a prepared statment forwarded to a JSP, makes use of TradeJDBC class""; }"|data_input/daytrader/daytrader.txt|f3bf66b96b484f5882338413bbfe99db
"/** * called when the class is loaded to initialize the servlet * * @param config *            ServletConfig: **/ @Override public void init(ServletConfig config) throws ServletException { super.init(config); // hitCount = 0; // initTime = new java.util.Date().toString(); } } /home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingJDBCWrite.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;

import java.math.BigDecimal;

import javax.servlet.ServletConfig;

import javax.servlet.ServletException;

import javax.servlet.annotation.WebServlet;

import javax.servlet.http.HttpServlet;

import javax.servlet.http.HttpServletRequest;

import javax.servlet.http.HttpServletResponse;

import com.ibm.websphere.samples.daytrader.direct.TradeDirect;"|data_input/daytrader/daytrader.txt|55f270a4d11b4d34bb03bcc10ffafae8
"import javax.servlet.http.HttpServletResponse;

import com.ibm.websphere.samples.daytrader.direct.TradeDirect;

import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;

import com.ibm.websphere.samples.daytrader.util.Log;

import com.ibm.websphere.samples.daytrader.util.TradeConfig;

/** * * PingJDBCReadPrepStmt uses a prepared statement for database update. Statement * parameters are set dynamically on each request. This primative uses * {@link com.ibm.websphere.samples.daytrader.direct.TradeDirect} to set the * price of a random stock (generated by * {@link com.ibm.websphere.samples.daytrader.util.TradeConfig}) through the use * of prepared statements. * */ @WebServlet(name = ""PingJDBCWrite"", urlPatterns = { ""/servlet/PingJDBCWrite"" }) public class PingJDBCWrite extends HttpServlet {

private static final long serialVersionUID = -4938035109655376503L; private static String initTime; private static int hitCount;

/** * this is the main method of the servlet that will service all get * requests. * * @param request *            HttpServletRequest * @param responce *            HttpServletResponce **/ @Override public void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {

String symbol = null; BigDecimal newPrice; StringBuffer output = new StringBuffer(100); res.setContentType(""text/html""); java.io.PrintWriter out = res.getWriter();"|data_input/daytrader/daytrader.txt|ac5c2e448cc041fc8c5e6471c0e56dd8
"try { // get a random symbol to update and a random price. symbol = TradeConfig.rndSymbol(); newPrice = TradeConfig.getRandomPriceChangeFactor();

// TradeJDBC makes use of prepared statements so I am going to reuse // the existing code. TradeDirect trade = new TradeDirect();

// update the price of our symbol QuoteDataBean quoteData = null; int iter = TradeConfig.getPrimIterations(); for (int ii = 0; ii < iter; ii++) { quoteData = trade.updateQuotePriceVolumeInt(symbol, newPrice, 100.0, false); }

// write the output output.append(""<html><head><title>Ping JDBC Write w/ Prepared Stmt.</title></head>"" + ""<body><HR><FONT size=\""+2\"" color=\""#000066\"">Ping JDBC Write w/ Prep Stmt:</FONT><FONT size=\""-1\"" color=\""#000066\""><HR>Init time : "" + initTime); hitCount++; output.append(""<BR>Hit Count: "" + hitCount); output.append(""<HR>Update Information<BR>""); output.append(""<BR>"" + quoteData.toHTML() + ""<HR></FONT></BODY></HTML>""); out.println(output.toString());

} catch (Exception e) { Log.error(e, ""PingJDBCWrite -- error updating quote for symbol"", symbol); res.sendError(500, ""PingJDBCWrite Exception caught: "" + e.toString()); } }

/** * returns a string of information about the servlet * * @return info String: contains info about the servlet **/ @Override public String getServletInfo() { return ""Basic JDBC Write using a prepared statment makes use of TradeJDBC code. ""; }"|data_input/daytrader/daytrader.txt|2100bd07c7874e83b71977138ca0f02c
"/** * called when the class is loaded to initialize the servlet * * @param config *            ServletConfig: **/ @Override public void init(ServletConfig config) throws ServletException { super.init(config); initTime = new java.util.Date().toString(); hitCount = 0;

}

/** * forwards post requests to the doGet method Creation date: (11/6/2000 * 10:52:39 AM) * * @param res *            javax.servlet.http.HttpServletRequest * @param res2 *            javax.servlet.http.HttpServletResponse */ @Override public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException { doGet(req, res); } }

/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingJSONP.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;

import java.io.StringReader;

import java.io.StringWriter;"|data_input/daytrader/daytrader.txt|ef2fc266f75c46c19719d7120e1b5d5e
"import java.io.IOException;

import java.io.StringReader;

import java.io.StringWriter;

import javax.json.Json;

import javax.json.stream.JsonGenerator;

import javax.json.stream.JsonParser;

import javax.servlet.ServletConfig;

import javax.servlet.ServletException;

import javax.servlet.ServletOutputStream;

import javax.servlet.annotation.WebServlet;

import javax.servlet.http.HttpServlet;

import javax.servlet.http.HttpServletRequest;

import javax.servlet.http.HttpServletResponse;

import com.ibm.websphere.samples.daytrader.util.Log;

/** * * PingJSONP tests JSON generating and parsing * */

@WebServlet(name = ""PingJSONP"", urlPatterns = { ""/servlet/PingJSONP"" }) public class PingJSONP extends HttpServlet {

/** * */ private static final long serialVersionUID = -5348806619121122708L; private static String initTime; private static int hitCount;

/** * forwards post requests to the doGet method Creation date: (11/6/2000 * 10:52:39 AM) * * @param res *            javax.servlet.http.HttpServletRequest * @param res2 *            javax.servlet.http.HttpServletResponse */ @Override public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException { doGet(req, res); }"|data_input/daytrader/daytrader.txt|8c116b8ccb034e0dbd862c46cbd36185
"/** * this is the main method of the servlet that will service all get * requests. * * @param request *            HttpServletRequest * @param responce *            HttpServletResponce **/ @Override public void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException { try { res.setContentType(""text/html"");

ServletOutputStream out = res.getOutputStream();

hitCount++;

// JSON generate StringWriter sw = new StringWriter(); JsonGenerator generator = Json.createGenerator(sw);

generator.writeStartObject();

generator.write(""initTime"",initTime);

generator.write(""hitCount"", hitCount);

generator.writeEnd();

generator.flush();

String generatedJSON =  sw.toString(); StringBuffer parsedJSON = new StringBuffer();

// JSON parse JsonParser parser = Json.createParser(new StringReader(generatedJSON)); while (parser.hasNext()) { JsonParser.Event event = parser.next(); switch(event) { case START_ARRAY: case END_ARRAY: case START_OBJECT: case END_OBJECT: case VALUE_FALSE: case VALUE_NULL: case VALUE_TRUE: break; case KEY_NAME: parsedJSON.append(parser.getString() + "":""); break; case VALUE_STRING: case VALUE_NUMBER: parsedJSON.append(parser.getString() + "" ""); break; } }"|data_input/daytrader/daytrader.txt|ba36b31f7da74ae9831d493968ac0eb6
"out.println(""<html><head><title>Ping JSONP</title></head>"" + ""<body><HR><BR><FONT size=\""+2\"" color=\""#000066\"">Ping JSONP</FONT><BR>Generated JSON: "" + generatedJSON + ""<br>Parsed JSON: "" + parsedJSON + ""</body></html>""); } catch (Exception e) { Log.error(e, ""PingJSONP.doGet(...): general exception caught""); res.sendError(500, e.toString());

}

}

/** * returns a string of information about the servlet * * @return info String: contains info about the servlet **/ @Override public String getServletInfo() { return ""Basic JSON generation and parsing in a servlet""; }"|data_input/daytrader/daytrader.txt|ae4d2895ce4b4045bae367c50e13376d
"/** * called when the class is loaded to initialize the servlet * * @param config *            ServletConfig: **/ @Override public void init(ServletConfig config) throws ServletException { super.init(config); initTime = new java.util.Date().toString(); hitCount = 0; } } /home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingManagedExecutor.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;

import javax.annotation.Resource;

import javax.enterprise.concurrent.ManagedExecutorService;

import javax.servlet.AsyncContext;

import javax.servlet.ServletConfig;

import javax.servlet.ServletException;

import javax.servlet.ServletOutputStream;

import javax.servlet.annotation.WebServlet;

import javax.servlet.http.HttpServlet;

import javax.servlet.http.HttpServletRequest;"|data_input/daytrader/daytrader.txt|58d8fa8fb38e4d74b8e558d07b13bb27
"import javax.servlet.annotation.WebServlet;

import javax.servlet.http.HttpServlet;

import javax.servlet.http.HttpServletRequest;

import javax.servlet.http.HttpServletResponse;

@WebServlet(asyncSupported=true,name = ""PingManagedExecutor"", urlPatterns = { ""/servlet/PingManagedExecutor"" }) public class PingManagedExecutor extends HttpServlet{

private static final long serialVersionUID = -4695386150928451234L; private static String initTime; private static int hitCount;

@Resource

private ManagedExecutorService mes;

/** * forwards post requests to the doGet method Creation date: (03/18/2014 * 10:52:39 AM) * * @param res *            javax.servlet.http.HttpServletRequest * @param res2 *            javax.servlet.http.HttpServletResponse */ @Override public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException { doGet(req, res); }

/** * this is the main method of the servlet that will service all get * requests. * * @param request *            HttpServletRequest * @param responce *            HttpServletResponce **/ @Override protected void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {

final AsyncContext asyncContext = req.startAsync(); final ServletOutputStream out = res.getOutputStream();

try {

res.setContentType(""text/html"");"|data_input/daytrader/daytrader.txt|0962aadc31024ce8b9e3d5cea0ae7ff2
"final AsyncContext asyncContext = req.startAsync(); final ServletOutputStream out = res.getOutputStream();

try {

res.setContentType(""text/html"");

out.println(""<html><head><title>Ping ManagedExecutor</title></head>"" + ""<body><HR><BR><FONT size=\""+2\"" color=\""#000066\"">Ping ManagedExecutor<BR></FONT><FONT size=\""+1\"" color=\""#000066\"">Init time : "" + initTime + ""<BR><BR></FONT>  </body></html>"");

// Runnable task mes.submit(new Runnable() { @Override public void run() { try { out.println(""<b>HitCount: "" + ++hitCount  +""</b><br/>""); } catch (IOException e) { e.printStackTrace(); } asyncContext.complete(); } });

} catch (Exception e) { e.printStackTrace(); } }

/** * returns a string of information about the servlet * * @return info String: contains info about the servlet **/ @Override public String getServletInfo() { return ""Tests a ManagedExecutor""; }

/** * called when the class is loaded to initialize the servlet * * @param config *            ServletConfig: **/ @Override public void init(ServletConfig config) throws ServletException { super.init(config); initTime = new java.util.Date().toString(); hitCount = 0; }

}"|data_input/daytrader/daytrader.txt|a1b03dac06bc4259a65ba6361f0579e9
"}

/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingManagedThread.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;

import javax.annotation.Resource;

import javax.enterprise.concurrent.ManagedThreadFactory;

import javax.servlet.AsyncContext;

import javax.servlet.ServletConfig;

import javax.servlet.ServletException;

import javax.servlet.ServletOutputStream;

import javax.servlet.annotation.WebServlet;

import javax.servlet.http.HttpServlet;

import javax.servlet.http.HttpServletRequest;

import javax.servlet.http.HttpServletResponse;

import com.ibm.websphere.samples.daytrader.util.Log;

@WebServlet(asyncSupported=true,name = ""PingManagedThread"", urlPatterns = { ""/servlet/PingManagedThread"" }) public class PingManagedThread extends HttpServlet{"|data_input/daytrader/daytrader.txt|7a2d60d92def4d608a3e5d2dee46d64f
"private static final long serialVersionUID = -4695386150928451234L; private static String initTime; private static int hitCount;

@Resource

private ManagedThreadFactory managedThreadFactory;

/** * forwards post requests to the doGet method Creation date: (03/18/2014 * 10:52:39 AM) * * @param res *            javax.servlet.http.HttpServletRequest * @param res2 *            javax.servlet.http.HttpServletResponse */ @Override public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException { doGet(req, res); }

/** * this is the main method of the servlet that will service all get * requests. * * @param request *            HttpServletRequest * @param responce *            HttpServletResponce **/ @Override protected void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {

final AsyncContext asyncContext = req.startAsync(); final ServletOutputStream out = res.getOutputStream();

try {

res.setContentType(""text/html"");

out.println(""<html><head><title>Ping ManagedThread</title></head>"" + ""<body><HR><BR><FONT size=\""+2\"" color=\""#000066\"">Ping ManagedThread<BR></FONT><FONT size=\""+1\"" color=\""#000066\"">Init time : "" + initTime + ""<BR/><BR/></FONT>"");

Thread thread = managedThreadFactory.newThread(new Runnable() { @Override public void run() { try { out.println(""<b>HitCount: "" + ++hitCount  +""</b><br/>""); } catch (IOException e) { e.printStackTrace(); } asyncContext.complete(); } });"|data_input/daytrader/daytrader.txt|f09df2357b9743ea8c6d233fd941603d
"thread.start();

} catch (Exception e) { Log.error(e, ""PingManagedThreadServlet.doGet(...): general exception caught""); res.sendError(500, e.toString()); }

}

/** * returns a string of information about the servlet * * @return info String: contains info about the servlet **/ @Override public String getServletInfo() { return ""Tests a ManagedThread asynchronous servlet""; }

/** * called when the class is loaded to initialize the servlet * * @param config *            ServletConfig: **/ @Override public void init(ServletConfig config) throws ServletException { super.init(config); initTime = new java.util.Date().toString(); hitCount = 0;

}

}

/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingReentryServlet.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.BufferedReader;

import java.io.IOException;"|data_input/daytrader/daytrader.txt|09445ba34231470791f5456f7a01211b
"import java.io.BufferedReader;

import java.io.IOException;

import java.io.InputStreamReader;

import java.net.HttpURLConnection;

import java.net.URL;

import javax.servlet.ServletConfig;

import javax.servlet.ServletException;

import javax.servlet.ServletOutputStream;

import javax.servlet.annotation.WebServlet;

import javax.servlet.http.HttpServlet;

import javax.servlet.http.HttpServletRequest;

import javax.servlet.http.HttpServletResponse;

@WebServlet(name = ""PingReentryServlet"", urlPatterns = { ""/servlet/PingReentryServlet"" }) public class PingReentryServlet extends HttpServlet {

private static final long serialVersionUID = -2536027021580175706L;

@Override public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException { doGet(req, res); }

/** * this is the main method of the servlet that will service all get * requests. * * @param request *            HttpServletRequest * @param responce *            HttpServletResponce **/ @Override public void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException { try { res.setContentType(""text/html"");

// The following 2 lines are the difference between PingServlet and // PingServletWriter // the latter uses a PrintWriter for output versus a binary output // stream. ServletOutputStream out = res.getOutputStream(); // java.io.PrintWriter out = res.getWriter(); int numReentriesLeft; int sleepTime;

if(req.getParameter(""numReentries"") != null){"|data_input/daytrader/daytrader.txt|0a810e2afb63452e87ec710a853f5608
"if(req.getParameter(""numReentries"") != null){

numReentriesLeft = Integer.parseInt(req.getParameter(""numReentries""));

} else {

numReentriesLeft = 0;

}

if(req.getParameter(""sleep"") != null){

sleepTime = Integer.parseInt(req.getParameter(""sleep""));

} else {

sleepTime = 0;

}

if(numReentriesLeft <= 0) {

Thread.sleep(sleepTime);

out.println(numReentriesLeft);

} else {

String hostname = req.getServerName();

int port = req.getServerPort();

req.getContextPath();

int saveNumReentriesLeft = numReentriesLeft;

int nextNumReentriesLeft = numReentriesLeft

1;

// Recursively call into the same server, decrementing the counter by 1. String url = ""http://"" +  hostname + "":"" + port + ""/"" + req.getRequestURI() + ""?numReentries="" +  nextNumReentriesLeft + ""&sleep="" + sleepTime; URL obj = new URL(url); HttpURLConnection con = (HttpURLConnection) obj.openConnection(); con.setRequestMethod(""GET""); con.setRequestProperty(""User-Agent"", ""Mozilla/5.0"");

//Append the recursion count to the response and return it. BufferedReader in = new BufferedReader( new InputStreamReader(con.getInputStream())); String inputLine; StringBuffer response = new StringBuffer();

while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close();

Thread.sleep(sleepTime); out.println(saveNumReentriesLeft + response.toString()); } } catch (Exception e) { //Log.error(e, ""PingReentryServlet.doGet(...): general exception caught""); res.sendError(500, e.toString());

}

}"|data_input/daytrader/daytrader.txt|0664a220e0c5413dbb2f031e1d552b31
"}

}

/** * returns a string of information about the servlet * * @return info String: contains info about the servlet **/ @Override public String getServletInfo() { return ""Basic dynamic HTML generation through a servlet""; }

/** * called when the class is loaded to initialize the servlet * * @param config *            ServletConfig: **/ @Override public void init(ServletConfig config) throws ServletException { super.init(config);

}

}

/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingServlet.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;

import javax.servlet.ServletConfig;

import javax.servlet.ServletException;

import javax.servlet.ServletOutputStream;

import javax.servlet.annotation.WebServlet;

import javax.servlet.http.HttpServlet;"|data_input/daytrader/daytrader.txt|fb78529d07c64405a6b467a779f8f9be
"import javax.servlet.ServletOutputStream;

import javax.servlet.annotation.WebServlet;

import javax.servlet.http.HttpServlet;

import javax.servlet.http.HttpServletRequest;

import javax.servlet.http.HttpServletResponse;

import com.ibm.websphere.samples.daytrader.util.Log;

/** * * PingServlet tests fundamental dynamic HTML creation functionality through * server side servlet processing. * */

@WebServlet(name = ""PingServlet"", urlPatterns = { ""/servlet/PingServlet"" }) public class PingServlet extends HttpServlet {

private static final long serialVersionUID = 7097023236709683760L; private static String initTime; private static int hitCount;

/** * forwards post requests to the doGet method Creation date: (11/6/2000 * 10:52:39 AM) * * @param res *            javax.servlet.http.HttpServletRequest * @param res2 *            javax.servlet.http.HttpServletResponse */ @Override public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException { doGet(req, res); }

/** * this is the main method of the servlet that will service all get * requests. * * @param request *            HttpServletRequest * @param responce *            HttpServletResponce **/ @Override public void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException { try { res.setContentType(""text/html"");"|data_input/daytrader/daytrader.txt|2c83e193df564ac4bab6d0743afc3b48
"// The following 2 lines are the difference between PingServlet and // PingServletWriter // the latter uses a PrintWriter for output versus a binary output // stream. ServletOutputStream out = res.getOutputStream(); // java.io.PrintWriter out = res.getWriter(); hitCount++; out.println(""<html><head><title>Ping Servlet</title></head>"" + ""<body><HR><BR><FONT size=\""+2\"" color=\""#000066\"">Ping Servlet<BR></FONT><FONT size=\""+1\"" color=\""#000066\"">Init time : "" + initTime + ""<BR><BR></FONT>  <B>Hit Count: "" + hitCount + ""</B></body></html>""); } catch (Exception e) { Log.error(e, ""PingServlet.doGet(...): general exception caught""); res.sendError(500, e.toString());

}

}

/** * returns a string of information about the servlet * * @return info String: contains info about the servlet **/ @Override public String getServletInfo() { return ""Basic dynamic HTML generation through a servlet""; }

/** * called when the class is loaded to initialize the servlet * * @param config *            ServletConfig: **/ @Override public void init(ServletConfig config) throws ServletException { super.init(config); initTime = new java.util.Date().toString(); hitCount = 0;"|data_input/daytrader/daytrader.txt|b3d9216e370d40c482d5bef30c88713e
"} } /home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingServlet2DB.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;

import javax.servlet.ServletConfig;

import javax.servlet.ServletException;

import javax.servlet.annotation.WebServlet;

import javax.servlet.http.HttpServlet;

import javax.servlet.http.HttpServletRequest;

import javax.servlet.http.HttpServletResponse;

import com.ibm.websphere.samples.daytrader.direct.TradeDirect;

import com.ibm.websphere.samples.daytrader.util.Log;

/** * * PingServlet2DB tests the path of a servlet making a JDBC connection to a * database * */

@WebServlet(name = ""PingServlet2DB"", urlPatterns = { ""/servlet/PingServlet2DB"" }) public class PingServlet2DB extends HttpServlet {"|data_input/daytrader/daytrader.txt|1a74604c120a456f94257dee54318e7c
"@WebServlet(name = ""PingServlet2DB"", urlPatterns = { ""/servlet/PingServlet2DB"" }) public class PingServlet2DB extends HttpServlet {

private static final long serialVersionUID = -6456675185605592049L; private static String initTime; private static int hitCount;

/** * forwards post requests to the doGet method Creation date: (11/6/2000 * 10:52:39 AM) * * @param res *            javax.servlet.http.HttpServletRequest * @param res2 *            javax.servlet.http.HttpServletResponse */ @Override public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException { doGet(req, res); }

/** * this is the main method of the servlet that will service all get * requests. * * @param request *            HttpServletRequest * @param responce *            HttpServletResponce **/ @Override public void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException { res.setContentType(""text/html""); java.io.PrintWriter out = res.getWriter(); String symbol = null; StringBuffer output = new StringBuffer(100);

try { // TradeJDBC uses prepared statements so I am going to make use of // it's code. TradeDirect trade = new TradeDirect(); trade.getConnPublic();"|data_input/daytrader/daytrader.txt|eabbe4e0e8d442fb84858ac954b9dc69
"try { // TradeJDBC uses prepared statements so I am going to make use of // it's code. TradeDirect trade = new TradeDirect(); trade.getConnPublic();

output.append(""<html><head><title>PingServlet2DB.</title></head>"" + ""<body><HR><FONT size=\""+2\"" color=\""#000066\"">PingServlet2DB:</FONT><HR><FONT size=\""-1\"" color=\""#000066\"">Init time : "" + initTime); hitCount++; output.append(""<BR>Hit Count: "" + hitCount); output.append(""<HR></body></html>""); out.println(output.toString()); } catch (Exception e) { Log.error(e, ""PingServlet2DB -- error getting connection to the database"", symbol); res.sendError(500, ""PingServlet2DB Exception caught: "" + e.toString()); } }

/** * returns a string of information about the servlet * * @return info String: contains info about the servlet **/ @Override public String getServletInfo() { return ""Basic JDBC Read using a prepared statment, makes use of TradeJDBC class""; }"|data_input/daytrader/daytrader.txt|a65868b984a149afbebe35a91398338f
"/** * called when the class is loaded to initialize the servlet * * @param config *            ServletConfig: **/ @Override public void init(ServletConfig config) throws ServletException { super.init(config); hitCount = 0; initTime = new java.util.Date().toString(); } } /home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingServlet2Include.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;

import javax.servlet.ServletConfig;

import javax.servlet.ServletException;

import javax.servlet.annotation.WebServlet;

import javax.servlet.http.HttpServlet;

import javax.servlet.http.HttpServletRequest;

import javax.servlet.http.HttpServletResponse;

import com.ibm.websphere.samples.daytrader.util.Log;

import com.ibm.websphere.samples.daytrader.util.TradeConfig;"|data_input/daytrader/daytrader.txt|c85069d6cac34f82842cc9e153653820
text|source|chunk_id
"import com.ibm.websphere.samples.daytrader.util.Log;

import com.ibm.websphere.samples.daytrader.util.TradeConfig;

/** * * PingServlet2Include tests servlet to servlet request dispatching. Servlet 1, * the controller, creates a new JavaBean object forwards the servlet request * with the JavaBean added to Servlet 2. Servlet 2 obtains access to the * JavaBean through the Servlet request object and provides the dynamic HTML * output based on the JavaBean data. PingServlet2Servlet is the initial servlet * that sends a request to {@link PingServlet2ServletRcv} * */ @WebServlet(name = ""PingServlet2Include"", urlPatterns = { ""/servlet/PingServlet2Include"" }) public class PingServlet2Include extends HttpServlet {

private static final long serialVersionUID = 1063447780151198793L; private static String initTime; private static int hitCount;

/** * forwards post requests to the doGet method Creation date: (11/6/2000 * 10:52:39 AM) * * @param res *            javax.servlet.http.HttpServletRequest * @param res2 *            javax.servlet.http.HttpServletResponse */ @Override public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException { doGet(req, res); }"|data_input/daytrader/daytrader.txt|52965c5bd3f14bf99bdc4684de653742
"/** * this is the main method of the servlet that will service all get * requests. * * @param request *            HttpServletRequest * @param responce *            HttpServletResponce **/ @Override public void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {

try {

res.setContentType(""text/html"");

int iter = TradeConfig.getPrimIterations(); for (int ii = 0; ii < iter; ii++) { getServletConfig().getServletContext().getRequestDispatcher(""/servlet/PingServlet2IncludeRcv"").include(req, res); }

// ServletOutputStream out = res.getOutputStream(); java.io.PrintWriter out = res.getWriter(); out.println(""<html><head><title>Ping Servlet 2 Include</title></head>"" + ""<body><HR><BR><FONT size=\""+2\"" color=\""#000066\"">Ping Servlet 2 Include<BR></FONT><FONT size=\""+1\"" color=\""#000066\"">Init time : "" + initTime + ""<BR><BR></FONT>  <B>Hit Count: "" + hitCount++ + ""</B></body></html>""); } catch (Exception ex) { Log.error(ex, ""PingServlet2Include.doGet(...): general exception""); res.sendError(500, ""PingServlet2Include.doGet(...): general exception"" + ex.toString()); } }

/** * called when the class is loaded to initialize the servlet * * @param config *            ServletConfig: **/ @Override public void init(ServletConfig config) throws ServletException { super.init(config); initTime = new java.util.Date().toString(); hitCount = 0; } }"|data_input/daytrader/daytrader.txt|07703f63645443c8908a56fdcfe97d12
"/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingServlet2IncludeRcv.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;

import javax.servlet.ServletException;

import javax.servlet.annotation.WebServlet;

import javax.servlet.http.HttpServlet;

import javax.servlet.http.HttpServletRequest;

import javax.servlet.http.HttpServletResponse;"|data_input/daytrader/daytrader.txt|2d82f6145f1246639d439aee435293ea
"import javax.servlet.http.HttpServlet;

import javax.servlet.http.HttpServletRequest;

import javax.servlet.http.HttpServletResponse;

/** * * PingServlet2Include tests servlet to servlet request dispatching. Servlet 1, * the controller, creates a new JavaBean object forwards the servlet request * with the JavaBean added to Servlet 2. Servlet 2 obtains access to the * JavaBean through the Servlet request object and provides the dynamic HTML * output based on the JavaBean data. PingServlet2Servlet is the initial servlet * that sends a request to {@link PingServlet2ServletRcv} * */ @WebServlet(name = ""PingServlet2IncludeRcv"", urlPatterns = { ""/servlet/PingServlet2IncludeRcv"" }) public class PingServlet2IncludeRcv extends HttpServlet {

private static final long serialVersionUID = 2628801298561220872L;

/** * forwards post requests to the doGet method Creation date: (11/6/2000 * 10:52:39 AM) * * @param res *            javax.servlet.http.HttpServletRequest * @param res2 *            javax.servlet.http.HttpServletResponse */ @Override public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException { doGet(req, res); }"|data_input/daytrader/daytrader.txt|fec233f9cf414cafbeaea2109413f0bd
"/** * this is the main method of the servlet that will service all get * requests. * * @param request *            HttpServletRequest * @param responce *            HttpServletResponce **/ @Override public void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException { // do nothing but get included by PingServlet2Include } } /home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingServlet2JNDI.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;

import javax.servlet.ServletConfig;

import javax.servlet.ServletException;

import javax.servlet.annotation.WebServlet;

import javax.servlet.http.HttpServlet;

import javax.servlet.http.HttpServletRequest;

import javax.servlet.http.HttpServletResponse;

import com.ibm.websphere.samples.daytrader.util.Log;"|data_input/daytrader/daytrader.txt|67b93a8c761c4a4fbeb91199450c1158
"import javax.servlet.http.HttpServletRequest;

import javax.servlet.http.HttpServletResponse;

import com.ibm.websphere.samples.daytrader.util.Log;

/** * * PingServlet2JNDI performs a basic JNDI lookup of a JDBC DataSource * */

@WebServlet(name = ""PingServlet2JNDI"", urlPatterns = { ""/servlet/PingServlet2JNDI"" }) public class PingServlet2JNDI extends HttpServlet {

private static final long serialVersionUID = -8236271998141415347L; private static String initTime; private static int hitCount;

/** * forwards post requests to the doGet method Creation date: (11/6/2000 * 10:52:39 AM) * * @param res *            javax.servlet.http.HttpServletRequest * @param res2 *            javax.servlet.http.HttpServletResponse */ @Override public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException { doGet(req, res); }

/** * this is the main method of the servlet that will service all get * requests. * * @param request *            HttpServletRequest * @param responce *            HttpServletResponce **/ @Override public void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException { res.setContentType(""text/html""); java.io.PrintWriter out = res.getWriter();

StringBuffer output = new StringBuffer(100);"|data_input/daytrader/daytrader.txt|7b85d7d6886c49998e5126ddc0a2b1f5
"StringBuffer output = new StringBuffer(100);

try { output.append(""<html><head><title>Ping JNDI -- lookup of JDBC DataSource</title></head>"" + ""<body><HR><FONT size=\""+2\"" color=\""#000066\"">Ping JNDI -- lookup of JDBC DataSource</FONT><HR><FONT size=\""-1\"" color=\""#000066\"">Init time : "" + initTime); hitCount++; output.append(""</FONT><BR>Hit Count: "" + hitCount); output.append(""<HR></body></html>""); out.println(output.toString()); } catch (Exception e) { Log.error(e, ""PingServlet2JNDI -- error look up of a JDBC DataSource""); res.sendError(500, ""PingServlet2JNDI Exception caught: "" + e.toString()); }

}

/** * returns a string of information about the servlet * * @return info String: contains info about the servlet **/ @Override public String getServletInfo() { return ""Basic JNDI look up of a JDBC DataSource""; }"|data_input/daytrader/daytrader.txt|35fb0ee7b2d44307800de2d12cf9203c
"/** * called when the class is loaded to initialize the servlet * * @param config *            ServletConfig: **/ @Override public void init(ServletConfig config) throws ServletException { super.init(config); hitCount = 0; initTime = new java.util.Date().toString(); } } /home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingServlet2Jsp.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;

import javax.servlet.ServletException;

import javax.servlet.annotation.WebServlet;

import javax.servlet.http.HttpServlet;

import javax.servlet.http.HttpServletRequest;

import javax.servlet.http.HttpServletResponse;

import com.ibm.websphere.samples.daytrader.util.Log;"|data_input/daytrader/daytrader.txt|1e632194ef9f498f99d3ae2e3ee1f573
"import javax.servlet.http.HttpServletRequest;

import javax.servlet.http.HttpServletResponse;

import com.ibm.websphere.samples.daytrader.util.Log;

/** * * PingServlet2JSP tests a call from a servlet to a JavaServer Page providing * server-side dynamic HTML through JSP scripting. * */ @WebServlet(name = ""PingServlet2Jsp"", urlPatterns = { ""/servlet/PingServlet2Jsp"" }) public class PingServlet2Jsp extends HttpServlet { private static final long serialVersionUID = -5199543766883932389L; private static int hitCount = 0;

/** * forwards post requests to the doGet method Creation date: (11/6/2000 * 10:52:39 AM) * * @param res *            javax.servlet.http.HttpServletRequest * @param res2 *            javax.servlet.http.HttpServletResponse */ @Override public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException { doGet(req, res); }

/** * this is the main method of the servlet that will service all get * requests. * * @param request *            HttpServletRequest * @param responce *            HttpServletResponce **/ @Override public void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException { PingBean ab; try { ab = new PingBean(); hitCount++; ab.setMsg(""Hit Count: "" + hitCount); req.setAttribute(""ab"", ab);"|data_input/daytrader/daytrader.txt|f748dd79315c45238518d1aef8515977
"getServletConfig().getServletContext().getRequestDispatcher(""/PingServlet2Jsp.jsp"").forward(req, res); } catch (Exception ex) { Log.error(ex, ""PingServlet2Jsp.doGet(...): request error""); res.sendError(500, ""PingServlet2Jsp.doGet(...): request error"" + ex.toString());

} } } /home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingServlet2PDF.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.BufferedInputStream;

import java.io.BufferedOutputStream;

import java.io.IOException;

import java.net.URL;

import java.net.URLConnection;

import javax.servlet.ServletException;

import javax.servlet.ServletOutputStream;

import javax.servlet.annotation.WebServlet;

import javax.servlet.http.HttpServlet;

import javax.servlet.http.HttpServletRequest;

import javax.servlet.http.HttpServletResponse;"|data_input/daytrader/daytrader.txt|ac71d05c7ac14c17906e507a5dfdceb9
"import javax.servlet.http.HttpServlet;

import javax.servlet.http.HttpServletRequest;

import javax.servlet.http.HttpServletResponse;

import com.ibm.websphere.samples.daytrader.util.Log;

/** * * PingServlet2PDF tests a call to a servlet which then loads a PDF document. * */ @WebServlet(name = ""PingServlet2PDF"", urlPatterns = { ""/servlet/PingServlet2PDF"" }) public class PingServlet2PDF extends HttpServlet {

private static final long serialVersionUID = -1321793174442755868L; private static int hitCount = 0; private static final int BUFFER_SIZE = 1024 * 8; // 8 KB

/** * forwards post requests to the doGet method Creation date: (11/6/2000 * 10:52:39 AM) * * @param res *            javax.servlet.http.HttpServletRequest * @param res2 *            javax.servlet.http.HttpServletResponse */ @Override public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException { doGet(req, res); }

/** * this is the main method of the servlet that will service all get * requests. * * @param request *            HttpServletRequest * @param responce *            HttpServletResponce **/ @Override public void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException { PingBean ab; BufferedInputStream bis = null; BufferedOutputStream bos = null; try { ab = new PingBean(); hitCount++; ab.setMsg(""Hit Count: "" + hitCount); req.setAttribute(""ab"", ab);

ServletOutputStream out = res.getOutputStream();"|data_input/daytrader/daytrader.txt|26fd8aa98ec54e43a48047ce833796c8
"ServletOutputStream out = res.getOutputStream();

// MIME type for pdf doc res.setContentType(""application/pdf"");

// Open an InputStream to the PDF document String fileURL = ""http://localhost:9080/daytrader/WAS_V7_64-bit_performance.pdf""; URL url = new URL(fileURL); URLConnection conn = url.openConnection(); bis = new BufferedInputStream(conn.getInputStream());

// Transfer the InputStream (PDF Document) to OutputStream (servlet) bos = new BufferedOutputStream(out); byte[] buff = new byte[BUFFER_SIZE]; int bytesRead; // Simple read/write loop. while (-1 != (bytesRead = bis.read(buff, 0, buff.length))) { bos.write(buff, 0, bytesRead); }

} catch (Exception ex) { Log.error(ex, ""PingServlet2Jsp.doGet(...): request error""); res.sendError(500, ""PingServlet2Jsp.doGet(...): request error"" + ex.toString());

}

finally { if (bis != null) { bis.close(); } if (bos != null) { bos.close(); } }"|data_input/daytrader/daytrader.txt|e6c701991fb840c382484732548bf543
"}

finally { if (bis != null) { bis.close(); } if (bos != null) { bos.close(); } }

} } /home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingServlet2Servlet.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;

import javax.servlet.ServletException;

import javax.servlet.annotation.WebServlet;

import javax.servlet.http.HttpServlet;

import javax.servlet.http.HttpServletRequest;

import javax.servlet.http.HttpServletResponse;

import com.ibm.websphere.samples.daytrader.util.Log;"|data_input/daytrader/daytrader.txt|345b6ba9b7db4bba938d08343f320f3b
"import javax.servlet.http.HttpServletRequest;

import javax.servlet.http.HttpServletResponse;

import com.ibm.websphere.samples.daytrader.util.Log;

/** * * PingServlet2Servlet tests servlet to servlet request dispatching. Servlet 1, * the controller, creates a new JavaBean object forwards the servlet request * with the JavaBean added to Servlet 2. Servlet 2 obtains access to the * JavaBean through the Servlet request object and provides the dynamic HTML * output based on the JavaBean data. PingServlet2Servlet is the initial servlet * that sends a request to {@link PingServlet2ServletRcv} * */ @WebServlet(name = ""PingServlet2Servlet"", urlPatterns = { ""/servlet/PingServlet2Servlet"" }) public class PingServlet2Servlet extends HttpServlet { private static final long serialVersionUID = -955942781902636048L; private static int hitCount = 0;

/** * forwards post requests to the doGet method Creation date: (11/6/2000 * 10:52:39 AM) * * @param res *            javax.servlet.http.HttpServletRequest * @param res2 *            javax.servlet.http.HttpServletResponse */ @Override public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException { doGet(req, res); }"|data_input/daytrader/daytrader.txt|299ca24940a24dcc99ea7f37925c5d13
"/** * this is the main method of the servlet that will service all get * requests. * * @param request *            HttpServletRequest * @param responce *            HttpServletResponce **/ @Override public void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException { PingBean ab; try { ab = new PingBean(); hitCount++; ab.setMsg(""Hit Count: "" + hitCount); req.setAttribute(""ab"", ab);

getServletConfig().getServletContext().getRequestDispatcher(""/servlet/PingServlet2ServletRcv"").forward(req, res); } catch (Exception ex) { Log.error(ex, ""PingServlet2Servlet.doGet(...): general exception""); res.sendError(500, ""PingServlet2Servlet.doGet(...): general exception"" + ex.toString());"|data_input/daytrader/daytrader.txt|eaa36f49631e44de9686cfcad3462400
"} } } /home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingServlet2ServletRcv.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;

import java.io.PrintWriter;

import javax.servlet.ServletConfig;

import javax.servlet.ServletException;

import javax.servlet.annotation.WebServlet;

import javax.servlet.http.HttpServlet;

import javax.servlet.http.HttpServletRequest;

import javax.servlet.http.HttpServletResponse;

import com.ibm.websphere.samples.daytrader.util.Log;"|data_input/daytrader/daytrader.txt|4335cc50b5de4f71b0565f5cec424e64
"import javax.servlet.http.HttpServletRequest;

import javax.servlet.http.HttpServletResponse;

import com.ibm.websphere.samples.daytrader.util.Log;

/** * * PingServlet2Servlet tests servlet to servlet request dispatching. Servlet 1, * the controller, creates a new JavaBean object forwards the servlet request * with the JavaBean added to Servlet 2. Servlet 2 obtains access to the * JavaBean through the Servlet request object and provides the dynamic HTML * output based on the JavaBean data. PingServlet2ServletRcv receives a request * from {@link PingServlet2Servlet} and displays output. * */ @WebServlet(name = ""PingServlet2ServletRcv"", urlPatterns = { ""/servlet/PingServlet2ServletRcv"" }) public class PingServlet2ServletRcv extends HttpServlet { private static final long serialVersionUID = -5241563129216549706L; private static String initTime = null;

/** * forwards post requests to the doGet method Creation date: (11/6/2000 * 10:52:39 AM) * * @param res *            javax.servlet.http.HttpServletRequest * @param res2 *            javax.servlet.http.HttpServletResponse */ @Override public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException { doGet(req, res); }"|data_input/daytrader/daytrader.txt|2319a0cf711c43c2ad3c79188f8231d8
"/** * this is the main method of the servlet that will service all get * requests. * * @param request *            HttpServletRequest * @param responce *            HttpServletResponce **/ @Override public void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException { PingBean ab; try { ab = (PingBean) req.getAttribute(""ab""); res.setContentType(""text/html""); PrintWriter out = res.getWriter(); out.println(""<html><head><title>Ping Servlet2Servlet</title></head>"" + ""<body><HR><BR><FONT size=\""+2\"" color=\""#000066\"">PingServlet2Servlet:<BR></FONT><FONT size=\""+1\"" color=\""#000066\"">Init time: "" + initTime + ""</FONT><BR><BR><B>Message from Servlet: </B>"" + ab.getMsg() + ""</body></html>""); } catch (Exception ex) { Log.error(ex, ""PingServlet2ServletRcv.doGet(...): general exception""); res.sendError(500, ""PingServlet2ServletRcv.doGet(...): general exception"" + ex.toString()); }

}

/** * called when the class is loaded to initialize the servlet * * @param config *            ServletConfig: **/ @Override public void init(ServletConfig config) throws ServletException { super.init(config); initTime = new java.util.Date().toString();"|data_input/daytrader/daytrader.txt|4805cf208c614063bfb5cb8d87ba29e3
"} } /home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingServlet30Async.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;

import javax.servlet.AsyncContext;

import javax.servlet.ServletConfig;

import javax.servlet.ServletException;

import javax.servlet.ServletInputStream;

import javax.servlet.ServletOutputStream;

import javax.servlet.annotation.WebServlet;

import javax.servlet.http.HttpServlet;

import javax.servlet.http.HttpServletRequest;

import javax.servlet.http.HttpServletResponse;

//import com.ibm.websphere.samples.daytrader.util.Log;

/** * * PingServlet31Async tests fundamental dynamic HTML creation functionality through * server side servlet processing asynchronously. * */"|data_input/daytrader/daytrader.txt|91272e042bb24db992efde7689f64064
"/** * * PingServlet31Async tests fundamental dynamic HTML creation functionality through * server side servlet processing asynchronously. * */

@WebServlet(name = ""PingServlet30Async"", urlPatterns = { ""/servlet/PingServlet30Async"" }, asyncSupported=true) public class PingServlet30Async extends HttpServlet {

private static final long serialVersionUID = 8731300373855056660L; private static String initTime; private static int hitCount;

/** * forwards post requests to the doGet method Creation date: (11/6/2000 * 10:52:39 AM) * * @param res *            javax.servlet.http.HttpServletRequest * @param res2 *            javax.servlet.http.HttpServletResponse */ @Override public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException { res.setContentType(""text/html"");

AsyncContext ac = req.startAsync(); StringBuilder sb = new StringBuilder();

ServletInputStream input = req.getInputStream(); byte[] b = new byte[1024]; int len = -1; while ((len = input.read(b)) != -1) { String data = new String(b, 0, len); sb.append(data); }

ServletOutputStream output = res.getOutputStream();

output.println(""<html><head><title>Ping Servlet 3.0 Async</title></head>"" + ""<body><hr/><br/><font size=\""+2\"" color=\""#000066\"">Ping Servlet 3.0 Async</font><br/>"" + ""<font size=\""+1\"" color=\""#000066\"">Init time : "" + initTime + ""</font><br/><br/><b>Hit Count: "" + ++hitCount + ""</b><br/>Data Received: ""+ sb.toString() + ""</body></html>"");

ac.complete();

}"|data_input/daytrader/daytrader.txt|6c1cd5f1cbd54fee832dedc4972700b2
"ac.complete();

}

/** * this is the main method of the servlet that will service all get * requests. * * @param request *            HttpServletRequest * @param responce *            HttpServletResponce **/ @Override public void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException { doPost(req,res);

} /** * returns a string of information about the servlet * * @return info String: contains info about the servlet **/ @Override public String getServletInfo() { return ""Basic dynamic HTML generation through a servlet""; }

/** * called when the class is loaded to initialize the servlet * * @param config *            ServletConfig: **/ @Override public void init(ServletConfig config) throws ServletException { super.init(config); initTime = new java.util.Date().toString(); hitCount = 0;"|data_input/daytrader/daytrader.txt|b6bb0d9e3f1e4863aa9ad2e05b38b25c
"} } /home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingServlet31Async.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;

import java.util.Queue;

import java.util.concurrent.LinkedBlockingQueue;

import javax.servlet.AsyncContext;

import javax.servlet.ReadListener;

import javax.servlet.ServletConfig;

import javax.servlet.ServletException;

import javax.servlet.ServletInputStream;

import javax.servlet.ServletOutputStream;

import javax.servlet.WriteListener;

import javax.servlet.annotation.WebServlet;

import javax.servlet.http.HttpServlet;

import javax.servlet.http.HttpServletRequest;

import javax.servlet.http.HttpServletResponse;

//import com.ibm.websphere.samples.daytrader.util.Log;"|data_input/daytrader/daytrader.txt|965defd243a54bd794b9b6080dcc2224
"import javax.servlet.http.HttpServletResponse;

//import com.ibm.websphere.samples.daytrader.util.Log;

/** * * PingServlet31Async tests fundamental dynamic HTML creation functionality through * server side servlet processing asynchronously with non-blocking i/o. * */

@WebServlet(name = ""PingServlet31Async"", urlPatterns = { ""/servlet/PingServlet31Async"" }, asyncSupported=true) public class PingServlet31Async extends HttpServlet {

private static final long serialVersionUID = 8731300373855056660L; private static String initTime; private static int hitCount;

/** * forwards post requests to the doGet method Creation date: (11/6/2000 * 10:52:39 AM) * * @param res *            javax.servlet.http.HttpServletRequest * @param res2 *            javax.servlet.http.HttpServletResponse */ @Override public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException { res.setContentType(""text/html"");

AsyncContext ac = req.startAsync();

ServletInputStream input = req.getInputStream(); ReadListener readListener = new ReadListenerImpl(input, res, ac); input.setReadListener(readListener); }

class ReadListenerImpl implements ReadListener { private ServletInputStream input = null; private HttpServletResponse res = null; private AsyncContext ac = null; private Queue<String> queue = new LinkedBlockingQueue<String>();

ReadListenerImpl(ServletInputStream in, HttpServletResponse r, AsyncContext c) { input = in; res = r; ac = c; }"|data_input/daytrader/daytrader.txt|d6f74676f26a41f6a88a2dc4213882c2
"ReadListenerImpl(ServletInputStream in, HttpServletResponse r, AsyncContext c) { input = in; res = r; ac = c; }

public void onDataAvailable() throws IOException { StringBuilder sb = new StringBuilder(); int len = -1; byte b[] = new byte[1024];

while (input.isReady() && (len = input.read(b)) != -1) { String data = new String(b, 0, len); sb.append(data); } queue.add(sb.toString());

}

public void onAllDataRead() throws IOException { ServletOutputStream output = res.getOutputStream(); WriteListener writeListener = new WriteListenerImpl(output, queue, ac); output.setWriteListener(writeListener); }

public void onError(final Throwable t) { ac.complete(); t.printStackTrace(); } }

class WriteListenerImpl implements WriteListener { private ServletOutputStream output = null; private Queue<String> queue = null; private AsyncContext ac = null;

WriteListenerImpl(ServletOutputStream sos, Queue<String> q, AsyncContext c) { output = sos; queue = q; ac = c;

try { output.print(""<html><head><title>Ping Servlet 3.1 Async</title></head>"" + ""<body><hr/><br/><font size=\""+2\"" color=\""#000066\"">Ping Servlet 3.1 Async</font>"" + ""<br/><font size=\""+1\"" color=\""#000066\"">Init time : "" + initTime + ""</font><br/><br/><b>Hit Count: "" + ++hitCount + ""</b><br/>Data Received: ""); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } }

public void onWritePossible() throws IOException {"|data_input/daytrader/daytrader.txt|66d0208d0faf4048a672a9696f9661d9
"public void onWritePossible() throws IOException {

while (queue.peek() != null && output.isReady()) { String data = (String) queue.poll(); output.print(data); }

if (queue.peek() == null) { output.println(""</body></html>""); ac.complete(); } }

public void onError(final Throwable t) { ac.complete(); t.printStackTrace(); } }

/** * this is the main method of the servlet that will service all get * requests. * * @param request *            HttpServletRequest * @param responce *            HttpServletResponce **/ @Override public void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException { doPost(req,res); } /** * returns a string of information about the servlet * * @return info String: contains info about the servlet **/ @Override public String getServletInfo() { return ""Basic dynamic HTML generation through a servlet""; }

/** * called when the class is loaded to initialize the servlet * * @param config *            ServletConfig: **/ @Override public void init(ServletConfig config) throws ServletException { super.init(config); initTime = new java.util.Date().toString(); hitCount = 0;"|data_input/daytrader/daytrader.txt|9ba45418260e4c3ba71f7707f2ed31d3
"} } /home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingServlet31AsyncRead.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;

import javax.servlet.AsyncContext;

import javax.servlet.ReadListener;

import javax.servlet.ServletConfig;

import javax.servlet.ServletException;

import javax.servlet.ServletInputStream;

import javax.servlet.ServletOutputStream;

import javax.servlet.annotation.WebServlet;

import javax.servlet.http.HttpServlet;

import javax.servlet.http.HttpServletRequest;

import javax.servlet.http.HttpServletResponse;

//import com.ibm.websphere.samples.daytrader.util.Log;

/** * * PingServlet31Async tests fundamental dynamic HTML creation functionality through * server side servlet processing asynchronously with non-blocking i/o. * */"|data_input/daytrader/daytrader.txt|dc1bd52abc134803a5e70f9e1615bbb1
"@WebServlet(name = ""PingServlet31AsyncRead"", urlPatterns = { ""/servlet/PingServlet31AsyncRead"" }, asyncSupported=true) public class PingServlet31AsyncRead extends HttpServlet {

private static final long serialVersionUID = 8731300373855056660L; private static String initTime; private static int hitCount;

/** * forwards post requests to the doGet method Creation date: (11/6/2000 * 10:52:39 AM) * * @param res *            javax.servlet.http.HttpServletRequest * @param res2 *            javax.servlet.http.HttpServletResponse */ @Override public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException { res.setContentType(""text/html"");

AsyncContext ac = req.startAsync();

ServletInputStream input = req.getInputStream(); ReadListener readListener = new ReadListenerImpl(input, res, ac); input.setReadListener(readListener); }

class ReadListenerImpl implements ReadListener { private ServletInputStream input = null; private HttpServletResponse res = null; private AsyncContext ac = null; private StringBuilder sb = new StringBuilder();

ReadListenerImpl(ServletInputStream in, HttpServletResponse r, AsyncContext c) { input = in; res = r; ac = c; }

public void onDataAvailable() throws IOException {

int len = -1; byte b[] = new byte[1024];

while (input.isReady() && (len = input.read(b)) != -1) { String data = new String(b, 0, len); sb.append(data); }

}"|data_input/daytrader/daytrader.txt|363fa8e044d645a6a178c24dcc6919ab
"while (input.isReady() && (len = input.read(b)) != -1) { String data = new String(b, 0, len); sb.append(data); }

}

public void onAllDataRead() throws IOException { ServletOutputStream output = res.getOutputStream(); output.println(""<html><head><title>Ping Servlet 3.1 Async</title></head>"" + ""<body><hr/><br/><font size=\""+2\"" color=\""#000066\"">Ping Servlet 3.1 AsyncRead</font>"" + ""<br/><font size=\""+1\"" color=\""#000066\"">Init time : "" + initTime + ""</font><br/><br/><b>Hit Count: "" + ++hitCount + ""</b><br/>Data Received: "" + sb.toString() + ""</body></html>""); ac.complete(); }

public void onError(final Throwable t) { ac.complete(); t.printStackTrace(); } }

/** * this is the main method of the servlet that will service all get * requests. * * @param request *            HttpServletRequest * @param responce *            HttpServletResponce **/ @Override public void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException { doPost(req,res); } /** * returns a string of information about the servlet * * @return info String: contains info about the servlet **/ @Override public String getServletInfo() { return ""Basic dynamic HTML generation through a servlet""; }

/** * called when the class is loaded to initialize the servlet * * @param config *            ServletConfig: **/ @Override public void init(ServletConfig config) throws ServletException { super.init(config); initTime = new java.util.Date().toString(); hitCount = 0;"|data_input/daytrader/daytrader.txt|99ea031ac11f4654ab2c32b01fe0bdc4
"} } /home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingServletCDI.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;

import java.io.PrintWriter;

import javax.ejb.EJB;

import javax.inject.Inject;

import javax.servlet.ServletConfig;

import javax.servlet.ServletException;

import javax.servlet.annotation.WebServlet;

import javax.servlet.http.HttpServlet;

import javax.servlet.http.HttpServletRequest;

import javax.servlet.http.HttpServletResponse;

import com.ibm.websphere.samples.daytrader.web.prims.PingCDIBean;

@WebServlet(""/servlet/PingServletCDI"") public class PingServletCDI extends HttpServlet {

private static final long serialVersionUID = -1803544618879689949L; private static String initTime;

@Inject

PingCDIBean cdiBean;

@EJB

PingEJBIFace ejb;"|data_input/daytrader/daytrader.txt|06c933fc7eca44e798c5214744bff76c
"@Inject

PingCDIBean cdiBean;

@EJB

PingEJBIFace ejb;

@Override protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {

PrintWriter pw = response.getWriter(); pw.write(""<html><head><title>Ping Servlet CDI</title></head>"" + ""<body><HR><BR><FONT size=\""+2\"" color=\""#000066\"">Ping Servlet CDI<BR></FONT><FONT size=\""+1\"" color=\""#000066\"">Init time : "" + initTime + ""<BR><BR></FONT>"");

pw.write(""<B>hitCount: "" + cdiBean.hello() + ""</B><BR>""); pw.write(""<B>hitCount: "" + ejb.getMsg() + ""</B><BR>"");

pw.flush();

pw.close();

}

/** * called when the class is loaded to initialize the servlet * * @param config *            ServletConfig: **/ @Override public void init(ServletConfig config) throws ServletException { super.init(config); initTime = new java.util.Date().toString();

}

}"|data_input/daytrader/daytrader.txt|f8a18abc3ce04030810b02f9453a8dd7
"}

}

/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingServletCDIBeanManagerViaCDICurrent.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;

import java.io.PrintWriter;

import javax.inject.Inject;

import javax.servlet.ServletConfig;

import javax.servlet.ServletException;

import javax.servlet.annotation.WebServlet;

import javax.servlet.http.HttpServlet;

import javax.servlet.http.HttpServletRequest;

import javax.servlet.http.HttpServletResponse;

import com.ibm.websphere.samples.daytrader.web.prims.PingCDIBean;

@WebServlet(""/servlet/PingServletCDIBeanManagerViaCDICurrent"") public class PingServletCDIBeanManagerViaCDICurrent extends HttpServlet {

private static final long serialVersionUID = -1803544618879689949L; private static String initTime;

@Inject

PingCDIBean cdiBean;"|data_input/daytrader/daytrader.txt|b52df60510e749e5b1cde9842d654b29
"private static final long serialVersionUID = -1803544618879689949L; private static String initTime;

@Inject

PingCDIBean cdiBean;

@Override protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {

PrintWriter pw = response.getWriter(); pw.write(""<html><head><title>Ping Servlet CDI Bean Manager</title></head>"" + ""<body><HR><BR><FONT size=\""+2\"" color=\""#000066\"">Ping Servlet CDI Bean Manager<BR></FONT><FONT size=\""+1\"" color=\""#000066\"">Init time : "" + initTime + ""<BR><BR></FONT>"");

try { pw.write(""<B>hitCount: "" + cdiBean.getBeanMangerViaCDICurrent() + ""</B></body></html>""); } catch (Exception e) { e.printStackTrace(); }

pw.flush();

pw.close();

}

/** * called when the class is loaded to initialize the servlet * * @param config *            ServletConfig: **/ @Override public void init(ServletConfig config) throws ServletException { super.init(config); initTime = new java.util.Date().toString();

}

}"|data_input/daytrader/daytrader.txt|6f7417ae2ef846afa6bbc238b75d12d9
text|source|chunk_id
"}

}

/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingServletCDIBeanManagerViaJNDI.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;

import java.io.PrintWriter;

import javax.inject.Inject;

import javax.servlet.ServletConfig;

import javax.servlet.ServletException;

import javax.servlet.annotation.WebServlet;

import javax.servlet.http.HttpServlet;

import javax.servlet.http.HttpServletRequest;

import javax.servlet.http.HttpServletResponse;

import com.ibm.websphere.samples.daytrader.web.prims.PingCDIBean;

@WebServlet(""/servlet/PingServletCDIBeanManagerViaJNDI"") public class PingServletCDIBeanManagerViaJNDI extends HttpServlet {

private static final long serialVersionUID = -1803544618879689949L; private static String initTime;

@Inject

PingCDIBean cdiBean;"|data_input/daytrader/daytrader.txt|2c2dbe066d9047dd906bf4569e5c5989
"private static final long serialVersionUID = -1803544618879689949L; private static String initTime;

@Inject

PingCDIBean cdiBean;

@Override protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {

PrintWriter pw = response.getWriter(); pw.write(""<html><head><title>Ping Servlet CDI Bean Manager</title></head>"" + ""<body><HR><BR><FONT size=\""+2\"" color=\""#000066\"">Ping Servlet CDI Bean Manager<BR></FONT><FONT size=\""+1\"" color=\""#000066\"">Init time : "" + initTime + ""<BR><BR></FONT>"");

try { pw.write(""<B>hitCount: "" + cdiBean.getBeanMangerViaJNDI() + ""</B></body></html>""); } catch (Exception e) { e.printStackTrace(); }

pw.flush();

pw.close();

}

/** * called when the class is loaded to initialize the servlet * * @param config *            ServletConfig: **/ @Override public void init(ServletConfig config) throws ServletException { super.init(config); initTime = new java.util.Date().toString();

}

}"|data_input/daytrader/daytrader.txt|b5e4d7c96fa14cc3b25d19d16daf596b
"}

}

/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingServletLargeContentLength.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;

import javax.servlet.ServletConfig;

import javax.servlet.ServletException;

import javax.servlet.annotation.WebServlet;

import javax.servlet.http.HttpServlet;

import javax.servlet.http.HttpServletRequest;

import javax.servlet.http.HttpServletResponse;

/** * * PingServletSetContentLength tests fundamental dynamic HTML creation * functionality through server side servlet processing. * */

@WebServlet(name = ""PingServletLargeContentLength"", urlPatterns = { ""/servlet/PingServletLargeContentLength"" }) public class PingServletLargeContentLength extends HttpServlet {

/** * */ private static final long serialVersionUID = -7979576220528252408L;"|data_input/daytrader/daytrader.txt|a0254685802a469087042badbb703585
"/** * */ private static final long serialVersionUID = -7979576220528252408L;

/** * forwards post requests to the doGet method Creation date: (02/07/2013 * 10:52:39 AM) * * @param res *            javax.servlet.http.HttpServletRequest * @param res2 *            javax.servlet.http.HttpServletResponse */ @Override public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException { System.out.println(""Length: "" + req.getContentLengthLong());

}

/** * this is the main method of the servlet that will service all get * requests. * * @param request *            HttpServletRequest * @param responce *            HttpServletResponce **/ @Override public void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException { doPost(req,res);    }

/** * returns a string of information about the servlet * * @return info String: contains info about the servlet **/ @Override public String getServletInfo() { return ""Basic dynamic HTML generation through a servlet, with "" + ""contentLength set by contentLength parameter. ""; }"|data_input/daytrader/daytrader.txt|b2207b21a40941688a3770c61d5c50f1
"/** * called when the class is loaded to initialize the servlet * * @param config *            ServletConfig: **/ @Override public void init(ServletConfig config) throws ServletException { super.init(config); } } /home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingServletSetContentLength.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;

import javax.servlet.ServletConfig;

import javax.servlet.ServletException;

import javax.servlet.ServletOutputStream;

import javax.servlet.annotation.WebServlet;

import javax.servlet.http.HttpServlet;

import javax.servlet.http.HttpServletRequest;

import javax.servlet.http.HttpServletResponse;

import com.ibm.websphere.samples.daytrader.util.Log;"|data_input/daytrader/daytrader.txt|008d67eeb62246c18ab7a586e1efc5e2
"import javax.servlet.http.HttpServletRequest;

import javax.servlet.http.HttpServletResponse;

import com.ibm.websphere.samples.daytrader.util.Log;

/** * * PingServletSetContentLength tests fundamental dynamic HTML creation * functionality through server side servlet processing. * */

@WebServlet(name = ""PingServletSetContentLength"", urlPatterns = { ""/servlet/PingServletSetContentLength"" }) public class PingServletSetContentLength extends HttpServlet {

private static final long serialVersionUID = 8731300373855056661L;

/** * forwards post requests to the doGet method Creation date: (02/07/2013 * 10:52:39 AM) * * @param res *            javax.servlet.http.HttpServletRequest * @param res2 *            javax.servlet.http.HttpServletResponse */ @Override public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException { doGet(req, res); }

/** * this is the main method of the servlet that will service all get * requests. * * @param request *            HttpServletRequest * @param responce *            HttpServletResponce **/ @Override public void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException { try { res.setContentType(""text/html""); String lengthParam = req.getParameter(""contentLength""); Integer length;

if (lengthParam == null) { length = 0; } else { length = Integer.parseInt(lengthParam); }

ServletOutputStream out = res.getOutputStream();"|data_input/daytrader/daytrader.txt|3c61fd55b0e743649bf81122d056fbf6
"if (lengthParam == null) { length = 0; } else { length = Integer.parseInt(lengthParam); }

ServletOutputStream out = res.getOutputStream();

// Add characters (a's) to the SOS to equal the requested length // 167 is the smallest length possible.

int i = 0;

String buffer = """";

while (i + 167 < length) { buffer = buffer + ""a""; i++; }

out.println(""<html><head><title>Ping Servlet</title></head>"" + ""<body><HR><BR><FONT size=\""+2\"" color=\""#000066\"">Ping Servlet<BR></FONT><FONT size=\""+1\"" color=\""#000066\"">"" + buffer + ""</B></body></html>""); } catch (Exception e) { Log.error(e, ""PingServlet.doGet(...): general exception caught""); res.sendError(500, e.toString());

}

}

/** * returns a string of information about the servlet * * @return info String: contains info about the servlet **/ @Override public String getServletInfo() { return ""Basic dynamic HTML generation through a servlet, with "" + ""contentLength set by contentLength parameter. ""; }"|data_input/daytrader/daytrader.txt|b9cb5ebc0eb642b9b3ada0569475fb43
"/** * called when the class is loaded to initialize the servlet * * @param config *            ServletConfig: **/ @Override public void init(ServletConfig config) throws ServletException { super.init(config); } } /home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingServletWriter.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;

import javax.servlet.ServletConfig;

import javax.servlet.ServletException;

import javax.servlet.annotation.WebServlet;

import javax.servlet.http.HttpServlet;

import javax.servlet.http.HttpServletRequest;

import javax.servlet.http.HttpServletResponse;

import com.ibm.websphere.samples.daytrader.util.Log;"|data_input/daytrader/daytrader.txt|de89e18c83c84e678e34a45ad740d43a
"import javax.servlet.http.HttpServletRequest;

import javax.servlet.http.HttpServletResponse;

import com.ibm.websphere.samples.daytrader.util.Log;

/** * * PingServlet extends PingServlet by using a PrintWriter for formatted output * vs. the output stream used by {@link PingServlet}. * */ @WebServlet(name = ""PingServletWriter"", urlPatterns = { ""/servlet/PingServletWriter"" }) public class PingServletWriter extends HttpServlet {

private static final long serialVersionUID = -267847365014523225L; private static String initTime; private static int hitCount;

/** * forwards post requests to the doGet method Creation date: (11/6/2000 * 10:52:39 AM) * * @param res *            javax.servlet.http.HttpServletRequest * @param res2 *            javax.servlet.http.HttpServletResponse */ @Override public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException { doGet(req, res); }

/** * this is the main method of the servlet that will service all get * requests. * * @param request *            HttpServletRequest * @param responce *            HttpServletResponce **/ @Override public void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException { try { res.setContentType(""text/html"");"|data_input/daytrader/daytrader.txt|eb397d00ed7a47998e847e9b3c22c960
"// The following 2 lines are the difference between PingServlet and // PingServletWriter // the latter uses a PrintWriter for output versus a binary output // stream. // ServletOutputStream out = res.getOutputStream(); java.io.PrintWriter out = res.getWriter(); hitCount++; out.println(""<html><head><title>Ping Servlet Writer</title></head>"" + ""<body><HR><BR><FONT size=\""+2\"" color=\""#000066\"">Ping Servlet Writer:<BR></FONT><FONT size=\""+1\"" color=\""#000066\"">Init time : "" + initTime + ""<BR><BR></FONT>  <B>Hit Count: "" + hitCount + ""</B></body></html>""); } catch (Exception e) { Log.error(e, ""PingServletWriter.doGet(...): general exception caught""); res.sendError(500, e.toString()); } }

/** * returns a string of information about the servlet * * @return info String: contains info about the servlet **/

@Override public String getServletInfo() { return ""Basic dynamic HTML generation through a servlet using a PrintWriter""; }

/** * called when the class is loaded to initialize the servlet * * @param config *            ServletConfig: **/ @Override public void init(ServletConfig config) throws ServletException { super.init(config); hitCount = 0; initTime = new java.util.Date().toString();"|data_input/daytrader/daytrader.txt|914074f027624a9ba2abe0b5c8f37cb1
"} } /home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingSession1.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;

import java.io.PrintWriter;

import javax.servlet.ServletConfig;

import javax.servlet.ServletException;

import javax.servlet.annotation.WebServlet;

import javax.servlet.http.HttpServlet;

import javax.servlet.http.HttpServletRequest;

import javax.servlet.http.HttpServletResponse;

import javax.servlet.http.HttpSession;

import com.ibm.websphere.samples.daytrader.util.Log;"|data_input/daytrader/daytrader.txt|e6cccd60730f400fab7db145295dc942
"import javax.servlet.http.HttpServletResponse;

import javax.servlet.http.HttpSession;

import com.ibm.websphere.samples.daytrader.util.Log;

/** * * PingHTTPSession1 - SessionID tests fundamental HTTP session functionality by * creating a unique session ID for each individual user. The ID is stored in * the users session and is accessed and displayed on each user request. * */ @WebServlet(name = ""PingSession1"", urlPatterns = { ""/servlet/PingSession1"" }) public class PingSession1 extends HttpServlet { private static final long serialVersionUID = -3703858656588519807L; private static int count; // For each new session created, add a session ID of the form ""sessionID:"" + // count private static String initTime; private static int hitCount;

/** * forwards post requests to the doGet method Creation date: (11/6/2000 * 10:52:39 AM) * * @param res *            javax.servlet.http.HttpServletRequest * @param res2 *            javax.servlet.http.HttpServletResponse */ @Override public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException { doGet(req, res); }"|data_input/daytrader/daytrader.txt|70022e64d035422abc863abb367b0d3b
"/** * this is the main method of the servlet that will service all get * requests. * * @param request *            HttpServletRequest * @param responce *            HttpServletResponce **/ @Override public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { HttpSession session = null; try { try { // get the users session, if the user does not have a session // create one. session = request.getSession(true); } catch (Exception e) { Log.error(e, ""PingSession1.doGet(...): error getting session""); // rethrow the exception for handling in one place. throw e; }

// Get the session data value Integer ival = (Integer) session.getAttribute(""sessiontest.counter""); // if their is not a counter create one. if (ival == null) { ival = new Integer(count++); session.setAttribute(""sessiontest.counter"", ival); } String SessionID = ""SessionID:"" + ival.toString();

// Output the page

response.setContentType(""text/html"");

response.setHeader(""SessionKeyTest

SessionID"", SessionID);"|data_input/daytrader/daytrader.txt|b25eb5ef9d1a496cbb18f03594f723e3
"// Output the page

response.setContentType(""text/html"");

response.setHeader(""SessionKeyTest

SessionID"", SessionID);

PrintWriter out = response.getWriter(); out.println(""<html><head><title>HTTP Session Key Test</title></head><body><HR><BR><FONT size=\""+2\"" color=\""#000066\"">HTTP Session Test 1: Session Key<BR></FONT><FONT size=\""+1\"" color=\""#000066\"">Init time: "" + initTime + ""</FONT><BR><BR>""); hitCount++; out.println(""<B>Hit Count: "" + hitCount + ""<BR>Your HTTP Session key is "" + SessionID + ""</B></body></html>""); } catch (Exception e) { // log the excecption Log.error(e, ""PingSession1.doGet(..l.): error. ""); // set the server responce to 500 and forward to the web app defined // error page response.sendError(500, ""PingSession1.doGet(...): error. "" + e.toString()); } }

/** * returns a string of information about the servlet * * @return info String: contains info about the servlet **/

@Override public String getServletInfo() { return ""HTTP Session Key: Tests management of a read only unique id""; }

/** * called when the class is loaded to initialize the servlet * * @param config *            ServletConfig: **/ @Override public void init(ServletConfig config) throws ServletException { super.init(config); count = 0; hitCount = 0; initTime = new java.util.Date().toString();"|data_input/daytrader/daytrader.txt|4384983642324fdc9a9919e45764018d
"} } /home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingSession2.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;

import java.io.PrintWriter;

import javax.servlet.ServletConfig;

import javax.servlet.ServletException;

import javax.servlet.annotation.WebServlet;

import javax.servlet.http.HttpServlet;

import javax.servlet.http.HttpServletRequest;

import javax.servlet.http.HttpServletResponse;

import javax.servlet.http.HttpSession;

import com.ibm.websphere.samples.daytrader.util.Log;"|data_input/daytrader/daytrader.txt|6665840d33754fd6ae7d738d0fb4b5fa
"import javax.servlet.http.HttpServletResponse;

import javax.servlet.http.HttpSession;

import com.ibm.websphere.samples.daytrader.util.Log;

/** * * PingHTTPSession2 session create/destroy further extends the previous test by * invalidating the HTTP Session on every 5th user access. This results in * testing HTTPSession create and destroy * */ @WebServlet(name = ""PingSession2"", urlPatterns = { ""/servlet/PingSession2"" }) public class PingSession2 extends HttpServlet {

private static final long serialVersionUID = -273579463475455800L; private static String initTime; private static int hitCount;

/** * forwards post requests to the doGet method Creation date: (11/6/2000 * 10:52:39 AM) * * @param res *            javax.servlet.http.HttpServletRequest * @param res2 *            javax.servlet.http.HttpServletResponse */ @Override public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException { doGet(req, res); }"|data_input/daytrader/daytrader.txt|f3ae88e57a844b5282d30c73e4bc1413
"/** * this is the main method of the servlet that will service all get * requests. * * @param request *            HttpServletRequest * @param responce *            HttpServletResponce **/ @Override public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { HttpSession session = null; try { try { session = request.getSession(true); } catch (Exception e) { Log.error(e, ""PingSession2.doGet(...): error getting session""); // rethrow the exception for handling in one place. throw e;

}

// Get the session data value Integer ival = (Integer) session.getAttribute(""sessiontest.counter""); // if there is not a counter then create one. if (ival == null) { ival = new Integer(1); } else { ival = new Integer(ival.intValue() + 1); } session.setAttribute(""sessiontest.counter"", ival); // if the session count is equal to five invalidate the session if (ival.intValue() == 5) { session.invalidate(); }

try {

// Output the page

response.setContentType(""text/html"");

response.setHeader(""SessionTrackingTest

counter"", ival.toString());"|data_input/daytrader/daytrader.txt|0c1039cca4804c7bb541bfdba97b0840
"try {

// Output the page

response.setContentType(""text/html"");

response.setHeader(""SessionTrackingTest

counter"", ival.toString());

PrintWriter out = response.getWriter(); out.println(""<html><head><title>Session Tracking Test 2</title></head><body><HR><BR><FONT size=\""+2\"" color=\""#000066\"">HTTP Session Test 2: Session create/invalidate <BR></FONT><FONT size=\""+1\"" color=\""#000066\"">Init time: "" + initTime + ""</FONT><BR><BR>""); hitCount++; out.println(""<B>Hit Count: "" + hitCount + ""<BR>Session hits: "" + ival + ""</B></body></html>""); } catch (Exception e) { Log.error(e, ""PingSession2.doGet(...): error getting session information""); // rethrow the exception for handling in one place. throw e; }

}

catch (Exception e) { // log the excecption Log.error(e, ""PingSession2.doGet(...): error. ""); // set the server responce to 500 and forward to the web app defined // error page response.sendError(500, ""PingSession2.doGet(...): error. "" + e.toString()); } } // end of the method

/** * returns a string of information about the servlet * * @return info String: contains info about the servlet **/ @Override public String getServletInfo() { return ""HTTP Session Key: Tests management of a read/write unique id""; }

/** * called when the class is loaded to initialize the servlet * * @param config *            ServletConfig: **/ @Override public void init(ServletConfig config) throws ServletException { super.init(config); hitCount = 0; initTime = new java.util.Date().toString();"|data_input/daytrader/daytrader.txt|e9e25a3d9f97479897495355fbc11e13
"} } /home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingSession3.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;

import java.io.PrintWriter;

import javax.servlet.ServletConfig;

import javax.servlet.ServletException;

import javax.servlet.annotation.WebServlet;

import javax.servlet.http.HttpServlet;

import javax.servlet.http.HttpServletRequest;

import javax.servlet.http.HttpServletResponse;

import javax.servlet.http.HttpSession;

import com.ibm.websphere.samples.daytrader.util.Log;"|data_input/daytrader/daytrader.txt|9e9d080a8e044214afc40d33f0a4af90
"import javax.servlet.http.HttpServletResponse;

import javax.servlet.http.HttpSession;

import com.ibm.websphere.samples.daytrader.util.Log;

/** * * PingHTTPSession3 tests the servers ability to manage and persist large * HTTPSession data objects. The servlet creates the large custom java object * {@link PingSession3Object}. This large session object is retrieved and stored * to the session on each user request. The default settings result in approx * 2024 bits being retrieved and stored upon each request. * */ @WebServlet(name = ""PingSession3"", urlPatterns = { ""/servlet/PingSession3"" }) public class PingSession3 extends HttpServlet { private static final long serialVersionUID = -6129599971684210414L; private static int NUM_OBJECTS = 2; private static String initTime = null; private static int hitCount = 0;

/** * forwards post requests to the doGet method Creation date: (11/6/2000 * 10:52:39 AM) * * @param res *            javax.servlet.http.HttpServletRequest * @param res2 *            javax.servlet.http.HttpServletResponse */ @Override public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException { doGet(req, res); }

/** * this is the main method of the servlet that will service all get * requests. * * @param request *            HttpServletRequest * @param responce *            HttpServletResponce **/ @Override public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {"|data_input/daytrader/daytrader.txt|7ae09220637b4b61876d1793e3a07b8d
"PrintWriter out = response.getWriter(); // Using a StringBuffer to output all at once. StringBuffer outputBuffer = new StringBuffer(); HttpSession session = null; PingSession3Object[] sessionData; response.setContentType(""text/html"");

// this is a general try/catch block. The catch block at the end of this // will forward the responce // to an error page if there is an exception try {

try { session = request.getSession(true); } catch (Exception e) { Log.error(e, ""PingSession3.doGet(...): error getting session""); // rethrow the exception for handling in one place. throw e;

} // Each PingSession3Object in the PingSession3Object array is 1K in // size // NUM_OBJECTS sets the size of the array to allocate and thus set // the size in KBytes of the session object // NUM_OBJECTS can be initialized by the servlet // Here we check for the request parameter to change the size and // invalidate the session if it exists // NOTE: Current user sessions will remain the same (i.e. when // NUM_OBJECTS is changed, all user thread must be restarted // for the change to fully take effect

String num_objects; if ((num_objects = request.getParameter(""num_objects"")) != null) { // validate input try { int x = Integer.parseInt(num_objects); if (x > 0) { NUM_OBJECTS = x; } } catch (Exception e) { Log.error(e, ""PingSession3.doGet(...): input should be an integer, input="" + num_objects); } // revert to current value on exception"|data_input/daytrader/daytrader.txt|fed83c3e29ad4282b5a032376b30b399
"outputBuffer.append(""<html><head> Session object size set to "" + NUM_OBJECTS + ""K bytes </head><body></body></html>""); if (session != null) { session.invalidate(); } out.print(outputBuffer.toString()); out.close(); return; }

// Get the session data value sessionData = (PingSession3Object[]) session.getAttribute(""sessiontest.sessionData""); if (sessionData == null) { sessionData = new PingSession3Object[NUM_OBJECTS]; for (int i = 0; i < NUM_OBJECTS; i++) { sessionData[i] = new PingSession3Object(); } }

session.setAttribute(""sessiontest.sessionData"", sessionData);

// Each PingSession3Object is about 1024 bits, there are 8 bits in a // byte. int num_bytes = (NUM_OBJECTS * 1024) / 8; response.setHeader(""SessionTrackingTest-largeSessionData"", num_bytes + ""bytes"");

outputBuffer .append(""<html><head><title>Session Large Data Test</title></head><body><HR><BR><FONT size=\""+2\"" color=\""#000066\"">HTTP Session Test 3: Large Data<BR></FONT><FONT size=\""+1\"" color=\""#000066\"">Init time: "") .append(initTime).append(""</FONT><BR><BR>""); hitCount++; outputBuffer.append(""<B>Hit Count: "").append(hitCount) .append(""<BR>Session object updated. Session Object size = "" + num_bytes + "" bytes </B></body></html>""); // output the Buffer to the printWriter. out.println(outputBuffer.toString());"|data_input/daytrader/daytrader.txt|f2e161fd1db04cb1925e47446a86cf15
"} catch (Exception e) { // log the excecption Log.error(e, ""PingSession3.doGet(..l.): error. ""); // set the server responce to 500 and forward to the web app defined // error page response.sendError(500, ""PingSession3.doGet(...): error. "" + e.toString()); } }

/** * returns a string of information about the servlet * * @return info String: contains info about the servlet **/ @Override public String getServletInfo() { return ""HTTP Session Object: Tests management of a large custom session class""; }

/** * called when the class is loaded to initialize the servlet * * @param config *            ServletConfig: **/ @Override public void init(ServletConfig config) throws ServletException { super.init(config); hitCount = 0; initTime = new java.util.Date().toString();"|data_input/daytrader/daytrader.txt|7cf7b6fb7590466db5af8d7224ef8344
"} } /home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingSession3Object.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.Serializable;

/** * * An object that contains approximately 1024 bits of information. This is used * by {@link PingSession3} * */ public class PingSession3Object implements Serializable { // PingSession3Object represents a BLOB of session data of various. // Each instantiation of this class is approximately 1K in size (not // including overhead for arrays and Strings) // Using different datatype exercises the various serialization algorithms // for each type"|data_input/daytrader/daytrader.txt|2d934ee9dfb74aac9e138e2a7323f8ee
"private static final long serialVersionUID = 1452347702903504717L; byte[] byteVal = new byte[16]; // 8 * 16 = 128 bits char[] charVal = new char[8]; // 16 * 8 = 128 bits int a, b, c, d; // 4 * 32 = 128 bits float e, f, g, h; // 4 * 32 = 128 bits double i, j; // 2 * 64 = 128 bits // Primitive type size = ~5*128= 640

String s1 = new String(""123456789012""); String s2 = new String(""abcdefghijkl"");

// String type size = ~2*12*16 = 384 // Total blob size (w/o overhead) = 1024

// The Session blob must be filled with data to avoid compression of the // blob during serialization PingSession3Object() { int index; byte b = 0x8; for (index = 0; index < 16; index++) { byteVal[index] = (byte) (b + 2); }

char c = 'a'; for (index = 0; index < 8; index++) { charVal[index] = (char) (c + 2); }

a = 1; b = 2; c = 3; d = 5; e = (float) 7.0; f = (float) 11.0; g = (float) 13.0; h = (float) 17.0; i = 19.0; j = 23.0; } /** * Main method to test the serialization of the Session Data blob object * Creation date: (4/3/2000 3:07:34 PM) * * @param args *            java.lang.String[] */"|data_input/daytrader/daytrader.txt|01ef1c2597d34e7c8a55c406640cdfce
"/** * Since the following main method were written for testing purpose, we * comment them out public static void main(String[] args) { try { * PingSession3Object data = new PingSession3Object(); * * FileOutputStream ostream = new * FileOutputStream(""c:\\temp\\datablob.xxx""); ObjectOutputStream p = new * ObjectOutputStream(ostream); p.writeObject(data); p.flush(); * ostream.close(); } catch (Exception e) { System.out.println(""Exception: "" * + e.toString()); } } */

} /home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingUpgradeServlet.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */

package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;

import javax.servlet.ReadListener;

import javax.servlet.ServletException;

import javax.servlet.ServletInputStream;

import javax.servlet.ServletOutputStream;

import javax.servlet.http.HttpServlet;"|data_input/daytrader/daytrader.txt|12222010177f4fed9c6d7ca5638b4e12
"import javax.servlet.ServletInputStream;

import javax.servlet.ServletOutputStream;

import javax.servlet.http.HttpServlet;

import javax.servlet.http.HttpServletRequest;

import javax.servlet.http.HttpServletResponse;

import javax.servlet.http.HttpUpgradeHandler;

import javax.servlet.http.WebConnection;

import javax.servlet.annotation.WebServlet;

import com.ibm.websphere.samples.daytrader.util.Log;

@WebServlet(name = ""PingUpgradeServlet"", urlPatterns = { ""/servlet/PingUpgradeServlet"" }, asyncSupported=true) public class PingUpgradeServlet extends HttpServlet { private static final long serialVersionUID = -6955518532146927509L;

@Override protected void doGet(final HttpServletRequest req, final HttpServletResponse res) throws ServletException, IOException { doPost(req,res); }

@Override protected void doPost(final HttpServletRequest req, final HttpServletResponse res) throws ServletException, IOException {

if (Log.doTrace()) {

Log.trace(""PingUpgradeServlet:doPost"");

}

if (""echo"".equals(req.getHeader(""Upgrade""))) {

if (Log.doTrace()) {

Log.trace(""PingUpgradeServlet:doPost -

found echo, doing upgrade"");

}

res.setStatus(101);

res.setHeader(""Upgrade"", ""echo"");

res.setHeader(""Connection"", ""Upgrade"");

req.upgrade(Handler.class);

} else {

if (Log.doTrace()) { Log.trace(""PingUpgradeServlet:doPost -- did not find echo, no upgrade""); }

res.getWriter().println(""No upgrade: "" + req.getHeader(""Upgrade"")); } }"|data_input/daytrader/daytrader.txt|861ffcff163a4079ae9b62e9a47d1f7a
"res.getWriter().println(""No upgrade: "" + req.getHeader(""Upgrade"")); } }

public static class Handler implements HttpUpgradeHandler {

@Override public void init(final WebConnection wc) { Listener listener = null; try { listener = new Listener(wc);

} catch (IOException e1) { // TODO Auto-generated catch block e1.printStackTrace(); }

try {

if (Log.doTrace()) {

Log.trace(""PingUpgradeServlet$Handler.init() -

Initializing Handler"");

}

// flush headers if any wc.getOutputStream().flush(); wc.getInputStream().setReadListener(listener);

} catch (IOException e) { throw new IllegalArgumentException(e); } }

@Override

public void destroy() {

if (Log.doTrace()) {

Log.trace(""PingUpgradeServlet$Handler.destroy() -

Destroying Handler"");

}

}

}

private static class Listener implements ReadListener { private final WebConnection connection; private ServletInputStream input = null; private ServletOutputStream output = null;

private Listener(final WebConnection connection) throws IOException  { this.connection = connection; this.input = connection.getInputStream(); this.output = connection.getOutputStream(); }

@Override public void onDataAvailable() throws IOException {

if (Log.doTrace()) {

Log.trace(""PingUpgradeServlet$Listener.onDataAvailable() called"");

}

byte[] data = new byte[1024]; int len = -1;

while (input.isReady()  && (len = input.read(data)) != -1) { String dataRead = new String(data, 0, len);"|data_input/daytrader/daytrader.txt|29cb511d3003431c8c2e4b015591497c
"while (input.isReady()  && (len = input.read(data)) != -1) { String dataRead = new String(data, 0, len);

if (Log.doTrace()) { Log.trace(""PingUpgradeServlet$Listener.onDataAvailable() -- Adding data to queue -->"" + dataRead + ""<--""); }

output.println(dataRead);

output.flush();

}

closeConnection();

}

private void closeConnection() { try { connection.close(); } catch (Exception e) { if (Log.doTrace()) { Log.error(e.toString()); } } }

@Override public void onAllDataRead() throws IOException { closeConnection(); }

@Override public void onError(final Throwable t) { closeConnection(); } } } /home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingWebSocketBinary.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */

package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;

import java.nio.ByteBuffer;

import javax.websocket.CloseReason;"|data_input/daytrader/daytrader.txt|5925012a8d9c469e997c7fabb999993a
"import java.io.IOException;

import java.nio.ByteBuffer;

import javax.websocket.CloseReason;

import javax.websocket.EndpointConfig;

import javax.websocket.OnClose;

import javax.websocket.OnError;

import javax.websocket.OnMessage;

import javax.websocket.OnOpen;

import javax.websocket.Session;

import javax.websocket.server.ServerEndpoint;

/** This class a simple websocket that echos the binary it has been sent. */

@ServerEndpoint(value = ""/pingBinary"")

public class PingWebSocketBinary {

private Session currentSession = null;

@OnOpen public void onOpen(final Session session, EndpointConfig ec) { currentSession = session; }

@OnMessage public void ping(ByteBuffer data) { currentSession.getAsyncRemote().sendBinary(data); }

@OnError public void onError(Throwable t) { t.printStackTrace(); }

@OnClose public void onClose(Session session, CloseReason reason) {

try { if (session.isOpen()) { session.close(); } } catch (IOException e) { e.printStackTrace(); } }

}"|data_input/daytrader/daytrader.txt|0b53a6d04eee4465b6e04f8d7a083e24
"try { if (session.isOpen()) { session.close(); } } catch (IOException e) { e.printStackTrace(); } }

}

/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingWebSocketJson.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */

package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;

import javax.enterprise.concurrent.ManagedThreadFactory;

import javax.naming.InitialContext;

import javax.naming.NamingException;

import javax.websocket.CloseReason;

import javax.websocket.EndpointConfig;

import javax.websocket.OnClose;

import javax.websocket.OnError;

import javax.websocket.OnMessage;

import javax.websocket.OnOpen;

import javax.websocket.Session;

import javax.websocket.server.ServerEndpoint;

import com.ibm.websphere.samples.daytrader.web.websocket.JsonDecoder;

import com.ibm.websphere.samples.daytrader.web.websocket.JsonEncoder;"|data_input/daytrader/daytrader.txt|ec1e3bc0b59d4250aea511d41e61a7ac
"import com.ibm.websphere.samples.daytrader.web.websocket.JsonDecoder;

import com.ibm.websphere.samples.daytrader.web.websocket.JsonEncoder;

import com.ibm.websphere.samples.daytrader.web.websocket.JsonMessage;

/** This class a simple websocket that sends the number of times it has been pinged. */

@ServerEndpoint(value = ""/pingWebSocketJson"",encoders=JsonEncoder.class ,decoders=JsonDecoder.class)

public class PingWebSocketJson {

private Session currentSession = null; private Integer sentHitCount = null; private Integer receivedHitCount = null;

@OnOpen public void onOpen(final Session session, EndpointConfig ec) { currentSession = session; sentHitCount = 0; receivedHitCount = 0;

InitialContext context;

ManagedThreadFactory mtf = null;

try {

context = new InitialContext();

mtf = (ManagedThreadFactory) context.lookup(""java:comp/DefaultManagedThreadFactory"");

} catch (NamingException e1) { // TODO Auto-generated catch block e1.printStackTrace(); }

Thread thread = mtf.newThread(new Runnable() {

@Override

public void run() {

try {

Thread.sleep(500);

while (currentSession.isOpen()) {

sentHitCount++;

JsonMessage response = new JsonMessage(); response.setKey(""sentHitCount""); response.setValue(sentHitCount.toString()); currentSession.getAsyncRemote().sendObject(response);

Thread.sleep(100);

}

} catch (InterruptedException e) { e.printStackTrace(); } }

});

thread.start();

}"|data_input/daytrader/daytrader.txt|44f60bbfb59b48d3aed0072f55ae2070
text|source|chunk_id
"Thread.sleep(100);

}

} catch (InterruptedException e) { e.printStackTrace(); } }

});

thread.start();

}

@OnMessage public void ping(JsonMessage message) throws IOException { receivedHitCount++; JsonMessage response = new JsonMessage(); response.setKey(""receivedHitCount""); response.setValue(receivedHitCount.toString()); currentSession.getAsyncRemote().sendObject(response); }

@OnError public void onError(Throwable t) { t.printStackTrace(); }

@OnClose public void onClose(Session session, CloseReason reason) {

}

}

/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingWebSocketTextAsync.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.prims;

import javax.websocket.CloseReason;

import javax.websocket.EndpointConfig;

import javax.websocket.OnClose;

import javax.websocket.OnError;

import javax.websocket.OnMessage;"|data_input/daytrader/daytrader.txt|8707d6ad9a92445589caffd4be7c5b37
"import javax.websocket.EndpointConfig;

import javax.websocket.OnClose;

import javax.websocket.OnError;

import javax.websocket.OnMessage;

import javax.websocket.OnOpen;

import javax.websocket.Session;

import javax.websocket.server.ServerEndpoint;

/** This class a simple websocket that sends the number of times it has been pinged. */

@ServerEndpoint(value = ""/pingTextAsync"")

public class PingWebSocketTextAsync {

private Session currentSession = null; private Integer hitCount = null;

@OnOpen public void onOpen(final Session session, EndpointConfig ec) { currentSession = session; hitCount = 0; }

@OnMessage public void ping(String text) {

hitCount++;

currentSession.getAsyncRemote().sendText(hitCount.toString());

}

@OnError public void onError(Throwable t) { t.printStackTrace(); }

@OnClose public void onClose(Session session, CloseReason reason) {

}

}"|data_input/daytrader/daytrader.txt|1b024f16e008431d803b0a1aab2a2ee8
"}

@OnError public void onError(Throwable t) { t.printStackTrace(); }

@OnClose public void onClose(Session session, CloseReason reason) {

}

}

/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/PingWebSocketTextSync.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;

//import java.util.Collections;

//import java.util.HashSet;

//import java.util.Set;

import javax.websocket.CloseReason;

import javax.websocket.EndpointConfig;

import javax.websocket.OnClose;

import javax.websocket.OnError;

import javax.websocket.OnMessage;

import javax.websocket.OnOpen;

import javax.websocket.Session;

import javax.websocket.server.ServerEndpoint;

/** This class a simple websocket that sends the number of times it has been pinged. */

@ServerEndpoint(value = ""/pingTextSync"")"|data_input/daytrader/daytrader.txt|292def0eaf494d65b820b27db1ce5bbe
"/** This class a simple websocket that sends the number of times it has been pinged. */

@ServerEndpoint(value = ""/pingTextSync"")

public class PingWebSocketTextSync {

private Session currentSession = null; private Integer hitCount = null;

@OnOpen public void onOpen(final Session session, EndpointConfig ec) { currentSession = session; hitCount = 0; }

@OnMessage public void ping(String text) { hitCount++;

try { currentSession.getBasicRemote().sendText(hitCount.toString()); } catch (IOException e) { e.printStackTrace(); } }

@OnError public void onError(Throwable t) { t.printStackTrace(); }

@OnClose public void onClose(Session session, CloseReason reason) {

}

}

/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/ejb3/PingServlet2Entity.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.prims.ejb3;

import java.io.IOException;"|data_input/daytrader/daytrader.txt|286036b8b0df4afd95015447bf7cbf78
"import java.io.IOException;

import javax.persistence.EntityManager;

import javax.persistence.PersistenceContext;

import javax.servlet.ServletConfig;

import javax.servlet.ServletException;

import javax.servlet.http.HttpServlet;

import javax.servlet.http.HttpServletRequest;

import javax.servlet.http.HttpServletResponse;

import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;

import com.ibm.websphere.samples.daytrader.util.Log;

import com.ibm.websphere.samples.daytrader.util.TradeConfig;

/** * * Primitive designed to run within the TradeApplication and makes use of * {@link trade_client.TradeConfig} for config parameters and random stock * symbols. Servlet will generate a random stock symbol and get the price of * that symbol using a {@link trade.Quote} Entity EJB This tests the common path * of a Servlet calling an Entity EJB to get data * */

public class PingServlet2Entity extends HttpServlet { private static final long serialVersionUID = -9004026114063894842L;

private static String initTime;

private static int hitCount;

@PersistenceContext(unitName = ""daytrader"")

private EntityManager em;

@Override public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException { doGet(req, res); }

@Override public void doGet(HttpServletRequest req, HttpServletResponse res) throws IOException, ServletException {

res.setContentType(""text/html"");

java.io.PrintWriter out = res.getWriter();

QuoteDataBean quote = null;"|data_input/daytrader/daytrader.txt|f0b4ef815def4cf4a3dbb4f7df2b2fd7
"res.setContentType(""text/html"");

java.io.PrintWriter out = res.getWriter();

QuoteDataBean quote = null;

String symbol = null;

StringBuffer output = new StringBuffer(100); output.append(""<html><head><title>Servlet2Entity</title></head>"" + ""<body><HR><FONT size=\""+2\"" color=\""#000066\"">PingServlet2Entity<BR></FONT>"" + ""<FONT size=\""-1\"" color=\""#000066\""><BR>PingServlet2Entity accesses an EntityManager"" + "" using a PersistenceContext annotaion and then gets the price of a random symbol (generated by TradeConfig)"" + "" through the EntityManager find method""); try { // generate random symbol try { int iter = TradeConfig.getPrimIterations(); for (int ii = 0; ii < iter; ii++) { // get a random symbol to look up and get the key to that // symbol. symbol = TradeConfig.rndSymbol(); // find the EntityInstance. quote = em.find(QuoteDataBean.class, symbol); } } catch (Exception e) { Log.error(""web_primtv.PingServlet2Entity.doGet(...): error performing find""); throw e; } // get the price and print the output.

output.append(""<HR>initTime: "" + initTime + ""<BR>Hit Count: "").append(hitCount++); output.append(""<HR>Quote Information<BR><BR> "" + quote.toHTML()); output.append(""</font><HR></body></html>""); out.println(output.toString()); } catch (Exception e) { Log.error(e, ""PingServlet2Entity.doGet(...): error""); // this will send an Error to teh web applications defined error // page. res.sendError(500, ""PingServlet2Entity.doGet(...): error"" + e.toString());

}

}"|data_input/daytrader/daytrader.txt|407b409e628c4e9eb7a155c2ffd2e420
"}

}

@Override public String getServletInfo() { return ""web primitive, tests Servlet to Entity EJB path""; }

@Override public void init(ServletConfig config) throws ServletException { super.init(config); hitCount = 0; initTime = new java.util.Date().toString(); } } /home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/ejb3/PingServlet2MDBQueue.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.prims.ejb3;

import java.io.IOException;

import javax.annotation.Resource;

import javax.jms.Connection;

import javax.jms.ConnectionFactory;

import javax.jms.JMSContext;

import javax.jms.Queue;

import javax.jms.TextMessage;

import javax.servlet.ServletConfig;

import javax.servlet.ServletException;

import javax.servlet.annotation.WebServlet;

import javax.servlet.http.HttpServlet;

import javax.servlet.http.HttpServletRequest;"|data_input/daytrader/daytrader.txt|1f4d2a59ce6b4c3eb7f5ba98ddb88ac0
"import javax.servlet.annotation.WebServlet;

import javax.servlet.http.HttpServlet;

import javax.servlet.http.HttpServletRequest;

import javax.servlet.http.HttpServletResponse;

import com.ibm.websphere.samples.daytrader.util.Log;

import com.ibm.websphere.samples.daytrader.util.TradeConfig;

/** * This primitive is designed to run inside the TradeApplication and relies upon * the {@link com.ibm.websphere.samples.daytrader.util.TradeConfig} class to set * configuration parameters. PingServlet2MDBQueue tests key functionality of a * servlet call to a post a message to an MDB Queue. The TradeBrokerMDB receives * the message This servlet makes use of the MDB EJB * {@link com.ibm.websphere.samples.daytrader.ejb3.DTBroker3MDB} by posting a * message to the MDB Queue */ @WebServlet(name = ""ejb3.PingServlet2MDBQueue"", urlPatterns = { ""/ejb3/PingServlet2MDBQueue"" }) public class PingServlet2MDBQueue extends HttpServlet {

private static final long serialVersionUID = 2637271552188745216L;

private static String initTime;

private static int hitCount;

@Resource(name = ""jms/QueueConnectionFactory"")

private ConnectionFactory queueConnectionFactory;

@Resource(name = ""jms/BrokerQueue"")

private Queue tradeBrokerQueue;

@Override public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException { doGet(req, res); }

@Override public void doGet(HttpServletRequest req, HttpServletResponse res) throws IOException, ServletException {"|data_input/daytrader/daytrader.txt|4dfe35afbee54c2b9f79b3ae3077a420
"@Override public void doGet(HttpServletRequest req, HttpServletResponse res) throws IOException, ServletException {

res.setContentType(""text/html""); java.io.PrintWriter out = res.getWriter(); // use a stringbuffer to avoid concatenation of Strings StringBuffer output = new StringBuffer(100); output.append(""<html><head><title>PingServlet2MDBQueue</title></head>"" + ""<body><HR><FONT size=\""+2\"" color=\""#000066\"">PingServlet2MDBQueue<BR></FONT>"" + ""<FONT size=\""-1\"" color=\""#000066\"">"" + ""Tests the basic operation of a servlet posting a message to an EJB MDB through a JMS Queue.<BR>"" + ""<FONT color=\""red\""><B>Note:</B> Not intended for performance testing.</FONT>"");

try {

Connection conn = queueConnectionFactory.createConnection();

try { TextMessage message = null; int iter = TradeConfig.getPrimIterations(); for (int ii = 0; ii < iter; ii++) { /*Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE); try { MessageProducer producer = sess.createProducer(tradeBrokerQueue);

message = sess.createTextMessage();

String command = ""ping""; message.setStringProperty(""command"", command); message.setLongProperty(""publishTime"", System.currentTimeMillis()); message.setText(""Ping message for queue java:comp/env/jms/TradeBrokerQueue sent from PingServlet2MDBQueue at "" + new java.util.Date()); producer.send(message); } finally { sess.close(); }*/

JMSContext context = queueConnectionFactory.createContext();

message = context.createTextMessage();"|data_input/daytrader/daytrader.txt|3c2de27638324d5fbd9db7d31c0b6a1b
"JMSContext context = queueConnectionFactory.createContext();

message = context.createTextMessage();

message.setStringProperty(""command"", ""ping""); message.setLongProperty(""publishTime"", System.currentTimeMillis()); message.setText(""Ping message for queue java:comp/env/jms/TradeBrokerQueue sent from PingServlet2MDBQueue at "" + new java.util.Date());

context.createProducer().send(tradeBrokerQueue, message);

}

// write out the output output.append(""<HR>initTime: "").append(initTime); output.append(""<BR>Hit Count: "").append(hitCount++); output.append(""<HR>Posted Text message to java:comp/env/jms/TradeBrokerQueue destination""); output.append(""<BR>Message: "").append(message); output.append(""<BR><BR>Message text: "").append(message.getText()); output.append(""<BR><HR></FONT></BODY></HTML>""); out.println(output.toString());

} catch (Exception e) { Log.error(""PingServlet2MDBQueue.doGet(...):exception posting message to TradeBrokerQueue destination ""); throw e; } finally { conn.close(); } } // this is where I actually handle the exceptions catch (Exception e) { Log.error(e, ""PingServlet2MDBQueue.doGet(...): error""); res.sendError(500, ""PingServlet2MDBQueue.doGet(...): error, "" + e.toString());

}

}

@Override public String getServletInfo() { return ""web primitive, configured with trade runtime configs, tests Servlet to Session EJB path"";

}"|data_input/daytrader/daytrader.txt|e14fb89ceb4d4971b62d9b1523b45edd
"}

@Override public String getServletInfo() { return ""web primitive, configured with trade runtime configs, tests Servlet to Session EJB path"";

}

@Override public void init(ServletConfig config) throws ServletException { super.init(config); hitCount = 0; initTime = new java.util.Date().toString(); }

}

/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/ejb3/PingServlet2MDBTopic.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.prims.ejb3;

import java.io.IOException;

import javax.annotation.Resource;

import javax.jms.Connection;

import javax.jms.ConnectionFactory;

import javax.jms.JMSContext;

import javax.jms.TextMessage;

import javax.jms.Topic;

import javax.servlet.ServletConfig;

import javax.servlet.ServletException;

import javax.servlet.annotation.WebServlet;

import javax.servlet.http.HttpServlet;"|data_input/daytrader/daytrader.txt|c1eb4541f0f14d31a7454d249d7c60c1
"import javax.servlet.ServletException;

import javax.servlet.annotation.WebServlet;

import javax.servlet.http.HttpServlet;

import javax.servlet.http.HttpServletRequest;

import javax.servlet.http.HttpServletResponse;

import com.ibm.websphere.samples.daytrader.util.Log;

import com.ibm.websphere.samples.daytrader.util.TradeConfig;

/** * This primitive is designed to run inside the TradeApplication and relies upon * the {@link com.ibm.websphere.samples.daytrader.util.TradeConfig} class to set * configuration parameters. PingServlet2MDBQueue tests key functionality of a * servlet call to a post a message to an MDB Topic. The TradeStreamerMDB (and * any other subscribers) receives the message This servlet makes use of the MDB * EJB {@link com.ibm.websphere.samples.daytrader.ejb3.DTStreamer3MDB} by * posting a message to the MDB Topic */ @WebServlet(name = ""ejb3.PingServlet2MDBTopic"", urlPatterns = { ""/ejb3/PingServlet2MDBTopic"" }) public class PingServlet2MDBTopic extends HttpServlet {

private static final long serialVersionUID = 5925470158886928225L;

private static String initTime;

private static int hitCount;

@Resource(name = ""jms/TopicConnectionFactory"")

private ConnectionFactory topicConnectionFactory;

@Resource(name = ""jms/StreamerTopic"")

private Topic tradeStreamerTopic;

@Override public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException { doGet(req, res); }"|data_input/daytrader/daytrader.txt|72137819204d4257a6acd88f4d059abf
"@Override public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException { doGet(req, res); }

@Override public void doGet(HttpServletRequest req, HttpServletResponse res) throws IOException, ServletException {

res.setContentType(""text/html""); java.io.PrintWriter out = res.getWriter(); // use a stringbuffer to avoid concatenation of Strings StringBuffer output = new StringBuffer(100); output.append(""<html><head><title>PingServlet2MDBTopic</title></head>"" + ""<body><HR><FONT size=\""+2\"" color=\""#000066\"">PingServlet2MDBTopic<BR></FONT>"" + ""<FONT size=\""-1\"" color=\""#000066\"">"" + ""Tests the basic operation of a servlet posting a message to an EJB MDB (and other subscribers) through a JMS Topic.<BR>"" + ""<FONT color=\""red\""><B>Note:</B> Not intended for performance testing.</FONT>"");

// we only want to look up the JMS resources once try {

Connection conn = topicConnectionFactory.createConnection();

try { TextMessage message = null; int iter = TradeConfig.getPrimIterations(); for (int ii = 0; ii < iter; ii++) { /*Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE); try { MessageProducer producer = sess.createProducer(tradeStreamerTopic); message = sess.createTextMessage();"|data_input/daytrader/daytrader.txt|c53cf0946e5b4ae9a21b62d9a7b57476
"String command = ""ping""; message.setStringProperty(""command"", command); message.setLongProperty(""publishTime"", System.currentTimeMillis()); message.setText(""Ping message for topic java:comp/env/jms/TradeStreamerTopic sent from PingServlet2MDBTopic at "" + new java.util.Date());

producer.send(message);

} finally {

sess.close();

}

/

JMSContext context = topicConnectionFactory.createContext();

message = context.createTextMessage();

message.setStringProperty(""command"", ""ping""); message.setLongProperty(""publishTime"", System.currentTimeMillis()); message.setText(""Ping message for topic java:comp/env/jms/TradeStreamerTopic sent from PingServlet2MDBTopic at "" + new java.util.Date());

context.createProducer().send(tradeStreamerTopic, message);

}

// write out the output output.append(""<HR>initTime: "").append(initTime); output.append(""<BR>Hit Count: "").append(hitCount++); output.append(""<HR>Posted Text message to java:comp/env/jms/TradeStreamerTopic topic""); output.append(""<BR>Message: "").append(message); output.append(""<BR><BR>Message text: "").append(message.getText()); output.append(""<BR><HR></FONT></BODY></HTML>""); out.println(output.toString());"|data_input/daytrader/daytrader.txt|3608104bd6ee41a1b0a1d9e4dac2048c
"} catch (Exception e) { Log.error(""PingServlet2MDBTopic.doGet(...):exception posting message to TradeStreamerTopic topic""); throw e; } finally { conn.close(); } } // this is where I actually handle the exceptions catch (Exception e) { Log.error(e, ""PingServlet2MDBTopic.doGet(...): error""); res.sendError(500, ""PingServlet2MDBTopic.doGet(...): error, "" + e.toString());

}

}

@Override public String getServletInfo() { return ""web primitive, configured with trade runtime configs, tests Servlet to Session EJB path""; }

@Override public void init(ServletConfig config) throws ServletException { super.init(config); hitCount = 0; initTime = new java.util.Date().toString(); }

}

/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/ejb3/PingServlet2Session2CMROne2Many.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.prims.ejb3;"|data_input/daytrader/daytrader.txt|d2e7ca538aad446fb1749c078b2a3e8b
"import java.io.IOException;

import java.util.Collection;

import java.util.Iterator;

import javax.ejb.EJB;

import javax.servlet.ServletConfig;

import javax.servlet.ServletException;

import javax.servlet.annotation.WebServlet;

import javax.servlet.http.HttpServlet;

import javax.servlet.http.HttpServletRequest;

import javax.servlet.http.HttpServletResponse;

import com.ibm.websphere.samples.daytrader.ejb3.TradeSLSBBean;

import com.ibm.websphere.samples.daytrader.entities.OrderDataBean;

import com.ibm.websphere.samples.daytrader.util.Log;

import com.ibm.websphere.samples.daytrader.util.TradeConfig;

/** * Primitive to test Entity Container Managed Relationshiop One to One Servlet * will generate a random userID and get the profile for that user using a * {@link trade.Account} Entity EJB This tests the common path of a Servlet * calling a Session to Entity EJB to get CMR One to One data * */ @WebServlet(name = ""ejb3.PingServlet2Session2CMR2One2Many"", urlPatterns = { ""/ejb3/PingServlet2Session2CMR2One2Many"" }) public class PingServlet2Session2CMROne2Many extends HttpServlet { private static final long serialVersionUID = -8658929449987440032L;

private static String initTime;

private static int hitCount;

@EJB(lookup=""java:app/daytrader

ee7

ejb/TradeSLSBBean!com.ibm.websphere.samples.daytrader.ejb3.TradeSLSBLocal"")

private TradeSLSBBean tradeSLSBLocal;"|data_input/daytrader/daytrader.txt|e5b94ae4304d4b2aaadca7da10465207
"ee7

ejb/TradeSLSBBean!com.ibm.websphere.samples.daytrader.ejb3.TradeSLSBLocal"")

private TradeSLSBBean tradeSLSBLocal;

@Override public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException { doGet(req, res); }

@Override public void doGet(HttpServletRequest req, HttpServletResponse res) throws IOException, ServletException {

res.setContentType(""text/html"");

java.io.PrintWriter out = res.getWriter();

String userID = null;

StringBuffer output = new StringBuffer(100); output.append(""<html><head><title>Servlet2Session2CMROne20ne</title></head>"" + ""<body><HR><FONT size=\""+2\"" color=\""#000066\"">PingServlet2Session2CMROne2Many<BR></FONT>"" + ""<FONT size=\""-1\"" color=\""#000066\""><BR>PingServlet2Session2CMROne2Many uses the Trade Session EJB"" + "" to get the orders for a user using an EJB 3.0 Entity CMR one to many relationship""); try {

Collection<?> orderDataBeans = null; int iter = TradeConfig.getPrimIterations(); for (int ii = 0; ii < iter; ii++) { userID = TradeConfig.rndUserID();

// get the users orders and print the output. orderDataBeans = tradeSLSBLocal.getOrders(userID); }"|data_input/daytrader/daytrader.txt|b61e862334644812820b9f19af08d3c2
"// get the users orders and print the output. orderDataBeans = tradeSLSBLocal.getOrders(userID); }

output.append(""<HR>initTime: "" + initTime + ""<BR>Hit Count: "").append(hitCount++); output.append(""<HR>One to Many CMR access of Account Orders from Account Entity<BR> ""); output.append(""<HR>User: "" + userID + "" currently has "" + orderDataBeans.size() + "" stock orders:""); Iterator<?> it = orderDataBeans.iterator(); while (it.hasNext()) { OrderDataBean orderData = (OrderDataBean) it.next(); output.append(""<BR>"" + orderData.toHTML()); } output.append(""</font><HR></body></html>""); out.println(output.toString()); } catch (Exception e) { Log.error(e, ""PingServlet2Session2CMROne2Many.doGet(...): error""); // this will send an Error to teh web applications defined error // page. res.sendError(500, ""PingServlet2Session2CMROne2Many.doGet(...): error"" + e.toString());

}

}

@Override public String getServletInfo() { return ""web primitive, tests Servlet to Entity EJB path""; }"|data_input/daytrader/daytrader.txt|ef14cd2f6eab416ba837be9289450a2a
"}

}

@Override public String getServletInfo() { return ""web primitive, tests Servlet to Entity EJB path""; }

@Override public void init(ServletConfig config) throws ServletException { super.init(config); hitCount = 0; initTime = new java.util.Date().toString(); } } /home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/ejb3/PingServlet2Session2CMROne2One.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.prims.ejb3;

import java.io.IOException;

import javax.ejb.EJB;

import javax.servlet.ServletConfig;

import javax.servlet.ServletException;

import javax.servlet.annotation.WebServlet;

import javax.servlet.http.HttpServlet;

import javax.servlet.http.HttpServletRequest;

import javax.servlet.http.HttpServletResponse;

import com.ibm.websphere.samples.daytrader.ejb3.TradeSLSBBean;"|data_input/daytrader/daytrader.txt|8998ce943c414cfeb1e902855b471010
"import javax.servlet.http.HttpServletResponse;

import com.ibm.websphere.samples.daytrader.ejb3.TradeSLSBBean;

import com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean;

import com.ibm.websphere.samples.daytrader.util.Log;

import com.ibm.websphere.samples.daytrader.util.TradeConfig;

/** * Primitive to test Entity Container Managed Relationshiop One to One Servlet * will generate a random userID and get the profile for that user using a * {@link trade.Account} Entity EJB This tests the common path of a Servlet * calling a Session to Entity EJB to get CMR One to One data * */ @WebServlet(name = ""ejb3.PingServlet2Session2CMR2One2One"", urlPatterns = { ""/ejb3/PingServlet2Session2CMR2One2One"" }) public class PingServlet2Session2CMROne2One extends HttpServlet { private static final long serialVersionUID = 567062418489199248L;

private static String initTime;

private static int hitCount;

@EJB(lookup=""java:app/daytrader

ee7

ejb/TradeSLSBBean!com.ibm.websphere.samples.daytrader.ejb3.TradeSLSBLocal"")

private TradeSLSBBean tradeSLSBLocal;

@Override public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException { doGet(req, res); }

@Override public void doGet(HttpServletRequest req, HttpServletResponse res) throws IOException, ServletException {

res.setContentType(""text/html"");

java.io.PrintWriter out = res.getWriter();

String userID = null;"|data_input/daytrader/daytrader.txt|ef0683e06d194a82876a926c21b8483b
"res.setContentType(""text/html"");

java.io.PrintWriter out = res.getWriter();

String userID = null;

StringBuffer output = new StringBuffer(100); output.append(""<html><head><title>Servlet2Session2CMROne20ne</title></head>"" + ""<body><HR><FONT size=\""+2\"" color=\""#000066\"">PingServlet2Session2CMROne2One<BR></FONT>"" + ""<FONT size=\""-1\"" color=\""#000066\""><BR>PingServlet2Session2CMROne2One uses the Trade Session EJB"" + "" to get the profile for a user using an EJB 3.0 CMR one to one relationship""); try {

AccountProfileDataBean accountProfileData = null; int iter = TradeConfig.getPrimIterations(); for (int ii = 0; ii < iter; ii++) { userID = TradeConfig.rndUserID(); // get the price and print the output. accountProfileData = tradeSLSBLocal.getAccountProfileData(userID); }

output.append(""<HR>initTime: "" + initTime + ""<BR>Hit Count: "").append(hitCount++); output.append(""<HR>One to One CMR access of AccountProfile Information from Account Entity<BR><BR> "" + accountProfileData.toHTML()); output.append(""</font><HR></body></html>""); out.println(output.toString()); } catch (Exception e) { Log.error(e, ""PingServlet2Session2CMROne2One.doGet(...): error""); // this will send an Error to teh web applications defined error // page. res.sendError(500, ""PingServlet2Session2CMROne2One.doGet(...): error"" + e.toString());

}

}

@Override public String getServletInfo() { return ""web primitive, tests Servlet to Entity EJB path""; }"|data_input/daytrader/daytrader.txt|ba61897ab1624f5b981682c144a4b4f5
"}

}

@Override public String getServletInfo() { return ""web primitive, tests Servlet to Entity EJB path""; }

@Override public void init(ServletConfig config) throws ServletException { super.init(config); hitCount = 0; initTime = new java.util.Date().toString(); } } /home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/ejb3/PingServlet2Session2Entity.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.prims.ejb3;

import java.io.IOException;

import javax.ejb.EJB;

import javax.naming.InitialContext;

import javax.servlet.ServletConfig;

import javax.servlet.ServletException;

import javax.servlet.annotation.WebServlet;

import javax.servlet.http.HttpServlet;

import javax.servlet.http.HttpServletRequest;

import javax.servlet.http.HttpServletResponse;

import com.ibm.websphere.samples.daytrader.ejb3.TradeSLSBBean;"|data_input/daytrader/daytrader.txt|ac84ecfd66b64897a08949f0db6a01aa
"import javax.servlet.http.HttpServletResponse;

import com.ibm.websphere.samples.daytrader.ejb3.TradeSLSBBean;

import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;

import com.ibm.websphere.samples.daytrader.util.Log;

import com.ibm.websphere.samples.daytrader.util.TradeConfig;

/** * * PingServlet2Session2Entity tests key functionality of a servlet call to a * stateless SessionEJB, and then to a Entity EJB representing data in a * database. This servlet makes use of the Stateless Session EJB {@link Trade}, * and then uses {@link TradeConfig} to generate a random stock symbol. The * stocks price is looked up using the Quote Entity EJB. * */ @WebServlet(name = ""ejb3.PingServlet2Session2Entity"", urlPatterns = { ""/ejb3/PingServlet2Session2Entity"" }) public class PingServlet2Session2Entity extends HttpServlet {

private static final long serialVersionUID = -5043457201022265012L;

private static String initTime;

private static int hitCount;

@EJB(lookup=""java:app/daytrader

ee7

ejb/TradeSLSBBean!com.ibm.websphere.samples.daytrader.ejb3.TradeSLSBLocal"")

private TradeSLSBBean tradeSLSBLocal;

@Override public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException { doGet(req, res); }

@Override public void doGet(HttpServletRequest req, HttpServletResponse res) throws IOException, ServletException {"|data_input/daytrader/daytrader.txt|60587972769947aa83f741647d6d9fae
"@Override public void doGet(HttpServletRequest req, HttpServletResponse res) throws IOException, ServletException {

res.setContentType(""text/html""); java.io.PrintWriter out = res.getWriter(); String symbol = null; QuoteDataBean quoteData = null; StringBuffer output = new StringBuffer(100);

output.append(""<html><head><title>PingServlet2Session2Entity</title></head>"" + ""<body><HR><FONT size=\""+2\"" color=\""#000066\"">PingServlet2Session2Entity<BR></FONT>"" + ""<FONT size=\""-1\"" color=\""#000066\"">"" + ""PingServlet2Session2Entity tests the common path of a Servlet calling a Session EJB "" + ""which in turn calls an Entity EJB.<BR>"");

try { try { int iter = TradeConfig.getPrimIterations(); for (int ii = 0; ii < iter; ii++) { symbol = TradeConfig.rndSymbol(); // getQuote will call findQuote which will instaniate the // Quote Entity Bean // and then will return a QuoteObject quoteData = tradeSLSBLocal.getQuote(symbol); } } catch (Exception ne) { Log.error(ne, ""PingServlet2Session2Entity.goGet(...): exception getting QuoteData through Trade""); throw ne; }

output.append(""<HR>initTime: "" + initTime).append(""<BR>Hit Count: "" + hitCount++); output.append(""<HR>Quote Information<BR><BR>"" + quoteData.toHTML()); out.println(output.toString());

} catch (Exception e) { Log.error(e, ""PingServlet2Session2Entity.doGet(...): General Exception caught""); res.sendError(500, ""General Exception caught, "" + e.toString()); } }"|data_input/daytrader/daytrader.txt|7f607128fed84dc79e8efb592a7ca7bf
"@Override public String getServletInfo() { return ""web primitive, tests Servlet to Session to Entity EJB path"";

}

@Override public void init(ServletConfig config) throws ServletException { super.init(config); hitCount = 0; initTime = new java.util.Date().toString();

if (tradeSLSBLocal == null) { Log.error(""PingServlet2Session2Entity:init - Injection of tradeSLSBLocal failed - performing JNDI lookup! "");

try { InitialContext context = new InitialContext(); tradeSLSBLocal = (TradeSLSBBean) context.lookup(""java:comp/env/ejb/TradeSLSBBean""); } catch (Exception ex) { Log.error(""PingServlet2Session2Entity:init - Lookup of tradeSLSBLocal failed!!! ""); ex.printStackTrace(); } } } } /home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/ejb3/PingServlet2Session2Entity2JSP.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.prims.ejb3;"|data_input/daytrader/daytrader.txt|14b50be8783a4a77b01256809464b71e
"import java.io.IOException;

import javax.ejb.EJB;

import javax.naming.InitialContext;

import javax.servlet.ServletConfig;

import javax.servlet.ServletContext;

import javax.servlet.ServletException;

import javax.servlet.annotation.WebServlet;

import javax.servlet.http.HttpServlet;

import javax.servlet.http.HttpServletRequest;

import javax.servlet.http.HttpServletResponse;

import com.ibm.websphere.samples.daytrader.ejb3.TradeSLSBBean;

import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;

import com.ibm.websphere.samples.daytrader.util.Log;

import com.ibm.websphere.samples.daytrader.util.TradeConfig;

/** * * PingServlet2Session2Entity tests key functionality of a servlet call to a * stateless SessionEJB, and then to a Entity EJB representing data in a * database. This servlet makes use of the Stateless Session EJB {@link Trade}, * and then uses {@link TradeConfig} to generate a random stock symbol. The * stocks price is looked up using the Quote Entity EJB. * */ @WebServlet(name = ""ejb3.PingServlet2Session2Entity2JSP"", urlPatterns = { ""/ejb3/PingServlet2Session2Entity2JSP"" }) public class PingServlet2Session2Entity2JSP extends HttpServlet {

private static final long serialVersionUID = -8966014710582651693L;

@EJB(lookup=""java:app/daytrader

ee7

ejb/TradeSLSBBean!com.ibm.websphere.samples.daytrader.ejb3.TradeSLSBLocal"")

private TradeSLSBBean tradeSLSBLocal;"|data_input/daytrader/daytrader.txt|2db5cdab67d44b3db11816a1d14b59ca
"ee7

ejb/TradeSLSBBean!com.ibm.websphere.samples.daytrader.ejb3.TradeSLSBLocal"")

private TradeSLSBBean tradeSLSBLocal;

@Override public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException { doGet(req, res); }

@Override public void doGet(HttpServletRequest req, HttpServletResponse res) throws IOException, ServletException { String symbol = null; QuoteDataBean quoteData = null; ServletContext ctx = getServletConfig().getServletContext();

try { try { int iter = TradeConfig.getPrimIterations(); for (int ii = 0; ii < iter; ii++) { symbol = TradeConfig.rndSymbol(); // getQuote will call findQuote which will instaniate the // Quote Entity Bean // and then will return a QuoteObject quoteData = tradeSLSBLocal.getQuote(symbol); }

req.setAttribute(""quoteData"", quoteData);

// req.setAttribute(""hitCount"", hitCount);

// req.setAttribute(""initTime"", initTime);

ctx.getRequestDispatcher(""/quoteDataPrimitive.jsp"").include(req, res); } catch (Exception ne) { Log.error(ne, ""PingServlet2Session2Entity2JSP.goGet(...): exception getting QuoteData through Trade""); throw ne; }

} catch (Exception e) { Log.error(e, ""PingServlet2Session2Entity2JSP.doGet(...): General Exception caught""); res.sendError(500, ""General Exception caught, "" + e.toString()); } }

@Override public String getServletInfo() { return ""web primitive, tests Servlet to Session to Entity EJB to JSP path"";

}"|data_input/daytrader/daytrader.txt|5bf33e92bfb24e35af008e7df3217456
"@Override public String getServletInfo() { return ""web primitive, tests Servlet to Session to Entity EJB to JSP path"";

}

@Override public void init(ServletConfig config) throws ServletException { super.init(config); // hitCount = 0; // initTime = new java.util.Date().toString();

if (tradeSLSBLocal == null) { Log.error(""PingServlet2Session2Entity2JSP:init - Injection of tradeSLSBLocal failed - performing JNDI lookup! "");"|data_input/daytrader/daytrader.txt|d20ca879b7f246c8a1de681811ac4568
"if (tradeSLSBLocal == null) { Log.error(""PingServlet2Session2Entity2JSP:init - Injection of tradeSLSBLocal failed - performing JNDI lookup! "");

try { InitialContext context = new InitialContext(); tradeSLSBLocal = (TradeSLSBBean) context.lookup(""java:comp/env/ejb/TradeSLSBBean""); } catch (Exception ex) { Log.error(""PingServlet2Session2EntityJSP:init - Lookup of tradeSLSBLocal failed!!! ""); ex.printStackTrace(); } } } } /home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/ejb3/PingServlet2Session2EntityCollection.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.prims.ejb3;

import java.io.IOException;

import java.util.Collection;

import java.util.Iterator;

import javax.ejb.EJB;

import javax.servlet.ServletConfig;

import javax.servlet.ServletException;

import javax.servlet.annotation.WebServlet;"|data_input/daytrader/daytrader.txt|24883702a44646fb8a7f7506163da998
"import javax.ejb.EJB;

import javax.servlet.ServletConfig;

import javax.servlet.ServletException;

import javax.servlet.annotation.WebServlet;

import javax.servlet.http.HttpServlet;

import javax.servlet.http.HttpServletRequest;

import javax.servlet.http.HttpServletResponse;

import com.ibm.websphere.samples.daytrader.ejb3.TradeSLSBBean;

import com.ibm.websphere.samples.daytrader.entities.HoldingDataBean;

import com.ibm.websphere.samples.daytrader.util.Log;

import com.ibm.websphere.samples.daytrader.util.TradeConfig;

/** * * PingServlet2Session2Entity tests key functionality of a servlet call to a * stateless SessionEJB, and then to a Entity EJB representing data in a * database. This servlet makes use of the Stateless Session EJB {@link Trade}, * and then uses {@link TradeConfig} to generate a random user. The users * portfolio is looked up using the Holding Entity EJB returnin a collection of * Holdings * */ @WebServlet(name = ""ejb3.PingServlet2Session2EntityCollection"", urlPatterns = { ""/ejb3/PingServlet2Session2EntityCollection"" }) public class PingServlet2Session2EntityCollection extends HttpServlet {

private static final long serialVersionUID = 6171380014749902308L;

private static String initTime;

private static int hitCount;

@EJB(lookup=""java:app/daytrader

ee7

ejb/TradeSLSBBean!com.ibm.websphere.samples.daytrader.ejb3.TradeSLSBLocal"")

private TradeSLSBBean tradeSLSBLocal;"|data_input/daytrader/daytrader.txt|d958e1276b984364ad346865bf5350f7
"ee7

ejb/TradeSLSBBean!com.ibm.websphere.samples.daytrader.ejb3.TradeSLSBLocal"")

private TradeSLSBBean tradeSLSBLocal;

@Override public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException { doGet(req, res); }

@Override public void doGet(HttpServletRequest req, HttpServletResponse res) throws IOException, ServletException {

res.setContentType(""text/html""); java.io.PrintWriter out = res.getWriter(); String userID = null; Collection<?> holdingDataBeans = null; StringBuffer output = new StringBuffer(100);

output.append(""<html><head><title>PingServlet2Session2EntityCollection</title></head>"" + ""<body><HR><FONT size=\""+2\"" color=\""#000066\"">PingServlet2Session2EntityCollection<BR></FONT>"" + ""<FONT size=\""-1\"" color=\""#000066\"">"" + ""PingServlet2Session2EntityCollection tests the common path of a Servlet calling a Session EJB "" + ""which in turn calls a finder on an Entity EJB returning a collection of Entity EJBs.<BR>"");

try {

try { int iter = TradeConfig.getPrimIterations(); for (int ii = 0; ii < iter; ii++) { userID = TradeConfig.rndUserID(); // getQuote will call findQuote which will instaniate the // Quote Entity Bean // and then will return a QuoteObject holdingDataBeans = tradeSLSBLocal.getHoldings(userID); // trade.remove(); } } catch (Exception ne) { Log.error(ne, ""PingServlet2Session2EntityCollection.goGet(...): exception getting HoldingData collection through Trade for user "" + userID); throw ne; }"|data_input/daytrader/daytrader.txt|f575764c3c2848bfbdad42f4989b3d35
"output.append(""<HR>initTime: "" + initTime).append(""<BR>Hit Count: "" + hitCount++); output.append(""<HR>User: "" + userID + "" is currently holding "" + holdingDataBeans.size() + "" stock holdings:""); Iterator<?> it = holdingDataBeans.iterator(); while (it.hasNext()) { HoldingDataBean holdingData = (HoldingDataBean) it.next(); output.append(""<BR>"" + holdingData.toHTML()); } out.println(output.toString());

} catch (Exception e) { Log.error(e, ""PingServlet2Session2EntityCollection.doGet(...): General Exception caught""); res.sendError(500, ""General Exception caught, "" + e.toString()); } }

@Override public String getServletInfo() { return ""web primitive, tests Servlet to Session to Entity returning a collection of Entity EJBs""; }"|data_input/daytrader/daytrader.txt|1ab73946b62041ef8dd6bf0cfe5546dd
text|source|chunk_id
"@Override public String getServletInfo() { return ""web primitive, tests Servlet to Session to Entity returning a collection of Entity EJBs""; }

@Override public void init(ServletConfig config) throws ServletException { super.init(config); hitCount = 0; initTime = new java.util.Date().toString(); } } /home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/ejb3/PingServlet2SessionLocal.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.prims.ejb3;

import java.io.IOException;

import javax.ejb.EJB;

import javax.naming.InitialContext;

import javax.servlet.ServletConfig;

import javax.servlet.ServletException;

import javax.servlet.annotation.WebServlet;

import javax.servlet.http.HttpServlet;

import javax.servlet.http.HttpServletRequest;

import javax.servlet.http.HttpServletResponse;"|data_input/daytrader/daytrader.txt|1a9ed991d7d14202bbbd5e1e9419518c
"import javax.servlet.http.HttpServlet;

import javax.servlet.http.HttpServletRequest;

import javax.servlet.http.HttpServletResponse;

import com.ibm.websphere.samples.daytrader.ejb3.TradeSLSBLocal;

import com.ibm.websphere.samples.daytrader.util.Log;

import com.ibm.websphere.samples.daytrader.util.TradeConfig;

/** * * This primitive is designed to run inside the TradeApplication and relies upon * the {@link trade_client.TradeConfig} class to set configuration parameters. * PingServlet2SessionEJB tests key functionality of a servlet call to a * stateless SessionEJB. This servlet makes use of the Stateless Session EJB * {@link trade.Trade} by calling calculateInvestmentReturn with three random * numbers. * */ @WebServlet(name = ""ejb3.PingServlet2SessionLocal"", urlPatterns = { ""/ejb3/PingServlet2SessionLocal"" }) public class PingServlet2SessionLocal extends HttpServlet {

private static final long serialVersionUID = 6854998080392777053L;

private static String initTime;

private static int hitCount;

@EJB(lookup=""java:app/daytrader

ee7

ejb/TradeSLSBBean!com.ibm.websphere.samples.daytrader.ejb3.TradeSLSBLocal"")

private TradeSLSBLocal tradeSLSBLocal;

@Override public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException { doGet(req, res); }

@Override public void doGet(HttpServletRequest req, HttpServletResponse res) throws IOException, ServletException {"|data_input/daytrader/daytrader.txt|b38f15778ed34a08b769544d08209195
"@Override public void doGet(HttpServletRequest req, HttpServletResponse res) throws IOException, ServletException {

res.setContentType(""text/html""); java.io.PrintWriter out = res.getWriter(); // use a stringbuffer to avoid concatenation of Strings StringBuffer output = new StringBuffer(100); output.append(""<html><head><title>PingServlet2SessionLocal</title></head>"" + ""<body><HR><FONT size=\""+2\"" color=\""#000066\"">PingServlet2SessionLocal<BR></FONT>"" + ""<FONT size=\""-1\"" color=\""#000066\"">"" + ""Tests the basis path from a Servlet to a Session Bean. "");

try {

try { // create three random numbers double rnd1 = Math.random() * 1000000; double rnd2 = Math.random() * 1000000;

// use a function to do some work. double increase = 0.0; int iter = TradeConfig.getPrimIterations(); for (int ii = 0; ii < iter; ii++) { increase = tradeSLSBLocal.investmentReturn(rnd1, rnd2); }

// write out the output output.append(""<HR>initTime: "" + initTime); output.append(""<BR>Hit Count: "" + hitCount++); output.append(""<HR>Investment Return Information <BR><BR>investment: "" + rnd1); output.append(""<BR>current Value: "" + rnd2); output.append(""<BR>investment return "" + increase + ""<HR></FONT></BODY></HTML>""); out.println(output.toString());"|data_input/daytrader/daytrader.txt|424b8323f3cc47fbaf9bb7d721153fe5
"} catch (Exception e) { Log.error(""PingServlet2Session.doGet(...):exception calling trade.investmentReturn ""); throw e; } } // this is where I actually handle the exceptions catch (Exception e) { Log.error(e, ""PingServlet2Session.doGet(...): error""); res.sendError(500, ""PingServlet2Session.doGet(...): error, "" + e.toString());

}

}

@Override public String getServletInfo() { return ""web primitive, configured with trade runtime configs, tests Servlet to Session EJB path"";

}

@Override public void init(ServletConfig config) throws ServletException { super.init(config); hitCount = 0; initTime = new java.util.Date().toString();

if (tradeSLSBLocal == null) { Log.error(""PingServlet2SessionLocal:init - Injection of TradeSLSBLocal failed - performing JNDI lookup! "");"|data_input/daytrader/daytrader.txt|61a3b6bb16474c6f847160c1211d6884
"if (tradeSLSBLocal == null) { Log.error(""PingServlet2SessionLocal:init - Injection of TradeSLSBLocal failed - performing JNDI lookup! "");

try { InitialContext context = new InitialContext(); tradeSLSBLocal = (TradeSLSBLocal) context.lookup(""java:comp/env/ejb/TradeSLSBBean""); } catch (Exception ex) { Log.error(""PingServlet2SessionLocal:init - Lookup of TradeSLSBLocal failed!!! ""); ex.printStackTrace(); } } } } /home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/ejb3/PingServlet2SessionRemote.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.prims.ejb3;

import java.io.IOException;

import javax.ejb.EJB;

import javax.naming.InitialContext;

import javax.servlet.ServletConfig;

import javax.servlet.ServletException;

import javax.servlet.annotation.WebServlet;

import javax.servlet.http.HttpServlet;"|data_input/daytrader/daytrader.txt|01639fdf93b1437798a185a2950f73d6
"import javax.servlet.ServletException;

import javax.servlet.annotation.WebServlet;

import javax.servlet.http.HttpServlet;

import javax.servlet.http.HttpServletRequest;

import javax.servlet.http.HttpServletResponse;

import com.ibm.websphere.samples.daytrader.ejb3.TradeSLSBRemote;

import com.ibm.websphere.samples.daytrader.util.Log;

import com.ibm.websphere.samples.daytrader.util.TradeConfig;

/** * * This primitive is designed to run inside the TradeApplication and relies upon * the {@link trade_client.TradeConfig} class to set configuration parameters. * PingServlet2SessionEJB tests key functionality of a servlet call to a * stateless SessionEJB. This servlet makes use of the Stateless Session EJB * {@link trade.Trade} by calling calculateInvestmentReturn with three random * numbers. * */ @WebServlet(name = ""ejb3.PingServlet2SessionRemote"", urlPatterns = { ""/ejb3/PingServlet2SessionRemote"" }) public class PingServlet2SessionRemote extends HttpServlet {

private static final long serialVersionUID = -6328388347808212784L;

private static String initTime;

private static int hitCount;

@EJB(lookup=""java:app/daytrader

ee7

ejb/TradeSLSBBean!com.ibm.websphere.samples.daytrader.ejb3.TradeSLSBRemote"")

private TradeSLSBRemote tradeSLSBRemote;

@Override public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException { doGet(req, res); }"|data_input/daytrader/daytrader.txt|94de848d2e624162aa8b500ceaf327c0
"@Override public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException { doGet(req, res); }

@Override public void doGet(HttpServletRequest req, HttpServletResponse res) throws IOException, ServletException {

res.setContentType(""text/html""); java.io.PrintWriter out = res.getWriter(); // use a stringbuffer to avoid concatenation of Strings StringBuffer output = new StringBuffer(100); output.append(""<html><head><title>PingServlet2SessionRemote</title></head>"" + ""<body><HR><FONT size=\""+2\"" color=\""#000066\"">PingServlet2SessionRemote<BR></FONT>"" + ""<FONT size=\""-1\"" color=\""#000066\"">"" + ""Tests the basis path from a Servlet to a Session Bean. "");

try {

try { // create three random numbers double rnd1 = Math.random() * 1000000; double rnd2 = Math.random() * 1000000;

// use a function to do some work. double increase = 0.0; int iter = TradeConfig.getPrimIterations(); for (int ii = 0; ii < iter; ii++) { increase = tradeSLSBRemote.investmentReturn(rnd1, rnd2); }

// write out the output output.append(""<HR>initTime: "" + initTime); output.append(""<BR>Hit Count: "" + hitCount++); output.append(""<HR>Investment Return Information <BR><BR>investment: "" + rnd1); output.append(""<BR>current Value: "" + rnd2); output.append(""<BR>investment return "" + increase + ""<HR></FONT></BODY></HTML>""); out.println(output.toString());"|data_input/daytrader/daytrader.txt|2e4d5f50e7de41398eab2577a8b24405
"} catch (Exception e) { Log.error(""PingServlet2Session.doGet(...):exception calling trade.investmentReturn ""); throw e; } } // this is where I actually handle the exceptions catch (Exception e) { Log.error(e, ""PingServlet2Session.doGet(...): error""); res.sendError(500, ""PingServlet2Session.doGet(...): error, "" + e.toString());

}

}

@Override public String getServletInfo() { return ""web primitive, configured with trade runtime configs, tests Servlet to Session EJB path"";

}

@Override public void init(ServletConfig config) throws ServletException { super.init(config); hitCount = 0; initTime = new java.util.Date().toString();

if (tradeSLSBRemote == null) { Log.error(""PingServlet2Session:init - Injection of tradeSLSBRemote failed - performing JNDI lookup! "");"|data_input/daytrader/daytrader.txt|99a00bdf049f4c20855f85faaa32c11b
"if (tradeSLSBRemote == null) { Log.error(""PingServlet2Session:init - Injection of tradeSLSBRemote failed - performing JNDI lookup! "");

try { InitialContext context = new InitialContext(); tradeSLSBRemote = (TradeSLSBRemote) context.lookup(""java:comp/env/ejb/TradeSLSBBeanRemote""); } catch (Exception ex) { Log.error(""PingServlet2Session:init - Lookup of tradeSLSBRemote failed!!! ""); ex.printStackTrace(); } } } } /home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/prims/ejb3/PingServlet2TwoPhase.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.prims.ejb3;

import java.io.IOException;

import javax.ejb.EJB;

import javax.servlet.ServletConfig;

import javax.servlet.ServletException;

import javax.servlet.annotation.WebServlet;

import javax.servlet.http.HttpServlet;

import javax.servlet.http.HttpServletRequest;"|data_input/daytrader/daytrader.txt|0c46efaccbbd456781de092e01ebae89
"import javax.servlet.annotation.WebServlet;

import javax.servlet.http.HttpServlet;

import javax.servlet.http.HttpServletRequest;

import javax.servlet.http.HttpServletResponse;

import com.ibm.websphere.samples.daytrader.ejb3.TradeSLSBBean;

import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;

import com.ibm.websphere.samples.daytrader.util.Log;

import com.ibm.websphere.samples.daytrader.util.TradeConfig;

/** * * PingServlet2TwoPhase tests key functionality of a TwoPhase commit In this * primitive a servlet calls a Session EJB which begins a global txn The Session * EJB then reads a DB row and sends a message to JMS Queue The txn is closed w/ * a 2-phase commit * */ @WebServlet(name = ""ejb3.PingServlet2TwoPhase"", urlPatterns = { ""/ejb3/PingServlet2TwoPhase"" }) public class PingServlet2TwoPhase extends HttpServlet {

private static final long serialVersionUID = -1563251786527079548L;

private static String initTime;

private static int hitCount;

@EJB(lookup=""java:app/daytrader

ee7

ejb/TradeSLSBBean!com.ibm.websphere.samples.daytrader.ejb3.TradeSLSBLocal"")

private TradeSLSBBean tradeSLSBLocal;

@Override public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException { doGet(req, res); }

@Override public void doGet(HttpServletRequest req, HttpServletResponse res) throws IOException, ServletException {"|data_input/daytrader/daytrader.txt|46bf8261cc2542eab91bf866153d70ab
"@Override public void doGet(HttpServletRequest req, HttpServletResponse res) throws IOException, ServletException {

res.setContentType(""text/html""); java.io.PrintWriter out = res.getWriter(); String symbol = null; QuoteDataBean quoteData = null; StringBuffer output = new StringBuffer(100);

output.append(""<html><head><title>PingServlet2TwoPhase</title></head>"" + ""<body><HR><FONT size=\""+2\"" color=\""#000066\"">PingServlet2TwoPhase<BR></FONT>"" + ""<FONT size=\""-1\"" color=\""#000066\"">"" + ""PingServlet2TwoPhase tests the path of a Servlet calling a Session EJB "" + ""which in turn calls an Entity EJB to read a DB row (quote). The Session EJB "" + ""then posts a message to a JMS Queue. "" + ""<BR> These operations are wrapped in a 2-phase commit<BR>"");

try {

try { int iter = TradeConfig.getPrimIterations(); for (int ii = 0; ii < iter; ii++) { symbol = TradeConfig.rndSymbol(); // getQuote will call findQuote which will instaniate the // Quote Entity Bean // and then will return a QuoteObject quoteData = tradeSLSBLocal.pingTwoPhase(symbol);

} } catch (Exception ne) { Log.error(ne, ""PingServlet2TwoPhase.goGet(...): exception getting QuoteData through Trade""); throw ne; }

output.append(""<HR>initTime: "" + initTime).append(""<BR>Hit Count: "" + hitCount++); output.append(""<HR>Two phase ping selected a quote and sent a message to TradeBrokerQueue JMS queue<BR>Quote Information<BR><BR>"" + quoteData.toHTML()); out.println(output.toString());"|data_input/daytrader/daytrader.txt|21075fc4a5294d98b3c3028dda40bd0d
"} catch (Exception e) { Log.error(e, ""PingServlet2TwoPhase.doGet(...): General Exception caught""); res.sendError(500, ""General Exception caught, "" + e.toString()); } }

@Override public String getServletInfo() { return ""web primitive, tests Servlet to Session to Entity EJB and JMS -- 2-phase commit path"";

}

@Override public void init(ServletConfig config) throws ServletException { super.init(config); hitCount = 0; initTime = new java.util.Date().toString(); } } /home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/websocket/ActionDecoder.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.websocket;

import javax.websocket.DecodeException;

import javax.websocket.Decoder;

import javax.websocket.EndpointConfig;

import com.ibm.websphere.samples.daytrader.util.Log;"|data_input/daytrader/daytrader.txt|de86bd91f8d045d580a9ee5a5b56004b
"import javax.websocket.Decoder;

import javax.websocket.EndpointConfig;

import com.ibm.websphere.samples.daytrader.util.Log;

// This is coded to be a Text type decoder expecting JSON format. // It will decode incoming messages into object of type String public class ActionDecoder implements Decoder.Text<ActionMessage> {

public ActionDecoder() {

}

@Override

public void destroy() {

}

@Override public void init(EndpointConfig config) { }

@Override public ActionMessage decode(String jsonText) throws DecodeException {

if (Log.doTrace()) { Log.trace(""ActionDecoder:decode -- received -->"" + jsonText + ""<--""); }

ActionMessage actionMessage = new ActionMessage(); actionMessage.doDecoding(jsonText); return actionMessage;

}

@Override public boolean willDecode(String s) { return true; }

}"|data_input/daytrader/daytrader.txt|cc6af2b9a8594c748c1e220facd5f219
"}

@Override public boolean willDecode(String s) { return true; }

}

/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/websocket/ActionMessage.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.websocket;

import java.io.StringReader;

import javax.json.Json;

import javax.json.stream.JsonParser;

import com.ibm.websphere.samples.daytrader.util.Log;"|data_input/daytrader/daytrader.txt|6d90a101db584f87800bb91ad8d82c67
"import java.io.StringReader;

import javax.json.Json;

import javax.json.stream.JsonParser;

import com.ibm.websphere.samples.daytrader.util.Log;

/** *  Licensed to the Apache Software Foundation (ASF) under one or more *  contributor license agreements. See the NOTICE file distributed with *  this work for additional information regarding copyright ownership. *  The ASF licenses this file to You under the Apache License, Version 2.0 *  (the ""License""); you may not use this file except in compliance with *  the License. You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * *  Unless required by applicable law or agreed to in writing, software *  distributed under the License is distributed on an ""AS IS"" BASIS, *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *  See the License for the specific language governing permissions and *  limitations under the License. */ public class ActionMessage {

String decodedAction = null;

public ActionMessage() {

}

public void doDecoding(String jsonText) {"|data_input/daytrader/daytrader.txt|9fb30e92f86b47868816e6fe784bb861
"String decodedAction = null;

public ActionMessage() {

}

public void doDecoding(String jsonText) {

String keyName = null; try { // JSON parse JsonParser parser = Json.createParser(new StringReader(jsonText)); while (parser.hasNext()) { JsonParser.Event event = parser.next(); switch(event) { case KEY_NAME: keyName=parser.getString(); break; case VALUE_STRING: if (keyName != null && keyName.equals(""action"")) { decodedAction=parser.getString(); } break; default: break; } } } catch (Exception e) { Log.error(""ActionMessage:doDecoding("" + jsonText + "") --> failed"", e); }

if (Log.doTrace()) { if (decodedAction != null ) { Log.trace(""ActionMessage:doDecoding -- decoded action -->"" + decodedAction + ""<--""); } else { Log.trace(""ActionMessage:doDecoding -- decoded action -->null<--""); } }

}

public String getDecodedAction() {

return decodedAction;

}

}"|data_input/daytrader/daytrader.txt|a4c44cb00d114fd58711039c9b409b06
"}

public String getDecodedAction() {

return decodedAction;

}

}

/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/websocket/JsonDecoder.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.websocket;

import java.io.StringReader;

import javax.json.Json;

import javax.json.JsonObject;

import javax.websocket.DecodeException;

import javax.websocket.Decoder;

import javax.websocket.EndpointConfig;

public class JsonDecoder implements Decoder.Text<JsonMessage> {

@Override

public void destroy() {

}

@Override public void init(EndpointConfig ec) { }

@Override public JsonMessage decode(String json) throws DecodeException { JsonObject jsonObject = Json.createReader(new StringReader(json)).readObject();

JsonMessage message = new JsonMessage(); message.setKey(jsonObject.getString(""key"")); message.setValue(jsonObject.getString(""value""));"|data_input/daytrader/daytrader.txt|731e6e4b879449a28e177e04587562ee
"JsonMessage message = new JsonMessage(); message.setKey(jsonObject.getString(""key"")); message.setValue(jsonObject.getString(""value""));

return message;

}

@Override public boolean willDecode(String json) { try { Json.createReader(new StringReader(json)).readObject(); return true; } catch (Exception e) { return false; } }

}

/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/websocket/JsonEncoder.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.websocket;

import javax.json.Json;

import javax.json.JsonObject;

import javax.websocket.EncodeException;

import javax.websocket.Encoder;

import javax.websocket.EndpointConfig;

public class JsonEncoder implements Encoder.Text<JsonMessage>{

@Override

public void destroy() {

}

@Override public void init(EndpointConfig ec) { }"|data_input/daytrader/daytrader.txt|76635865179c472b9feddd7f00a13487
"@Override

public void destroy() {

}

@Override public void init(EndpointConfig ec) { }

@Override public String encode(JsonMessage message) throws EncodeException {

JsonObject jsonObject = Json.createObjectBuilder()

.add(""key"", message.getKey())

.add(""value"", message.getValue()).build();

return jsonObject.toString();

}

}

/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/websocket/JsonMessage.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.websocket;

public class JsonMessage {

private String key;

private String value;

public String getKey() {

return key;

}

public void setKey(String key) { this.key = key; }

public String getValue() {

return value;

}

public void setValue(String value) { this.value = value; }

}"|data_input/daytrader/daytrader.txt|49e1b4025c6649b2865bc5d90ad19de9
"public String getValue() {

return value;

}

public void setValue(String value) { this.value = value; }

}

/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/websocket/MarketSummaryWebSocket.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.websocket;

import java.util.Collections;

import java.util.HashSet;

import java.util.Iterator;

import java.util.Set;

import java.util.concurrent.CountDownLatch;

import javax.enterprise.event.Observes;

import javax.jms.Message;

import javax.json.Json;

import javax.json.JsonObject;

import javax.json.JsonObjectBuilder;

import javax.json.JsonValue;

import javax.websocket.CloseReason;

import javax.websocket.EndpointConfig;

import javax.websocket.OnClose;

import javax.websocket.OnError;

import javax.websocket.OnMessage;

import javax.websocket.OnOpen;

import javax.websocket.Session;"|data_input/daytrader/daytrader.txt|66778c97a26e49d48d2fd7861d5401c0
"import javax.websocket.OnError;

import javax.websocket.OnMessage;

import javax.websocket.OnOpen;

import javax.websocket.Session;

import javax.websocket.server.ServerEndpoint;

import com.ibm.websphere.samples.daytrader.TradeAction;

import com.ibm.websphere.samples.daytrader.util.Log;

import com.ibm.websphere.samples.daytrader.util.WebSocketJMSMessage;

/** This class is a WebSocket EndPoint that sends the Market Summary in JSON form when requested *  and sends stock price changes when received from an MDB through a CDI event * */

@ServerEndpoint(value = ""/marketsummary"",decoders=ActionDecoder.class)

public class MarketSummaryWebSocket {

private static final Set<Session> sessions = Collections.synchronizedSet(new HashSet<Session>()); private final CountDownLatch latch = new CountDownLatch(1);

@OnOpen public void onOpen(final Session session, EndpointConfig ec) { if (Log.doTrace()) { Log.trace(""MarketSummaryWebSocket:onOpen -- session -->"" + session + ""<--""); }

sessions.add(session);

latch.countDown();

}

@OnMessage public void sendMarketSummary(ActionMessage message, Session currentSession) {

String action = message.getDecodedAction();

if (Log.doTrace()) { if (action != null ) { Log.trace(""MarketSummaryWebSocket:sendMarketSummary -- received -->"" + action + ""<--""); } else { Log.trace(""MarketSummaryWebSocket:sendMarketSummary -- received -->null<--""); } }

if (action != null && action.equals(""update"")) { TradeAction tAction = new TradeAction();

try {"|data_input/daytrader/daytrader.txt|c6d140bf119d49fc8943b30f7d78a797
"if (action != null && action.equals(""update"")) { TradeAction tAction = new TradeAction();

try {

JsonObject mkSummary = tAction.getMarketSummary().toJSON();

if (Log.doTrace()) { Log.trace(""MarketSummaryWebSocket:sendMarketSummary -- sending -->"" + mkSummary + ""<--""); }

// Make sure onopen is finished latch.await();

if (RecentStockChangeList.isEmpty()) {

currentSession.getAsyncRemote().sendText(mkSummary.toString());

} else { // Merge Objects JsonObject recentChangeList = RecentStockChangeList.stockChangesInJSON(); currentSession.getAsyncRemote().sendText(mergeJsonObjects(mkSummary,recentChangeList).toString()); }

} catch (Exception e) { e.printStackTrace(); } } }

@OnError public void onError(Throwable t, Session currentSession) { if (Log.doTrace()) { Log.trace(""MarketSummaryWebSocket:onError -- session -->"" + currentSession + ""<--""); } t.printStackTrace(); }

@OnClose public void onClose(Session session, CloseReason reason) {

if (Log.doTrace()) { Log.trace(""MarketSummaryWebSocket:onClose -- session -->"" + session + ""<--""); }

sessions.remove(session);

}

public static void onJMSMessage(@Observes @WebSocketJMSMessage Message message) {

if (Log.doTrace()) {

Log.trace(""MarketSummaryWebSocket:onJMSMessage"");

}

RecentStockChangeList.addStockChange(message);

JsonObject stockChangeJson = RecentStockChangeList.stockChangesInJSON();

synchronized(sessions) { for (Session s : sessions) { if (s.isOpen()) { s.getAsyncRemote().sendText(stockChangeJson.toString()); } } } }"|data_input/daytrader/daytrader.txt|dd77d48ff6834995b0122d12a5464f48
"synchronized(sessions) { for (Session s : sessions) { if (s.isOpen()) { s.getAsyncRemote().sendText(stockChangeJson.toString()); } } } }

private JsonObject mergeJsonObjects(JsonObject obj1, JsonObject obj2) {

JsonObjectBuilder jObjectBuilder = Json.createObjectBuilder();

Set<String> keys1 = obj1.keySet();

Iterator<String> iter1 = keys1.iterator();

while(iter1.hasNext()) {

String key = (String)iter1.next();

JsonValue value = obj1.get(key);

jObjectBuilder.add(key, value);

}

Set<String> keys2 = obj2.keySet();

Iterator<String> iter2 = keys2.iterator();

while(iter2.hasNext()) {

String key = (String)iter2.next();

JsonValue value = obj2.get(key);

jObjectBuilder.add(key, value);

}

return jObjectBuilder.build();

}

}"|data_input/daytrader/daytrader.txt|5c234770b3bd44a58f92ffb91624e0c1
"String key = (String)iter2.next();

JsonValue value = obj2.get(key);

jObjectBuilder.add(key, value);

}

return jObjectBuilder.build();

}

}

/home/jerry/projects/sample.daytrader7/daytrader-ee7-web/src/main/java/com/ibm/websphere/samples/daytrader/web/websocket/RecentStockChangeList.java /** * (C) Copyright IBM Corporation 2015. * * Licensed under the Apache License, Version 2.0 (the ""License""); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package com.ibm.websphere.samples.daytrader.web.websocket;

import java.math.BigDecimal;

import java.math.RoundingMode;

import java.util.Collections;

import java.util.Iterator;

import java.util.LinkedList;

import java.util.List;

import javax.jms.Message;

import javax.json.Json;

import javax.json.JsonObject;

import javax.json.JsonObjectBuilder;

/** This class is a holds the last 5 stock changes, used by the MarketSummary WebSocket * */

public class RecentStockChangeList {

private static List<Message> stockChanges = Collections.synchronizedList(new LinkedList<Message>());"|data_input/daytrader/daytrader.txt|0d56cd17aa4f407db531908855f91ee2
"public class RecentStockChangeList {

private static List<Message> stockChanges = Collections.synchronizedList(new LinkedList<Message>());

public static void addStockChange(Message message) {

stockChanges.add(0, message);

// Add stock, remove if needed if(stockChanges.size() > 5) { stockChanges.remove(5); } }

public static JsonObject stockChangesInJSON() {

JsonObjectBuilder jObjectBuilder = Json.createObjectBuilder();

try {

int i = 1;

List<Message> temp = new LinkedList<Message>(stockChanges);

for (Iterator<Message> iterator = temp.iterator(); iterator.hasNext();) { Message message = iterator.next();

jObjectBuilder.add(""change"" + i + ""_stock"", message.getStringProperty(""symbol"")); jObjectBuilder.add(""change"" + i + ""_price"",""$"" + message.getStringProperty(""price""));

BigDecimal change = new BigDecimal(message.getStringProperty(""price"")).subtract(new BigDecimal(message.getStringProperty(""oldPrice""))); change.setScale(2, RoundingMode.HALF_UP);

jObjectBuilder.add(""change"" + i + ""_change"", change.toString());

i++;

}

}

catch (Exception e) {

e.printStackTrace();

}

return jObjectBuilder.build();

}

public static boolean isEmpty() { return stockChanges.isEmpty(); }

}"|data_input/daytrader/daytrader.txt|f5d0c96ed50c452fa4978db34daf0673
