text|source|chunk_id
"Found 48 source code files: ../blog/springblog/blog/monolith/src/main/resources/static/vendors/bootstrap-paginator-1.0.2/js/bootstrap-paginator.min.js !function($){""use strict"";var BootstrapPaginator=function(element,options){this.init(element,options)},old=null;BootstrapPaginator.prototype={init:function(element,options){this.$element=$(element);var version=options&&options.bootstrapMajorVersion?options.bootstrapMajorVersion:$.fn.bootstrapPaginator.defaults.bootstrapMajorVersion,id=this.$element.attr(""id"");if(2===version&&!this.$element.is(""div""))throw""in Bootstrap version 2 the pagination must be a div element. Or if you are using Bootstrap pagination 3. Please specify it in bootstrapMajorVersion in the option"";if(version>2&&!this.$element.is(""ul""))throw""in Bootstrap version 3 the pagination root item must be an ul element."|data_input/springblog/springblog.txt|e5746b7a5e4d42d88a08779430e1781a
""";this.currentPage=1,this.lastPage=1,this.setOptions(options),this.initialized=!0},setOptions:function(options){this.options=$.extend({},this.options||$.fn.bootstrapPaginator.defaults,options),this.totalPages=parseInt(this.options.totalPages,10),this.numberOfPages=parseInt(this.options.numberOfPages,10),options&&""undefined""!=typeof options.currentPage&&this.setCurrentPage(options.currentPage),this.listen(),this.render(),this.initialized||this.lastPage===this.currentPage||this.$element.trigger(""page-changed"",[this.lastPage,this.currentPage])},listen:function(){this.$element.off(""page-clicked""),this.$element.off(""page-changed""),""function""==typeof this.options.onPageClicked&&this.$element.bind(""page-clicked"",this.options.onPageClicked),""function""==typeof this.options.onPageChanged&&this.$element.on(""page-changed"",this.options.onPageChanged),this.$element.bind(""page-clicked"",this.onPageClicked)},destroy:function(){this.$element.off(""page-clicked""),this.$element.off(""page-changed""),this.$element.removeData(""bootstrapPaginator""),this.$element.empty()},show:function(page){this.setCurrentPage(page),this.render(),this.lastPage!==this.currentPage&&this.$element.trigger(""page-changed"",[this.lastPage,this.currentPage])},showNext:function(){var pages=this.getPages();pages.next&&this.show(pages.next)},showPrevious:function(){var pages=this.getPages();pages.prev&&this.show(pages.prev)},showFirst:function(){var"|data_input/springblog/springblog.txt|d7a1c77d046341d1bcb7e0286352f082
"pages=this.getPages();pages.first&&this.show(pages.first)},showLast:function(){var pages=this.getPages();pages.last&&this.show(pages.last)},onPageItemClicked:function(event){var type=event.data.type,page=event.data.page;this.$element.trigger(""page-clicked"",[event,type,page])},onPageClicked:function(event,originalEvent,type,page){var currentTarget=$(event.currentTarget);switch(type){case""first"":currentTarget.bootstrapPaginator(""showFirst"");break;case""prev"":currentTarget.bootstrapPaginator(""showPrevious"");break;case""next"":currentTarget.bootstrapPaginator(""showNext"");break;case""last"":currentTarget.bootstrapPaginator(""showLast"");break;case""page"":currentTarget.bootstrapPaginator(""show"",page)}},render:function(){var containerClass=this.getValueFromOption(this.options.containerClass,this.$element),size=this.options.size||""normal"",alignment=this.options.alignment||""left"",pages=this.getPages(),listContainer=2===this.options.bootstrapMajorVersion?$(""<ul"|data_input/springblog/springblog.txt|5ac721b57709423bb86bf744d992249c
"class='pagination'></ul>""):this.$element,listContainerClass=2===this.options.bootstrapMajorVersion?this.getValueFromOption(this.options.listContainerClass,listContainer):null,first=null,prev=null,next=null,last=null,p=null,i=0;switch(this.$element.prop(""class"",""""),this.$element.addClass(""pagination""),size.toLowerCase()){case""large"":case""small"":case""mini"":this.$element.addClass($.fn.bootstrapPaginator.sizeArray[this.options.bootstrapMajorVersion][size.toLowerCase()])}if(2===this.options.bootstrapMajorVersion)switch(alignment.toLowerCase()){case""center"":this.$element.addClass(""pagination-centered"");break;case""right"":this.$element.addClass(""pagination-right"")}for(this.$element.addClass(containerClass),this.$element.empty(),2===this.options.bootstrapMajorVersion&&(this.$element.append(listContainer),listContainer.addClass(listContainerClass)),this.pageRef=[],pages.first&&(first=this.buildPageItem(""first"",pages.first),first&&listContainer.append(first)),pages.prev&&(prev=this.buildPageItem(""prev"",pages.prev),prev&&listContainer.append(prev)),i=0;i<pages.length;i+=1)p=this.buildPageItem(""page"",pages[i]),p&&listContainer.append(p);pages.next&&(next=this.buildPageItem(""next"",pages.next),next&&listContainer.append(next)),pages.last&&(last=this.buildPageItem(""last"",pages.last),last&&listContainer.append(last))},buildPageItem:function(type,page){var"|data_input/springblog/springblog.txt|8abdb79a66154a6db19b42328ddf8a82
"itemContainer=$(""<li></li>""),itemContent=$(""<a></a>""),text="""",title="""",itemContainerClass=this.options.itemContainerClass(type,page,this.currentPage),itemContentClass=this.getValueFromOption(this.options.itemContentClass,type,page,this.currentPage),tooltipOpts=null;switch(type){case""first"":if(!this.getValueFromOption(this.options.shouldShowPage,type,page,this.currentPage))return;text=this.options.itemTexts(type,page,this.currentPage),title=this.options.tooltipTitles(type,page,this.currentPage);break;case""last"":if(!this.getValueFromOption(this.options.shouldShowPage,type,page,this.currentPage))return;text=this.options.itemTexts(type,page,this.currentPage),title=this.options.tooltipTitles(type,page,this.currentPage);break;case""prev"":if(!this.getValueFromOption(this.options.shouldShowPage,type,page,this.currentPage))return;text=this.options.itemTexts(type,page,this.currentPage),title=this.options.tooltipTitles(type,page,this.currentPage);break;case""next"":if(!this.getValueFromOption(this.options.shouldShowPage,type,page,this.currentPage))return;text=this.options.itemTexts(type,page,this.currentPage),title=this.options.tooltipTitles(type,page,this.currentPage);break;case""page"":if(!this.getValueFromOption(this.options.shouldShowPage,type,page,this.currentPage))return;text=this.options.itemTexts(type,page,this.currentPage),title=this.options.tooltipTitles(type,page,this.currentPage)}return"|data_input/springblog/springblog.txt|cb88a7de76834b3587e60a42e7e8b61b
"itemContainer.addClass(itemContainerClass).append(itemContent),itemContent.addClass(itemContentClass).html(text).on(""click"",null,{type:type,page:page},$.proxy(this.onPageItemClicked,this)),this.options.pageUrl&&itemContent.attr(""href"",this.getValueFromOption(this.options.pageUrl,type,page,this.currentPage)),this.options.useBootstrapTooltip? (tooltipOpts=$.extend({},this.options.bootstrapTooltipOptions,{title:title}),itemContent.tooltip(tooltipOpts)):itemContent.attr(""title"",title),itemContainer},setCurrentPage:function(page){if(page>this.totalPages||1>page)throw""Page out of range"";this.lastPage=this.currentPage,this.currentPage=parseInt(page,10)},getPages:function(){var totalPages=this.totalPages,pageStart=0===this.currentPage%this.numberOfPages?"|data_input/springblog/springblog.txt|cb61e9e2113c4af0a390b2e94bae8504
"(parseInt(this.currentPage/this.numberOfPages,10)-1)*this.numberOfPages+1:parseInt(this.currentPage/this.numberOfPages,10)*this.numberOfPages+1,output=[],i=0,counter=0;for(pageStart=1>pageStart?1:pageStart,i=pageStart,counter=0;counter<this.numberOfPages&&totalPages>=i;i+=1,counter+=1)output.push(i);return output.first=1,output.prev=this.currentPage>1?this.currentPage-1:1,output.next=this.currentPage<totalPages?this.currentPage+1:totalPages,output.last=totalPages,output.current=this.currentPage,output.total=totalPages,output.numberOfPages=this.options.numberOfPages,output},getValueFromOption:function(value){var output=null,args=Array.prototype.slice.call(arguments,1);return output=""function""==typeof value?value.apply(this,args):value}},old=$.fn.bootstrapPaginator,$.fn.bootstrapPaginator=function(option){var args=arguments,result=null;return"|data_input/springblog/springblog.txt|a585cdb20c2a454986869314d1cbeb5f
"$(this).each(function(index,item){var $this=$(item),data=$this.data(""bootstrapPaginator""),options=""object""!=typeof option?null:option;if(!data)return data=new BootstrapPaginator(this,options),$this=$(data.$element),$this.data(""bootstrapPaginator"",data),void 0;if(""string""==typeof option){if(!data[option])throw""Method ""+option+"" does not exist"";result=data[option].apply(data,Array.prototype.slice.call(args,1))}else result=data.setOptions(option)}),result},$.fn.bootstrapPaginator.sizeArray={2:{large:""pagination-large"",small:""pagination-small"",mini:""pagination-mini""},3:{large:""pagination-lg"",small:""pagination-sm"",mini:""""}},$.fn.bootstrapPaginator.defaults={containerClass:"""",size:""normal"",alignment:""left"",bootstrapMajorVersion:2,listContainerClass:"""",itemContainerClass:function(type,page,current){return page===current?"|data_input/springblog/springblog.txt|f81f74f9ebad4b17bca715fbaac56b1c
"""active"":""""},itemContentClass:function(type,page,current){return""""},currentPage:1,numberOfPages:5,totalPages:1,pageUrl:function(type,page,current){return null},onPageClicked:null,onPageChanged:null,useBootstrapTooltip:!1,shouldShowPage:function(type,page,current){var result=!0;switch(type){case""first"":result=1!==current;break;case""prev"":result=1!==current;break;case""next"":result=current!==this.totalPages;break;case""last"":result=current!==this.totalPages;break;case""page"":result=!0}return result},itemTexts:function(type,page,current){switch(type){case""first"":return""&lt;&lt;"";case""prev"":return""&lt;"";case""next"":return""&gt;"";case""last"":return""&gt;&gt;"";case""page"":return page}},tooltipTitles:function(type,page,current){switch(type){case""first"":return""Go to first page"";case""prev"":return""Go to previous page"";case""next"":return""Go to next page"";case""last"":return""Go to last page"";case""page"":return page===current? ""Current page is ""+page:""Go to page ""+page}},bootstrapTooltipOptions:{animation:!0,html:!0,placement:""top"",selector:!1,title:"""",container:!1}},$.fn.bootstrapPaginator.Constructor=BootstrapPaginator}(window.jQuery);

../blog/springblog/blog/monolith/src/main/java/com/raysmond/blog/SpringBlogApplication.java

package com.raysmond.blog;

import com.google.common.collect.ImmutableMap;

import org.springframework.boot.SpringApplication;

import org.springframework.boot.autoconfigure.SpringBootApplication;

import org.springframework.cache.annotation.EnableCaching;"|data_input/springblog/springblog.txt|0be34b3e428f439b813e8fb2b3839c11
"import org.springframework.boot.autoconfigure.SpringBootApplication;

import org.springframework.cache.annotation.EnableCaching;

@SpringBootApplication

//@EnableCaching

public class SpringBlogApplication {

public static void main(String[] args) { SpringApplication app = new SpringApplication(SpringBlogApplication.class); app.setDefaultProperties(ImmutableMap.of(""spring.profiles.default"", Constants.ENV_DEVELOPMENT)); app.run(args); } }

../blog/springblog/blog/monolith/src/main/java/com/raysmond/blog/CacheConfiguration.java

package com.raysmond.blog;

import org.springframework.cache.annotation.EnableCaching;

import org.springframework.cache.ehcache.EhCacheCacheManager;

import org.springframework.cache.ehcache.EhCacheManagerFactoryBean;

import org.springframework.context.annotation.Bean;

import org.springframework.context.annotation.Configuration;

import org.springframework.core.io.ClassPathResource;

@Configuration @EnableCaching public class CacheConfiguration { @Bean public EhCacheManagerFactoryBean ehCacheManagerFactory() { EhCacheManagerFactoryBean cacheManagerFactoryBean = new EhCacheManagerFactoryBean(); cacheManagerFactoryBean.setConfigLocation(new ClassPathResource(""ehcache.xml"")); cacheManagerFactoryBean.setShared(true); return cacheManagerFactoryBean; }"|data_input/springblog/springblog.txt|e97fcd84e29a40eb8b306c8a81debeb3
"@Bean public EhCacheCacheManager ehCacheCacheManager() { EhCacheCacheManager cacheManager = new EhCacheCacheManager(); cacheManager.setCacheManager(ehCacheManagerFactory().getObject()); cacheManager.setTransactionAware(true); return cacheManager; } } ../blog/springblog/blog/monolith/src/main/java/com/raysmond/blog/SecurityConfig.java package com.raysmond.blog;

import com.raysmond.blog.services.UserService;

import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.context.annotation.Bean;

import org.springframework.context.annotation.Configuration;

import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;

import org.springframework.security.config.annotation.web.builders.HttpSecurity;

import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

import org.springframework.security.crypto.password.PasswordEncoder;

import org.springframework.security.crypto.password.StandardPasswordEncoder;

import org.springframework.security.web.authentication.rememberme.TokenBasedRememberMeServices;

@Configuration public class SecurityConfig extends WebSecurityConfigurerAdapter { @Autowired private UserService userService;

@Bean

public TokenBasedRememberMeServices rememberMeServices() {

return new TokenBasedRememberMeServices(""remember

me

key"", userService);

}

@Bean

public PasswordEncoder passwordEncoder() {

return new StandardPasswordEncoder();

}"|data_input/springblog/springblog.txt|dc821b859276417d9cfea73a98beae29
"me

key"", userService);

}

@Bean

public PasswordEncoder passwordEncoder() {

return new StandardPasswordEncoder();

}

@Override protected void configure(AuthenticationManagerBuilder auth) throws Exception { auth .eraseCredentials(true) .userDetailsService(userService) .passwordEncoder(passwordEncoder()); }

@Override protected void configure(HttpSecurity http) throws Exception { http .authorizeRequests() .antMatchers(""/admin/**"").authenticated() .anyRequest().permitAll() .and() .formLogin() .loginPage(""/login"") .permitAll() .failureUrl(""/login?error=1"") .loginProcessingUrl(""/authenticate"") .and() .logout() .logoutUrl(""/logout"") .permitAll() .logoutSuccessUrl(""/login?logout"") .and() .rememberMe() .rememberMeServices(rememberMeServices()) .key(""remember-me-key""); } }

../blog/springblog/blog/monolith/src/main/java/com/raysmond/blog/Constants.java

package com.raysmond.blog;

/** * @author: Raysmond */ public final class Constants {

public static final String ENV_PRODUCTION = ""prod"";

public static final String ENV_DEVELOPMENT = ""dev"";

public static final String DEFAULT_ADMIN_EMAIL = ""admin"";

public static final String DEFAULT_ADMIN_PASSWORD = ""admin"";

public static final String ABOUT_PAGE_PERMALINK = ""about"";

}

../blog/springblog/blog/monolith/src/main/java/com/raysmond/blog/WebConfig.java

package com.raysmond.blog;

import com.raysmond.blog.support.web.ViewHelper;

import org.springframework.beans.factory.annotation.Autowired;"|data_input/springblog/springblog.txt|9ad42c060a8e4b789c8662540ba686be
"package com.raysmond.blog;

import com.raysmond.blog.support.web.ViewHelper;

import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.context.annotation.Bean;

import org.springframework.context.annotation.Configuration;

import org.springframework.core.env.Environment;

import org.springframework.security.web.csrf.CsrfToken;

import org.springframework.web.servlet.HandlerInterceptor;

import org.springframework.web.servlet.ModelAndView;

import org.springframework.web.servlet.config.annotation.CorsRegistry;

import org.springframework.web.servlet.config.annotation.InterceptorRegistry;

import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;

import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;

import javax.annotation.PostConstruct;

import javax.servlet.http.HttpServletRequest;

import javax.servlet.http.HttpServletResponse;

import static com.raysmond.blog.Constants.ENV_DEVELOPMENT;

import static com.raysmond.blog.Constants.ENV_PRODUCTION;

import lombok.extern.slf4j.Slf4j;

/** * @author Raysmond . */ @Configuration @Slf4j public class WebConfig extends WebMvcConfigurerAdapter { @Autowired private ViewHelper viewHelper;

@Autowired

private Environment env;

@Override public void addInterceptors(InterceptorRegistry registry) { registry.addInterceptor(viewObjectAddingInterceptor()); super.addInterceptors(registry); }"|data_input/springblog/springblog.txt|38d834ccaa314ce19c9f96e05e425901
"@Override public void addCorsMappings(CorsRegistry registry) { if (env.acceptsProfiles(ENV_DEVELOPMENT)) { log.debug(""Register CORS configuration""); registry.addMapping(""/api/**"") .allowedOrigins(""http://localhost:8080"") .allowedMethods(""*"") .allowedHeaders(""*"") .allowCredentials(true) .maxAge(3600); } }

@PostConstruct

public void registerJadeViewHelpers() {

viewHelper.setApplicationEnv(this.getApplicationEnv());

}

@Bean public HandlerInterceptor viewObjectAddingInterceptor() { return new HandlerInterceptorAdapter() { @Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception { viewHelper.setStartTime(System.currentTimeMillis());

return true;

}

@Override public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView view) { CsrfToken token = (CsrfToken) request.getAttribute(CsrfToken.class.getName()); if (token != null) { view.addObject(token.getParameterName(), token); } } }; }

public String getApplicationEnv() { return this.env.acceptsProfiles(ENV_PRODUCTION) ? ENV_PRODUCTION : ENV_DEVELOPMENT; } }

../blog/springblog/blog/monolith/src/main/java/com/raysmond/blog/support/web/PygmentsService.java

package com.raysmond.blog.support.web;

import org.python.util.PythonInterpreter;

import org.springframework.stereotype.Service;

/** * @author Raysmond */ @Service public class PygmentsService implements SyntaxHighlightService {"|data_input/springblog/springblog.txt|c0275fb9d18c4c4a8522599ba0aab3b3
"import org.springframework.stereotype.Service;

/** * @author Raysmond */ @Service public class PygmentsService implements SyntaxHighlightService {

@Override public String highlight(String content) { PythonInterpreter interpreter = new PythonInterpreter();

// Set a variable with the content you want to work with interpreter.set(""code"", content);

// Simple use Pygments as you would in Python interpreter.exec(""from pygments import highlight\n"" + ""from pygments.lexers import PythonLexer\n"" + ""from pygments.formatters import HtmlFormatter\n"" + ""\nresult = highlight(code, PythonLexer(), HtmlFormatter())"");

return interpreter.get(""result"", String.class);

}

}

../blog/springblog/blog/monolith/src/main/java/com/raysmond/blog/support/web/PygmentsVerbatimSerializer.java

package com.raysmond.blog.support.web;

import org.pegdown.Printer;

import org.pegdown.VerbatimSerializer;

import org.pegdown.ast.VerbatimNode;

/** * @author Raysmond */ public class PygmentsVerbatimSerializer implements VerbatimSerializer { public static final PygmentsVerbatimSerializer INSTANCE = new PygmentsVerbatimSerializer();

private SyntaxHighlightService syntaxHighlightService = new PygmentsService();

@Override public void serialize(final VerbatimNode node, final Printer printer) { printer.print(syntaxHighlightService.highlight(node.getText())); }

}

../blog/springblog/blog/monolith/src/main/java/com/raysmond/blog/support/web/ViewHelper.java

package com.raysmond.blog.support.web;"|data_input/springblog/springblog.txt|1c029ceddd00401490c0494975f72dc0
"}

../blog/springblog/blog/monolith/src/main/java/com/raysmond/blog/support/web/ViewHelper.java

package com.raysmond.blog.support.web;

import com.domingosuarez.boot.autoconfigure.jade4j.JadeHelper;

import com.raysmond.blog.services.AppSetting;

import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.security.authentication.AnonymousAuthenticationToken;

import org.springframework.security.core.Authentication;

import org.springframework.security.core.context.SecurityContextHolder;

import org.springframework.stereotype.Service;

import java.text.SimpleDateFormat;

import java.time.ZonedDateTime;

import java.time.format.DateTimeFormatter;

import java.util.Date;

/*

@author Raysmond

/

@Service

@JadeHelper(""viewHelper"")

public class ViewHelper {

private static final SimpleDateFormat DATE_FORMAT = new SimpleDateFormat(""MMMM dd, yyyy""); private static final SimpleDateFormat DATE_FORMAT_MONTH_DAY = new SimpleDateFormat(""MMM dd"");

private AppSetting appSetting;

private String applicationEnv;

private long startTime;

/** * Check if current user is authenticated * * @return true/false */ public boolean isLogin() { Authentication authentication = SecurityContextHolder.getContext().getAuthentication(); return null != authentication && authentication.isAuthenticated() && ! (authentication instanceof AnonymousAuthenticationToken); }

@Autowired

public ViewHelper(AppSetting appSetting) {

this.appSetting = appSetting;

}"|data_input/springblog/springblog.txt|e83f3df446d7471d97d2d577c1c2b891
"@Autowired

public ViewHelper(AppSetting appSetting) {

this.appSetting = appSetting;

}

public long getResponseTime() {

return System.currentTimeMillis()

startTime;

}

public long getStartTime() {

return startTime;

}

public void setStartTime(long startTime) { this.startTime = startTime; }

public String getFormattedDate(Date date) { return date == null ? """" : DATE_FORMAT.format(date); }

public String getFormattedDate(ZonedDateTime date) { return date == null ? """" : date.format(DateTimeFormatter.ISO_LOCAL_DATE); }

public String getMonthAndDay(Date date) { return date == null ? """" : DATE_FORMAT_MONTH_DAY.format(date); }

public String metaTitle(String title) { return title + "" · "" + appSetting.getSiteName(); }

public String getApplicationEnv() {

return applicationEnv;

}

public void setApplicationEnv(String applicationEnv) { this.applicationEnv = applicationEnv; } }

../blog/springblog/blog/monolith/src/main/java/com/raysmond/blog/support/web/Message.java

package com.raysmond.blog.support.web;

/** * A message to be displayed in web context. Depending on the type, different style will be applied. */ public class Message implements java.io.Serializable { /** * Name of the flash attribute. */ public static final String MESSAGE_ATTRIBUTE = ""message""; private final String message; private final Type type; private final Object[] args; public Message(String message, Type type) { this.message = message; this.type = type; this.args = null; }"|data_input/springblog/springblog.txt|80e2bfd5a8bd4b75a33c07e9da6d974c
"public Message(String message, Type type, Object... args) { this.message = message; this.type = type; this.args = args; }

public String getMessage() {

return message;

}

public Type getType() {

return type;

}

public Object[] getArgs() {

return args;

}

/** * The type of the message to be displayed. The type is used to show message in a different style. */ public static enum Type { DANGER, WARNING, INFO, SUCCESS; } }

../blog/springblog/blog/monolith/src/main/java/com/raysmond/blog/support/web/SyntaxHighlightService.java

package com.raysmond.blog.support.web;

/*

@author Raysmond

/

public interface SyntaxHighlightService {

String highlight(String content);

}

../blog/springblog/blog/monolith/src/main/java/com/raysmond/blog/support/web/MarkdownService.java

package com.raysmond.blog.support.web;

/*

@author Raysmond

/

public interface MarkdownService {

String renderToHtml(String content);

}

../blog/springblog/blog/monolith/src/main/java/com/raysmond/blog/support/web/MessageHelper.java

package com.raysmond.blog.support.web;

import org.springframework.ui.Model;

import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import static com.raysmond.blog.support.web.Message.MESSAGE_ATTRIBUTE;

public final class MessageHelper {

private MessageHelper() {

}

public static void addSuccessAttribute(RedirectAttributes ra, String message, Object... args) { addAttribute(ra, message, Message.Type.SUCCESS, args); }"|data_input/springblog/springblog.txt|92f9d66bd436427fb63ee5e2e84e97a0
"public static void addErrorAttribute(RedirectAttributes ra, String message, Object... args) { addAttribute(ra, message, Message.Type.DANGER, args); }

public static void addInfoAttribute(RedirectAttributes ra, String message, Object... args) { addAttribute(ra, message, Message.Type.INFO, args); }

public static void addWarningAttribute(RedirectAttributes ra, String message, Object... args) { addAttribute(ra, message, Message.Type.WARNING, args); }

private static void addAttribute(RedirectAttributes ra, String message, Message.Type type, Object... args) { ra.addFlashAttribute(MESSAGE_ATTRIBUTE, new Message(message, type, args)); }

public static void addSuccessAttribute(Model model, String message, Object... args) { addAttribute(model, message, Message.Type.SUCCESS, args); }

public static void addErrorAttribute(Model model, String message, Object... args) { addAttribute(model, message, Message.Type.DANGER, args); }

public static void addInfoAttribute(Model model, String message, Object... args) { addAttribute(model, message, Message.Type.INFO, args); }

public static void addWarningAttribute(Model model, String message, Object... args) { addAttribute(model, message, Message.Type.WARNING, args); }

private static void addAttribute(Model model, String message, Message.Type type, Object... args) { model.addAttribute(MESSAGE_ATTRIBUTE, new Message(message, type, args)); } }"|data_input/springblog/springblog.txt|d11b7fc349d545b8bb29b29e516beccb
"../blog/springblog/blog/monolith/src/main/java/com/raysmond/blog/support/web/impl/PegDownMarkdownService.java

package com.raysmond.blog.support.web.impl;

import org.pegdown.

;

import org.pegdown.ast.RootNode;

import org.springframework.beans.factory.annotation.Qualifier;

import org.springframework.stereotype.Service;

import org.springframework.util.StringUtils;

import java.util.Collections;

import com.raysmond.blog.support.web.MarkdownService;

/** * @author Raysmond */ @Service @Qualifier(""pegdown"") public class PegDownMarkdownService implements MarkdownService {

private final PegDownProcessor pegdown;

public PegDownMarkdownService() { pegdown = new PegDownProcessor(Extensions.ALL ^ Extensions.EXTANCHORLINKS); }

@Override public String renderToHtml(String markdownSource) { if (StringUtils.isEmpty(markdownSource)) { return null; } // synchronizing on pegdown instance since neither the processor nor the underlying parser is thread-safe. synchronized(pegdown) { RootNode astRoot = pegdown.parseMarkdown(markdownSource.toCharArray()); ToHtmlSerializer serializer = new ToHtmlSerializer(new LinkRenderer()); // Collections.singletonMap(VerbatimSerializer.DEFAULT, PygmentsVerbatimSerializer.INSTANCE)); return serializer.toHtml(astRoot); } } }

../blog/springblog/blog/monolith/src/main/java/com/raysmond/blog/support/web/impl/FlexmarkMarkdownService.java

package com.raysmond.blog.support.web.impl;

import java.util.Arrays;

import org.springframework.stereotype.Service;"|data_input/springblog/springblog.txt|0b3e3c5ea7c14053b438e8435f25e9a0
"package com.raysmond.blog.support.web.impl;

import java.util.Arrays;

import org.springframework.stereotype.Service;

import com.raysmond.blog.support.web.MarkdownService;

import com.vladsch.flexmark.ast.Node;

import com.vladsch.flexmark.ext.autolink.AutolinkExtension;

import com.vladsch.flexmark.ext.gfm.strikethrough.StrikethroughExtension;

import com.vladsch.flexmark.ext.tables.TablesExtension;

import com.vladsch.flexmark.html.HtmlRenderer;

import com.vladsch.flexmark.parser.Parser;

import com.vladsch.flexmark.util.options.MutableDataSet;

import lombok.extern.slf4j.Slf4j;

/** * 使用flexmark-java解析markdown * 参考：https://github.com/vsch/flexmark-java * * @author Raysmond */ @Service(""flexmark"") @Slf4j public class FlexmarkMarkdownService implements MarkdownService { @Override public String renderToHtml(String content) { MutableDataSet options = new MutableDataSet();

options.set(Parser.EXTENSIONS,

Arrays.asList(TablesExtension.create(),

AutolinkExtension.create(),

StrikethroughExtension.create()));

// uncomment to convert soft-breaks to hard breaks //options.set(HtmlRenderer.SOFT_BREAK, ""<br />\n"");

Parser parser = Parser.builder(options).build();

HtmlRenderer renderer = HtmlRenderer.builder(options).build();

// You can re-use parser and renderer instances Node document = parser.parse(content); return renderer.render(document); } }

../blog/springblog/blog/monolith/src/main/java/com/raysmond/blog/models/Setting.java

package com.raysmond.blog.models;"|data_input/springblog/springblog.txt|35867d738fbd48959acf8d22302099d1
"../blog/springblog/blog/monolith/src/main/java/com/raysmond/blog/models/Setting.java

package com.raysmond.blog.models;

import lombok.Getter;

import lombok.Setter;

import javax.persistence.Column;

import javax.persistence.Entity;

import javax.persistence.Lob;

import javax.persistence.Table;

import java.io.Serializable;

import org.hibernate.annotations.CacheConcurrencyStrategy;

/** * A generic setting model * * @author Raysmond */ @Entity @Table(name = ""settings"") @Getter @Setter @org.hibernate.annotations.Cache(usage = CacheConcurrencyStrategy.READ_WRITE, region = ""settingCache"") public class Setting extends BaseModel { @Column(name = ""_key"", unique = true, nullable = false) private String key;

@Lob

@Column(name = ""_value"")

private Serializable value;

}

../blog/springblog/blog/monolith/src/main/java/com/raysmond/blog/models/Tag.java

package com.raysmond.blog.models;

import lombok.Getter;

import lombok.Setter;

import javax.persistence.

;

import java.util.ArrayList;

import java.util.List;

import org.hibernate.annotations.CacheConcurrencyStrategy;

/** * @author Raysmond */ @Entity @Table(name = ""tags"") @Getter @Setter @org.hibernate.annotations.Cache(usage = CacheConcurrencyStrategy.READ_WRITE, region = ""tagCache"") public class Tag extends BaseModel {

@Column(nullable = false, unique = true) private String name;

@ManyToMany(fetch = FetchType.LAZY, mappedBy = ""tags"") private List<Post> posts = new ArrayList<>();

public Tag() {

}"|data_input/springblog/springblog.txt|cc58ad1740c74f259770ba8bfaec2e7f
"@ManyToMany(fetch = FetchType.LAZY, mappedBy = ""tags"") private List<Post> posts = new ArrayList<>();

public Tag() {

}

public Tag(String name) {

this.setName(name);

}

}

../blog/springblog/blog/monolith/src/main/java/com/raysmond/blog/models/User.java

package com.raysmond.blog.models;

import com.fasterxml.jackson.annotation.JsonIgnore;

import lombok.Getter;

import lombok.Setter;

import javax.persistence.

;

import java.util.ArrayList;

import java.util.Collection;

import org.hibernate.annotations.CacheConcurrencyStrategy;

/** * @author Raysmond */ @Entity @Table(name = ""users"") @Getter @Setter @org.hibernate.annotations.Cache(usage = CacheConcurrencyStrategy.READ_WRITE, region = ""userCache"") public class User extends BaseModel { public static final String ROLE_ADMIN = ""ROLE_ADMIN""; public static final String ROLE_USER = ""ROLE_USER"";

@Column(unique = true)

private String email;

@JsonIgnore

private String password;

private String role = ROLE_USER;

@OneToMany(fetch = FetchType.LAZY, mappedBy = ""user"", cascade = CascadeType.REMOVE) private Collection<Post> posts = new ArrayList<>();

public User() {

}

public User(String email, String password, String role) { this.email = email; this.password = password; this.role = role; } }

../blog/springblog/blog/monolith/src/main/java/com/raysmond/blog/models/BaseModel.java

package com.raysmond.blog.models;

import org.apache.commons.lang3.builder.HashCodeBuilder;

import javax.persistence.

;"|data_input/springblog/springblog.txt|f4ca026a089249b99d26ee9c4c810aac
"package com.raysmond.blog.models;

import org.apache.commons.lang3.builder.HashCodeBuilder;

import javax.persistence.

;

import java.io.Serializable;

import java.time.ZonedDateTime;

import java.util.Date;

/** * An abstract base model class for entities * * @author Raysmond */ @MappedSuperclass public abstract class BaseModel implements Comparable<BaseModel>, Serializable {

@Id

@GeneratedValue(strategy = GenerationType.IDENTITY)

@Column(name = ""id"")

private Long id;

@Column(nullable = false)

private ZonedDateTime createdAt;

@Column(nullable = false)

private ZonedDateTime updatedAt;

@PrePersist public void prePersist() { createdAt = updatedAt = ZonedDateTime.now(); }

@PreUpdate

public void preUpdate() {

updatedAt = ZonedDateTime.now();

}

@Override public int compareTo(BaseModel o) { return this.getId().compareTo(o.getId()); }

public boolean equals(Object other) { if (other == null || other.getClass() != this.getClass()) { return false; }

return this.getId().equals(((BaseModel) other).getId());

}

public int hashCode() {

return new HashCodeBuilder().append(getId()).toHashCode();

}

public Long getId() {

return id;

}

public void setId(Long _id) { id = _id; }

public ZonedDateTime getCreatedAt() {

return createdAt;

}

public void setCreatedAt(ZonedDateTime createdAt) { this.createdAt = createdAt; }

public ZonedDateTime getUpdatedAt() {

return updatedAt;

}"|data_input/springblog/springblog.txt|cfba6265f92148fdbd7b2cd4ae41a736
"}

public void setCreatedAt(ZonedDateTime createdAt) { this.createdAt = createdAt; }

public ZonedDateTime getUpdatedAt() {

return updatedAt;

}

public void setUpdatedAt(ZonedDateTime updatedAt) { this.updatedAt = updatedAt; } } ../blog/springblog/blog/monolith/src/main/java/com/raysmond/blog/models/Post.java package com.raysmond.blog.models;

import com.raysmond.blog.models.support.PostFormat;

import com.raysmond.blog.models.support.PostStatus;

import com.raysmond.blog.models.support.PostType;

import lombok.Getter;

import lombok.Setter;

import org.hibernate.annotations.CacheConcurrencyStrategy;

import org.hibernate.annotations.Type;

import org.springframework.util.StringUtils;

import javax.persistence.

;

import java.text.SimpleDateFormat;

import java.util.HashSet;

import java.util.Set;

/** * @author Raysmond */ @Entity @Table(name = ""posts"") @Getter @Setter @org.hibernate.annotations.Cache(usage = CacheConcurrencyStrategy.READ_WRITE, region = ""postCache"") public class Post extends BaseModel { private static final SimpleDateFormat SLUG_DATE_FORMAT = new SimpleDateFormat(""yyyy/MM/dd"");

@ManyToOne

private User user;

@Column(nullable = false)

private String title;

@Type(type = ""text"")

private String content;

@Type(type = ""text"")

private String renderedContent;

@Type(type = ""text"")

private String summary;

@Type(type = ""text"")

private String renderedSummary;"|data_input/springblog/springblog.txt|25b2b36233db4f1b8f11969e1cdf88df
"private String renderedContent;

@Type(type = ""text"")

private String summary;

@Type(type = ""text"")

private String renderedSummary;

@Column(nullable = false) @Enumerated(EnumType.STRING) private PostStatus postStatus = PostStatus.PUBLISHED;

@Column(nullable = false) @Enumerated(EnumType.STRING) private PostFormat postFormat = PostFormat.MARKDOWN;

@Column(nullable = false) @Enumerated(EnumType.STRING) private PostType postType = PostType.POST;

@ManyToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL) @JoinTable(name = ""posts_tags"", joinColumns = {@JoinColumn(name = ""post_id"", nullable = false, updatable = false)}, inverseJoinColumns = {@JoinColumn(name = ""tag_id"", nullable = false, updatable = false)} ) @org.hibernate.annotations.Cache(usage = CacheConcurrencyStrategy.READ_WRITE, region = ""tagCache"") private Set<Tag> tags = new HashSet<>();

private String permalink;

private Integer views = 0;

public Integer getViews() { return views == null ? 0 : views; }

public String getRenderedContent() { if (this.postFormat == PostFormat.MARKDOWN) { return renderedContent; }

return getContent();

}

public void setPermalink(String permalink) { String token = permalink.toLowerCase().replace(""\n"", "" "").replaceAll(""[^a-z\\d\\s]"", "" ""); this.permalink = StringUtils.arrayToDelimitedString(StringUtils.tokenizeToStringArray(token, "" ""), ""-""); } }

../blog/springblog/blog/monolith/src/main/java/com/raysmond/blog/models/support/PostType.java"|data_input/springblog/springblog.txt|08eef7dabad84d159c231d911e96b287
"../blog/springblog/blog/monolith/src/main/java/com/raysmond/blog/models/support/PostType.java

package com.raysmond.blog.models.support;

/*

@author Raysmond

/

public enum PostType {

PAGE(""Page""),

POST(""Post"");

private String name;

PostType(String name) {

this.name = name;

}

public String getName() {

return name;

}

public void setName(String name) { this.name = name; }

public String getId() {

return name();

}

@Override

public String toString() {

return getName();

}

}

../blog/springblog/blog/monolith/src/main/java/com/raysmond/blog/models/support/PostFormat.java

package com.raysmond.blog.models.support;

/*

@author Raysmond

/

public enum PostFormat {

HTML(""Html""),

MARKDOWN(""Markdown"");

private String displayName;

PostFormat(String displayName) {

this.displayName = displayName;

}

public String getDisplayName() {

return displayName;

}

public String getId() {

return name();

}

@Override

public String toString() {

return getDisplayName();

}

}

../blog/springblog/blog/monolith/src/main/java/com/raysmond/blog/models/support/PostStatus.java

package com.raysmond.blog.models.support;

/*

@author Raysmond

/

public enum PostStatus {

DRAFT(""Draft""),

PUBLISHED(""Published"");

private String name;

PostStatus(String name) {

this.name = name;

}

public String getName() {

return name;

}

public void setName(String name) { this.name = name; }

public String getId() {

return name();

}

@Override

public String toString() {"|data_input/springblog/springblog.txt|ed52eba161d24181835126b1de80228f
"}

public void setName(String name) { this.name = name; }

public String getId() {

return name();

}

@Override

public String toString() {

return getName();

}

}

../blog/springblog/blog/monolith/src/main/java/com/raysmond/blog/error/NotFoundException.java

package com.raysmond.blog.error;

import org.springframework.http.HttpStatus;

import org.springframework.web.bind.annotation.ResponseStatus;

/** * @author Raysmond */ @ResponseStatus(value = HttpStatus.NOT_FOUND) public final class NotFoundException extends RuntimeException { private String message;

public NotFoundException() {

}

public NotFoundException(String message) {

this.message = message;

}

@Override

public String getMessage() {

return message;

}

}

../blog/springblog/blog/monolith/src/main/java/com/raysmond/blog/error/ExceptionHandlerController.java

package com.raysmond.blog.error;

import com.google.common.base.Throwables;

import lombok.extern.slf4j.Slf4j;

import org.springframework.http.HttpStatus;

import org.springframework.web.bind.annotation.ControllerAdvice;

import org.springframework.web.bind.annotation.ExceptionHandler;

import org.springframework.web.bind.annotation.ResponseStatus;

import org.springframework.web.servlet.ModelAndView;

import javax.servlet.http.HttpServletRequest;"|data_input/springblog/springblog.txt|ae075027c4634a8ab89c9eaf4776e0c5
"import org.springframework.web.servlet.ModelAndView;

import javax.servlet.http.HttpServletRequest;

/** * General error handler for the application. */ @ControllerAdvice @Slf4j class ExceptionHandlerController { @ResponseStatus(HttpStatus.NOT_FOUND) @ExceptionHandler(NotFoundException.class) public ModelAndView notFound(HttpServletRequest request, NotFoundException exception) { String uri = request.getRequestURI();

log.error(""Request page: {} raised NotFoundException {}"", uri, exception);

ModelAndView model = new ModelAndView(""error/general""); model.addObject(""status"", HttpStatus.NOT_FOUND.value()); model.addObject(""error"", HttpStatus.NOT_FOUND.getReasonPhrase()); model.addObject(""path"", uri); model.addObject(""customMessage"", exception.getMessage());

return model;

}

/** * Handle all exceptions */ //	@ResponseStatus(HttpStatus.SERVICE_UNAVAILABLE) @ExceptionHandler(Exception.class) public ModelAndView exception(HttpServletRequest request, Exception exception) { String uri = request.getRequestURI(); log.error(""Request page: {} raised exception {}"", uri, exception);

ModelAndView model = new ModelAndView(""error/general""); model.addObject(""error"", Throwables.getRootCause(exception).getMessage()); model.addObject(""status"", Throwables.getRootCause(exception).getCause()); model.addObject(""path"", uri); model.addObject(""customMessage"", exception.getMessage());

return model;

}

}"|data_input/springblog/springblog.txt|ec0a318fdade48ad806ade9eaa5fe8c5
"return model;

}

}

../blog/springblog/blog/monolith/src/main/java/com/raysmond/blog/admin/controllers/UserController.java

package com.raysmond.blog.admin.controllers;

import com.raysmond.blog.error.NotFoundException;

import com.raysmond.blog.forms.UserForm;

import com.raysmond.blog.models.User;

import com.raysmond.blog.repositories.UserRepository;

import com.raysmond.blog.services.UserService;

import com.raysmond.blog.support.web.MessageHelper;

import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.stereotype.Controller;

import org.springframework.ui.Model;

import org.springframework.util.Assert;

import org.springframework.validation.Errors;

import org.springframework.web.bind.annotation.PathVariable;

import org.springframework.web.bind.annotation.RequestMapping;

import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import javax.validation.Valid;

import static org.springframework.web.bind.annotation.RequestMethod.POST;

/*

@author Raysmond

/

@Controller(""adminUserController"")

@RequestMapping(""admin/users"")

public class UserController {

private UserService userService;

private UserRepository userRepository;

@Autowired public UserController(UserService userService, UserRepository userRepository) { this.userService = userService; this.userRepository = userRepository; }

@RequestMapping(""profile"") public String profile(Model model) { model.addAttribute(""user"", userService.currentUser());"|data_input/springblog/springblog.txt|3b702c25d93043fe8d1eaf18b60b50df
"@RequestMapping(""profile"") public String profile(Model model) { model.addAttribute(""user"", userService.currentUser());

return ""admin/users/profile"";

}

@RequestMapping(value = ""{userId:[0-9]+}"", method = POST) public String update(@PathVariable Long userId, @Valid UserForm userForm, Errors errors, RedirectAttributes ra) { User user = userRepository.findOne(userId);

if (null == user) { throw new NotFoundException(""User "" + userId + "" is not found. ""); }

if (errors.hasErrors()) {

// do something

return ""admin/users/profile"";

}

if (!userForm.getNewPassword().isEmpty()) {

if (!userService.changePassword(user, userForm.getPassword(), userForm.getNewPassword()))

MessageHelper.addErrorAttribute(ra, ""Change password failed. "");

else

MessageHelper.addSuccessAttribute(ra, ""Change password successfully. "");

}

return ""redirect:profile"";

}

}

../blog/springblog/blog/monolith/src/main/java/com/raysmond/blog/admin/controllers/AdminController.java

package com.raysmond.blog.admin.controllers;

import com.raysmond.blog.forms.SettingsForm;

import com.raysmond.blog.services.AppSetting;

import com.raysmond.blog.support.web.MessageHelper;

import com.raysmond.blog.utils.DTOUtil;

import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.stereotype.Controller;

import org.springframework.ui.Model;

import org.springframework.validation.Errors;

import org.springframework.web.bind.annotation.GetMapping;"|data_input/springblog/springblog.txt|471119649c124188925d378081602fef
"import org.springframework.ui.Model;

import org.springframework.validation.Errors;

import org.springframework.web.bind.annotation.GetMapping;

import org.springframework.web.bind.annotation.PostMapping;

import org.springframework.web.bind.annotation.RequestMapping;

import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import javax.validation.Valid;

/*

@author Raysmond

/

@Controller

@RequestMapping(""admin"")

public class AdminController {

private AppSetting appSetting;

@Autowired

public AdminController(AppSetting appSetting) {

this.appSetting = appSetting;

}

@GetMapping("""")

public String index() {

return ""admin/home/index"";

}

@GetMapping(value = ""settings"") public String settings(Model model) { SettingsForm settingsForm = DTOUtil.map(appSetting, SettingsForm.class);

model.addAttribute(""settings"", settingsForm);

return ""admin/home/settings"";

}

@PostMapping(value = ""settings"") public String updateSettings(@Valid SettingsForm settingsForm, Errors errors, RedirectAttributes ra) { if (errors.hasErrors()) { return ""admin/settings""; } else { appSetting.setSiteName(settingsForm.getSiteName()); appSetting.setSiteSlogan(settingsForm.getSiteSlogan()); appSetting.setPageSize(settingsForm.getPageSize());

MessageHelper.addSuccessAttribute(ra, ""Update settings successfully. "");

return ""redirect:settings"";

}

}

}

../blog/springblog/blog/monolith/src/main/java/com/raysmond/blog/admin/controllers/PostController.java"|data_input/springblog/springblog.txt|b97406f658714e33b20219781b14c47c
"return ""redirect:settings"";

}

}

}

../blog/springblog/blog/monolith/src/main/java/com/raysmond/blog/admin/controllers/PostController.java

package com.raysmond.blog.admin.controllers;

import com.raysmond.blog.forms.PostForm;

import com.raysmond.blog.models.Post;

import com.raysmond.blog.models.support.PostFormat;

import com.raysmond.blog.models.support.PostStatus;

import com.raysmond.blog.models.support.PostType;

import com.raysmond.blog.repositories.PostRepository;

import com.raysmond.blog.repositories.UserRepository;

import com.raysmond.blog.services.PostService;

import com.raysmond.blog.utils.DTOUtil;

import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.data.domain.Page;

import org.springframework.data.domain.PageRequest;

import org.springframework.data.domain.Sort;

import org.springframework.stereotype.Controller;

import org.springframework.ui.Model;

import org.springframework.validation.Errors;

import org.springframework.web.bind.annotation.GetMapping;

import org.springframework.web.bind.annotation.PathVariable;

import org.springframework.web.bind.annotation.RequestMapping;

import org.springframework.web.bind.annotation.RequestParam;

import javax.validation.Valid;

import java.security.Principal;

import static org.springframework.web.bind.annotation.RequestMethod.

;

/*

@author Raysmond

/

@Controller(""adminPostController"")

@RequestMapping(""admin/posts"")

public class PostController {"|data_input/springblog/springblog.txt|abc3903c53614ac18a3edc00679b9010
";

/*

@author Raysmond

/

@Controller(""adminPostController"")

@RequestMapping(""admin/posts"")

public class PostController {

private static final int PAGE_SIZE = 20; @Autowired private PostRepository postRepository; @Autowired private PostService postService; @Autowired private UserRepository userRepository;

@GetMapping("""") public String index(@RequestParam(defaultValue = ""0"") int page, Model model) { Page<Post> posts = postRepository.findAll(new PageRequest(page, PAGE_SIZE, Sort.Direction.DESC, ""id""));

model.addAttribute(""totalPages"", posts.getTotalPages());

model.addAttribute(""page"", page);

model.addAttribute(""posts"", posts);

return ""admin/posts/index"";

}

@GetMapping(""new"") public String newPost(Model model) { PostForm postForm = DTOUtil.map(new Post(), PostForm.class); postForm.setPostTags("""");

model.addAttribute(""postForm"", postForm);

model.addAttribute(""postFormats"", PostFormat.values());

model.addAttribute(""postTypes"", PostType.values());

model.addAttribute(""postStatus"", PostStatus.values());

return ""admin/posts/new"";

}

@RequestMapping(value = ""{postId:[0-9]+}/edit"") public String editPost(@PathVariable Long postId, Model model) { Post post = postRepository.findOne(postId); PostForm postForm = DTOUtil.map(post, PostForm.class);

postForm.setPostTags(postService.getTagNames(post.getTags()));

model.addAttribute(""post"", post);

model.addAttribute(""postForm"", postForm);

model.addAttribute(""postFormats"", PostFormat.values());"|data_input/springblog/springblog.txt|85c082e4fb3f45d2acc6aec525fe3436
"model.addAttribute(""post"", post);

model.addAttribute(""postForm"", postForm);

model.addAttribute(""postFormats"", PostFormat.values());

model.addAttribute(""postTypes"", PostType.values());

model.addAttribute(""postStatus"", PostStatus.values());

return ""admin/posts/edit"";

}

@RequestMapping(value = ""{postId:[0-9]+}/delete"", method = {DELETE, POST}) public String deletePost(@PathVariable Long postId) { postService.deletePost(postRepository.findOne(postId)); return ""redirect:/admin/posts""; }

@RequestMapping(value = """", method = POST) public String create(Principal principal, @Valid PostForm postForm, Errors errors, Model model) { if (errors.hasErrors()) { model.addAttribute(""postFormats"", PostFormat.values()); model.addAttribute(""postStatus"", PostStatus.values());

return ""admin/posts/new""; } else { Post post = DTOUtil.map(postForm, Post.class); post.setUser(userRepository.findByEmail(principal.getName())); post.setTags(postService.parseTagNames(postForm.getPostTags()));

postService.createPost(post);

return ""redirect:/admin/posts"";

}

}

@RequestMapping(value = ""{postId:[0-9]+}"", method = {PUT, POST}) public String update(@PathVariable Long postId, @Valid PostForm postForm, Errors errors, Model model) { if (errors.hasErrors()) { model.addAttribute(""postFormats"", PostFormat.values()); model.addAttribute(""postStatus"", PostStatus.values());

return ""admin/posts_edit"";

} else {

Post post = postRepository.findOne(postId);

DTOUtil.mapTo(postForm, post);"|data_input/springblog/springblog.txt|510ac613998340b2addd079f35413b75
"return ""admin/posts_edit"";

} else {

Post post = postRepository.findOne(postId);

DTOUtil.mapTo(postForm, post);

post.setTags(postService.parseTagNames(postForm.getPostTags()));

postService.updatePost(post);

return ""redirect:/admin/posts"";

}

}

}

../blog/springblog/blog/monolith/src/main/java/com/raysmond/blog/repositories/UserRepository.java

package com.raysmond.blog.repositories;

import com.raysmond.blog.models.User;

import org.springframework.data.jpa.repository.JpaRepository;

import org.springframework.stereotype.Repository;

/** * @author Raysmond */ @Repository public interface UserRepository extends JpaRepository<User, Long> { User findByEmail(String email); }

../blog/springblog/blog/monolith/src/main/java/com/raysmond/blog/repositories/TagRepository.java

package com.raysmond.blog.repositories;

import com.raysmond.blog.models.Tag;

import org.springframework.data.jpa.repository.JpaRepository;

/** * @author Raysmond */ public interface TagRepository extends JpaRepository<Tag, Long> { Tag findByName(String name); }

../blog/springblog/blog/monolith/src/main/java/com/raysmond/blog/repositories/SettingRepository.java

package com.raysmond.blog.repositories;

import com.raysmond.blog.models.Setting;

import org.springframework.data.jpa.repository.JpaRepository;

import org.springframework.stereotype.Repository;

import org.springframework.transaction.annotation.Transactional;"|data_input/springblog/springblog.txt|b032cb9cdd594eb392e970c71f9e33c9
"import org.springframework.stereotype.Repository;

import org.springframework.transaction.annotation.Transactional;

/** * @author Raysmond */ @Repository public interface SettingRepository extends JpaRepository<Setting, Long> { Setting findByKey(String key); }

../blog/springblog/blog/monolith/src/main/java/com/raysmond/blog/repositories/PostRepository.java

package com.raysmond.blog.repositories;

import com.raysmond.blog.models.Post;

import com.raysmond.blog.models.support.PostStatus;

import com.raysmond.blog.models.support.PostType;

import org.springframework.data.domain.Page;

import org.springframework.data.domain.Pageable;

import org.springframework.data.jpa.repository.JpaRepository;

import org.springframework.data.jpa.repository.Query;

import org.springframework.data.repository.query.Param;

import org.springframework.stereotype.Repository;

import org.springframework.transaction.annotation.Transactional;

import java.util.List;

/** * @author Raysmond */ @Repository public interface PostRepository extends JpaRepository<Post, Long> { Post findByPermalinkAndPostStatus(String permalink, PostStatus postStatus);

Page<Post> findAllByPostType(PostType postType, Pageable pageRequest);

Page<Post> findAllByPostTypeAndPostStatus(PostType postType, PostStatus postStatus, Pageable pageRequest);

@Query(""SELECT p FROM Post p INNER JOIN p.tags t WHERE t.name = :tag"") Page<Post> findByTag(@Param(""tag"") String tag, Pageable pageable);"|data_input/springblog/springblog.txt|7b39762783e14d2286e43386253133e1
"@Query(""SELECT p FROM Post p INNER JOIN p.tags t WHERE t.name = :tag"") Page<Post> findByTag(@Param(""tag"") String tag, Pageable pageable);

@Query(""SELECT t.name, count(p) as tag_count from Post p "" + ""INNER JOIN p.tags t "" + ""WHERE p.postStatus = :status "" + ""GROUP BY t.id "" + ""ORDER BY tag_count DESC"") List<Object[]> countPostsByTags(@Param(""status"") PostStatus status); }

../blog/springblog/blog/monolith/src/main/java/com/raysmond/blog/forms/SettingsForm.java

package com.raysmond.blog.forms;

import lombok.Data;

import org.hibernate.validator.constraints.NotEmpty;

import javax.validation.constraints.NotNull;

/*

@author Raysmond

/

@Data

public class SettingsForm {

@NotEmpty

@NotNull

private String siteName;

@NotNull

private String siteSlogan;

@NotNull

private Integer pageSize;

private String intro;

private String pictureUrl;

}

../blog/springblog/blog/monolith/src/main/java/com/raysmond/blog/forms/UserForm.java

package com.raysmond.blog.forms;

import lombok.Data;

import javax.validation.constraints.NotNull;

/*

@author Raysmond

/

@Data

public class UserForm {

@NotNull

private String password;

@NotNull

private String newPassword;

}

../blog/springblog/blog/monolith/src/main/java/com/raysmond/blog/forms/PostForm.java

package com.raysmond.blog.forms;

import com.raysmond.blog.models.support.PostFormat;

import com.raysmond.blog.models.support.PostStatus;

import com.raysmond.blog.models.support.PostType;

import lombok.Data;"|data_input/springblog/springblog.txt|2e18153949f4432c9a55c6260c4d350f
"import com.raysmond.blog.models.support.PostStatus;

import com.raysmond.blog.models.support.PostType;

import lombok.Data;

import org.hibernate.validator.constraints.NotEmpty;

import javax.validation.constraints.NotNull;

/*

@author Raysmond

/

@Data

public class PostForm {

@NotEmpty

private String title;

@NotEmpty

private String content;

private String summary;

@NotNull

private PostFormat postFormat;

@NotNull

private PostStatus postStatus;

@NotNull

private String permalink;

@NotNull

private String postTags;

@NotNull

private PostType postType;

}

../blog/springblog/blog/monolith/src/main/java/com/raysmond/blog/utils/DTOUtil.java

package com.raysmond.blog.utils;

import org.modelmapper.ModelMapper;

import org.modelmapper.convention.MatchingStrategies;

import java.util.ArrayList;

import java.util.List;

/*

@author Raysmond

/

public class DTOUtil {

private static ModelMapper MAPPER = null;

private static ModelMapper getMapper() { if (MAPPER == null) { MAPPER = new ModelMapper(); MAPPER.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT); }

return MAPPER;

}

public static <S, T> T map(S source, Class<T> targetClass) { return getMapper().map(source, targetClass); }

public static <S, T> void mapTo(S source, T dist) { getMapper().map(source, dist); }"|data_input/springblog/springblog.txt|cc898eae77fd4750860593fb30d58727
"public static <S, T> void mapTo(S source, T dist) { getMapper().map(source, dist); }

public static <S, T> List<T> mapList(List<S> source, Class<T> targetClass) { List<T> list = new ArrayList<>(); for (S s : source) { list.add(getMapper().map(s, targetClass)); } return list; } }

../blog/springblog/blog/monolith/src/main/java/com/raysmond/blog/utils/Markdown.java

package com.raysmond.blog.utils;

import com.raysmond.blog.support.web.MarkdownService;

import com.raysmond.blog.support.web.impl.PegDownMarkdownService;

/** * A Markdown processing util class * * @author Raysmond */ public class Markdown {

private static final MarkdownService MARKDOWN_SERVICE = new PegDownMarkdownService();

public static String markdownToHtml(String content) { return MARKDOWN_SERVICE.renderToHtml(content); } }

../blog/springblog/blog/monolith/src/main/java/com/raysmond/blog/controllers/UserController.java

package com.raysmond.blog.controllers;

import org.springframework.stereotype.Controller;

import org.springframework.web.bind.annotation.RequestMapping;

import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.security.Principal;

/*

User pages

@author Raysmond

/

@Controller

public class UserController {"|data_input/springblog/springblog.txt|2f4711c7449a43b28ddeb83a6778c4b1
"import java.security.Principal;

/*

User pages

@author Raysmond

/

@Controller

public class UserController {

@RequestMapping(""login"") public String signin(Principal principal, RedirectAttributes ra) { return principal == null ? ""users/login"" : ""redirect:/""; } } ../blog/springblog/blog/monolith/src/main/java/com/raysmond/blog/controllers/PostController.java package com.raysmond.blog.controllers;

import com.google.common.collect.Lists;

import com.google.common.collect.Maps;

import com.raysmond.blog.error.NotFoundException;

import com.raysmond.blog.models.Post;

import com.raysmond.blog.models.support.PostType;

import com.raysmond.blog.services.PostService;

import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.stereotype.Controller;

import org.springframework.ui.Model;

import org.springframework.web.bind.annotation.GetMapping;

import org.springframework.web.bind.annotation.PathVariable;

import org.springframework.web.bind.annotation.RequestMapping;

import static org.springframework.web.bind.annotation.RequestMethod.GET;

import java.util.List;

import java.util.Map;

/*

@author Raysmond

/

@Controller

public class PostController {

@Autowired

private PostService postService;"|data_input/springblog/springblog.txt|e9a07c315879491aac3632f25c511266
"import java.util.Map;

/*

@author Raysmond

/

@Controller

public class PostController {

@Autowired

private PostService postService;

@GetMapping(value = ""posts/archive"") public String archive(Model model) { Map<Integer, List<Post>> posts = Maps.newHashMap(); postService.getArchivePosts().forEach(post -> { if (!posts.containsKey(post.getCreatedAt().getYear())) { posts.put(post.getCreatedAt().getYear(), Lists.newArrayList()); } posts.get(post.getCreatedAt().getYear()).add(post); }); model.addAttribute(""posts"", posts); return ""posts/archive""; }

@GetMapping(value = ""posts/{permalink}"") public String show(@PathVariable String permalink, Model model) { return showPost(permalink, model, PostType.POST); }

@GetMapping(value = ""{permalink}"") public String page(@PathVariable String permalink, Model model) { return showPost(permalink, model, PostType.PAGE); }

private String showPost(String permalink, Model model, PostType postType) { Post post;

try { post = postService.getPublishedPostByPermalink(permalink); } catch (NotFoundException ex) { if (permalink.matches(""\\d+"") && postType.equals(PostType.POST)) { post = postService.getPost(Long.valueOf(permalink)); } else { throw new NotFoundException(); } }

if (!post.getPostType().equals(postType)) {

throw new NotFoundException();

}

postService.incrementViews(post.getId());

model.addAttribute(""postType"", postType.name());

model.addAttribute(""post"", post);

model.addAttribute(""tags"", postService.getPostTags(post));"|data_input/springblog/springblog.txt|29c39592a2a245a0932fcdafd7d7548f
"model.addAttribute(""postType"", postType.name());

model.addAttribute(""post"", post);

model.addAttribute(""tags"", postService.getPostTags(post));

return ""posts/post"";

}

}

../blog/springblog/blog/monolith/src/main/java/com/raysmond/blog/controllers/TagController.java

package com.raysmond.blog.controllers;

import com.raysmond.blog.error.NotFoundException;

import com.raysmond.blog.models.Post;

import com.raysmond.blog.models.Tag;

import com.raysmond.blog.services.AppSetting;

import com.raysmond.blog.services.PostService;

import com.raysmond.blog.services.TagService;

import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.data.domain.Page;

import org.springframework.stereotype.Controller;

import org.springframework.ui.Model;

import org.springframework.web.bind.annotation.PathVariable;

import org.springframework.web.bind.annotation.RequestMapping;

import org.springframework.web.bind.annotation.RequestParam;

import static org.springframework.web.bind.annotation.RequestMethod.GET;

/*

@author Raysmond

/

@Controller

@RequestMapping(""tags"")

public class TagController {

@Autowired

private TagService tagService;

@Autowired

private PostService postService;

@Autowired

private AppSetting appSetting;

@RequestMapping(value = """", method = GET) public String index(Model model) { model.addAttribute(""tags"", postService.countPostsByTags()); return ""tags/index""; }"|data_input/springblog/springblog.txt|5c5d642c0e0449a0b5c440584ada47cf
"@RequestMapping(value = ""{tagName}"", method = GET) public String showTag(@PathVariable String tagName, @RequestParam(defaultValue = ""1"") int page, Model model) { Tag tag = tagService.getTag(tagName);

if (tag == null) { throw new NotFoundException(""Tag "" + tagName + "" is not found. ""); }

page = page < 1 ? 0 : page - 1; Page<Post> posts = postService.findPostsByTag(tagName, page, appSetting.getPageSize());

model.addAttribute(""tag"", tag);

model.addAttribute(""posts"", posts);

model.addAttribute(""page"", page + 1);

model.addAttribute(""totalPages"", posts.getTotalPages());

return ""tags/show"";

}

}

../blog/springblog/blog/monolith/src/main/java/com/raysmond/blog/controllers/HomeController.java

package com.raysmond.blog.controllers;

import com.raysmond.blog.models.Post;

import com.raysmond.blog.services.AppSetting;

import com.raysmond.blog.services.PostService;

import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.data.domain.Page;

import org.springframework.stereotype.Controller;

import org.springframework.ui.Model;

import org.springframework.web.bind.annotation.GetMapping;

import org.springframework.web.bind.annotation.RequestParam;

@Controller

public class HomeController {

@Autowired

private PostService postService;

@Autowired

private AppSetting appSetting;"|data_input/springblog/springblog.txt|c5ab21e0c49e44fc951d82884be0a4f7
"@Controller

public class HomeController {

@Autowired

private PostService postService;

@Autowired

private AppSetting appSetting;

@GetMapping(value = """") public String index(@RequestParam(defaultValue = ""1"") int page, Model model) { page = page < 1 ? 0 : page - 1; Page<Post> posts = postService.getAllPublishedPostsByPage(page, appSetting.getPageSize());

model.addAttribute(""totalPages"", posts.getTotalPages());

model.addAttribute(""posts"", posts);

model.addAttribute(""page"", page + 1);

return ""home/home"";

}

}

../blog/springblog/blog/monolith/src/main/java/com/raysmond/blog/services/TagService.java

package com.raysmond.blog.services;

import com.raysmond.blog.models.Tag;

import com.raysmond.blog.repositories.TagRepository;

import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.stereotype.Service;

import java.util.List;

/*

@author Raysmond

/

@Service

public class TagService {

private TagRepository tagRepository;

@Autowired

public TagService(TagRepository tagRepository) {

this.tagRepository = tagRepository;

}

public Tag findOrCreateByName(String name) { Tag tag = tagRepository.findByName(name); if (tag == null) { tag = tagRepository.save(new Tag(name)); } return tag; }

public Tag getTag(String tagName) { return tagRepository.findByName(tagName); }

public void deleteTag(Tag tag) { tagRepository.delete(tag); }

public List<Tag> getAllTags() {

return tagRepository.findAll();

}

}"|data_input/springblog/springblog.txt|780634c24b9745e9a31a1053b346aba0
"public void deleteTag(Tag tag) { tagRepository.delete(tag); }

public List<Tag> getAllTags() {

return tagRepository.findAll();

}

}

../blog/springblog/blog/monolith/src/main/java/com/raysmond/blog/services/CacheSettingService.java

package com.raysmond.blog.services;

import com.raysmond.blog.models.Setting;

import com.raysmond.blog.repositories.SettingRepository;

import lombok.extern.slf4j.Slf4j;

import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.cache.annotation.CacheEvict;

import org.springframework.cache.annotation.Cacheable;

import org.springframework.stereotype.Service;

import org.springframework.transaction.annotation.Transactional;

import java.io.Serializable;

/** * @author Raysmond */ @Service @Slf4j @Transactional public class CacheSettingService implements SettingService { private SettingRepository settingRepository;

@Autowired

public CacheSettingService(SettingRepository settingRepository) {

this.settingRepository = settingRepository;

}

@Override @Cacheable(value = ""settingCache"", key = ""#key"") public Serializable get(String key) { Setting setting = settingRepository.findByKey(key); Serializable value = null; try { value = setting == null ? null : setting.getValue(); } catch (Exception ex) { log.info(""Cannot deserialize setting value with key = "" + key); }

log.info(""Get setting "" + key + "" from database. Value = "" + value);

return value;

}"|data_input/springblog/springblog.txt|0a0e82ce359e4b00b75ca02bf34990bc
"log.info(""Get setting "" + key + "" from database. Value = "" + value);

return value;

}

@Override @Cacheable(value = ""settingCache"", key = ""#key"") public Serializable get(String key, Serializable defaultValue) { Serializable value = get(key); return value == null ? defaultValue : value; }

@Override @CacheEvict(value = ""settingCache"", key = ""#key"") public void put(String key, Serializable value) { log.info(""Update setting "" + key + "" to database. Value = "" + value);

Setting setting = settingRepository.findByKey(key); if (setting == null) { setting = new Setting(); setting.setKey(key); } try { setting.setValue(value); settingRepository.save(setting); } catch (Exception ex) {

log.info(""Cannot save setting value with type: "" + value.getClass() + "". key = "" + key); } } }

../blog/springblog/blog/monolith/src/main/java/com/raysmond/blog/services/UserService.java

package com.raysmond.blog.services;

import com.raysmond.blog.Constants;

import com.raysmond.blog.models.User;

import com.raysmond.blog.repositories.UserRepository;

import lombok.extern.slf4j.Slf4j;

import org.slf4j.Logger;

import org.slf4j.LoggerFactory;

import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.security.authentication.AnonymousAuthenticationToken;

import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;

import org.springframework.security.core.Authentication;

import org.springframework.security.core.GrantedAuthority;"|data_input/springblog/springblog.txt|d36e6e0f34594cff9fcb3ebb729dc985
"import org.springframework.security.core.Authentication;

import org.springframework.security.core.GrantedAuthority;

import org.springframework.security.core.authority.SimpleGrantedAuthority;

import org.springframework.security.core.context.SecurityContextHolder;

import org.springframework.security.core.userdetails.UserDetails;

import org.springframework.security.core.userdetails.UserDetailsService;

import org.springframework.security.core.userdetails.UsernameNotFoundException;

import org.springframework.security.crypto.password.PasswordEncoder;

import org.springframework.stereotype.Service;

import org.springframework.transaction.annotation.Transactional;

import javax.annotation.PostConstruct;

import java.util.Collections;

@Transactional @Service @Slf4j public class UserService implements UserDetailsService { @Autowired private UserRepository userRepository; @Autowired private PasswordEncoder passwordEncoder;

@PostConstruct

protected void initialize() {

getSuperUser();

}

public User createUser(User user) { user.setPassword(passwordEncoder.encode(user.getPassword())); return userRepository.save(user); }

public User getSuperUser() {

User user = userRepository.findByEmail(Constants.DEFAULT_ADMIN_EMAIL);

if (user == null) { user = createUser(new User(Constants.DEFAULT_ADMIN_EMAIL, Constants.DEFAULT_ADMIN_PASSWORD, User.ROLE_ADMIN)); }

return user;

}"|data_input/springblog/springblog.txt|aa6ae90d9ed74a32b609c5d23964f3ce
"return user;

}

@Override public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException { User user = userRepository.findByEmail(username); if (user == null) { throw new UsernameNotFoundException(""user not found""); } return createSpringUser(user); }

public User currentUser() { Authentication auth = SecurityContextHolder.getContext().getAuthentication(); if (auth == null || auth instanceof AnonymousAuthenticationToken) { return null; }

String email = ((org.springframework.security.core.userdetails.User) auth.getPrincipal()).getUsername();

return userRepository.findByEmail(email);

}

public boolean changePassword(User user, String password, String newPassword) { if (password == null || newPassword == null || password.isEmpty() || newPassword.isEmpty()) return false;

boolean match = passwordEncoder.matches(password, user.getPassword()); if (!match) return false;

user.setPassword(passwordEncoder.encode(newPassword));

userRepository.save(user);

log.info(""User @{} changed password. "", user.getEmail());

return true;

}

public void signin(User user) { SecurityContextHolder.getContext().setAuthentication(authenticate(user)); }

private Authentication authenticate(User user) { return new UsernamePasswordAuthenticationToken(createSpringUser(user), null, Collections.singleton(createAuthority(user))); }"|data_input/springblog/springblog.txt|f689c97f82b04f3b809b6e849e41bbe3
"private org.springframework.security.core.userdetails.User createSpringUser(User user) { return new org.springframework.security.core.userdetails.User( user.getEmail(), user.getPassword(), Collections.singleton(createAuthority(user))); }

private GrantedAuthority createAuthority(User user) { return new SimpleGrantedAuthority(user.getRole()); }

}

../blog/springblog/blog/monolith/src/main/java/com/raysmond/blog/services/SettingService.java

package com.raysmond.blog.services;

import java.io.Serializable;

/*

@author Raysmond

/

public interface SettingService {

Serializable get(String key);

Serializable get(String key, Serializable defaultValue);

void put(String key, Serializable value); }

../blog/springblog/blog/monolith/src/main/java/com/raysmond/blog/services/AppSetting.java

package com.raysmond.blog.services;

import com.domingosuarez.boot.autoconfigure.jade4j.JadeHelper;

import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.stereotype.Service;

/*

@author Raysmond

/

@JadeHelper(""App"")

@Service

public class AppSetting {

public static final String SITE_NAME = ""site_name""; public static final String SITE_SLOGAN = ""site_slogan""; public static final String PAGE_SIZE = ""page_size"";

@Autowired

private SettingService settingService;

private String siteName = ""SpringBlog""; private String siteSlogan = ""An interesting place to discover""; private Integer pageSize = 5;

public String getSiteName() {"|data_input/springblog/springblog.txt|e154ce5ce2c746c28820770c62b02bb0
"public String getSiteName() {

return (String) settingService.get(SITE_NAME, siteName);

}

public void setSiteName(String siteName) { this.siteName = siteName; settingService.put(SITE_NAME, siteName); }

public Integer getPageSize() {

return (Integer) settingService.get(PAGE_SIZE, pageSize);

}

public void setPageSize(Integer pageSize) { this.pageSize = pageSize; settingService.put(PAGE_SIZE, pageSize); }

public String getSiteSlogan() {

return (String) settingService.get(SITE_SLOGAN, siteSlogan);

}

public void setSiteSlogan(String siteSlogan) { this.siteSlogan = siteSlogan; settingService.put(SITE_SLOGAN, siteSlogan); } }

../blog/springblog/blog/monolith/src/main/java/com/raysmond/blog/services/PostService.java

package com.raysmond.blog.services;

import com.raysmond.blog.Constants;

import com.raysmond.blog.error.NotFoundException;

import com.raysmond.blog.models.Post;

import com.raysmond.blog.models.Tag;

import com.raysmond.blog.models.support.PostFormat;

import com.raysmond.blog.models.support.PostStatus;

import com.raysmond.blog.models.support.PostType;

import com.raysmond.blog.repositories.PostRepository;

import com.raysmond.blog.support.web.MarkdownService;

import lombok.extern.slf4j.Slf4j;

import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.beans.factory.annotation.Qualifier;

import org.springframework.data.domain.Page;

import org.springframework.data.domain.PageRequest;"|data_input/springblog/springblog.txt|0d49d80679db48b6810729633a21fe64
"import org.springframework.data.domain.Page;

import org.springframework.data.domain.PageRequest;

import org.springframework.data.domain.Pageable;

import org.springframework.data.domain.Sort;

import org.springframework.scheduling.annotation.Async;

import org.springframework.stereotype.Service;

import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;

import java.util.HashSet;

import java.util.List;

import java.util.Set;

import java.util.stream.Collectors;

/*

@author Raysmond

/

@Service

@Slf4j

@Transactional

public class PostService {

@Autowired

private PostRepository postRepository;

@Autowired

private TagService tagService;

@Autowired

private UserService userService;

@Autowired

@Qualifier(""flexmark"")

private MarkdownService markdownService;

public Post getPost(Long postId) { log.debug(""Get post "" + postId);

Post post = postRepository.findOne(postId);

if (post == null) { throw new NotFoundException(""Post with id "" + postId + "" is not found. ""); }

return post;

}

public Post getPublishedPostByPermalink(String permalink) { log.debug(""Get post with permalink "" + permalink);

Post post = postRepository.findByPermalinkAndPostStatus(permalink, PostStatus.PUBLISHED);

if (post == null) { try { post = postRepository.findOne(Long.valueOf(permalink)); } catch (NumberFormatException e) { post = null; } }

if (post == null) { throw new NotFoundException(""Post with permalink '"" + permalink + ""' is not found. ""); }"|data_input/springblog/springblog.txt|fabed027674b4031b4bd074ff592fd44
"if (post == null) { throw new NotFoundException(""Post with permalink '"" + permalink + ""' is not found. ""); }

return post;

}

public Post createPost(Post post) { if (post.getPostFormat() == PostFormat.MARKDOWN) { post.setRenderedContent(markdownService.renderToHtml(post.getContent())); post.setRenderedSummary(markdownService.renderToHtml(post.getSummary())); }

return postRepository.save(post);

}

public Post updatePost(Post post) { if (post.getPostFormat() == PostFormat.MARKDOWN) { post.setRenderedContent(markdownService.renderToHtml(post.getContent())); post.setRenderedSummary(markdownService.renderToHtml(post.getSummary())); }

return postRepository.save(post);

}

public void deletePost(Post post) { postRepository.delete(post); }

public List<Post> getArchivePosts() { log.debug(""Get all archive posts from database. "");

Pageable page = new PageRequest(0, Integer.MAX_VALUE, Sort.Direction.DESC, ""createdAt""); return postRepository.findAllByPostTypeAndPostStatus(PostType.POST, PostStatus.PUBLISHED, page) .getContent() .stream() .map(this::extractPostMeta) .collect(Collectors.toList()); }

public List<Tag> getPostTags(Post post) { log.debug(""Get tags of post {}"", post.getId());

List<Tag> tags = new ArrayList<>();"|data_input/springblog/springblog.txt|7f8a564a9d2c4fad8e1b4482b0b85b66
"public List<Tag> getPostTags(Post post) { log.debug(""Get tags of post {}"", post.getId());

List<Tag> tags = new ArrayList<>();

// Load the post first. If not, when the post is cached before while the tags not, // then the LAZY loading of post tags will cause an initialization error because // of not hibernate connection session postRepository.findOne(post.getId()).getTags().forEach(tags::add); return tags; }

private Post extractPostMeta(Post post) { Post archivePost = new Post(); archivePost.setId(post.getId()); archivePost.setTitle(post.getTitle()); archivePost.setPermalink(post.getPermalink()); archivePost.setCreatedAt(post.getCreatedAt());

return archivePost;

}

public Page<Post> getAllPublishedPostsByPage(int page, int pageSize) { log.debug(""Get posts by page "" + page);

return postRepository.findAllByPostTypeAndPostStatus( PostType.POST, PostStatus.PUBLISHED, new PageRequest(page, pageSize, Sort.Direction.DESC, ""createdAt"")); }

public Post createAboutPage() {

log.debug(""Create default about page"");

Post post = new Post(); post.setTitle(Constants.ABOUT_PAGE_PERMALINK); post.setContent(Constants.ABOUT_PAGE_PERMALINK.toLowerCase()); post.setPermalink(Constants.ABOUT_PAGE_PERMALINK); post.setUser(userService.getSuperUser()); post.setPostFormat(PostFormat.MARKDOWN);

return createPost(post);

}

public Set<Tag> parseTagNames(String tagNames) { Set<Tag> tags = new HashSet<>();"|data_input/springblog/springblog.txt|1b1db8d9781b454f9cb00082ddb5cd14
"return createPost(post);

}

public Set<Tag> parseTagNames(String tagNames) { Set<Tag> tags = new HashSet<>();

if (tagNames != null && !tagNames.isEmpty()) { tagNames = tagNames.toLowerCase(); String[] names = tagNames.split(""\\s*,\\s*""); for (String name : names) { tags.add(tagService.findOrCreateByName(name)); } }

return tags;

}

public String getTagNames(Set<Tag> tags) { if (tags == null || tags.isEmpty()) { return """"; }

StringBuilder names = new StringBuilder(); tags.forEach(tag -> names.append(tag.getName()).append("","")); names.deleteCharAt(names.length() - 1);

return names.toString();

}

// cache or not? public Page<Post> findPostsByTag(String tagName, int page, int pageSize) { return postRepository.findByTag(tagName, new PageRequest(page, pageSize, Sort.Direction.DESC, ""createdAt"")); }

public List<Object[]> countPostsByTags() { log.debug(""Count posts group by tags. "");

return postRepository.countPostsByTags(PostStatus.PUBLISHED);

}

@Async public void incrementViews(Long postId) { synchronized(this) { Post post = postRepository.findOne(postId); post.setViews(post.getViews() + 1); postRepository.save(post); } } }"|data_input/springblog/springblog.txt|f792b11b5ccb4859a6129e2fba5761b9
"../blog/springblog/blog/monolith/build/resources/main/static/vendors/bootstrap-paginator-1.0.2/js/bootstrap-paginator.min.js !function($){""use strict"";var BootstrapPaginator=function(element,options){this.init(element,options)},old=null;BootstrapPaginator.prototype={init:function(element,options){this.$element=$(element);var version=options&&options.bootstrapMajorVersion?options.bootstrapMajorVersion:$.fn.bootstrapPaginator.defaults.bootstrapMajorVersion,id=this.$element.attr(""id"");if(2===version&&!this.$element.is(""div""))throw""in Bootstrap version 2 the pagination must be a div element. Or if you are using Bootstrap pagination 3. Please specify it in bootstrapMajorVersion in the option"";if(version>2&&!this.$element.is(""ul""))throw""in Bootstrap version 3 the pagination root item must be an ul element."|data_input/springblog/springblog.txt|6b222efc9f3349d084a4ecf335449c07
""";this.currentPage=1,this.lastPage=1,this.setOptions(options),this.initialized=!0},setOptions:function(options){this.options=$.extend({},this.options||$.fn.bootstrapPaginator.defaults,options),this.totalPages=parseInt(this.options.totalPages,10),this.numberOfPages=parseInt(this.options.numberOfPages,10),options&&""undefined""!=typeof options.currentPage&&this.setCurrentPage(options.currentPage),this.listen(),this.render(),this.initialized||this.lastPage===this.currentPage||this.$element.trigger(""page-changed"",[this.lastPage,this.currentPage])},listen:function(){this.$element.off(""page-clicked""),this.$element.off(""page-changed""),""function""==typeof this.options.onPageClicked&&this.$element.bind(""page-clicked"",this.options.onPageClicked),""function""==typeof this.options.onPageChanged&&this.$element.on(""page-changed"",this.options.onPageChanged),this.$element.bind(""page-clicked"",this.onPageClicked)},destroy:function(){this.$element.off(""page-clicked""),this.$element.off(""page-changed""),this.$element.removeData(""bootstrapPaginator""),this.$element.empty()},show:function(page){this.setCurrentPage(page),this.render(),this.lastPage!==this.currentPage&&this.$element.trigger(""page-changed"",[this.lastPage,this.currentPage])},showNext:function(){var pages=this.getPages();pages.next&&this.show(pages.next)},showPrevious:function(){var pages=this.getPages();pages.prev&&this.show(pages.prev)},showFirst:function(){var"|data_input/springblog/springblog.txt|5e06815d3f944ddbbedc500052c9c07e
"pages=this.getPages();pages.first&&this.show(pages.first)},showLast:function(){var pages=this.getPages();pages.last&&this.show(pages.last)},onPageItemClicked:function(event){var type=event.data.type,page=event.data.page;this.$element.trigger(""page-clicked"",[event,type,page])},onPageClicked:function(event,originalEvent,type,page){var currentTarget=$(event.currentTarget);switch(type){case""first"":currentTarget.bootstrapPaginator(""showFirst"");break;case""prev"":currentTarget.bootstrapPaginator(""showPrevious"");break;case""next"":currentTarget.bootstrapPaginator(""showNext"");break;case""last"":currentTarget.bootstrapPaginator(""showLast"");break;case""page"":currentTarget.bootstrapPaginator(""show"",page)}},render:function(){var containerClass=this.getValueFromOption(this.options.containerClass,this.$element),size=this.options.size||""normal"",alignment=this.options.alignment||""left"",pages=this.getPages(),listContainer=2===this.options.bootstrapMajorVersion?$(""<ul"|data_input/springblog/springblog.txt|ae3bc9209cad4b10a6a1752a372b9625
"class='pagination'></ul>""):this.$element,listContainerClass=2===this.options.bootstrapMajorVersion?this.getValueFromOption(this.options.listContainerClass,listContainer):null,first=null,prev=null,next=null,last=null,p=null,i=0;switch(this.$element.prop(""class"",""""),this.$element.addClass(""pagination""),size.toLowerCase()){case""large"":case""small"":case""mini"":this.$element.addClass($.fn.bootstrapPaginator.sizeArray[this.options.bootstrapMajorVersion][size.toLowerCase()])}if(2===this.options.bootstrapMajorVersion)switch(alignment.toLowerCase()){case""center"":this.$element.addClass(""pagination-centered"");break;case""right"":this.$element.addClass(""pagination-right"")}for(this.$element.addClass(containerClass),this.$element.empty(),2===this.options.bootstrapMajorVersion&&(this.$element.append(listContainer),listContainer.addClass(listContainerClass)),this.pageRef=[],pages.first&&(first=this.buildPageItem(""first"",pages.first),first&&listContainer.append(first)),pages.prev&&(prev=this.buildPageItem(""prev"",pages.prev),prev&&listContainer.append(prev)),i=0;i<pages.length;i+=1)p=this.buildPageItem(""page"",pages[i]),p&&listContainer.append(p);pages.next&&(next=this.buildPageItem(""next"",pages.next),next&&listContainer.append(next)),pages.last&&(last=this.buildPageItem(""last"",pages.last),last&&listContainer.append(last))},buildPageItem:function(type,page){var"|data_input/springblog/springblog.txt|d52bf2904a844cc6ae32fe73f17c0b9e
"itemContainer=$(""<li></li>""),itemContent=$(""<a></a>""),text="""",title="""",itemContainerClass=this.options.itemContainerClass(type,page,this.currentPage),itemContentClass=this.getValueFromOption(this.options.itemContentClass,type,page,this.currentPage),tooltipOpts=null;switch(type){case""first"":if(!this.getValueFromOption(this.options.shouldShowPage,type,page,this.currentPage))return;text=this.options.itemTexts(type,page,this.currentPage),title=this.options.tooltipTitles(type,page,this.currentPage);break;case""last"":if(!this.getValueFromOption(this.options.shouldShowPage,type,page,this.currentPage))return;text=this.options.itemTexts(type,page,this.currentPage),title=this.options.tooltipTitles(type,page,this.currentPage);break;case""prev"":if(!this.getValueFromOption(this.options.shouldShowPage,type,page,this.currentPage))return;text=this.options.itemTexts(type,page,this.currentPage),title=this.options.tooltipTitles(type,page,this.currentPage);break;case""next"":if(!this.getValueFromOption(this.options.shouldShowPage,type,page,this.currentPage))return;text=this.options.itemTexts(type,page,this.currentPage),title=this.options.tooltipTitles(type,page,this.currentPage);break;case""page"":if(!this.getValueFromOption(this.options.shouldShowPage,type,page,this.currentPage))return;text=this.options.itemTexts(type,page,this.currentPage),title=this.options.tooltipTitles(type,page,this.currentPage)}return"|data_input/springblog/springblog.txt|5ebfb47196644dbc8cdefab094622c84
"itemContainer.addClass(itemContainerClass).append(itemContent),itemContent.addClass(itemContentClass).html(text).on(""click"",null,{type:type,page:page},$.proxy(this.onPageItemClicked,this)),this.options.pageUrl&&itemContent.attr(""href"",this.getValueFromOption(this.options.pageUrl,type,page,this.currentPage)),this.options.useBootstrapTooltip? (tooltipOpts=$.extend({},this.options.bootstrapTooltipOptions,{title:title}),itemContent.tooltip(tooltipOpts)):itemContent.attr(""title"",title),itemContainer},setCurrentPage:function(page){if(page>this.totalPages||1>page)throw""Page out of range"";this.lastPage=this.currentPage,this.currentPage=parseInt(page,10)},getPages:function(){var totalPages=this.totalPages,pageStart=0===this.currentPage%this.numberOfPages?"|data_input/springblog/springblog.txt|ce146e9e0b354d96916270e833300a11
"(parseInt(this.currentPage/this.numberOfPages,10)-1)*this.numberOfPages+1:parseInt(this.currentPage/this.numberOfPages,10)*this.numberOfPages+1,output=[],i=0,counter=0;for(pageStart=1>pageStart?1:pageStart,i=pageStart,counter=0;counter<this.numberOfPages&&totalPages>=i;i+=1,counter+=1)output.push(i);return output.first=1,output.prev=this.currentPage>1?this.currentPage-1:1,output.next=this.currentPage<totalPages?this.currentPage+1:totalPages,output.last=totalPages,output.current=this.currentPage,output.total=totalPages,output.numberOfPages=this.options.numberOfPages,output},getValueFromOption:function(value){var output=null,args=Array.prototype.slice.call(arguments,1);return output=""function""==typeof value?value.apply(this,args):value}},old=$.fn.bootstrapPaginator,$.fn.bootstrapPaginator=function(option){var args=arguments,result=null;return"|data_input/springblog/springblog.txt|19655466986741f58d9394ad4c86388f
"$(this).each(function(index,item){var $this=$(item),data=$this.data(""bootstrapPaginator""),options=""object""!=typeof option?null:option;if(!data)return data=new BootstrapPaginator(this,options),$this=$(data.$element),$this.data(""bootstrapPaginator"",data),void 0;if(""string""==typeof option){if(!data[option])throw""Method ""+option+"" does not exist"";result=data[option].apply(data,Array.prototype.slice.call(args,1))}else result=data.setOptions(option)}),result},$.fn.bootstrapPaginator.sizeArray={2:{large:""pagination-large"",small:""pagination-small"",mini:""pagination-mini""},3:{large:""pagination-lg"",small:""pagination-sm"",mini:""""}},$.fn.bootstrapPaginator.defaults={containerClass:"""",size:""normal"",alignment:""left"",bootstrapMajorVersion:2,listContainerClass:"""",itemContainerClass:function(type,page,current){return page===current?"|data_input/springblog/springblog.txt|24e6b25d21cd4673b1f2d0c456a0fb41
"""active"":""""},itemContentClass:function(type,page,current){return""""},currentPage:1,numberOfPages:5,totalPages:1,pageUrl:function(type,page,current){return null},onPageClicked:null,onPageChanged:null,useBootstrapTooltip:!1,shouldShowPage:function(type,page,current){var result=!0;switch(type){case""first"":result=1!==current;break;case""prev"":result=1!==current;break;case""next"":result=current!==this.totalPages;break;case""last"":result=current!==this.totalPages;break;case""page"":result=!0}return result},itemTexts:function(type,page,current){switch(type){case""first"":return""&lt;&lt;"";case""prev"":return""&lt;"";case""next"":return""&gt;"";case""last"":return""&gt;&gt;"";case""page"":return page}},tooltipTitles:function(type,page,current){switch(type){case""first"":return""Go to first page"";case""prev"":return""Go to previous page"";case""next"":return""Go to next page"";case""last"":return""Go to last page"";case""page"":return page===current? ""Current page is ""+page:""Go to page ""+page}},bootstrapTooltipOptions:{animation:!0,html:!0,placement:""top"",selector:!1,title:"""",container:!1}},$.fn.bootstrapPaginator.Constructor=BootstrapPaginator}(window.jQuery);"|data_input/springblog/springblog.txt|5d307b7be9c04a7a848e17bd71288a4b
